                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Oct 29 2014) (Linux)
                              4 ; This file was generated Thu Dec  3 09:42:06 2015
                              5 ;--------------------------------------------------------
                              6 	.module object
                              7 	.optsdcc -mmcs51 --model-huge
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _subscriber_free
                             13 	.globl _memcmp
                             14 	.globl _strncpy
                             15 	.globl _printf
                             16 	.globl _ACTIVE
                             17 	.globl _TX_BYTE
                             18 	.globl _RX_BYTE
                             19 	.globl _ERR
                             20 	.globl _FE
                             21 	.globl _SLAVE
                             22 	.globl _RE
                             23 	.globl _MODE
                             24 	.globl _T3OVFIF
                             25 	.globl _T3CH0IF
                             26 	.globl _T3CH1IF
                             27 	.globl _T4OVFIF
                             28 	.globl _T4CH0IF
                             29 	.globl _T4CH1IF
                             30 	.globl _OVFIM
                             31 	.globl _B_0
                             32 	.globl _B_1
                             33 	.globl _B_2
                             34 	.globl _B_3
                             35 	.globl _B_4
                             36 	.globl _B_5
                             37 	.globl _B_6
                             38 	.globl _B_7
                             39 	.globl _P2IF
                             40 	.globl _UTX0IF
                             41 	.globl _UTX1IF
                             42 	.globl _P1IF
                             43 	.globl _WDTIF
                             44 	.globl _ACC_0
                             45 	.globl _ACC_1
                             46 	.globl _ACC_2
                             47 	.globl _ACC_3
                             48 	.globl _ACC_4
                             49 	.globl _ACC_5
                             50 	.globl _ACC_6
                             51 	.globl _ACC_7
                             52 	.globl _P
                             53 	.globl _F1
                             54 	.globl _OV
                             55 	.globl _RS0
                             56 	.globl _RS1
                             57 	.globl _F0
                             58 	.globl _AC
                             59 	.globl _CY
                             60 	.globl _DMAIF
                             61 	.globl _T1IF
                             62 	.globl _T2IF
                             63 	.globl _T3IF
                             64 	.globl _T4IF
                             65 	.globl _P0IF
                             66 	.globl _STIF
                             67 	.globl _DMAIE
                             68 	.globl _T1IE
                             69 	.globl _T2IE
                             70 	.globl _T3IE
                             71 	.globl _T4IE
                             72 	.globl _P0IE
                             73 	.globl _RFERRIE
                             74 	.globl _ADCIE
                             75 	.globl _URX0IE
                             76 	.globl _URX1IE
                             77 	.globl _ENCIE
                             78 	.globl _STIE
                             79 	.globl _EA
                             80 	.globl _P2_0
                             81 	.globl _P2_1
                             82 	.globl _P2_2
                             83 	.globl _P2_3
                             84 	.globl _P2_4
                             85 	.globl _P2_5
                             86 	.globl _P2_6
                             87 	.globl _P2_7
                             88 	.globl _ENCIF_0
                             89 	.globl _ENCIF_1
                             90 	.globl _P1_0
                             91 	.globl _P1_1
                             92 	.globl _P1_2
                             93 	.globl _P1_3
                             94 	.globl _P1_4
                             95 	.globl _P1_5
                             96 	.globl _P1_6
                             97 	.globl _P1_7
                             98 	.globl _IT0
                             99 	.globl _RFERRIF
                            100 	.globl _IT1
                            101 	.globl _URX0IF
                            102 	.globl _ADCIF
                            103 	.globl _URX1IF
                            104 	.globl _P0_0
                            105 	.globl _P0_1
                            106 	.globl _P0_2
                            107 	.globl _P0_3
                            108 	.globl _P0_4
                            109 	.globl _P0_5
                            110 	.globl _P0_6
                            111 	.globl _P0_7
                            112 	.globl _WDCTL
                            113 	.globl _U1GCR
                            114 	.globl _U1UCR
                            115 	.globl _U1BAUD
                            116 	.globl _U1DBUF
                            117 	.globl _U1CSR
                            118 	.globl _U0GCR
                            119 	.globl _U0UCR
                            120 	.globl _U0BAUD
                            121 	.globl _U0DBUF
                            122 	.globl _U0CSR
                            123 	.globl _TIMIF
                            124 	.globl _T4CC1
                            125 	.globl _T4CCTL1
                            126 	.globl _T4CC0
                            127 	.globl _T4CCTL0
                            128 	.globl _T4CTL
                            129 	.globl _T4CNT
                            130 	.globl _T3CC1
                            131 	.globl _T3CCTL1
                            132 	.globl _T3CC0
                            133 	.globl _T3CCTL0
                            134 	.globl _T3CTL
                            135 	.globl _T3CNT
                            136 	.globl _T2MSEL
                            137 	.globl _T2IRQM
                            138 	.globl _T2MOVF2
                            139 	.globl _T2MOVF1
                            140 	.globl _T2MOVF0
                            141 	.globl _T2M1
                            142 	.globl _T2M0
                            143 	.globl _T2IRQF
                            144 	.globl _T2EVTCFG
                            145 	.globl _T2CTRL
                            146 	.globl _T1STAT
                            147 	.globl _T1CCTL2
                            148 	.globl _T1CCTL1
                            149 	.globl _T1CCTL0
                            150 	.globl _T1CTL
                            151 	.globl _T1CNTH
                            152 	.globl _T1CNTL
                            153 	.globl _T1CC2H
                            154 	.globl _T1CC2L
                            155 	.globl _T1CC1H
                            156 	.globl _T1CC1L
                            157 	.globl _T1CC0H
                            158 	.globl _T1CC0L
                            159 	.globl _CLKCONSTA
                            160 	.globl _CLKCONCMD
                            161 	.globl _SLEEPSTA
                            162 	.globl _SLEEPCMD
                            163 	.globl _STLOAD
                            164 	.globl _ST2
                            165 	.globl _ST1
                            166 	.globl _ST0
                            167 	.globl _RFERRF
                            168 	.globl _RFIRQF0
                            169 	.globl _RFST
                            170 	.globl _RFD
                            171 	.globl _RFIRQF1
                            172 	.globl _PSBANK
                            173 	.globl _FMAP
                            174 	.globl _MEMCTR
                            175 	.globl __XPAGE
                            176 	.globl _MPAGE
                            177 	.globl _PMUX
                            178 	.globl _P2DIR
                            179 	.globl _P1DIR
                            180 	.globl _P0DIR
                            181 	.globl _P2INP
                            182 	.globl _P1INP
                            183 	.globl _P2SEL
                            184 	.globl _P1SEL
                            185 	.globl _P0SEL
                            186 	.globl _APCFG
                            187 	.globl _PERCFG
                            188 	.globl _P0INP
                            189 	.globl _P2IEN
                            190 	.globl _P1IEN
                            191 	.globl _P0IEN
                            192 	.globl _PICTL
                            193 	.globl _P2IFG
                            194 	.globl _P1IFG
                            195 	.globl _P0IFG
                            196 	.globl _DMAREQ
                            197 	.globl _DMAARM
                            198 	.globl _DMA0CFGH
                            199 	.globl _DMA0CFGL
                            200 	.globl _DMA1CFGH
                            201 	.globl _DMA1CFGL
                            202 	.globl _DMAIRQ
                            203 	.globl _ENCCS
                            204 	.globl _ENCDO
                            205 	.globl _ENCDI
                            206 	.globl _RNDH
                            207 	.globl _RNDL
                            208 	.globl _ADCH
                            209 	.globl _ADCL
                            210 	.globl _ADCCON3
                            211 	.globl _ADCCON2
                            212 	.globl _ADCCON1
                            213 	.globl _B
                            214 	.globl _IRCON2
                            215 	.globl _ACC
                            216 	.globl _PSW
                            217 	.globl _IRCON
                            218 	.globl _IP1
                            219 	.globl _IEN1
                            220 	.globl _IP0
                            221 	.globl _IEN0
                            222 	.globl _P2
                            223 	.globl _S1CON
                            224 	.globl _IEN2
                            225 	.globl _S0CON
                            226 	.globl _DPS
                            227 	.globl _P1
                            228 	.globl _TCON
                            229 	.globl _PCON
                            230 	.globl _DPH1
                            231 	.globl _DPL1
                            232 	.globl _DPH0
                            233 	.globl _DPL0
                            234 	.globl _SP
                            235 	.globl _P0
                            236 	.globl _X_IEEE_ADDR
                            237 	.globl _X_INFOPAGE
                            238 	.globl _X_P2DIR
                            239 	.globl _X_P1DIR
                            240 	.globl _X_P0DIR
                            241 	.globl _X_U1GCR
                            242 	.globl _X_U1UCR
                            243 	.globl _X_U1BAUD
                            244 	.globl _X_U1DBUF
                            245 	.globl _X_U1CSR
                            246 	.globl _X_P2INP
                            247 	.globl _X_P1INP
                            248 	.globl _X_P2SEL
                            249 	.globl _X_P1SEL
                            250 	.globl _X_P0SEL
                            251 	.globl _X_APCFG
                            252 	.globl _X_PERCFG
                            253 	.globl _X_T4CC1
                            254 	.globl _X_T4CCTL1
                            255 	.globl _X_T4CC0
                            256 	.globl _X_T4CCTL0
                            257 	.globl _X_T4CTL
                            258 	.globl _X_T4CNT
                            259 	.globl _X_RFIRQF0
                            260 	.globl _X_T1CCTL2
                            261 	.globl _X_T1CCTL1
                            262 	.globl _X_T1CCTL0
                            263 	.globl _X_T1CTL
                            264 	.globl _X_T1CNTH
                            265 	.globl _X_T1CNTL
                            266 	.globl _X_RFST
                            267 	.globl _X_T1CC2H
                            268 	.globl _X_T1CC2L
                            269 	.globl _X_T1CC1H
                            270 	.globl _X_T1CC1L
                            271 	.globl _X_T1CC0H
                            272 	.globl _X_T1CC0L
                            273 	.globl _X_RFD
                            274 	.globl _X_TIMIF
                            275 	.globl _X_DMAREQ
                            276 	.globl _X_DMAARM
                            277 	.globl _X_DMA0CFGH
                            278 	.globl _X_DMA0CFGL
                            279 	.globl _X_DMA1CFGH
                            280 	.globl _X_DMA1CFGL
                            281 	.globl _X_DMAIRQ
                            282 	.globl _X_T3CC1
                            283 	.globl _X_T3CCTL1
                            284 	.globl _X_T3CC0
                            285 	.globl _X_T3CCTL0
                            286 	.globl _X_T3CTL
                            287 	.globl _X_T3CNT
                            288 	.globl _X_WDCTL
                            289 	.globl _X_MEMCTR
                            290 	.globl _X_CLKCONCMD
                            291 	.globl _X_U0GCR
                            292 	.globl _X_U0UCR
                            293 	.globl _X_T2MSEL
                            294 	.globl _X_U0BAUD
                            295 	.globl _X_U0DBUF
                            296 	.globl _X_RFERRF
                            297 	.globl _X_SLEEPCMD
                            298 	.globl _X_RNDH
                            299 	.globl _X_RNDL
                            300 	.globl _X_ADCH
                            301 	.globl _X_ADCL
                            302 	.globl _X_ADCCON3
                            303 	.globl _X_ADCCON2
                            304 	.globl _X_ADCCON1
                            305 	.globl _X_ENCCS
                            306 	.globl _X_ENCDO
                            307 	.globl _X_ENCDI
                            308 	.globl _X_T1STAT
                            309 	.globl _X_PMUX
                            310 	.globl _X_STLOAD
                            311 	.globl _X_P2IEN
                            312 	.globl _X_P0IEN
                            313 	.globl _X_T2IRQM
                            314 	.globl _X_T2MOVF2
                            315 	.globl _X_T2MOVF1
                            316 	.globl _X_T2MOVF0
                            317 	.globl _X_T2M1
                            318 	.globl _X_T2M0
                            319 	.globl _X_T2IRQF
                            320 	.globl _X_P2
                            321 	.globl _X_PSBANK
                            322 	.globl _X_FMAP
                            323 	.globl _X_CLKCONSTA
                            324 	.globl _X_SLEEPSTA
                            325 	.globl _X_T2EVTCFG
                            326 	.globl _X_ST2
                            327 	.globl _X_ST1
                            328 	.globl _X_ST0
                            329 	.globl _X_T2CTRL
                            330 	.globl _X__XPAGE
                            331 	.globl _X_MPAGE
                            332 	.globl _X_RFIRQF1
                            333 	.globl _X_P1
                            334 	.globl _X_P0INP
                            335 	.globl _X_P1IEN
                            336 	.globl _X_PICTL
                            337 	.globl _X_P2IFG
                            338 	.globl _X_P1IFG
                            339 	.globl _X_P0IFG
                            340 	.globl _X_U0CSR
                            341 	.globl _X_P0
                            342 	.globl _USBF5
                            343 	.globl _USBF4
                            344 	.globl _USBF3
                            345 	.globl _USBF2
                            346 	.globl _USBF1
                            347 	.globl _USBF0
                            348 	.globl _USBCNTH
                            349 	.globl _USBCNTL
                            350 	.globl _USBCNT0
                            351 	.globl _USBCSOH
                            352 	.globl _USBCSOL
                            353 	.globl _USBMAXO
                            354 	.globl _USBCSIH
                            355 	.globl _USBCSIL
                            356 	.globl _USBCS0
                            357 	.globl _USBMAXI
                            358 	.globl _USBCTRL
                            359 	.globl _USBINDEX
                            360 	.globl _USBFRMH
                            361 	.globl _USBFRML
                            362 	.globl _USBCIE
                            363 	.globl _USBOIE
                            364 	.globl _USBIIE
                            365 	.globl _USBCIF
                            366 	.globl _USBOIF
                            367 	.globl _USBIIF
                            368 	.globl _USBPOW
                            369 	.globl _USBADDR
                            370 	.globl _CSPT
                            371 	.globl _CSPZ
                            372 	.globl _CSPY
                            373 	.globl _CSPX
                            374 	.globl _CSPSTAT
                            375 	.globl _CSPCTRL
                            376 	.globl _CSPPROG23
                            377 	.globl _CSPPROG22
                            378 	.globl _CSPPROG21
                            379 	.globl _CSPPROG20
                            380 	.globl _CSPPROG19
                            381 	.globl _CSPPROG18
                            382 	.globl _CSPPROG17
                            383 	.globl _CSPPROG16
                            384 	.globl _CSPPROG15
                            385 	.globl _CSPPROG14
                            386 	.globl _CSPPROG13
                            387 	.globl _CSPPROG12
                            388 	.globl _CSPPROG11
                            389 	.globl _CSPPROG10
                            390 	.globl _CSPPROG9
                            391 	.globl _CSPPROG8
                            392 	.globl _CSPPROG7
                            393 	.globl _CSPPROG6
                            394 	.globl _CSPPROG5
                            395 	.globl _CSPPROG4
                            396 	.globl _CSPPROG3
                            397 	.globl _CSPPROG2
                            398 	.globl _CSPPROG1
                            399 	.globl _CSPPROG0
                            400 	.globl _RFC_OBS_CTRL2
                            401 	.globl _RFC_OBS_CTRL1
                            402 	.globl _RFC_OBS_CTRL0
                            403 	.globl _TXFILTCFG
                            404 	.globl _PTEST1
                            405 	.globl _PTEST0
                            406 	.globl _ATEST
                            407 	.globl _DACTEST2
                            408 	.globl _DACTEST1
                            409 	.globl _DACTEST0
                            410 	.globl _MDMTEST1
                            411 	.globl _MDMTEST0
                            412 	.globl _ADCTEST2
                            413 	.globl _ADCTEST1
                            414 	.globl _ADCTEST0
                            415 	.globl _AGCCTRL3
                            416 	.globl _AGCCTRL2
                            417 	.globl _AGCCTRL1
                            418 	.globl _AGCCTRL0
                            419 	.globl _FSCAL3
                            420 	.globl _FSCAL2
                            421 	.globl _FSCAL1
                            422 	.globl _FSCAL0
                            423 	.globl _FSCTRL
                            424 	.globl _RXCTRL
                            425 	.globl _FREQEST
                            426 	.globl _MDMCTRL1
                            427 	.globl _MDMCTRL0
                            428 	.globl _RFRND
                            429 	.globl _RFERRM
                            430 	.globl _RFIRQM1
                            431 	.globl _RFIRQM0
                            432 	.globl _TXLAST_PTR
                            433 	.globl _TXFIRST_PTR
                            434 	.globl _RXP1_PTR
                            435 	.globl _RXLAST_PTR
                            436 	.globl _RXFIRST_PTR
                            437 	.globl _TXFIFOCNT
                            438 	.globl _RXFIFOCNT
                            439 	.globl _RXFIRST
                            440 	.globl _RSSISTAT
                            441 	.globl _RSSI
                            442 	.globl _CCACTRL1
                            443 	.globl _CCACTRL0
                            444 	.globl _FSMCTRL
                            445 	.globl _FIFOPCTRL
                            446 	.globl _FSMSTAT1
                            447 	.globl _FSMSTAT0
                            448 	.globl _TXCTRL
                            449 	.globl _TXPOWER
                            450 	.globl _FREQCTRL
                            451 	.globl _FREQTUNE
                            452 	.globl _RXMASKCLR
                            453 	.globl _RXMASKSET
                            454 	.globl _RXENABLE
                            455 	.globl _FRMCTRL1
                            456 	.globl _FRMCTRL0
                            457 	.globl _SRCEXTEN2
                            458 	.globl _SRCEXTEN1
                            459 	.globl _SRCEXTEN0
                            460 	.globl _SRCSHORTEN2
                            461 	.globl _SRCSHORTEN1
                            462 	.globl _SRCSHORTEN0
                            463 	.globl _SRCMATCH
                            464 	.globl _FRMFILT1
                            465 	.globl _FRMFILT0
                            466 	.globl _SHORT_ADDR1
                            467 	.globl _SHORT_ADDR0
                            468 	.globl _PAN_ID1
                            469 	.globl _PAN_ID0
                            470 	.globl _EXT_ADDR7
                            471 	.globl _EXT_ADDR6
                            472 	.globl _EXT_ADDR5
                            473 	.globl _EXT_ADDR4
                            474 	.globl _EXT_ADDR3
                            475 	.globl _EXT_ADDR2
                            476 	.globl _EXT_ADDR1
                            477 	.globl _EXT_ADDR0
                            478 	.globl _SRCSHORTPENDEN2
                            479 	.globl _SRCSHORTPENDEN1
                            480 	.globl _SRCSHORTPENDEN0
                            481 	.globl _SRCEXTPENDEN2
                            482 	.globl _SRCEXTPENDEN1
                            483 	.globl _SRCEXTPENDEN0
                            484 	.globl _SRCRESINDEX
                            485 	.globl _SRCRESMASK2
                            486 	.globl _SRCRESMASK1
                            487 	.globl _SRCRESMASK0
                            488 	.globl _SRC_ADDR_TABLE
                            489 	.globl _TXFIFO
                            490 	.globl _RXFIFO
                            491 	.globl _RFCORE_RAM
                            492 	.globl _CMPCTL
                            493 	.globl _OPAMPS
                            494 	.globl _OPAMPC
                            495 	.globl _STCV2
                            496 	.globl _STCV1
                            497 	.globl _STCV0
                            498 	.globl _STCS
                            499 	.globl _STCC
                            500 	.globl _T1CC4H
                            501 	.globl _T1CC4L
                            502 	.globl _T1CC3H
                            503 	.globl _T1CC3L
                            504 	.globl _XX_T1CC2H
                            505 	.globl _XX_T1CC2L
                            506 	.globl _XX_T1CC1H
                            507 	.globl _XX_T1CC1L
                            508 	.globl _XX_T1CC0H
                            509 	.globl _XX_T1CC0L
                            510 	.globl _T1CCTL4
                            511 	.globl _T1CCTL3
                            512 	.globl _XX_T1CCTL2
                            513 	.globl _XX_T1CCTL1
                            514 	.globl _XX_T1CCTL0
                            515 	.globl _CLD
                            516 	.globl _IRCTL
                            517 	.globl _CHIPINFO1
                            518 	.globl _CHIPINFO0
                            519 	.globl _FWDATA
                            520 	.globl _FADDRH
                            521 	.globl _FADDRL
                            522 	.globl _FCTL
                            523 	.globl _IVCTRL
                            524 	.globl _BATTMON
                            525 	.globl _SRCRC
                            526 	.globl _DBGDATA
                            527 	.globl _TESTREG0
                            528 	.globl _CHIPID
                            529 	.globl _CHVER
                            530 	.globl _OBSSEL5
                            531 	.globl _OBSSEL4
                            532 	.globl _OBSSEL3
                            533 	.globl _OBSSEL2
                            534 	.globl _OBSSEL1
                            535 	.globl _OBSSEL0
                            536 	.globl _I2CIO
                            537 	.globl _I2CWC
                            538 	.globl _I2CADDR
                            539 	.globl _I2CDATA
                            540 	.globl _I2CSTAT
                            541 	.globl _I2CCFG
                            542 	.globl _OPAMPMC
                            543 	.globl _MONMUX
                            544 	.globl _object_instance_init
                            545 	.globl _object_instance_insert_resource
                            546 	.globl _object_instance_find_resource
                            547 	.globl _object_add_subscriber
                            548 	.globl _object_remove_subscriber
                            549 ;--------------------------------------------------------
                            550 ; special function registers
                            551 ;--------------------------------------------------------
                            552 	.area RSEG    (ABS,DATA)
   0000                     553 	.org 0x0000
                    0080    554 _P0	=	0x0080
                    0081    555 _SP	=	0x0081
                    0082    556 _DPL0	=	0x0082
                    0083    557 _DPH0	=	0x0083
                    0084    558 _DPL1	=	0x0084
                    0085    559 _DPH1	=	0x0085
                    0087    560 _PCON	=	0x0087
                    0088    561 _TCON	=	0x0088
                    0090    562 _P1	=	0x0090
                    0092    563 _DPS	=	0x0092
                    0098    564 _S0CON	=	0x0098
                    009A    565 _IEN2	=	0x009a
                    009B    566 _S1CON	=	0x009b
                    00A0    567 _P2	=	0x00a0
                    00A8    568 _IEN0	=	0x00a8
                    00A9    569 _IP0	=	0x00a9
                    00B8    570 _IEN1	=	0x00b8
                    00B9    571 _IP1	=	0x00b9
                    00C0    572 _IRCON	=	0x00c0
                    00D0    573 _PSW	=	0x00d0
                    00E0    574 _ACC	=	0x00e0
                    00E8    575 _IRCON2	=	0x00e8
                    00F0    576 _B	=	0x00f0
                    00B4    577 _ADCCON1	=	0x00b4
                    00B5    578 _ADCCON2	=	0x00b5
                    00B6    579 _ADCCON3	=	0x00b6
                    00BA    580 _ADCL	=	0x00ba
                    00BB    581 _ADCH	=	0x00bb
                    00BC    582 _RNDL	=	0x00bc
                    00BD    583 _RNDH	=	0x00bd
                    00B1    584 _ENCDI	=	0x00b1
                    00B2    585 _ENCDO	=	0x00b2
                    00B3    586 _ENCCS	=	0x00b3
                    00D1    587 _DMAIRQ	=	0x00d1
                    00D2    588 _DMA1CFGL	=	0x00d2
                    00D3    589 _DMA1CFGH	=	0x00d3
                    00D4    590 _DMA0CFGL	=	0x00d4
                    00D5    591 _DMA0CFGH	=	0x00d5
                    00D6    592 _DMAARM	=	0x00d6
                    00D7    593 _DMAREQ	=	0x00d7
                    0089    594 _P0IFG	=	0x0089
                    008A    595 _P1IFG	=	0x008a
                    008B    596 _P2IFG	=	0x008b
                    008C    597 _PICTL	=	0x008c
                    00AB    598 _P0IEN	=	0x00ab
                    008D    599 _P1IEN	=	0x008d
                    00AC    600 _P2IEN	=	0x00ac
                    008F    601 _P0INP	=	0x008f
                    00F1    602 _PERCFG	=	0x00f1
                    00F2    603 _APCFG	=	0x00f2
                    00F3    604 _P0SEL	=	0x00f3
                    00F4    605 _P1SEL	=	0x00f4
                    00F5    606 _P2SEL	=	0x00f5
                    00F6    607 _P1INP	=	0x00f6
                    00F7    608 _P2INP	=	0x00f7
                    00FD    609 _P0DIR	=	0x00fd
                    00FE    610 _P1DIR	=	0x00fe
                    00FF    611 _P2DIR	=	0x00ff
                    00AE    612 _PMUX	=	0x00ae
                    0093    613 _MPAGE	=	0x0093
                    0093    614 __XPAGE	=	0x0093
                    00C7    615 _MEMCTR	=	0x00c7
                    009F    616 _FMAP	=	0x009f
                    009F    617 _PSBANK	=	0x009f
                    0091    618 _RFIRQF1	=	0x0091
                    00D9    619 _RFD	=	0x00d9
                    00E1    620 _RFST	=	0x00e1
                    00E9    621 _RFIRQF0	=	0x00e9
                    00BF    622 _RFERRF	=	0x00bf
                    0095    623 _ST0	=	0x0095
                    0096    624 _ST1	=	0x0096
                    0097    625 _ST2	=	0x0097
                    00AD    626 _STLOAD	=	0x00ad
                    00BE    627 _SLEEPCMD	=	0x00be
                    009D    628 _SLEEPSTA	=	0x009d
                    00C6    629 _CLKCONCMD	=	0x00c6
                    009E    630 _CLKCONSTA	=	0x009e
                    00DA    631 _T1CC0L	=	0x00da
                    00DB    632 _T1CC0H	=	0x00db
                    00DC    633 _T1CC1L	=	0x00dc
                    00DD    634 _T1CC1H	=	0x00dd
                    00DE    635 _T1CC2L	=	0x00de
                    00DF    636 _T1CC2H	=	0x00df
                    00E2    637 _T1CNTL	=	0x00e2
                    00E3    638 _T1CNTH	=	0x00e3
                    00E4    639 _T1CTL	=	0x00e4
                    00E5    640 _T1CCTL0	=	0x00e5
                    00E6    641 _T1CCTL1	=	0x00e6
                    00E7    642 _T1CCTL2	=	0x00e7
                    00AF    643 _T1STAT	=	0x00af
                    0094    644 _T2CTRL	=	0x0094
                    009C    645 _T2EVTCFG	=	0x009c
                    00A1    646 _T2IRQF	=	0x00a1
                    00A2    647 _T2M0	=	0x00a2
                    00A3    648 _T2M1	=	0x00a3
                    00A4    649 _T2MOVF0	=	0x00a4
                    00A5    650 _T2MOVF1	=	0x00a5
                    00A6    651 _T2MOVF2	=	0x00a6
                    00A7    652 _T2IRQM	=	0x00a7
                    00C3    653 _T2MSEL	=	0x00c3
                    00CA    654 _T3CNT	=	0x00ca
                    00CB    655 _T3CTL	=	0x00cb
                    00CC    656 _T3CCTL0	=	0x00cc
                    00CD    657 _T3CC0	=	0x00cd
                    00CE    658 _T3CCTL1	=	0x00ce
                    00CF    659 _T3CC1	=	0x00cf
                    00EA    660 _T4CNT	=	0x00ea
                    00EB    661 _T4CTL	=	0x00eb
                    00EC    662 _T4CCTL0	=	0x00ec
                    00ED    663 _T4CC0	=	0x00ed
                    00EE    664 _T4CCTL1	=	0x00ee
                    00EF    665 _T4CC1	=	0x00ef
                    00D8    666 _TIMIF	=	0x00d8
                    0086    667 _U0CSR	=	0x0086
                    00C1    668 _U0DBUF	=	0x00c1
                    00C2    669 _U0BAUD	=	0x00c2
                    00C4    670 _U0UCR	=	0x00c4
                    00C5    671 _U0GCR	=	0x00c5
                    00F8    672 _U1CSR	=	0x00f8
                    00F9    673 _U1DBUF	=	0x00f9
                    00FA    674 _U1BAUD	=	0x00fa
                    00FB    675 _U1UCR	=	0x00fb
                    00FC    676 _U1GCR	=	0x00fc
                    00C9    677 _WDCTL	=	0x00c9
                            678 ;--------------------------------------------------------
                            679 ; special function bits
                            680 ;--------------------------------------------------------
                            681 	.area RSEG    (ABS,DATA)
   0000                     682 	.org 0x0000
                    0087    683 _P0_7	=	0x0087
                    0086    684 _P0_6	=	0x0086
                    0085    685 _P0_5	=	0x0085
                    0084    686 _P0_4	=	0x0084
                    0083    687 _P0_3	=	0x0083
                    0082    688 _P0_2	=	0x0082
                    0081    689 _P0_1	=	0x0081
                    0080    690 _P0_0	=	0x0080
                    008F    691 _URX1IF	=	0x008f
                    008D    692 _ADCIF	=	0x008d
                    008B    693 _URX0IF	=	0x008b
                    008A    694 _IT1	=	0x008a
                    0089    695 _RFERRIF	=	0x0089
                    0088    696 _IT0	=	0x0088
                    0097    697 _P1_7	=	0x0097
                    0096    698 _P1_6	=	0x0096
                    0095    699 _P1_5	=	0x0095
                    0094    700 _P1_4	=	0x0094
                    0093    701 _P1_3	=	0x0093
                    0092    702 _P1_2	=	0x0092
                    0091    703 _P1_1	=	0x0091
                    0090    704 _P1_0	=	0x0090
                    0099    705 _ENCIF_1	=	0x0099
                    0098    706 _ENCIF_0	=	0x0098
                    00A7    707 _P2_7	=	0x00a7
                    00A6    708 _P2_6	=	0x00a6
                    00A5    709 _P2_5	=	0x00a5
                    00A4    710 _P2_4	=	0x00a4
                    00A3    711 _P2_3	=	0x00a3
                    00A2    712 _P2_2	=	0x00a2
                    00A1    713 _P2_1	=	0x00a1
                    00A0    714 _P2_0	=	0x00a0
                    00AF    715 _EA	=	0x00af
                    00AD    716 _STIE	=	0x00ad
                    00AC    717 _ENCIE	=	0x00ac
                    00AB    718 _URX1IE	=	0x00ab
                    00AA    719 _URX0IE	=	0x00aa
                    00A9    720 _ADCIE	=	0x00a9
                    00A8    721 _RFERRIE	=	0x00a8
                    00BD    722 _P0IE	=	0x00bd
                    00BC    723 _T4IE	=	0x00bc
                    00BB    724 _T3IE	=	0x00bb
                    00BA    725 _T2IE	=	0x00ba
                    00B9    726 _T1IE	=	0x00b9
                    00B8    727 _DMAIE	=	0x00b8
                    00C7    728 _STIF	=	0x00c7
                    00C5    729 _P0IF	=	0x00c5
                    00C4    730 _T4IF	=	0x00c4
                    00C3    731 _T3IF	=	0x00c3
                    00C2    732 _T2IF	=	0x00c2
                    00C1    733 _T1IF	=	0x00c1
                    00C0    734 _DMAIF	=	0x00c0
                    00D7    735 _CY	=	0x00d7
                    00D6    736 _AC	=	0x00d6
                    00D5    737 _F0	=	0x00d5
                    00D4    738 _RS1	=	0x00d4
                    00D3    739 _RS0	=	0x00d3
                    00D2    740 _OV	=	0x00d2
                    00D1    741 _F1	=	0x00d1
                    00D0    742 _P	=	0x00d0
                    00E7    743 _ACC_7	=	0x00e7
                    00E6    744 _ACC_6	=	0x00e6
                    00E5    745 _ACC_5	=	0x00e5
                    00E4    746 _ACC_4	=	0x00e4
                    00E3    747 _ACC_3	=	0x00e3
                    00E2    748 _ACC_2	=	0x00e2
                    00E1    749 _ACC_1	=	0x00e1
                    00E0    750 _ACC_0	=	0x00e0
                    00EC    751 _WDTIF	=	0x00ec
                    00EB    752 _P1IF	=	0x00eb
                    00EA    753 _UTX1IF	=	0x00ea
                    00E9    754 _UTX0IF	=	0x00e9
                    00E8    755 _P2IF	=	0x00e8
                    00F7    756 _B_7	=	0x00f7
                    00F6    757 _B_6	=	0x00f6
                    00F5    758 _B_5	=	0x00f5
                    00F4    759 _B_4	=	0x00f4
                    00F3    760 _B_3	=	0x00f3
                    00F2    761 _B_2	=	0x00f2
                    00F1    762 _B_1	=	0x00f1
                    00F0    763 _B_0	=	0x00f0
                    00DE    764 _OVFIM	=	0x00de
                    00DD    765 _T4CH1IF	=	0x00dd
                    00DC    766 _T4CH0IF	=	0x00dc
                    00DB    767 _T4OVFIF	=	0x00db
                    00DA    768 _T3CH1IF	=	0x00da
                    00D9    769 _T3CH0IF	=	0x00d9
                    00D8    770 _T3OVFIF	=	0x00d8
                    00FF    771 _MODE	=	0x00ff
                    00FE    772 _RE	=	0x00fe
                    00FD    773 _SLAVE	=	0x00fd
                    00FC    774 _FE	=	0x00fc
                    00FB    775 _ERR	=	0x00fb
                    00FA    776 _RX_BYTE	=	0x00fa
                    00F9    777 _TX_BYTE	=	0x00f9
                    00F8    778 _ACTIVE	=	0x00f8
                            779 ;--------------------------------------------------------
                            780 ; overlayable register banks
                            781 ;--------------------------------------------------------
                            782 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     783 	.ds 8
                            784 ;--------------------------------------------------------
                            785 ; internal ram data
                            786 ;--------------------------------------------------------
                            787 	.area DSEG    (DATA)
                            788 ;--------------------------------------------------------
                            789 ; overlayable items in internal ram 
                            790 ;--------------------------------------------------------
                            791 	.area OSEG    (OVR,DATA)
                            792 ;--------------------------------------------------------
                            793 ; indirectly addressable internal ram data
                            794 ;--------------------------------------------------------
                            795 	.area ISEG    (DATA)
                            796 ;--------------------------------------------------------
                            797 ; absolute internal ram data
                            798 ;--------------------------------------------------------
                            799 	.area IABS    (ABS,DATA)
                            800 	.area IABS    (ABS,DATA)
                            801 ;--------------------------------------------------------
                            802 ; bit data
                            803 ;--------------------------------------------------------
                            804 	.area BSEG    (BIT)
                            805 ;--------------------------------------------------------
                            806 ; paged external ram data
                            807 ;--------------------------------------------------------
                            808 	.area PSEG    (PAG,XDATA)
                            809 ;--------------------------------------------------------
                            810 ; external ram data
                            811 ;--------------------------------------------------------
                            812 	.area XSEG    (XDATA)
                    61A6    813 _MONMUX	=	0x61a6
                    61A6    814 _OPAMPMC	=	0x61a6
                    6230    815 _I2CCFG	=	0x6230
                    6231    816 _I2CSTAT	=	0x6231
                    6232    817 _I2CDATA	=	0x6232
                    6233    818 _I2CADDR	=	0x6233
                    6234    819 _I2CWC	=	0x6234
                    6235    820 _I2CIO	=	0x6235
                    6243    821 _OBSSEL0	=	0x6243
                    6244    822 _OBSSEL1	=	0x6244
                    6245    823 _OBSSEL2	=	0x6245
                    6246    824 _OBSSEL3	=	0x6246
                    6247    825 _OBSSEL4	=	0x6247
                    6248    826 _OBSSEL5	=	0x6248
                    6249    827 _CHVER	=	0x6249
                    624A    828 _CHIPID	=	0x624a
                    624B    829 _TESTREG0	=	0x624b
                    6260    830 _DBGDATA	=	0x6260
                    6262    831 _SRCRC	=	0x6262
                    6264    832 _BATTMON	=	0x6264
                    6265    833 _IVCTRL	=	0x6265
                    6270    834 _FCTL	=	0x6270
                    6271    835 _FADDRL	=	0x6271
                    6272    836 _FADDRH	=	0x6272
                    6273    837 _FWDATA	=	0x6273
                    6276    838 _CHIPINFO0	=	0x6276
                    6277    839 _CHIPINFO1	=	0x6277
                    6281    840 _IRCTL	=	0x6281
                    6290    841 _CLD	=	0x6290
                    62A0    842 _XX_T1CCTL0	=	0x62a0
                    62A1    843 _XX_T1CCTL1	=	0x62a1
                    62A2    844 _XX_T1CCTL2	=	0x62a2
                    62A3    845 _T1CCTL3	=	0x62a3
                    62A4    846 _T1CCTL4	=	0x62a4
                    62A6    847 _XX_T1CC0L	=	0x62a6
                    62A7    848 _XX_T1CC0H	=	0x62a7
                    62A8    849 _XX_T1CC1L	=	0x62a8
                    62A9    850 _XX_T1CC1H	=	0x62a9
                    62AA    851 _XX_T1CC2L	=	0x62aa
                    62AB    852 _XX_T1CC2H	=	0x62ab
                    62AC    853 _T1CC3L	=	0x62ac
                    62AD    854 _T1CC3H	=	0x62ad
                    62AE    855 _T1CC4L	=	0x62ae
                    62AF    856 _T1CC4H	=	0x62af
                    62B0    857 _STCC	=	0x62b0
                    62B1    858 _STCS	=	0x62b1
                    62B2    859 _STCV0	=	0x62b2
                    62B3    860 _STCV1	=	0x62b3
                    62B4    861 _STCV2	=	0x62b4
                    62C0    862 _OPAMPC	=	0x62c0
                    62C1    863 _OPAMPS	=	0x62c1
                    62D0    864 _CMPCTL	=	0x62d0
                    6000    865 _RFCORE_RAM	=	0x6000
                    6000    866 _RXFIFO	=	0x6000
                    6080    867 _TXFIFO	=	0x6080
                    6100    868 _SRC_ADDR_TABLE	=	0x6100
                    6160    869 _SRCRESMASK0	=	0x6160
                    6161    870 _SRCRESMASK1	=	0x6161
                    6162    871 _SRCRESMASK2	=	0x6162
                    6163    872 _SRCRESINDEX	=	0x6163
                    6164    873 _SRCEXTPENDEN0	=	0x6164
                    6165    874 _SRCEXTPENDEN1	=	0x6165
                    6166    875 _SRCEXTPENDEN2	=	0x6166
                    6167    876 _SRCSHORTPENDEN0	=	0x6167
                    6168    877 _SRCSHORTPENDEN1	=	0x6168
                    6169    878 _SRCSHORTPENDEN2	=	0x6169
                    616A    879 _EXT_ADDR0	=	0x616a
                    616B    880 _EXT_ADDR1	=	0x616b
                    616C    881 _EXT_ADDR2	=	0x616c
                    616D    882 _EXT_ADDR3	=	0x616d
                    616E    883 _EXT_ADDR4	=	0x616e
                    616F    884 _EXT_ADDR5	=	0x616f
                    6170    885 _EXT_ADDR6	=	0x6170
                    6171    886 _EXT_ADDR7	=	0x6171
                    6172    887 _PAN_ID0	=	0x6172
                    6173    888 _PAN_ID1	=	0x6173
                    6174    889 _SHORT_ADDR0	=	0x6174
                    6175    890 _SHORT_ADDR1	=	0x6175
                    6180    891 _FRMFILT0	=	0x6180
                    6181    892 _FRMFILT1	=	0x6181
                    6182    893 _SRCMATCH	=	0x6182
                    6183    894 _SRCSHORTEN0	=	0x6183
                    6184    895 _SRCSHORTEN1	=	0x6184
                    6185    896 _SRCSHORTEN2	=	0x6185
                    6186    897 _SRCEXTEN0	=	0x6186
                    6187    898 _SRCEXTEN1	=	0x6187
                    6188    899 _SRCEXTEN2	=	0x6188
                    6189    900 _FRMCTRL0	=	0x6189
                    618A    901 _FRMCTRL1	=	0x618a
                    618B    902 _RXENABLE	=	0x618b
                    618C    903 _RXMASKSET	=	0x618c
                    618D    904 _RXMASKCLR	=	0x618d
                    618E    905 _FREQTUNE	=	0x618e
                    618F    906 _FREQCTRL	=	0x618f
                    6190    907 _TXPOWER	=	0x6190
                    6191    908 _TXCTRL	=	0x6191
                    6192    909 _FSMSTAT0	=	0x6192
                    6193    910 _FSMSTAT1	=	0x6193
                    6194    911 _FIFOPCTRL	=	0x6194
                    6195    912 _FSMCTRL	=	0x6195
                    6196    913 _CCACTRL0	=	0x6196
                    6197    914 _CCACTRL1	=	0x6197
                    6198    915 _RSSI	=	0x6198
                    6199    916 _RSSISTAT	=	0x6199
                    619A    917 _RXFIRST	=	0x619a
                    619B    918 _RXFIFOCNT	=	0x619b
                    619C    919 _TXFIFOCNT	=	0x619c
                    619D    920 _RXFIRST_PTR	=	0x619d
                    619E    921 _RXLAST_PTR	=	0x619e
                    619F    922 _RXP1_PTR	=	0x619f
                    61A1    923 _TXFIRST_PTR	=	0x61a1
                    61A2    924 _TXLAST_PTR	=	0x61a2
                    61A3    925 _RFIRQM0	=	0x61a3
                    61A4    926 _RFIRQM1	=	0x61a4
                    61A5    927 _RFERRM	=	0x61a5
                    61A7    928 _RFRND	=	0x61a7
                    61A8    929 _MDMCTRL0	=	0x61a8
                    61A9    930 _MDMCTRL1	=	0x61a9
                    61AA    931 _FREQEST	=	0x61aa
                    61AB    932 _RXCTRL	=	0x61ab
                    61AC    933 _FSCTRL	=	0x61ac
                    61AD    934 _FSCAL0	=	0x61ad
                    61AE    935 _FSCAL1	=	0x61ae
                    61AF    936 _FSCAL2	=	0x61af
                    61B0    937 _FSCAL3	=	0x61b0
                    61B1    938 _AGCCTRL0	=	0x61b1
                    61B2    939 _AGCCTRL1	=	0x61b2
                    61B3    940 _AGCCTRL2	=	0x61b3
                    61B4    941 _AGCCTRL3	=	0x61b4
                    61B5    942 _ADCTEST0	=	0x61b5
                    61B6    943 _ADCTEST1	=	0x61b6
                    61B7    944 _ADCTEST2	=	0x61b7
                    61B8    945 _MDMTEST0	=	0x61b8
                    61B9    946 _MDMTEST1	=	0x61b9
                    61BA    947 _DACTEST0	=	0x61ba
                    61BB    948 _DACTEST1	=	0x61bb
                    61BC    949 _DACTEST2	=	0x61bc
                    61BD    950 _ATEST	=	0x61bd
                    61BE    951 _PTEST0	=	0x61be
                    61BF    952 _PTEST1	=	0x61bf
                    61FA    953 _TXFILTCFG	=	0x61fa
                    61EB    954 _RFC_OBS_CTRL0	=	0x61eb
                    61EC    955 _RFC_OBS_CTRL1	=	0x61ec
                    61ED    956 _RFC_OBS_CTRL2	=	0x61ed
                    61C0    957 _CSPPROG0	=	0x61c0
                    61C1    958 _CSPPROG1	=	0x61c1
                    61C2    959 _CSPPROG2	=	0x61c2
                    61C3    960 _CSPPROG3	=	0x61c3
                    61C4    961 _CSPPROG4	=	0x61c4
                    61C5    962 _CSPPROG5	=	0x61c5
                    61C6    963 _CSPPROG6	=	0x61c6
                    61C7    964 _CSPPROG7	=	0x61c7
                    61C8    965 _CSPPROG8	=	0x61c8
                    61C9    966 _CSPPROG9	=	0x61c9
                    61CA    967 _CSPPROG10	=	0x61ca
                    61CB    968 _CSPPROG11	=	0x61cb
                    61CC    969 _CSPPROG12	=	0x61cc
                    61CD    970 _CSPPROG13	=	0x61cd
                    61CE    971 _CSPPROG14	=	0x61ce
                    61CF    972 _CSPPROG15	=	0x61cf
                    61D0    973 _CSPPROG16	=	0x61d0
                    61D1    974 _CSPPROG17	=	0x61d1
                    61D2    975 _CSPPROG18	=	0x61d2
                    61D3    976 _CSPPROG19	=	0x61d3
                    61D4    977 _CSPPROG20	=	0x61d4
                    61D5    978 _CSPPROG21	=	0x61d5
                    61D6    979 _CSPPROG22	=	0x61d6
                    61D7    980 _CSPPROG23	=	0x61d7
                    61E0    981 _CSPCTRL	=	0x61e0
                    61E1    982 _CSPSTAT	=	0x61e1
                    61E2    983 _CSPX	=	0x61e2
                    61E3    984 _CSPY	=	0x61e3
                    61E4    985 _CSPZ	=	0x61e4
                    61E5    986 _CSPT	=	0x61e5
                    6200    987 _USBADDR	=	0x6200
                    6201    988 _USBPOW	=	0x6201
                    6202    989 _USBIIF	=	0x6202
                    6204    990 _USBOIF	=	0x6204
                    6206    991 _USBCIF	=	0x6206
                    6207    992 _USBIIE	=	0x6207
                    6209    993 _USBOIE	=	0x6209
                    620B    994 _USBCIE	=	0x620b
                    620C    995 _USBFRML	=	0x620c
                    620D    996 _USBFRMH	=	0x620d
                    620E    997 _USBINDEX	=	0x620e
                    620F    998 _USBCTRL	=	0x620f
                    6210    999 _USBMAXI	=	0x6210
                    6211   1000 _USBCS0	=	0x6211
                    6211   1001 _USBCSIL	=	0x6211
                    6212   1002 _USBCSIH	=	0x6212
                    6213   1003 _USBMAXO	=	0x6213
                    6214   1004 _USBCSOL	=	0x6214
                    6215   1005 _USBCSOH	=	0x6215
                    6216   1006 _USBCNT0	=	0x6216
                    6216   1007 _USBCNTL	=	0x6216
                    6217   1008 _USBCNTH	=	0x6217
                    6220   1009 _USBF0	=	0x6220
                    6222   1010 _USBF1	=	0x6222
                    6224   1011 _USBF2	=	0x6224
                    6226   1012 _USBF3	=	0x6226
                    6228   1013 _USBF4	=	0x6228
                    622A   1014 _USBF5	=	0x622a
                    7080   1015 _X_P0	=	0x7080
                    7086   1016 _X_U0CSR	=	0x7086
                    7089   1017 _X_P0IFG	=	0x7089
                    708A   1018 _X_P1IFG	=	0x708a
                    708B   1019 _X_P2IFG	=	0x708b
                    708C   1020 _X_PICTL	=	0x708c
                    708D   1021 _X_P1IEN	=	0x708d
                    708F   1022 _X_P0INP	=	0x708f
                    7090   1023 _X_P1	=	0x7090
                    7091   1024 _X_RFIRQF1	=	0x7091
                    7093   1025 _X_MPAGE	=	0x7093
                    7093   1026 _X__XPAGE	=	0x7093
                    7094   1027 _X_T2CTRL	=	0x7094
                    7095   1028 _X_ST0	=	0x7095
                    7096   1029 _X_ST1	=	0x7096
                    7097   1030 _X_ST2	=	0x7097
                    709C   1031 _X_T2EVTCFG	=	0x709c
                    709D   1032 _X_SLEEPSTA	=	0x709d
                    709E   1033 _X_CLKCONSTA	=	0x709e
                    709F   1034 _X_FMAP	=	0x709f
                    709F   1035 _X_PSBANK	=	0x709f
                    70A0   1036 _X_P2	=	0x70a0
                    70A1   1037 _X_T2IRQF	=	0x70a1
                    70A2   1038 _X_T2M0	=	0x70a2
                    70A3   1039 _X_T2M1	=	0x70a3
                    70A4   1040 _X_T2MOVF0	=	0x70a4
                    70A5   1041 _X_T2MOVF1	=	0x70a5
                    70A6   1042 _X_T2MOVF2	=	0x70a6
                    70A7   1043 _X_T2IRQM	=	0x70a7
                    70AB   1044 _X_P0IEN	=	0x70ab
                    70AC   1045 _X_P2IEN	=	0x70ac
                    70AD   1046 _X_STLOAD	=	0x70ad
                    70AE   1047 _X_PMUX	=	0x70ae
                    70AF   1048 _X_T1STAT	=	0x70af
                    70B1   1049 _X_ENCDI	=	0x70b1
                    70B2   1050 _X_ENCDO	=	0x70b2
                    70B3   1051 _X_ENCCS	=	0x70b3
                    70B4   1052 _X_ADCCON1	=	0x70b4
                    70B5   1053 _X_ADCCON2	=	0x70b5
                    70B6   1054 _X_ADCCON3	=	0x70b6
                    70BA   1055 _X_ADCL	=	0x70ba
                    70BB   1056 _X_ADCH	=	0x70bb
                    70BC   1057 _X_RNDL	=	0x70bc
                    70BD   1058 _X_RNDH	=	0x70bd
                    70BE   1059 _X_SLEEPCMD	=	0x70be
                    70BF   1060 _X_RFERRF	=	0x70bf
                    70C1   1061 _X_U0DBUF	=	0x70c1
                    70C2   1062 _X_U0BAUD	=	0x70c2
                    70C3   1063 _X_T2MSEL	=	0x70c3
                    70C4   1064 _X_U0UCR	=	0x70c4
                    70C5   1065 _X_U0GCR	=	0x70c5
                    70C6   1066 _X_CLKCONCMD	=	0x70c6
                    70C7   1067 _X_MEMCTR	=	0x70c7
                    70C9   1068 _X_WDCTL	=	0x70c9
                    70CA   1069 _X_T3CNT	=	0x70ca
                    70CB   1070 _X_T3CTL	=	0x70cb
                    70CC   1071 _X_T3CCTL0	=	0x70cc
                    70CD   1072 _X_T3CC0	=	0x70cd
                    70CE   1073 _X_T3CCTL1	=	0x70ce
                    70CF   1074 _X_T3CC1	=	0x70cf
                    70D1   1075 _X_DMAIRQ	=	0x70d1
                    70D2   1076 _X_DMA1CFGL	=	0x70d2
                    70D3   1077 _X_DMA1CFGH	=	0x70d3
                    70D4   1078 _X_DMA0CFGL	=	0x70d4
                    70D5   1079 _X_DMA0CFGH	=	0x70d5
                    70D6   1080 _X_DMAARM	=	0x70d6
                    70D7   1081 _X_DMAREQ	=	0x70d7
                    70D8   1082 _X_TIMIF	=	0x70d8
                    70D9   1083 _X_RFD	=	0x70d9
                    70DA   1084 _X_T1CC0L	=	0x70da
                    70DB   1085 _X_T1CC0H	=	0x70db
                    70DC   1086 _X_T1CC1L	=	0x70dc
                    70DD   1087 _X_T1CC1H	=	0x70dd
                    70DE   1088 _X_T1CC2L	=	0x70de
                    70DF   1089 _X_T1CC2H	=	0x70df
                    70E1   1090 _X_RFST	=	0x70e1
                    70E2   1091 _X_T1CNTL	=	0x70e2
                    70E3   1092 _X_T1CNTH	=	0x70e3
                    70E4   1093 _X_T1CTL	=	0x70e4
                    70E5   1094 _X_T1CCTL0	=	0x70e5
                    70E6   1095 _X_T1CCTL1	=	0x70e6
                    70E7   1096 _X_T1CCTL2	=	0x70e7
                    70E9   1097 _X_RFIRQF0	=	0x70e9
                    70EA   1098 _X_T4CNT	=	0x70ea
                    70EB   1099 _X_T4CTL	=	0x70eb
                    70EC   1100 _X_T4CCTL0	=	0x70ec
                    70ED   1101 _X_T4CC0	=	0x70ed
                    70EE   1102 _X_T4CCTL1	=	0x70ee
                    70EF   1103 _X_T4CC1	=	0x70ef
                    70F1   1104 _X_PERCFG	=	0x70f1
                    70F2   1105 _X_APCFG	=	0x70f2
                    70F3   1106 _X_P0SEL	=	0x70f3
                    70F4   1107 _X_P1SEL	=	0x70f4
                    70F5   1108 _X_P2SEL	=	0x70f5
                    70F6   1109 _X_P1INP	=	0x70f6
                    70F7   1110 _X_P2INP	=	0x70f7
                    70F8   1111 _X_U1CSR	=	0x70f8
                    70F9   1112 _X_U1DBUF	=	0x70f9
                    70FA   1113 _X_U1BAUD	=	0x70fa
                    70FB   1114 _X_U1UCR	=	0x70fb
                    70FC   1115 _X_U1GCR	=	0x70fc
                    70FD   1116 _X_P0DIR	=	0x70fd
                    70FE   1117 _X_P1DIR	=	0x70fe
                    70FF   1118 _X_P2DIR	=	0x70ff
                    7800   1119 _X_INFOPAGE	=	0x7800
                    780C   1120 _X_IEEE_ADDR	=	0x780c
                           1121 ;--------------------------------------------------------
                           1122 ; absolute external ram data
                           1123 ;--------------------------------------------------------
                           1124 	.area XABS    (ABS,XDATA)
                           1125 ;--------------------------------------------------------
                           1126 ; external initialized ram data
                           1127 ;--------------------------------------------------------
                           1128 	.area XISEG   (XDATA)
                           1129 	.area HOME    (CODE)
                           1130 	.area GSINIT0 (CODE)
                           1131 	.area GSINIT1 (CODE)
                           1132 	.area GSINIT2 (CODE)
                           1133 	.area GSINIT3 (CODE)
                           1134 	.area GSINIT4 (CODE)
                           1135 	.area GSINIT5 (CODE)
                           1136 	.area GSINIT  (CODE)
                           1137 	.area GSFINAL (CODE)
                           1138 	.area CSEG    (CODE)
                           1139 ;--------------------------------------------------------
                           1140 ; global & static initialisations
                           1141 ;--------------------------------------------------------
                           1142 	.area HOME    (CODE)
                           1143 	.area GSINIT  (CODE)
                           1144 	.area GSFINAL (CODE)
                           1145 	.area GSINIT  (CODE)
                           1146 ;--------------------------------------------------------
                           1147 ; Home
                           1148 ;--------------------------------------------------------
                           1149 	.area HOME    (CODE)
                           1150 	.area HOME    (CODE)
                           1151 ;--------------------------------------------------------
                           1152 ; code
                           1153 ;--------------------------------------------------------
                           1154 	.area BANK1   (CODE)
                           1155 ;------------------------------------------------------------
                           1156 ;Allocation info for local variables in function 'object_instance_init'
                           1157 ;------------------------------------------------------------
                           1158 ;name                      Allocated to stack - sp -11
                           1159 ;object_id                 Allocated to stack - sp -13
                           1160 ;object                    Allocated to stack - sp -5
                           1161 ;sloc0                     Allocated to stack - sp -2
                           1162 ;------------------------------------------------------------
                           1163 ;	object.c:12: int16_t object_instance_init(object_instance_t *object, uint8_t *name, uint16_t object_id)
                           1164 ;	-----------------------------------------
                           1165 ;	 function object_instance_init
                           1166 ;	-----------------------------------------
   0000                    1167 _object_instance_init:
                    0007   1168 	ar7 = 0x07
                    0006   1169 	ar6 = 0x06
                    0005   1170 	ar5 = 0x05
                    0004   1171 	ar4 = 0x04
                    0003   1172 	ar3 = 0x03
                    0002   1173 	ar2 = 0x02
                    0001   1174 	ar1 = 0x01
                    0000   1175 	ar0 = 0x00
   0000 C0 82              1176 	push	dpl
   0002 C0 83              1177 	push	dph
   0004 C0 F0              1178 	push	b
   0006 05 81              1179 	inc	sp
   0008 05 81              1180 	inc	sp
   000A 05 81              1181 	inc	sp
                           1182 ;	object.c:14: if (object && name) {
   000C E5 81              1183 	mov	a,sp
   000E 24 FB              1184 	add	a,#0xfb
   0010 F8                 1185 	mov	r0,a
   0011 E6                 1186 	mov	a,@r0
   0012 08                 1187 	inc	r0
   0013 46                 1188 	orl	a,@r0
   0014 70 03              1189 	jnz	00110$
   0016 02s01r00           1190 	ljmp	00102$
   0019                    1191 00110$:
   0019 E5 81              1192 	mov	a,sp
   001B 24 F5              1193 	add	a,#0xf5
   001D F8                 1194 	mov	r0,a
   001E E6                 1195 	mov	a,@r0
   001F 08                 1196 	inc	r0
   0020 46                 1197 	orl	a,@r0
   0021 70 03              1198 	jnz	00111$
   0023 02s01r00           1199 	ljmp	00102$
   0026                    1200 00111$:
                           1201 ;	object.c:15: strncpy(object->name, name, MAX_OBJECT_NAME_LEN);
   0026 E5 81              1202 	mov	a,sp
   0028 24 F5              1203 	add	a,#0xf5
   002A F8                 1204 	mov	r0,a
   002B A9 81              1205 	mov	r1,sp
   002D 19                 1206 	dec	r1
   002E 19                 1207 	dec	r1
   002F E6                 1208 	mov	a,@r0
   0030 F7                 1209 	mov	@r1,a
   0031 08                 1210 	inc	r0
   0032 09                 1211 	inc	r1
   0033 E6                 1212 	mov	a,@r0
   0034 F7                 1213 	mov	@r1,a
   0035 08                 1214 	inc	r0
   0036 09                 1215 	inc	r1
   0037 E6                 1216 	mov	a,@r0
   0038 F7                 1217 	mov	@r1,a
   0039 E5 81              1218 	mov	a,sp
   003B 24 FB              1219 	add	a,#0xfb
   003D F8                 1220 	mov	r0,a
   003E 74 06              1221 	mov	a,#0x06
   0040 26                 1222 	add	a,@r0
   0041 FD                 1223 	mov	r5,a
   0042 E4                 1224 	clr	a
   0043 08                 1225 	inc	r0
   0044 36                 1226 	addc	a,@r0
   0045 FE                 1227 	mov	r6,a
   0046 08                 1228 	inc	r0
   0047 86 07              1229 	mov	ar7,@r0
   0049 8D 02              1230 	mov	ar2,r5
   004B 8E 03              1231 	mov	ar3,r6
   004D 8F 04              1232 	mov	ar4,r7
   004F C0 07              1233 	push	ar7
   0051 C0 06              1234 	push	ar6
   0053 C0 05              1235 	push	ar5
   0055 74 08              1236 	mov	a,#0x08
   0057 C0 E0              1237 	push	acc
   0059 E4                 1238 	clr	a
   005A C0 E0              1239 	push	acc
   005C E5 81              1240 	mov	a,sp
   005E 24 F9              1241 	add	a,#0xf9
   0060 F8                 1242 	mov	r0,a
   0061 E6                 1243 	mov	a,@r0
   0062 C0 E0              1244 	push	acc
   0064 08                 1245 	inc	r0
   0065 E6                 1246 	mov	a,@r0
   0066 C0 E0              1247 	push	acc
   0068 08                 1248 	inc	r0
   0069 E6                 1249 	mov	a,@r0
   006A C0 E0              1250 	push	acc
   006C 8A 82              1251 	mov	dpl,r2
   006E 8B 83              1252 	mov	dph,r3
   0070 8C F0              1253 	mov	b,r4
   0072 78r00              1254 	mov	r0,#_strncpy
   0074 79s00              1255 	mov	r1,#(_strncpy >> 8)
   0076 7As00              1256 	mov	r2,#(_strncpy >> 16)
   0078 12s00r00           1257 	lcall	__sdcc_banked_call
   007B E5 81              1258 	mov	a,sp
   007D 24 FB              1259 	add	a,#0xfb
   007F F5 81              1260 	mov	sp,a
   0081 D0 05              1261 	pop	ar5
   0083 D0 06              1262 	pop	ar6
   0085 D0 07              1263 	pop	ar7
                           1264 ;	object.c:16: object->object_id = object_id;
   0087 E5 81              1265 	mov	a,sp
   0089 24 FB              1266 	add	a,#0xfb
   008B F8                 1267 	mov	r0,a
   008C 74 0E              1268 	mov	a,#0x0E
   008E 26                 1269 	add	a,@r0
   008F FA                 1270 	mov	r2,a
   0090 E4                 1271 	clr	a
   0091 08                 1272 	inc	r0
   0092 36                 1273 	addc	a,@r0
   0093 FB                 1274 	mov	r3,a
   0094 08                 1275 	inc	r0
   0095 86 04              1276 	mov	ar4,@r0
   0097 8A 82              1277 	mov	dpl,r2
   0099 8B 83              1278 	mov	dph,r3
   009B 8C F0              1279 	mov	b,r4
   009D E5 81              1280 	mov	a,sp
   009F 24 F3              1281 	add	a,#0xf3
   00A1 F8                 1282 	mov	r0,a
   00A2 E6                 1283 	mov	a,@r0
   00A3 12s00r00           1284 	lcall	__gptrput
   00A6 A3                 1285 	inc	dptr
   00A7 08                 1286 	inc	r0
   00A8 E6                 1287 	mov	a,@r0
   00A9 12s00r00           1288 	lcall	__gptrput
                           1289 ;	object.c:17: PRINTF("obj id:%d, name:%s\n", object->object_id, object->name);
   00AC C0 05              1290 	push	ar5
   00AE C0 06              1291 	push	ar6
   00B0 C0 07              1292 	push	ar7
   00B2 E5 81              1293 	mov	a,sp
   00B4 24 F0              1294 	add	a,#0xf0
   00B6 F8                 1295 	mov	r0,a
   00B7 E6                 1296 	mov	a,@r0
   00B8 C0 E0              1297 	push	acc
   00BA 08                 1298 	inc	r0
   00BB E6                 1299 	mov	a,@r0
   00BC C0 E0              1300 	push	acc
   00BE 74r00              1301 	mov	a,#__str_0
   00C0 C0 E0              1302 	push	acc
   00C2 74s00              1303 	mov	a,#(__str_0 >> 8)
   00C4 C0 E0              1304 	push	acc
   00C6 74 80              1305 	mov	a,#0x80
   00C8 C0 E0              1306 	push	acc
   00CA 78r00              1307 	mov	r0,#_printf
   00CC 79s00              1308 	mov	r1,#(_printf >> 8)
   00CE 7As00              1309 	mov	r2,#(_printf >> 16)
   00D0 12s00r00           1310 	lcall	__sdcc_banked_call
   00D3 E5 81              1311 	mov	a,sp
   00D5 24 F8              1312 	add	a,#0xf8
                           1313 ;	object.c:18: object->res_list = NULL;
   00D7 F5 81              1314 	mov	sp,a
   00D9 24 FB              1315 	add	a,#0xfb
   00DB F8                 1316 	mov	r0,a
   00DC 74 10              1317 	mov	a,#0x10
   00DE 26                 1318 	add	a,@r0
   00DF FD                 1319 	mov	r5,a
   00E0 E4                 1320 	clr	a
   00E1 08                 1321 	inc	r0
   00E2 36                 1322 	addc	a,@r0
   00E3 FE                 1323 	mov	r6,a
   00E4 08                 1324 	inc	r0
   00E5 86 07              1325 	mov	ar7,@r0
   00E7 8D 82              1326 	mov	dpl,r5
   00E9 8E 83              1327 	mov	dph,r6
   00EB 8F F0              1328 	mov	b,r7
   00ED E4                 1329 	clr	a
   00EE 12s00r00           1330 	lcall	__gptrput
   00F1 A3                 1331 	inc	dptr
   00F2 E4                 1332 	clr	a
   00F3 12s00r00           1333 	lcall	__gptrput
   00F6 A3                 1334 	inc	dptr
   00F7 E4                 1335 	clr	a
   00F8 12s00r00           1336 	lcall	__gptrput
                           1337 ;	object.c:19: return SUCCESS;
   00FB 90 00 01           1338 	mov	dptr,#0x0001
   00FE 80 03              1339 	sjmp	00104$
   0100                    1340 00102$:
                           1341 ;	object.c:22: return FAIL;
   0100 90 00 00           1342 	mov	dptr,#0x0000
   0103                    1343 00104$:
   0103 E5 81              1344 	mov	a,sp
   0105 24 FA              1345 	add	a,#0xFA
   0107 F5 81              1346 	mov	sp,a
   0109 02s00r00           1347 	ljmp	__sdcc_banked_ret
                           1348 ;------------------------------------------------------------
                           1349 ;Allocation info for local variables in function 'object_instance_insert_resource'
                           1350 ;------------------------------------------------------------
                           1351 ;resource                  Allocated to stack - sp -13
                           1352 ;object                    Allocated to stack - sp -7
                           1353 ;tmp                       Allocated to registers r5 r6 r7 
                           1354 ;sloc0                     Allocated to stack - sp -4
                           1355 ;sloc1                     Allocated to stack - sp -1
                           1356 ;------------------------------------------------------------
                           1357 ;	object.c:25: int16_t object_instance_insert_resource(object_instance_t *object, resource_instance_t *resource)
                           1358 ;	-----------------------------------------
                           1359 ;	 function object_instance_insert_resource
                           1360 ;	-----------------------------------------
   010C                    1361 _object_instance_insert_resource:
   010C C0 82              1362 	push	dpl
   010E C0 83              1363 	push	dph
   0110 C0 F0              1364 	push	b
   0112 E5 81              1365 	mov	a,sp
   0114 24 05              1366 	add	a,#0x05
                           1367 ;	object.c:29: if (object && resource) {
   0116 F5 81              1368 	mov	sp,a
   0118 24 F9              1369 	add	a,#0xf9
   011A F8                 1370 	mov	r0,a
   011B E6                 1371 	mov	a,@r0
   011C 08                 1372 	inc	r0
   011D 46                 1373 	orl	a,@r0
   011E 70 03              1374 	jnz	00122$
   0120 02s02rA7           1375 	ljmp	00107$
   0123                    1376 00122$:
   0123 E5 81              1377 	mov	a,sp
   0125 24 F3              1378 	add	a,#0xf3
   0127 F8                 1379 	mov	r0,a
   0128 E6                 1380 	mov	a,@r0
   0129 08                 1381 	inc	r0
   012A 46                 1382 	orl	a,@r0
   012B 70 03              1383 	jnz	00123$
   012D 02s02rA7           1384 	ljmp	00107$
   0130                    1385 00123$:
                           1386 ;	object.c:30: tmp = object->res_list;
   0130 E5 81              1387 	mov	a,sp
   0132 24 F9              1388 	add	a,#0xf9
   0134 F8                 1389 	mov	r0,a
   0135 74 10              1390 	mov	a,#0x10
   0137 26                 1391 	add	a,@r0
   0138 FA                 1392 	mov	r2,a
   0139 E4                 1393 	clr	a
   013A 08                 1394 	inc	r0
   013B 36                 1395 	addc	a,@r0
   013C FB                 1396 	mov	r3,a
   013D 08                 1397 	inc	r0
   013E 86 04              1398 	mov	ar4,@r0
   0140 8A 82              1399 	mov	dpl,r2
   0142 8B 83              1400 	mov	dph,r3
   0144 8C F0              1401 	mov	b,r4
   0146 E5 81              1402 	mov	a,sp
   0148 24 FC              1403 	add	a,#0xfc
   014A F8                 1404 	mov	r0,a
   014B 12s00r00           1405 	lcall	__gptrget
   014E F6                 1406 	mov	@r0,a
   014F A3                 1407 	inc	dptr
   0150 12s00r00           1408 	lcall	__gptrget
   0153 08                 1409 	inc	r0
   0154 F6                 1410 	mov	@r0,a
   0155 A3                 1411 	inc	dptr
   0156 12s00r00           1412 	lcall	__gptrget
   0159 08                 1413 	inc	r0
   015A F6                 1414 	mov	@r0,a
   015B E5 81              1415 	mov	a,sp
   015D 24 FC              1416 	add	a,#0xfc
   015F F8                 1417 	mov	r0,a
   0160 86 05              1418 	mov	ar5,@r0
   0162 08                 1419 	inc	r0
   0163 86 06              1420 	mov	ar6,@r0
   0165 08                 1421 	inc	r0
   0166 86 07              1422 	mov	ar7,@r0
                           1423 ;	object.c:31: while(tmp) {
   0168                    1424 00103$:
   0168 ED                 1425 	mov	a,r5
   0169 4E                 1426 	orl	a,r6
   016A 70 03              1427 	jnz	00124$
   016C 02s02r3E           1428 	ljmp	00105$
   016F                    1429 00124$:
                           1430 ;	object.c:32: if(resource->resource_type->resource_id == tmp->resource_type->resource_id) {
   016F C0 02              1431 	push	ar2
   0171 C0 03              1432 	push	ar3
   0173 C0 04              1433 	push	ar4
   0175 E5 81              1434 	mov	a,sp
   0177 24 F0              1435 	add	a,#0xf0
   0179 F8                 1436 	mov	r0,a
   017A 86 02              1437 	mov	ar2,@r0
   017C 08                 1438 	inc	r0
   017D 86 03              1439 	mov	ar3,@r0
   017F 08                 1440 	inc	r0
   0180 86 04              1441 	mov	ar4,@r0
   0182 74 06              1442 	mov	a,#0x06
   0184 2A                 1443 	add	a,r2
   0185 FA                 1444 	mov	r2,a
   0186 E4                 1445 	clr	a
   0187 3B                 1446 	addc	a,r3
   0188 FB                 1447 	mov	r3,a
   0189 8A 82              1448 	mov	dpl,r2
   018B 8B 83              1449 	mov	dph,r3
   018D 8C F0              1450 	mov	b,r4
   018F 12s00r00           1451 	lcall	__gptrget
   0192 FA                 1452 	mov	r2,a
   0193 A3                 1453 	inc	dptr
   0194 12s00r00           1454 	lcall	__gptrget
   0197 FB                 1455 	mov	r3,a
   0198 A3                 1456 	inc	dptr
   0199 12s00r00           1457 	lcall	__gptrget
   019C FC                 1458 	mov	r4,a
   019D 8A 82              1459 	mov	dpl,r2
   019F 8B 83              1460 	mov	dph,r3
   01A1 8C F0              1461 	mov	b,r4
   01A3 E5 81              1462 	mov	a,sp
   01A5 24 FC              1463 	add	a,#0xfc
   01A7 F8                 1464 	mov	r0,a
   01A8 12s00r00           1465 	lcall	__gptrget
   01AB F6                 1466 	mov	@r0,a
   01AC A3                 1467 	inc	dptr
   01AD 12s00r00           1468 	lcall	__gptrget
   01B0 08                 1469 	inc	r0
   01B1 F6                 1470 	mov	@r0,a
   01B2 74 06              1471 	mov	a,#0x06
   01B4 2D                 1472 	add	a,r5
   01B5 FA                 1473 	mov	r2,a
   01B6 E4                 1474 	clr	a
   01B7 3E                 1475 	addc	a,r6
   01B8 FB                 1476 	mov	r3,a
   01B9 8F 04              1477 	mov	ar4,r7
   01BB 8A 82              1478 	mov	dpl,r2
   01BD 8B 83              1479 	mov	dph,r3
   01BF 8C F0              1480 	mov	b,r4
   01C1 12s00r00           1481 	lcall	__gptrget
   01C4 FA                 1482 	mov	r2,a
   01C5 A3                 1483 	inc	dptr
   01C6 12s00r00           1484 	lcall	__gptrget
   01C9 FB                 1485 	mov	r3,a
   01CA A3                 1486 	inc	dptr
   01CB 12s00r00           1487 	lcall	__gptrget
   01CE FC                 1488 	mov	r4,a
   01CF 8A 82              1489 	mov	dpl,r2
   01D1 8B 83              1490 	mov	dph,r3
   01D3 8C F0              1491 	mov	b,r4
   01D5 12s00r00           1492 	lcall	__gptrget
   01D8 FA                 1493 	mov	r2,a
   01D9 A3                 1494 	inc	dptr
   01DA 12s00r00           1495 	lcall	__gptrget
   01DD FB                 1496 	mov	r3,a
   01DE E5 81              1497 	mov	a,sp
   01E0 24 FC              1498 	add	a,#0xfc
   01E2 F8                 1499 	mov	r0,a
   01E3 E6                 1500 	mov	a,@r0
   01E4 B5 02 07           1501 	cjne	a,ar2,00125$
   01E7 08                 1502 	inc	r0
   01E8 E6                 1503 	mov	a,@r0
   01E9 B5 03 02           1504 	cjne	a,ar3,00125$
   01EC 80 08              1505 	sjmp	00126$
   01EE                    1506 00125$:
   01EE D0 04              1507 	pop	ar4
   01F0 D0 03              1508 	pop	ar3
   01F2 D0 02              1509 	pop	ar2
   01F4 80 31              1510 	sjmp	00102$
   01F6                    1511 00126$:
   01F6 D0 04              1512 	pop	ar4
   01F8 D0 03              1513 	pop	ar3
   01FA D0 02              1514 	pop	ar2
                           1515 ;	object.c:33: PRINTF("already has the same name resource, id:%d\n", resource->resource_type->resource_id);
   01FC A8 81              1516 	mov	r0,sp
   01FE 18                 1517 	dec	r0
   01FF E6                 1518 	mov	a,@r0
   0200 C0 E0              1519 	push	acc
   0202 08                 1520 	inc	r0
   0203 E6                 1521 	mov	a,@r0
   0204 C0 E0              1522 	push	acc
   0206 74r14              1523 	mov	a,#__str_1
   0208 C0 E0              1524 	push	acc
   020A 74s00              1525 	mov	a,#(__str_1 >> 8)
   020C C0 E0              1526 	push	acc
   020E 74 80              1527 	mov	a,#0x80
   0210 C0 E0              1528 	push	acc
   0212 78r00              1529 	mov	r0,#_printf
   0214 79s00              1530 	mov	r1,#(_printf >> 8)
   0216 7As00              1531 	mov	r2,#(_printf >> 16)
   0218 12s00r00           1532 	lcall	__sdcc_banked_call
   021B E5 81              1533 	mov	a,sp
   021D 24 FB              1534 	add	a,#0xfb
   021F F5 81              1535 	mov	sp,a
                           1536 ;	object.c:34: return 0;
   0221 90 00 00           1537 	mov	dptr,#0x0000
   0224 02s02rC5           1538 	ljmp	00110$
   0227                    1539 00102$:
                           1540 ;	object.c:36: tmp = tmp->next;
   0227 8D 82              1541 	mov	dpl,r5
   0229 8E 83              1542 	mov	dph,r6
   022B 8F F0              1543 	mov	b,r7
   022D 12s00r00           1544 	lcall	__gptrget
   0230 FD                 1545 	mov	r5,a
   0231 A3                 1546 	inc	dptr
   0232 12s00r00           1547 	lcall	__gptrget
   0235 FE                 1548 	mov	r6,a
   0236 A3                 1549 	inc	dptr
   0237 12s00r00           1550 	lcall	__gptrget
   023A FF                 1551 	mov	r7,a
   023B 02s01r68           1552 	ljmp	00103$
   023E                    1553 00105$:
                           1554 ;	object.c:38: resource->next = object->res_list;
   023E E5 81              1555 	mov	a,sp
   0240 24 F3              1556 	add	a,#0xf3
   0242 F8                 1557 	mov	r0,a
   0243 86 05              1558 	mov	ar5,@r0
   0245 08                 1559 	inc	r0
   0246 86 06              1560 	mov	ar6,@r0
   0248 08                 1561 	inc	r0
   0249 86 07              1562 	mov	ar7,@r0
   024B 8D 82              1563 	mov	dpl,r5
   024D 8E 83              1564 	mov	dph,r6
   024F 8F F0              1565 	mov	b,r7
   0251 E5 81              1566 	mov	a,sp
   0253 24 FC              1567 	add	a,#0xfc
   0255 F8                 1568 	mov	r0,a
   0256 E6                 1569 	mov	a,@r0
   0257 12s00r00           1570 	lcall	__gptrput
   025A A3                 1571 	inc	dptr
   025B 08                 1572 	inc	r0
   025C E6                 1573 	mov	a,@r0
   025D 12s00r00           1574 	lcall	__gptrput
   0260 A3                 1575 	inc	dptr
   0261 08                 1576 	inc	r0
   0262 E6                 1577 	mov	a,@r0
   0263 12s00r00           1578 	lcall	__gptrput
                           1579 ;	object.c:39: object->res_list = resource;
   0266 8A 82              1580 	mov	dpl,r2
   0268 8B 83              1581 	mov	dph,r3
   026A 8C F0              1582 	mov	b,r4
   026C ED                 1583 	mov	a,r5
   026D 12s00r00           1584 	lcall	__gptrput
   0270 A3                 1585 	inc	dptr
   0271 EE                 1586 	mov	a,r6
   0272 12s00r00           1587 	lcall	__gptrput
   0275 A3                 1588 	inc	dptr
   0276 EF                 1589 	mov	a,r7
   0277 12s00r00           1590 	lcall	__gptrput
                           1591 ;	object.c:40: resource->parent_obj = object;
   027A 74 03              1592 	mov	a,#0x03
   027C 2D                 1593 	add	a,r5
   027D FD                 1594 	mov	r5,a
   027E E4                 1595 	clr	a
   027F 3E                 1596 	addc	a,r6
   0280 FE                 1597 	mov	r6,a
   0281 E5 81              1598 	mov	a,sp
   0283 24 F9              1599 	add	a,#0xf9
   0285 F8                 1600 	mov	r0,a
   0286 86 02              1601 	mov	ar2,@r0
   0288 08                 1602 	inc	r0
   0289 86 03              1603 	mov	ar3,@r0
   028B 08                 1604 	inc	r0
   028C 86 04              1605 	mov	ar4,@r0
   028E 8D 82              1606 	mov	dpl,r5
   0290 8E 83              1607 	mov	dph,r6
   0292 8F F0              1608 	mov	b,r7
   0294 EA                 1609 	mov	a,r2
   0295 12s00r00           1610 	lcall	__gptrput
   0298 A3                 1611 	inc	dptr
   0299 EB                 1612 	mov	a,r3
   029A 12s00r00           1613 	lcall	__gptrput
   029D A3                 1614 	inc	dptr
   029E EC                 1615 	mov	a,r4
   029F 12s00r00           1616 	lcall	__gptrput
                           1617 ;	object.c:41: return SUCCESS;
   02A2 90 00 01           1618 	mov	dptr,#0x0001
   02A5 80 1E              1619 	sjmp	00110$
   02A7                    1620 00107$:
                           1621 ;	object.c:43: PRINTF("object is NULL\n");
   02A7 74r3F              1622 	mov	a,#__str_2
   02A9 C0 E0              1623 	push	acc
   02AB 74s00              1624 	mov	a,#(__str_2 >> 8)
   02AD C0 E0              1625 	push	acc
   02AF 74 80              1626 	mov	a,#0x80
   02B1 C0 E0              1627 	push	acc
   02B3 78r00              1628 	mov	r0,#_printf
   02B5 79s00              1629 	mov	r1,#(_printf >> 8)
   02B7 7As00              1630 	mov	r2,#(_printf >> 16)
   02B9 12s00r00           1631 	lcall	__sdcc_banked_call
   02BC 15 81              1632 	dec	sp
   02BE 15 81              1633 	dec	sp
   02C0 15 81              1634 	dec	sp
                           1635 ;	object.c:46: return FAIL;
   02C2 90 00 00           1636 	mov	dptr,#0x0000
   02C5                    1637 00110$:
   02C5 E5 81              1638 	mov	a,sp
   02C7 24 F8              1639 	add	a,#0xF8
   02C9 F5 81              1640 	mov	sp,a
   02CB 02s00r00           1641 	ljmp	__sdcc_banked_ret
                           1642 ;------------------------------------------------------------
                           1643 ;Allocation info for local variables in function 'object_instance_find_resource'
                           1644 ;------------------------------------------------------------
                           1645 ;resource_id               Allocated to stack - sp -4
                           1646 ;object                    Allocated to registers r5 r6 r7 
                           1647 ;tmp                       Allocated to registers r5 r6 r7 
                           1648 ;------------------------------------------------------------
                           1649 ;	object.c:49: resource_instance_t *object_instance_find_resource(object_instance_t *object, uint16_t resource_id)
                           1650 ;	-----------------------------------------
                           1651 ;	 function object_instance_find_resource
                           1652 ;	-----------------------------------------
   02CE                    1653 _object_instance_find_resource:
   02CE AD 82              1654 	mov	r5,dpl
   02D0 AE 83              1655 	mov	r6,dph
   02D2 AF F0              1656 	mov	r7,b
                           1657 ;	object.c:53: if (object) {
   02D4 ED                 1658 	mov	a,r5
   02D5 4E                 1659 	orl	a,r6
   02D6 70 03              1660 	jnz	00119$
   02D8 02s03r59           1661 	ljmp	00107$
   02DB                    1662 00119$:
                           1663 ;	object.c:54: tmp = object->res_list;
   02DB 74 10              1664 	mov	a,#0x10
   02DD 2D                 1665 	add	a,r5
   02DE FD                 1666 	mov	r5,a
   02DF E4                 1667 	clr	a
   02E0 3E                 1668 	addc	a,r6
   02E1 FE                 1669 	mov	r6,a
   02E2 8D 82              1670 	mov	dpl,r5
   02E4 8E 83              1671 	mov	dph,r6
   02E6 8F F0              1672 	mov	b,r7
   02E8 12s00r00           1673 	lcall	__gptrget
   02EB FD                 1674 	mov	r5,a
   02EC A3                 1675 	inc	dptr
   02ED 12s00r00           1676 	lcall	__gptrget
   02F0 FE                 1677 	mov	r6,a
   02F1 A3                 1678 	inc	dptr
   02F2 12s00r00           1679 	lcall	__gptrget
   02F5 FF                 1680 	mov	r7,a
                           1681 ;	object.c:55: while(tmp) {
   02F6                    1682 00103$:
   02F6 ED                 1683 	mov	a,r5
   02F7 4E                 1684 	orl	a,r6
   02F8 70 03              1685 	jnz	00120$
   02FA 02s03r7C           1686 	ljmp	00108$
   02FD                    1687 00120$:
                           1688 ;	object.c:56: if(tmp->resource_type->resource_id == resource_id) {
   02FD 74 06              1689 	mov	a,#0x06
   02FF 2D                 1690 	add	a,r5
   0300 FA                 1691 	mov	r2,a
   0301 E4                 1692 	clr	a
   0302 3E                 1693 	addc	a,r6
   0303 FB                 1694 	mov	r3,a
   0304 8F 04              1695 	mov	ar4,r7
   0306 8A 82              1696 	mov	dpl,r2
   0308 8B 83              1697 	mov	dph,r3
   030A 8C F0              1698 	mov	b,r4
   030C 12s00r00           1699 	lcall	__gptrget
   030F FA                 1700 	mov	r2,a
   0310 A3                 1701 	inc	dptr
   0311 12s00r00           1702 	lcall	__gptrget
   0314 FB                 1703 	mov	r3,a
   0315 A3                 1704 	inc	dptr
   0316 12s00r00           1705 	lcall	__gptrget
   0319 FC                 1706 	mov	r4,a
   031A 8A 82              1707 	mov	dpl,r2
   031C 8B 83              1708 	mov	dph,r3
   031E 8C F0              1709 	mov	b,r4
   0320 12s00r00           1710 	lcall	__gptrget
   0323 FA                 1711 	mov	r2,a
   0324 A3                 1712 	inc	dptr
   0325 12s00r00           1713 	lcall	__gptrget
   0328 FB                 1714 	mov	r3,a
   0329 E5 81              1715 	mov	a,sp
   032B 24 FC              1716 	add	a,#0xfc
   032D F8                 1717 	mov	r0,a
   032E E6                 1718 	mov	a,@r0
   032F B5 02 07           1719 	cjne	a,ar2,00121$
   0332 08                 1720 	inc	r0
   0333 E6                 1721 	mov	a,@r0
   0334 B5 03 02           1722 	cjne	a,ar3,00121$
   0337 80 02              1723 	sjmp	00122$
   0339                    1724 00121$:
   0339 80 08              1725 	sjmp	00102$
   033B                    1726 00122$:
                           1727 ;	object.c:57: return tmp;
   033B 8D 82              1728 	mov	dpl,r5
   033D 8E 83              1729 	mov	dph,r6
   033F 8F F0              1730 	mov	b,r7
   0341 80 3F              1731 	sjmp	00109$
   0343                    1732 00102$:
                           1733 ;	object.c:59: tmp = tmp->next;
   0343 8D 82              1734 	mov	dpl,r5
   0345 8E 83              1735 	mov	dph,r6
   0347 8F F0              1736 	mov	b,r7
   0349 12s00r00           1737 	lcall	__gptrget
   034C FD                 1738 	mov	r5,a
   034D A3                 1739 	inc	dptr
   034E 12s00r00           1740 	lcall	__gptrget
   0351 FE                 1741 	mov	r6,a
   0352 A3                 1742 	inc	dptr
   0353 12s00r00           1743 	lcall	__gptrget
   0356 FF                 1744 	mov	r7,a
   0357 80 9D              1745 	sjmp	00103$
   0359                    1746 00107$:
                           1747 ;	object.c:62: PRINTF("invalid object or resource name\n");
   0359 74r4F              1748 	mov	a,#__str_3
   035B C0 E0              1749 	push	acc
   035D 74s00              1750 	mov	a,#(__str_3 >> 8)
   035F C0 E0              1751 	push	acc
   0361 74 80              1752 	mov	a,#0x80
   0363 C0 E0              1753 	push	acc
   0365 78r00              1754 	mov	r0,#_printf
   0367 79s00              1755 	mov	r1,#(_printf >> 8)
   0369 7As00              1756 	mov	r2,#(_printf >> 16)
   036B 12s00r00           1757 	lcall	__sdcc_banked_call
   036E 15 81              1758 	dec	sp
   0370 15 81              1759 	dec	sp
   0372 15 81              1760 	dec	sp
                           1761 ;	object.c:63: return NULL;
   0374 90 00 00           1762 	mov	dptr,#0x0000
   0377 75 F0 00           1763 	mov	b,#0x00
   037A 80 06              1764 	sjmp	00109$
   037C                    1765 00108$:
                           1766 ;	object.c:66: return NULL;
   037C 90 00 00           1767 	mov	dptr,#0x0000
   037F 75 F0 00           1768 	mov	b,#0x00
   0382                    1769 00109$:
   0382 02s00r00           1770 	ljmp	__sdcc_banked_ret
                           1771 ;------------------------------------------------------------
                           1772 ;Allocation info for local variables in function 'object_add_subscriber'
                           1773 ;------------------------------------------------------------
                           1774 ;sub                       Allocated to stack - sp -11
                           1775 ;instance                  Allocated to stack - sp -5
                           1776 ;sloc0                     Allocated to stack - sp -2
                           1777 ;------------------------------------------------------------
                           1778 ;	object.c:70: int16_t object_add_subscriber(object_instance_t *instance, subscriber_t *sub)
                           1779 ;	-----------------------------------------
                           1780 ;	 function object_add_subscriber
                           1781 ;	-----------------------------------------
   0385                    1782 _object_add_subscriber:
   0385 C0 82              1783 	push	dpl
   0387 C0 83              1784 	push	dph
   0389 C0 F0              1785 	push	b
   038B 05 81              1786 	inc	sp
   038D 05 81              1787 	inc	sp
   038F 05 81              1788 	inc	sp
                           1789 ;	object.c:72: if (!instance || !sub) {
   0391 E5 81              1790 	mov	a,sp
   0393 24 FB              1791 	add	a,#0xfb
   0395 F8                 1792 	mov	r0,a
   0396 E6                 1793 	mov	a,@r0
   0397 08                 1794 	inc	r0
   0398 46                 1795 	orl	a,@r0
   0399 60 0A              1796 	jz	00101$
   039B E5 81              1797 	mov	a,sp
   039D 24 F5              1798 	add	a,#0xf5
   039F F8                 1799 	mov	r0,a
   03A0 E6                 1800 	mov	a,@r0
   03A1 08                 1801 	inc	r0
   03A2 46                 1802 	orl	a,@r0
   03A3 70 06              1803 	jnz	00102$
   03A5                    1804 00101$:
                           1805 ;	object.c:73: return FAIL;
   03A5 90 00 00           1806 	mov	dptr,#0x0000
   03A8 02s04r41           1807 	ljmp	00104$
   03AB                    1808 00102$:
                           1809 ;	object.c:76: sub->next = instance->sub_list;
   03AB E5 81              1810 	mov	a,sp
   03AD 24 F5              1811 	add	a,#0xf5
   03AF F8                 1812 	mov	r0,a
   03B0 86 02              1813 	mov	ar2,@r0
   03B2 08                 1814 	inc	r0
   03B3 86 03              1815 	mov	ar3,@r0
   03B5 08                 1816 	inc	r0
   03B6 86 04              1817 	mov	ar4,@r0
   03B8 E5 81              1818 	mov	a,sp
   03BA 24 FB              1819 	add	a,#0xfb
   03BC F8                 1820 	mov	r0,a
   03BD A9 81              1821 	mov	r1,sp
   03BF 19                 1822 	dec	r1
   03C0 19                 1823 	dec	r1
   03C1 74 13              1824 	mov	a,#0x13
   03C3 26                 1825 	add	a,@r0
   03C4 F7                 1826 	mov	@r1,a
   03C5 E4                 1827 	clr	a
   03C6 08                 1828 	inc	r0
   03C7 36                 1829 	addc	a,@r0
   03C8 09                 1830 	inc	r1
   03C9 F7                 1831 	mov	@r1,a
   03CA 08                 1832 	inc	r0
   03CB 09                 1833 	inc	r1
   03CC E6                 1834 	mov	a,@r0
   03CD F7                 1835 	mov	@r1,a
   03CE A8 81              1836 	mov	r0,sp
   03D0 18                 1837 	dec	r0
   03D1 18                 1838 	dec	r0
   03D2 86 82              1839 	mov	dpl,@r0
   03D4 08                 1840 	inc	r0
   03D5 86 83              1841 	mov	dph,@r0
   03D7 08                 1842 	inc	r0
   03D8 86 F0              1843 	mov	b,@r0
   03DA 12s00r00           1844 	lcall	__gptrget
   03DD FD                 1845 	mov	r5,a
   03DE A3                 1846 	inc	dptr
   03DF 12s00r00           1847 	lcall	__gptrget
   03E2 FE                 1848 	mov	r6,a
   03E3 A3                 1849 	inc	dptr
   03E4 12s00r00           1850 	lcall	__gptrget
   03E7 FF                 1851 	mov	r7,a
   03E8 8A 82              1852 	mov	dpl,r2
   03EA 8B 83              1853 	mov	dph,r3
   03EC 8C F0              1854 	mov	b,r4
   03EE ED                 1855 	mov	a,r5
   03EF 12s00r00           1856 	lcall	__gptrput
   03F2 A3                 1857 	inc	dptr
   03F3 EE                 1858 	mov	a,r6
   03F4 12s00r00           1859 	lcall	__gptrput
   03F7 A3                 1860 	inc	dptr
   03F8 EF                 1861 	mov	a,r7
   03F9 12s00r00           1862 	lcall	__gptrput
                           1863 ;	object.c:77: instance->sub_list = sub;
   03FC A8 81              1864 	mov	r0,sp
   03FE 18                 1865 	dec	r0
   03FF 18                 1866 	dec	r0
   0400 86 82              1867 	mov	dpl,@r0
   0402 08                 1868 	inc	r0
   0403 86 83              1869 	mov	dph,@r0
   0405 08                 1870 	inc	r0
   0406 86 F0              1871 	mov	b,@r0
   0408 EA                 1872 	mov	a,r2
   0409 12s00r00           1873 	lcall	__gptrput
   040C A3                 1874 	inc	dptr
   040D EB                 1875 	mov	a,r3
   040E 12s00r00           1876 	lcall	__gptrput
   0411 A3                 1877 	inc	dptr
   0412 EC                 1878 	mov	a,r4
   0413 12s00r00           1879 	lcall	__gptrput
                           1880 ;	object.c:78: sub->publisher = instance;
   0416 74 03              1881 	mov	a,#0x03
   0418 2A                 1882 	add	a,r2
   0419 FA                 1883 	mov	r2,a
   041A E4                 1884 	clr	a
   041B 3B                 1885 	addc	a,r3
   041C FB                 1886 	mov	r3,a
   041D E5 81              1887 	mov	a,sp
   041F 24 FB              1888 	add	a,#0xfb
   0421 F8                 1889 	mov	r0,a
   0422 86 05              1890 	mov	ar5,@r0
   0424 08                 1891 	inc	r0
   0425 86 06              1892 	mov	ar6,@r0
   0427 08                 1893 	inc	r0
   0428 86 07              1894 	mov	ar7,@r0
   042A 8A 82              1895 	mov	dpl,r2
   042C 8B 83              1896 	mov	dph,r3
   042E 8C F0              1897 	mov	b,r4
   0430 ED                 1898 	mov	a,r5
   0431 12s00r00           1899 	lcall	__gptrput
   0434 A3                 1900 	inc	dptr
   0435 EE                 1901 	mov	a,r6
   0436 12s00r00           1902 	lcall	__gptrput
   0439 A3                 1903 	inc	dptr
   043A EF                 1904 	mov	a,r7
   043B 12s00r00           1905 	lcall	__gptrput
                           1906 ;	object.c:80: return SUCCESS;
   043E 90 00 01           1907 	mov	dptr,#0x0001
   0441                    1908 00104$:
   0441 E5 81              1909 	mov	a,sp
   0443 24 FA              1910 	add	a,#0xFA
   0445 F5 81              1911 	mov	sp,a
   0447 02s00r00           1912 	ljmp	__sdcc_banked_ret
                           1913 ;------------------------------------------------------------
                           1914 ;Allocation info for local variables in function 'object_remove_subscriber'
                           1915 ;------------------------------------------------------------
                           1916 ;ip_addr                   Allocated to stack - sp -11
                           1917 ;instance                  Allocated to registers r5 r6 r7 
                           1918 ;cur                       Allocated to stack - sp -5
                           1919 ;pre                       Allocated to stack - sp -2
                           1920 ;------------------------------------------------------------
                           1921 ;	object.c:83: int16_t object_remove_subscriber(object_instance_t *instance, uip_ip6addr_t *ip_addr)
                           1922 ;	-----------------------------------------
                           1923 ;	 function object_remove_subscriber
                           1924 ;	-----------------------------------------
   044A                    1925 _object_remove_subscriber:
   044A E5 81              1926 	mov	a,sp
   044C 24 06              1927 	add	a,#0x06
   044E F5 81              1928 	mov	sp,a
   0450 AD 82              1929 	mov	r5,dpl
   0452 AE 83              1930 	mov	r6,dph
   0454 AF F0              1931 	mov	r7,b
                           1932 ;	object.c:85: subscriber_t *cur = NULL, *pre = NULL;  
   0456 A8 81              1933 	mov	r0,sp
   0458 18                 1934 	dec	r0
   0459 18                 1935 	dec	r0
   045A E4                 1936 	clr	a
   045B F6                 1937 	mov	@r0,a
   045C 08                 1938 	inc	r0
   045D F6                 1939 	mov	@r0,a
   045E 08                 1940 	inc	r0
   045F 76 00              1941 	mov	@r0,#0x00
                           1942 ;	object.c:87: if (!instance || !ip_addr) {
   0461 ED                 1943 	mov	a,r5
   0462 4E                 1944 	orl	a,r6
   0463 60 0A              1945 	jz	00101$
   0465 E5 81              1946 	mov	a,sp
   0467 24 F5              1947 	add	a,#0xf5
   0469 F8                 1948 	mov	r0,a
   046A E6                 1949 	mov	a,@r0
   046B 08                 1950 	inc	r0
   046C 46                 1951 	orl	a,@r0
   046D 70 06              1952 	jnz	00102$
   046F                    1953 00101$:
                           1954 ;	object.c:88: return FAIL;
   046F 90 00 00           1955 	mov	dptr,#0x0000
   0472 02s05rC6           1956 	ljmp	00112$
   0475                    1957 00102$:
                           1958 ;	object.c:91: cur = instance->sub_list;
   0475 74 13              1959 	mov	a,#0x13
   0477 2D                 1960 	add	a,r5
   0478 FD                 1961 	mov	r5,a
   0479 E4                 1962 	clr	a
   047A 3E                 1963 	addc	a,r6
   047B FE                 1964 	mov	r6,a
   047C 8D 82              1965 	mov	dpl,r5
   047E 8E 83              1966 	mov	dph,r6
   0480 8F F0              1967 	mov	b,r7
   0482 12s00r00           1968 	lcall	__gptrget
   0485 FC                 1969 	mov	r4,a
   0486 A3                 1970 	inc	dptr
   0487 12s00r00           1971 	lcall	__gptrget
   048A FB                 1972 	mov	r3,a
   048B A3                 1973 	inc	dptr
   048C 12s00r00           1974 	lcall	__gptrget
   048F FA                 1975 	mov	r2,a
   0490 E5 81              1976 	mov	a,sp
   0492 24 FB              1977 	add	a,#0xfb
   0494 F8                 1978 	mov	r0,a
   0495 A6 04              1979 	mov	@r0,ar4
   0497 08                 1980 	inc	r0
   0498 A6 03              1981 	mov	@r0,ar3
   049A 08                 1982 	inc	r0
   049B A6 02              1983 	mov	@r0,ar2
                           1984 ;	object.c:92: while(cur) {
   049D                    1985 00109$:
   049D E5 81              1986 	mov	a,sp
   049F 24 FB              1987 	add	a,#0xfb
   04A1 F8                 1988 	mov	r0,a
   04A2 E6                 1989 	mov	a,@r0
   04A3 08                 1990 	inc	r0
   04A4 46                 1991 	orl	a,@r0
   04A5 70 03              1992 	jnz	00126$
   04A7 02s05rC3           1993 	ljmp	00111$
   04AA                    1994 00126$:
                           1995 ;	object.c:93: if(!memcmp(&cur->ip6_addr, ip_addr, sizeof(uip_ip6addr_t))) {
   04AA C0 05              1996 	push	ar5
   04AC C0 06              1997 	push	ar6
   04AE C0 07              1998 	push	ar7
   04B0 E5 81              1999 	mov	a,sp
   04B2 24 F2              2000 	add	a,#0xf2
   04B4 F8                 2001 	mov	r0,a
   04B5 86 05              2002 	mov	ar5,@r0
   04B7 08                 2003 	inc	r0
   04B8 86 06              2004 	mov	ar6,@r0
   04BA 08                 2005 	inc	r0
   04BB 86 07              2006 	mov	ar7,@r0
   04BD E5 81              2007 	mov	a,sp
   04BF 24 F8              2008 	add	a,#0xf8
   04C1 F8                 2009 	mov	r0,a
   04C2 74 06              2010 	mov	a,#0x06
   04C4 26                 2011 	add	a,@r0
   04C5 FA                 2012 	mov	r2,a
   04C6 E4                 2013 	clr	a
   04C7 08                 2014 	inc	r0
   04C8 36                 2015 	addc	a,@r0
   04C9 FB                 2016 	mov	r3,a
   04CA 08                 2017 	inc	r0
   04CB 86 04              2018 	mov	ar4,@r0
   04CD C0 05              2019 	push	ar5
   04CF 74 10              2020 	mov	a,#0x10
   04D1 C0 E0              2021 	push	acc
   04D3 E4                 2022 	clr	a
   04D4 C0 E0              2023 	push	acc
   04D6 C0 05              2024 	push	ar5
   04D8 C0 06              2025 	push	ar6
   04DA C0 07              2026 	push	ar7
   04DC 8A 82              2027 	mov	dpl,r2
   04DE 8B 83              2028 	mov	dph,r3
   04E0 8C F0              2029 	mov	b,r4
   04E2 78r00              2030 	mov	r0,#_memcmp
   04E4 79s00              2031 	mov	r1,#(_memcmp >> 8)
   04E6 7As00              2032 	mov	r2,#(_memcmp >> 16)
   04E8 12s00r00           2033 	lcall	__sdcc_banked_call
   04EB AE 82              2034 	mov	r6,dpl
   04ED AF 83              2035 	mov	r7,dph
   04EF E5 81              2036 	mov	a,sp
   04F1 24 FB              2037 	add	a,#0xfb
   04F3 F5 81              2038 	mov	sp,a
   04F5 D0 05              2039 	pop	ar5
   04F7 EE                 2040 	mov	a,r6
   04F8 4F                 2041 	orl	a,r7
   04F9 D0 07              2042 	pop	ar7
   04FB D0 06              2043 	pop	ar6
   04FD D0 05              2044 	pop	ar5
   04FF 60 03              2045 	jz	00127$
   0501 02s05r8E           2046 	ljmp	00108$
   0504                    2047 00127$:
                           2048 ;	object.c:94: if (!pre) {
   0504 A8 81              2049 	mov	r0,sp
   0506 18                 2050 	dec	r0
   0507 18                 2051 	dec	r0
   0508 E6                 2052 	mov	a,@r0
   0509 08                 2053 	inc	r0
   050A 46                 2054 	orl	a,@r0
   050B 70 31              2055 	jnz	00105$
                           2056 ;	object.c:95: instance->sub_list = cur->next;
   050D E5 81              2057 	mov	a,sp
   050F 24 FB              2058 	add	a,#0xfb
   0511 F8                 2059 	mov	r0,a
   0512 86 82              2060 	mov	dpl,@r0
   0514 08                 2061 	inc	r0
   0515 86 83              2062 	mov	dph,@r0
   0517 08                 2063 	inc	r0
   0518 86 F0              2064 	mov	b,@r0
   051A 12s00r00           2065 	lcall	__gptrget
   051D FA                 2066 	mov	r2,a
   051E A3                 2067 	inc	dptr
   051F 12s00r00           2068 	lcall	__gptrget
   0522 FB                 2069 	mov	r3,a
   0523 A3                 2070 	inc	dptr
   0524 12s00r00           2071 	lcall	__gptrget
   0527 FC                 2072 	mov	r4,a
   0528 8D 82              2073 	mov	dpl,r5
   052A 8E 83              2074 	mov	dph,r6
   052C 8F F0              2075 	mov	b,r7
   052E EA                 2076 	mov	a,r2
   052F 12s00r00           2077 	lcall	__gptrput
   0532 A3                 2078 	inc	dptr
   0533 EB                 2079 	mov	a,r3
   0534 12s00r00           2080 	lcall	__gptrput
   0537 A3                 2081 	inc	dptr
   0538 EC                 2082 	mov	a,r4
   0539 12s00r00           2083 	lcall	__gptrput
   053C 80 35              2084 	sjmp	00106$
   053E                    2085 00105$:
                           2086 ;	object.c:97: pre->next = cur->next;
   053E E5 81              2087 	mov	a,sp
   0540 24 FB              2088 	add	a,#0xfb
   0542 F8                 2089 	mov	r0,a
   0543 86 82              2090 	mov	dpl,@r0
   0545 08                 2091 	inc	r0
   0546 86 83              2092 	mov	dph,@r0
   0548 08                 2093 	inc	r0
   0549 86 F0              2094 	mov	b,@r0
   054B 12s00r00           2095 	lcall	__gptrget
   054E FA                 2096 	mov	r2,a
   054F A3                 2097 	inc	dptr
   0550 12s00r00           2098 	lcall	__gptrget
   0553 FB                 2099 	mov	r3,a
   0554 A3                 2100 	inc	dptr
   0555 12s00r00           2101 	lcall	__gptrget
   0558 FC                 2102 	mov	r4,a
   0559 A8 81              2103 	mov	r0,sp
   055B 18                 2104 	dec	r0
   055C 18                 2105 	dec	r0
   055D 86 82              2106 	mov	dpl,@r0
   055F 08                 2107 	inc	r0
   0560 86 83              2108 	mov	dph,@r0
   0562 08                 2109 	inc	r0
   0563 86 F0              2110 	mov	b,@r0
   0565 EA                 2111 	mov	a,r2
   0566 12s00r00           2112 	lcall	__gptrput
   0569 A3                 2113 	inc	dptr
   056A EB                 2114 	mov	a,r3
   056B 12s00r00           2115 	lcall	__gptrput
   056E A3                 2116 	inc	dptr
   056F EC                 2117 	mov	a,r4
   0570 12s00r00           2118 	lcall	__gptrput
   0573                    2119 00106$:
                           2120 ;	object.c:99: subscriber_free(cur); 
   0573 E5 81              2121 	mov	a,sp
   0575 24 FB              2122 	add	a,#0xfb
   0577 F8                 2123 	mov	r0,a
   0578 86 82              2124 	mov	dpl,@r0
   057A 08                 2125 	inc	r0
   057B 86 83              2126 	mov	dph,@r0
   057D 08                 2127 	inc	r0
   057E 86 F0              2128 	mov	b,@r0
   0580 78r00              2129 	mov	r0,#_subscriber_free
   0582 79s00              2130 	mov	r1,#(_subscriber_free >> 8)
   0584 7As00              2131 	mov	r2,#(_subscriber_free >> 16)
   0586 12s00r00           2132 	lcall	__sdcc_banked_call
                           2133 ;	object.c:100: return SUCCESS;
   0589 90 00 01           2134 	mov	dptr,#0x0001
   058C 80 38              2135 	sjmp	00112$
   058E                    2136 00108$:
                           2137 ;	object.c:102: pre = cur;
   058E E5 81              2138 	mov	a,sp
   0590 24 FB              2139 	add	a,#0xfb
   0592 F8                 2140 	mov	r0,a
   0593 A9 81              2141 	mov	r1,sp
   0595 19                 2142 	dec	r1
   0596 19                 2143 	dec	r1
   0597 E6                 2144 	mov	a,@r0
   0598 F7                 2145 	mov	@r1,a
   0599 08                 2146 	inc	r0
   059A 09                 2147 	inc	r1
   059B E6                 2148 	mov	a,@r0
   059C F7                 2149 	mov	@r1,a
   059D 08                 2150 	inc	r0
   059E 09                 2151 	inc	r1
   059F E6                 2152 	mov	a,@r0
   05A0 F7                 2153 	mov	@r1,a
                           2154 ;	object.c:103: cur = cur->next;
   05A1 E5 81              2155 	mov	a,sp
   05A3 24 FB              2156 	add	a,#0xfb
   05A5 F8                 2157 	mov	r0,a
   05A6 86 82              2158 	mov	dpl,@r0
   05A8 08                 2159 	inc	r0
   05A9 86 83              2160 	mov	dph,@r0
   05AB 08                 2161 	inc	r0
   05AC 86 F0              2162 	mov	b,@r0
   05AE 12s00r00           2163 	lcall	__gptrget
   05B1 18                 2164 	dec	r0
   05B2 18                 2165 	dec	r0
   05B3 F6                 2166 	mov	@r0,a
   05B4 A3                 2167 	inc	dptr
   05B5 12s00r00           2168 	lcall	__gptrget
   05B8 08                 2169 	inc	r0
   05B9 F6                 2170 	mov	@r0,a
   05BA A3                 2171 	inc	dptr
   05BB 12s00r00           2172 	lcall	__gptrget
   05BE 08                 2173 	inc	r0
   05BF F6                 2174 	mov	@r0,a
   05C0 02s04r9D           2175 	ljmp	00109$
   05C3                    2176 00111$:
                           2177 ;	object.c:106: return SUCCESS;
   05C3 90 00 01           2178 	mov	dptr,#0x0001
   05C6                    2179 00112$:
   05C6 E5 81              2180 	mov	a,sp
   05C8 24 FA              2181 	add	a,#0xFA
   05CA F5 81              2182 	mov	sp,a
   05CC 02s00r00           2183 	ljmp	__sdcc_banked_ret
                           2184 	.area CSEG    (CODE)
                           2185 	.area CONST   (CODE)
   0000                    2186 __str_0:
   0000 6F 62 6A 20 69 64  2187 	.ascii "obj id:%d, name:%s"
        3A 25 64 2C 20 6E
        61 6D 65 3A 25 73
   0012 0A                 2188 	.db 0x0A
   0013 00                 2189 	.db 0x00
   0014                    2190 __str_1:
   0014 61 6C 72 65 61 64  2191 	.ascii "already has the same name resource, id:%d"
        79 20 68 61 73 20
        74 68 65 20 73 61
        6D 65 20 6E 61 6D
        65 20 72 65 73 6F
        75 72 63 65 2C 20
        69 64 3A 25 64
   003D 0A                 2192 	.db 0x0A
   003E 00                 2193 	.db 0x00
   003F                    2194 __str_2:
   003F 6F 62 6A 65 63 74  2195 	.ascii "object is NULL"
        20 69 73 20 4E 55
        4C 4C
   004D 0A                 2196 	.db 0x0A
   004E 00                 2197 	.db 0x00
   004F                    2198 __str_3:
   004F 69 6E 76 61 6C 69  2199 	.ascii "invalid object or resource name"
        64 20 6F 62 6A 65
        63 74 20 6F 72 20
        72 65 73 6F 75 72
        63 65 20 6E 61 6D
        65
   006E 0A                 2200 	.db 0x0A
   006F 00                 2201 	.db 0x00
                           2202 	.area XINIT   (CODE)
                           2203 	.area CABS    (ABS,CODE)
