                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Oct 29 2014) (Linux)
                              4 ; This file was generated Thu Dec  3 09:42:06 2015
                              5 ;--------------------------------------------------------
                              6 	.module resource
                              7 	.optsdcc -mmcs51 --model-huge
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strcmp
                             13 	.globl _memcpy
                             14 	.globl _printf
                             15 	.globl _ACTIVE
                             16 	.globl _TX_BYTE
                             17 	.globl _RX_BYTE
                             18 	.globl _ERR
                             19 	.globl _FE
                             20 	.globl _SLAVE
                             21 	.globl _RE
                             22 	.globl _MODE
                             23 	.globl _T3OVFIF
                             24 	.globl _T3CH0IF
                             25 	.globl _T3CH1IF
                             26 	.globl _T4OVFIF
                             27 	.globl _T4CH0IF
                             28 	.globl _T4CH1IF
                             29 	.globl _OVFIM
                             30 	.globl _B_0
                             31 	.globl _B_1
                             32 	.globl _B_2
                             33 	.globl _B_3
                             34 	.globl _B_4
                             35 	.globl _B_5
                             36 	.globl _B_6
                             37 	.globl _B_7
                             38 	.globl _P2IF
                             39 	.globl _UTX0IF
                             40 	.globl _UTX1IF
                             41 	.globl _P1IF
                             42 	.globl _WDTIF
                             43 	.globl _ACC_0
                             44 	.globl _ACC_1
                             45 	.globl _ACC_2
                             46 	.globl _ACC_3
                             47 	.globl _ACC_4
                             48 	.globl _ACC_5
                             49 	.globl _ACC_6
                             50 	.globl _ACC_7
                             51 	.globl _P
                             52 	.globl _F1
                             53 	.globl _OV
                             54 	.globl _RS0
                             55 	.globl _RS1
                             56 	.globl _F0
                             57 	.globl _AC
                             58 	.globl _CY
                             59 	.globl _DMAIF
                             60 	.globl _T1IF
                             61 	.globl _T2IF
                             62 	.globl _T3IF
                             63 	.globl _T4IF
                             64 	.globl _P0IF
                             65 	.globl _STIF
                             66 	.globl _DMAIE
                             67 	.globl _T1IE
                             68 	.globl _T2IE
                             69 	.globl _T3IE
                             70 	.globl _T4IE
                             71 	.globl _P0IE
                             72 	.globl _RFERRIE
                             73 	.globl _ADCIE
                             74 	.globl _URX0IE
                             75 	.globl _URX1IE
                             76 	.globl _ENCIE
                             77 	.globl _STIE
                             78 	.globl _EA
                             79 	.globl _P2_0
                             80 	.globl _P2_1
                             81 	.globl _P2_2
                             82 	.globl _P2_3
                             83 	.globl _P2_4
                             84 	.globl _P2_5
                             85 	.globl _P2_6
                             86 	.globl _P2_7
                             87 	.globl _ENCIF_0
                             88 	.globl _ENCIF_1
                             89 	.globl _P1_0
                             90 	.globl _P1_1
                             91 	.globl _P1_2
                             92 	.globl _P1_3
                             93 	.globl _P1_4
                             94 	.globl _P1_5
                             95 	.globl _P1_6
                             96 	.globl _P1_7
                             97 	.globl _IT0
                             98 	.globl _RFERRIF
                             99 	.globl _IT1
                            100 	.globl _URX0IF
                            101 	.globl _ADCIF
                            102 	.globl _URX1IF
                            103 	.globl _P0_0
                            104 	.globl _P0_1
                            105 	.globl _P0_2
                            106 	.globl _P0_3
                            107 	.globl _P0_4
                            108 	.globl _P0_5
                            109 	.globl _P0_6
                            110 	.globl _P0_7
                            111 	.globl _WDCTL
                            112 	.globl _U1GCR
                            113 	.globl _U1UCR
                            114 	.globl _U1BAUD
                            115 	.globl _U1DBUF
                            116 	.globl _U1CSR
                            117 	.globl _U0GCR
                            118 	.globl _U0UCR
                            119 	.globl _U0BAUD
                            120 	.globl _U0DBUF
                            121 	.globl _U0CSR
                            122 	.globl _TIMIF
                            123 	.globl _T4CC1
                            124 	.globl _T4CCTL1
                            125 	.globl _T4CC0
                            126 	.globl _T4CCTL0
                            127 	.globl _T4CTL
                            128 	.globl _T4CNT
                            129 	.globl _T3CC1
                            130 	.globl _T3CCTL1
                            131 	.globl _T3CC0
                            132 	.globl _T3CCTL0
                            133 	.globl _T3CTL
                            134 	.globl _T3CNT
                            135 	.globl _T2MSEL
                            136 	.globl _T2IRQM
                            137 	.globl _T2MOVF2
                            138 	.globl _T2MOVF1
                            139 	.globl _T2MOVF0
                            140 	.globl _T2M1
                            141 	.globl _T2M0
                            142 	.globl _T2IRQF
                            143 	.globl _T2EVTCFG
                            144 	.globl _T2CTRL
                            145 	.globl _T1STAT
                            146 	.globl _T1CCTL2
                            147 	.globl _T1CCTL1
                            148 	.globl _T1CCTL0
                            149 	.globl _T1CTL
                            150 	.globl _T1CNTH
                            151 	.globl _T1CNTL
                            152 	.globl _T1CC2H
                            153 	.globl _T1CC2L
                            154 	.globl _T1CC1H
                            155 	.globl _T1CC1L
                            156 	.globl _T1CC0H
                            157 	.globl _T1CC0L
                            158 	.globl _CLKCONSTA
                            159 	.globl _CLKCONCMD
                            160 	.globl _SLEEPSTA
                            161 	.globl _SLEEPCMD
                            162 	.globl _STLOAD
                            163 	.globl _ST2
                            164 	.globl _ST1
                            165 	.globl _ST0
                            166 	.globl _RFERRF
                            167 	.globl _RFIRQF0
                            168 	.globl _RFST
                            169 	.globl _RFD
                            170 	.globl _RFIRQF1
                            171 	.globl _PSBANK
                            172 	.globl _FMAP
                            173 	.globl _MEMCTR
                            174 	.globl __XPAGE
                            175 	.globl _MPAGE
                            176 	.globl _PMUX
                            177 	.globl _P2DIR
                            178 	.globl _P1DIR
                            179 	.globl _P0DIR
                            180 	.globl _P2INP
                            181 	.globl _P1INP
                            182 	.globl _P2SEL
                            183 	.globl _P1SEL
                            184 	.globl _P0SEL
                            185 	.globl _APCFG
                            186 	.globl _PERCFG
                            187 	.globl _P0INP
                            188 	.globl _P2IEN
                            189 	.globl _P1IEN
                            190 	.globl _P0IEN
                            191 	.globl _PICTL
                            192 	.globl _P2IFG
                            193 	.globl _P1IFG
                            194 	.globl _P0IFG
                            195 	.globl _DMAREQ
                            196 	.globl _DMAARM
                            197 	.globl _DMA0CFGH
                            198 	.globl _DMA0CFGL
                            199 	.globl _DMA1CFGH
                            200 	.globl _DMA1CFGL
                            201 	.globl _DMAIRQ
                            202 	.globl _ENCCS
                            203 	.globl _ENCDO
                            204 	.globl _ENCDI
                            205 	.globl _RNDH
                            206 	.globl _RNDL
                            207 	.globl _ADCH
                            208 	.globl _ADCL
                            209 	.globl _ADCCON3
                            210 	.globl _ADCCON2
                            211 	.globl _ADCCON1
                            212 	.globl _B
                            213 	.globl _IRCON2
                            214 	.globl _ACC
                            215 	.globl _PSW
                            216 	.globl _IRCON
                            217 	.globl _IP1
                            218 	.globl _IEN1
                            219 	.globl _IP0
                            220 	.globl _IEN0
                            221 	.globl _P2
                            222 	.globl _S1CON
                            223 	.globl _IEN2
                            224 	.globl _S0CON
                            225 	.globl _DPS
                            226 	.globl _P1
                            227 	.globl _TCON
                            228 	.globl _PCON
                            229 	.globl _DPH1
                            230 	.globl _DPL1
                            231 	.globl _DPH0
                            232 	.globl _DPL0
                            233 	.globl _SP
                            234 	.globl _P0
                            235 	.globl _X_IEEE_ADDR
                            236 	.globl _X_INFOPAGE
                            237 	.globl _X_P2DIR
                            238 	.globl _X_P1DIR
                            239 	.globl _X_P0DIR
                            240 	.globl _X_U1GCR
                            241 	.globl _X_U1UCR
                            242 	.globl _X_U1BAUD
                            243 	.globl _X_U1DBUF
                            244 	.globl _X_U1CSR
                            245 	.globl _X_P2INP
                            246 	.globl _X_P1INP
                            247 	.globl _X_P2SEL
                            248 	.globl _X_P1SEL
                            249 	.globl _X_P0SEL
                            250 	.globl _X_APCFG
                            251 	.globl _X_PERCFG
                            252 	.globl _X_T4CC1
                            253 	.globl _X_T4CCTL1
                            254 	.globl _X_T4CC0
                            255 	.globl _X_T4CCTL0
                            256 	.globl _X_T4CTL
                            257 	.globl _X_T4CNT
                            258 	.globl _X_RFIRQF0
                            259 	.globl _X_T1CCTL2
                            260 	.globl _X_T1CCTL1
                            261 	.globl _X_T1CCTL0
                            262 	.globl _X_T1CTL
                            263 	.globl _X_T1CNTH
                            264 	.globl _X_T1CNTL
                            265 	.globl _X_RFST
                            266 	.globl _X_T1CC2H
                            267 	.globl _X_T1CC2L
                            268 	.globl _X_T1CC1H
                            269 	.globl _X_T1CC1L
                            270 	.globl _X_T1CC0H
                            271 	.globl _X_T1CC0L
                            272 	.globl _X_RFD
                            273 	.globl _X_TIMIF
                            274 	.globl _X_DMAREQ
                            275 	.globl _X_DMAARM
                            276 	.globl _X_DMA0CFGH
                            277 	.globl _X_DMA0CFGL
                            278 	.globl _X_DMA1CFGH
                            279 	.globl _X_DMA1CFGL
                            280 	.globl _X_DMAIRQ
                            281 	.globl _X_T3CC1
                            282 	.globl _X_T3CCTL1
                            283 	.globl _X_T3CC0
                            284 	.globl _X_T3CCTL0
                            285 	.globl _X_T3CTL
                            286 	.globl _X_T3CNT
                            287 	.globl _X_WDCTL
                            288 	.globl _X_MEMCTR
                            289 	.globl _X_CLKCONCMD
                            290 	.globl _X_U0GCR
                            291 	.globl _X_U0UCR
                            292 	.globl _X_T2MSEL
                            293 	.globl _X_U0BAUD
                            294 	.globl _X_U0DBUF
                            295 	.globl _X_RFERRF
                            296 	.globl _X_SLEEPCMD
                            297 	.globl _X_RNDH
                            298 	.globl _X_RNDL
                            299 	.globl _X_ADCH
                            300 	.globl _X_ADCL
                            301 	.globl _X_ADCCON3
                            302 	.globl _X_ADCCON2
                            303 	.globl _X_ADCCON1
                            304 	.globl _X_ENCCS
                            305 	.globl _X_ENCDO
                            306 	.globl _X_ENCDI
                            307 	.globl _X_T1STAT
                            308 	.globl _X_PMUX
                            309 	.globl _X_STLOAD
                            310 	.globl _X_P2IEN
                            311 	.globl _X_P0IEN
                            312 	.globl _X_T2IRQM
                            313 	.globl _X_T2MOVF2
                            314 	.globl _X_T2MOVF1
                            315 	.globl _X_T2MOVF0
                            316 	.globl _X_T2M1
                            317 	.globl _X_T2M0
                            318 	.globl _X_T2IRQF
                            319 	.globl _X_P2
                            320 	.globl _X_PSBANK
                            321 	.globl _X_FMAP
                            322 	.globl _X_CLKCONSTA
                            323 	.globl _X_SLEEPSTA
                            324 	.globl _X_T2EVTCFG
                            325 	.globl _X_ST2
                            326 	.globl _X_ST1
                            327 	.globl _X_ST0
                            328 	.globl _X_T2CTRL
                            329 	.globl _X__XPAGE
                            330 	.globl _X_MPAGE
                            331 	.globl _X_RFIRQF1
                            332 	.globl _X_P1
                            333 	.globl _X_P0INP
                            334 	.globl _X_P1IEN
                            335 	.globl _X_PICTL
                            336 	.globl _X_P2IFG
                            337 	.globl _X_P1IFG
                            338 	.globl _X_P0IFG
                            339 	.globl _X_U0CSR
                            340 	.globl _X_P0
                            341 	.globl _USBF5
                            342 	.globl _USBF4
                            343 	.globl _USBF3
                            344 	.globl _USBF2
                            345 	.globl _USBF1
                            346 	.globl _USBF0
                            347 	.globl _USBCNTH
                            348 	.globl _USBCNTL
                            349 	.globl _USBCNT0
                            350 	.globl _USBCSOH
                            351 	.globl _USBCSOL
                            352 	.globl _USBMAXO
                            353 	.globl _USBCSIH
                            354 	.globl _USBCSIL
                            355 	.globl _USBCS0
                            356 	.globl _USBMAXI
                            357 	.globl _USBCTRL
                            358 	.globl _USBINDEX
                            359 	.globl _USBFRMH
                            360 	.globl _USBFRML
                            361 	.globl _USBCIE
                            362 	.globl _USBOIE
                            363 	.globl _USBIIE
                            364 	.globl _USBCIF
                            365 	.globl _USBOIF
                            366 	.globl _USBIIF
                            367 	.globl _USBPOW
                            368 	.globl _USBADDR
                            369 	.globl _CSPT
                            370 	.globl _CSPZ
                            371 	.globl _CSPY
                            372 	.globl _CSPX
                            373 	.globl _CSPSTAT
                            374 	.globl _CSPCTRL
                            375 	.globl _CSPPROG23
                            376 	.globl _CSPPROG22
                            377 	.globl _CSPPROG21
                            378 	.globl _CSPPROG20
                            379 	.globl _CSPPROG19
                            380 	.globl _CSPPROG18
                            381 	.globl _CSPPROG17
                            382 	.globl _CSPPROG16
                            383 	.globl _CSPPROG15
                            384 	.globl _CSPPROG14
                            385 	.globl _CSPPROG13
                            386 	.globl _CSPPROG12
                            387 	.globl _CSPPROG11
                            388 	.globl _CSPPROG10
                            389 	.globl _CSPPROG9
                            390 	.globl _CSPPROG8
                            391 	.globl _CSPPROG7
                            392 	.globl _CSPPROG6
                            393 	.globl _CSPPROG5
                            394 	.globl _CSPPROG4
                            395 	.globl _CSPPROG3
                            396 	.globl _CSPPROG2
                            397 	.globl _CSPPROG1
                            398 	.globl _CSPPROG0
                            399 	.globl _RFC_OBS_CTRL2
                            400 	.globl _RFC_OBS_CTRL1
                            401 	.globl _RFC_OBS_CTRL0
                            402 	.globl _TXFILTCFG
                            403 	.globl _PTEST1
                            404 	.globl _PTEST0
                            405 	.globl _ATEST
                            406 	.globl _DACTEST2
                            407 	.globl _DACTEST1
                            408 	.globl _DACTEST0
                            409 	.globl _MDMTEST1
                            410 	.globl _MDMTEST0
                            411 	.globl _ADCTEST2
                            412 	.globl _ADCTEST1
                            413 	.globl _ADCTEST0
                            414 	.globl _AGCCTRL3
                            415 	.globl _AGCCTRL2
                            416 	.globl _AGCCTRL1
                            417 	.globl _AGCCTRL0
                            418 	.globl _FSCAL3
                            419 	.globl _FSCAL2
                            420 	.globl _FSCAL1
                            421 	.globl _FSCAL0
                            422 	.globl _FSCTRL
                            423 	.globl _RXCTRL
                            424 	.globl _FREQEST
                            425 	.globl _MDMCTRL1
                            426 	.globl _MDMCTRL0
                            427 	.globl _RFRND
                            428 	.globl _RFERRM
                            429 	.globl _RFIRQM1
                            430 	.globl _RFIRQM0
                            431 	.globl _TXLAST_PTR
                            432 	.globl _TXFIRST_PTR
                            433 	.globl _RXP1_PTR
                            434 	.globl _RXLAST_PTR
                            435 	.globl _RXFIRST_PTR
                            436 	.globl _TXFIFOCNT
                            437 	.globl _RXFIFOCNT
                            438 	.globl _RXFIRST
                            439 	.globl _RSSISTAT
                            440 	.globl _RSSI
                            441 	.globl _CCACTRL1
                            442 	.globl _CCACTRL0
                            443 	.globl _FSMCTRL
                            444 	.globl _FIFOPCTRL
                            445 	.globl _FSMSTAT1
                            446 	.globl _FSMSTAT0
                            447 	.globl _TXCTRL
                            448 	.globl _TXPOWER
                            449 	.globl _FREQCTRL
                            450 	.globl _FREQTUNE
                            451 	.globl _RXMASKCLR
                            452 	.globl _RXMASKSET
                            453 	.globl _RXENABLE
                            454 	.globl _FRMCTRL1
                            455 	.globl _FRMCTRL0
                            456 	.globl _SRCEXTEN2
                            457 	.globl _SRCEXTEN1
                            458 	.globl _SRCEXTEN0
                            459 	.globl _SRCSHORTEN2
                            460 	.globl _SRCSHORTEN1
                            461 	.globl _SRCSHORTEN0
                            462 	.globl _SRCMATCH
                            463 	.globl _FRMFILT1
                            464 	.globl _FRMFILT0
                            465 	.globl _SHORT_ADDR1
                            466 	.globl _SHORT_ADDR0
                            467 	.globl _PAN_ID1
                            468 	.globl _PAN_ID0
                            469 	.globl _EXT_ADDR7
                            470 	.globl _EXT_ADDR6
                            471 	.globl _EXT_ADDR5
                            472 	.globl _EXT_ADDR4
                            473 	.globl _EXT_ADDR3
                            474 	.globl _EXT_ADDR2
                            475 	.globl _EXT_ADDR1
                            476 	.globl _EXT_ADDR0
                            477 	.globl _SRCSHORTPENDEN2
                            478 	.globl _SRCSHORTPENDEN1
                            479 	.globl _SRCSHORTPENDEN0
                            480 	.globl _SRCEXTPENDEN2
                            481 	.globl _SRCEXTPENDEN1
                            482 	.globl _SRCEXTPENDEN0
                            483 	.globl _SRCRESINDEX
                            484 	.globl _SRCRESMASK2
                            485 	.globl _SRCRESMASK1
                            486 	.globl _SRCRESMASK0
                            487 	.globl _SRC_ADDR_TABLE
                            488 	.globl _TXFIFO
                            489 	.globl _RXFIFO
                            490 	.globl _RFCORE_RAM
                            491 	.globl _CMPCTL
                            492 	.globl _OPAMPS
                            493 	.globl _OPAMPC
                            494 	.globl _STCV2
                            495 	.globl _STCV1
                            496 	.globl _STCV0
                            497 	.globl _STCS
                            498 	.globl _STCC
                            499 	.globl _T1CC4H
                            500 	.globl _T1CC4L
                            501 	.globl _T1CC3H
                            502 	.globl _T1CC3L
                            503 	.globl _XX_T1CC2H
                            504 	.globl _XX_T1CC2L
                            505 	.globl _XX_T1CC1H
                            506 	.globl _XX_T1CC1L
                            507 	.globl _XX_T1CC0H
                            508 	.globl _XX_T1CC0L
                            509 	.globl _T1CCTL4
                            510 	.globl _T1CCTL3
                            511 	.globl _XX_T1CCTL2
                            512 	.globl _XX_T1CCTL1
                            513 	.globl _XX_T1CCTL0
                            514 	.globl _CLD
                            515 	.globl _IRCTL
                            516 	.globl _CHIPINFO1
                            517 	.globl _CHIPINFO0
                            518 	.globl _FWDATA
                            519 	.globl _FADDRH
                            520 	.globl _FADDRL
                            521 	.globl _FCTL
                            522 	.globl _IVCTRL
                            523 	.globl _BATTMON
                            524 	.globl _SRCRC
                            525 	.globl _DBGDATA
                            526 	.globl _TESTREG0
                            527 	.globl _CHIPID
                            528 	.globl _CHVER
                            529 	.globl _OBSSEL5
                            530 	.globl _OBSSEL4
                            531 	.globl _OBSSEL3
                            532 	.globl _OBSSEL2
                            533 	.globl _OBSSEL1
                            534 	.globl _OBSSEL0
                            535 	.globl _I2CIO
                            536 	.globl _I2CWC
                            537 	.globl _I2CADDR
                            538 	.globl _I2CDATA
                            539 	.globl _I2CSTAT
                            540 	.globl _I2CCFG
                            541 	.globl _OPAMPMC
                            542 	.globl _MONMUX
                            543 	.globl _find_resource_type
                            544 	.globl _resource_instance_init
                            545 	.globl _get_resource_value
                            546 	.globl _set_resource_value
                            547 	.globl _resource_value_compare
                            548 ;--------------------------------------------------------
                            549 ; special function registers
                            550 ;--------------------------------------------------------
                            551 	.area RSEG    (ABS,DATA)
   0000                     552 	.org 0x0000
                    0080    553 _P0	=	0x0080
                    0081    554 _SP	=	0x0081
                    0082    555 _DPL0	=	0x0082
                    0083    556 _DPH0	=	0x0083
                    0084    557 _DPL1	=	0x0084
                    0085    558 _DPH1	=	0x0085
                    0087    559 _PCON	=	0x0087
                    0088    560 _TCON	=	0x0088
                    0090    561 _P1	=	0x0090
                    0092    562 _DPS	=	0x0092
                    0098    563 _S0CON	=	0x0098
                    009A    564 _IEN2	=	0x009a
                    009B    565 _S1CON	=	0x009b
                    00A0    566 _P2	=	0x00a0
                    00A8    567 _IEN0	=	0x00a8
                    00A9    568 _IP0	=	0x00a9
                    00B8    569 _IEN1	=	0x00b8
                    00B9    570 _IP1	=	0x00b9
                    00C0    571 _IRCON	=	0x00c0
                    00D0    572 _PSW	=	0x00d0
                    00E0    573 _ACC	=	0x00e0
                    00E8    574 _IRCON2	=	0x00e8
                    00F0    575 _B	=	0x00f0
                    00B4    576 _ADCCON1	=	0x00b4
                    00B5    577 _ADCCON2	=	0x00b5
                    00B6    578 _ADCCON3	=	0x00b6
                    00BA    579 _ADCL	=	0x00ba
                    00BB    580 _ADCH	=	0x00bb
                    00BC    581 _RNDL	=	0x00bc
                    00BD    582 _RNDH	=	0x00bd
                    00B1    583 _ENCDI	=	0x00b1
                    00B2    584 _ENCDO	=	0x00b2
                    00B3    585 _ENCCS	=	0x00b3
                    00D1    586 _DMAIRQ	=	0x00d1
                    00D2    587 _DMA1CFGL	=	0x00d2
                    00D3    588 _DMA1CFGH	=	0x00d3
                    00D4    589 _DMA0CFGL	=	0x00d4
                    00D5    590 _DMA0CFGH	=	0x00d5
                    00D6    591 _DMAARM	=	0x00d6
                    00D7    592 _DMAREQ	=	0x00d7
                    0089    593 _P0IFG	=	0x0089
                    008A    594 _P1IFG	=	0x008a
                    008B    595 _P2IFG	=	0x008b
                    008C    596 _PICTL	=	0x008c
                    00AB    597 _P0IEN	=	0x00ab
                    008D    598 _P1IEN	=	0x008d
                    00AC    599 _P2IEN	=	0x00ac
                    008F    600 _P0INP	=	0x008f
                    00F1    601 _PERCFG	=	0x00f1
                    00F2    602 _APCFG	=	0x00f2
                    00F3    603 _P0SEL	=	0x00f3
                    00F4    604 _P1SEL	=	0x00f4
                    00F5    605 _P2SEL	=	0x00f5
                    00F6    606 _P1INP	=	0x00f6
                    00F7    607 _P2INP	=	0x00f7
                    00FD    608 _P0DIR	=	0x00fd
                    00FE    609 _P1DIR	=	0x00fe
                    00FF    610 _P2DIR	=	0x00ff
                    00AE    611 _PMUX	=	0x00ae
                    0093    612 _MPAGE	=	0x0093
                    0093    613 __XPAGE	=	0x0093
                    00C7    614 _MEMCTR	=	0x00c7
                    009F    615 _FMAP	=	0x009f
                    009F    616 _PSBANK	=	0x009f
                    0091    617 _RFIRQF1	=	0x0091
                    00D9    618 _RFD	=	0x00d9
                    00E1    619 _RFST	=	0x00e1
                    00E9    620 _RFIRQF0	=	0x00e9
                    00BF    621 _RFERRF	=	0x00bf
                    0095    622 _ST0	=	0x0095
                    0096    623 _ST1	=	0x0096
                    0097    624 _ST2	=	0x0097
                    00AD    625 _STLOAD	=	0x00ad
                    00BE    626 _SLEEPCMD	=	0x00be
                    009D    627 _SLEEPSTA	=	0x009d
                    00C6    628 _CLKCONCMD	=	0x00c6
                    009E    629 _CLKCONSTA	=	0x009e
                    00DA    630 _T1CC0L	=	0x00da
                    00DB    631 _T1CC0H	=	0x00db
                    00DC    632 _T1CC1L	=	0x00dc
                    00DD    633 _T1CC1H	=	0x00dd
                    00DE    634 _T1CC2L	=	0x00de
                    00DF    635 _T1CC2H	=	0x00df
                    00E2    636 _T1CNTL	=	0x00e2
                    00E3    637 _T1CNTH	=	0x00e3
                    00E4    638 _T1CTL	=	0x00e4
                    00E5    639 _T1CCTL0	=	0x00e5
                    00E6    640 _T1CCTL1	=	0x00e6
                    00E7    641 _T1CCTL2	=	0x00e7
                    00AF    642 _T1STAT	=	0x00af
                    0094    643 _T2CTRL	=	0x0094
                    009C    644 _T2EVTCFG	=	0x009c
                    00A1    645 _T2IRQF	=	0x00a1
                    00A2    646 _T2M0	=	0x00a2
                    00A3    647 _T2M1	=	0x00a3
                    00A4    648 _T2MOVF0	=	0x00a4
                    00A5    649 _T2MOVF1	=	0x00a5
                    00A6    650 _T2MOVF2	=	0x00a6
                    00A7    651 _T2IRQM	=	0x00a7
                    00C3    652 _T2MSEL	=	0x00c3
                    00CA    653 _T3CNT	=	0x00ca
                    00CB    654 _T3CTL	=	0x00cb
                    00CC    655 _T3CCTL0	=	0x00cc
                    00CD    656 _T3CC0	=	0x00cd
                    00CE    657 _T3CCTL1	=	0x00ce
                    00CF    658 _T3CC1	=	0x00cf
                    00EA    659 _T4CNT	=	0x00ea
                    00EB    660 _T4CTL	=	0x00eb
                    00EC    661 _T4CCTL0	=	0x00ec
                    00ED    662 _T4CC0	=	0x00ed
                    00EE    663 _T4CCTL1	=	0x00ee
                    00EF    664 _T4CC1	=	0x00ef
                    00D8    665 _TIMIF	=	0x00d8
                    0086    666 _U0CSR	=	0x0086
                    00C1    667 _U0DBUF	=	0x00c1
                    00C2    668 _U0BAUD	=	0x00c2
                    00C4    669 _U0UCR	=	0x00c4
                    00C5    670 _U0GCR	=	0x00c5
                    00F8    671 _U1CSR	=	0x00f8
                    00F9    672 _U1DBUF	=	0x00f9
                    00FA    673 _U1BAUD	=	0x00fa
                    00FB    674 _U1UCR	=	0x00fb
                    00FC    675 _U1GCR	=	0x00fc
                    00C9    676 _WDCTL	=	0x00c9
                            677 ;--------------------------------------------------------
                            678 ; special function bits
                            679 ;--------------------------------------------------------
                            680 	.area RSEG    (ABS,DATA)
   0000                     681 	.org 0x0000
                    0087    682 _P0_7	=	0x0087
                    0086    683 _P0_6	=	0x0086
                    0085    684 _P0_5	=	0x0085
                    0084    685 _P0_4	=	0x0084
                    0083    686 _P0_3	=	0x0083
                    0082    687 _P0_2	=	0x0082
                    0081    688 _P0_1	=	0x0081
                    0080    689 _P0_0	=	0x0080
                    008F    690 _URX1IF	=	0x008f
                    008D    691 _ADCIF	=	0x008d
                    008B    692 _URX0IF	=	0x008b
                    008A    693 _IT1	=	0x008a
                    0089    694 _RFERRIF	=	0x0089
                    0088    695 _IT0	=	0x0088
                    0097    696 _P1_7	=	0x0097
                    0096    697 _P1_6	=	0x0096
                    0095    698 _P1_5	=	0x0095
                    0094    699 _P1_4	=	0x0094
                    0093    700 _P1_3	=	0x0093
                    0092    701 _P1_2	=	0x0092
                    0091    702 _P1_1	=	0x0091
                    0090    703 _P1_0	=	0x0090
                    0099    704 _ENCIF_1	=	0x0099
                    0098    705 _ENCIF_0	=	0x0098
                    00A7    706 _P2_7	=	0x00a7
                    00A6    707 _P2_6	=	0x00a6
                    00A5    708 _P2_5	=	0x00a5
                    00A4    709 _P2_4	=	0x00a4
                    00A3    710 _P2_3	=	0x00a3
                    00A2    711 _P2_2	=	0x00a2
                    00A1    712 _P2_1	=	0x00a1
                    00A0    713 _P2_0	=	0x00a0
                    00AF    714 _EA	=	0x00af
                    00AD    715 _STIE	=	0x00ad
                    00AC    716 _ENCIE	=	0x00ac
                    00AB    717 _URX1IE	=	0x00ab
                    00AA    718 _URX0IE	=	0x00aa
                    00A9    719 _ADCIE	=	0x00a9
                    00A8    720 _RFERRIE	=	0x00a8
                    00BD    721 _P0IE	=	0x00bd
                    00BC    722 _T4IE	=	0x00bc
                    00BB    723 _T3IE	=	0x00bb
                    00BA    724 _T2IE	=	0x00ba
                    00B9    725 _T1IE	=	0x00b9
                    00B8    726 _DMAIE	=	0x00b8
                    00C7    727 _STIF	=	0x00c7
                    00C5    728 _P0IF	=	0x00c5
                    00C4    729 _T4IF	=	0x00c4
                    00C3    730 _T3IF	=	0x00c3
                    00C2    731 _T2IF	=	0x00c2
                    00C1    732 _T1IF	=	0x00c1
                    00C0    733 _DMAIF	=	0x00c0
                    00D7    734 _CY	=	0x00d7
                    00D6    735 _AC	=	0x00d6
                    00D5    736 _F0	=	0x00d5
                    00D4    737 _RS1	=	0x00d4
                    00D3    738 _RS0	=	0x00d3
                    00D2    739 _OV	=	0x00d2
                    00D1    740 _F1	=	0x00d1
                    00D0    741 _P	=	0x00d0
                    00E7    742 _ACC_7	=	0x00e7
                    00E6    743 _ACC_6	=	0x00e6
                    00E5    744 _ACC_5	=	0x00e5
                    00E4    745 _ACC_4	=	0x00e4
                    00E3    746 _ACC_3	=	0x00e3
                    00E2    747 _ACC_2	=	0x00e2
                    00E1    748 _ACC_1	=	0x00e1
                    00E0    749 _ACC_0	=	0x00e0
                    00EC    750 _WDTIF	=	0x00ec
                    00EB    751 _P1IF	=	0x00eb
                    00EA    752 _UTX1IF	=	0x00ea
                    00E9    753 _UTX0IF	=	0x00e9
                    00E8    754 _P2IF	=	0x00e8
                    00F7    755 _B_7	=	0x00f7
                    00F6    756 _B_6	=	0x00f6
                    00F5    757 _B_5	=	0x00f5
                    00F4    758 _B_4	=	0x00f4
                    00F3    759 _B_3	=	0x00f3
                    00F2    760 _B_2	=	0x00f2
                    00F1    761 _B_1	=	0x00f1
                    00F0    762 _B_0	=	0x00f0
                    00DE    763 _OVFIM	=	0x00de
                    00DD    764 _T4CH1IF	=	0x00dd
                    00DC    765 _T4CH0IF	=	0x00dc
                    00DB    766 _T4OVFIF	=	0x00db
                    00DA    767 _T3CH1IF	=	0x00da
                    00D9    768 _T3CH0IF	=	0x00d9
                    00D8    769 _T3OVFIF	=	0x00d8
                    00FF    770 _MODE	=	0x00ff
                    00FE    771 _RE	=	0x00fe
                    00FD    772 _SLAVE	=	0x00fd
                    00FC    773 _FE	=	0x00fc
                    00FB    774 _ERR	=	0x00fb
                    00FA    775 _RX_BYTE	=	0x00fa
                    00F9    776 _TX_BYTE	=	0x00f9
                    00F8    777 _ACTIVE	=	0x00f8
                            778 ;--------------------------------------------------------
                            779 ; overlayable register banks
                            780 ;--------------------------------------------------------
                            781 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     782 	.ds 8
                            783 ;--------------------------------------------------------
                            784 ; internal ram data
                            785 ;--------------------------------------------------------
                            786 	.area DSEG    (DATA)
                            787 ;--------------------------------------------------------
                            788 ; overlayable items in internal ram 
                            789 ;--------------------------------------------------------
                            790 	.area OSEG    (OVR,DATA)
                            791 ;--------------------------------------------------------
                            792 ; indirectly addressable internal ram data
                            793 ;--------------------------------------------------------
                            794 	.area ISEG    (DATA)
                            795 ;--------------------------------------------------------
                            796 ; absolute internal ram data
                            797 ;--------------------------------------------------------
                            798 	.area IABS    (ABS,DATA)
                            799 	.area IABS    (ABS,DATA)
                            800 ;--------------------------------------------------------
                            801 ; bit data
                            802 ;--------------------------------------------------------
                            803 	.area BSEG    (BIT)
                            804 ;--------------------------------------------------------
                            805 ; paged external ram data
                            806 ;--------------------------------------------------------
                            807 	.area PSEG    (PAG,XDATA)
                            808 ;--------------------------------------------------------
                            809 ; external ram data
                            810 ;--------------------------------------------------------
                            811 	.area XSEG    (XDATA)
                    61A6    812 _MONMUX	=	0x61a6
                    61A6    813 _OPAMPMC	=	0x61a6
                    6230    814 _I2CCFG	=	0x6230
                    6231    815 _I2CSTAT	=	0x6231
                    6232    816 _I2CDATA	=	0x6232
                    6233    817 _I2CADDR	=	0x6233
                    6234    818 _I2CWC	=	0x6234
                    6235    819 _I2CIO	=	0x6235
                    6243    820 _OBSSEL0	=	0x6243
                    6244    821 _OBSSEL1	=	0x6244
                    6245    822 _OBSSEL2	=	0x6245
                    6246    823 _OBSSEL3	=	0x6246
                    6247    824 _OBSSEL4	=	0x6247
                    6248    825 _OBSSEL5	=	0x6248
                    6249    826 _CHVER	=	0x6249
                    624A    827 _CHIPID	=	0x624a
                    624B    828 _TESTREG0	=	0x624b
                    6260    829 _DBGDATA	=	0x6260
                    6262    830 _SRCRC	=	0x6262
                    6264    831 _BATTMON	=	0x6264
                    6265    832 _IVCTRL	=	0x6265
                    6270    833 _FCTL	=	0x6270
                    6271    834 _FADDRL	=	0x6271
                    6272    835 _FADDRH	=	0x6272
                    6273    836 _FWDATA	=	0x6273
                    6276    837 _CHIPINFO0	=	0x6276
                    6277    838 _CHIPINFO1	=	0x6277
                    6281    839 _IRCTL	=	0x6281
                    6290    840 _CLD	=	0x6290
                    62A0    841 _XX_T1CCTL0	=	0x62a0
                    62A1    842 _XX_T1CCTL1	=	0x62a1
                    62A2    843 _XX_T1CCTL2	=	0x62a2
                    62A3    844 _T1CCTL3	=	0x62a3
                    62A4    845 _T1CCTL4	=	0x62a4
                    62A6    846 _XX_T1CC0L	=	0x62a6
                    62A7    847 _XX_T1CC0H	=	0x62a7
                    62A8    848 _XX_T1CC1L	=	0x62a8
                    62A9    849 _XX_T1CC1H	=	0x62a9
                    62AA    850 _XX_T1CC2L	=	0x62aa
                    62AB    851 _XX_T1CC2H	=	0x62ab
                    62AC    852 _T1CC3L	=	0x62ac
                    62AD    853 _T1CC3H	=	0x62ad
                    62AE    854 _T1CC4L	=	0x62ae
                    62AF    855 _T1CC4H	=	0x62af
                    62B0    856 _STCC	=	0x62b0
                    62B1    857 _STCS	=	0x62b1
                    62B2    858 _STCV0	=	0x62b2
                    62B3    859 _STCV1	=	0x62b3
                    62B4    860 _STCV2	=	0x62b4
                    62C0    861 _OPAMPC	=	0x62c0
                    62C1    862 _OPAMPS	=	0x62c1
                    62D0    863 _CMPCTL	=	0x62d0
                    6000    864 _RFCORE_RAM	=	0x6000
                    6000    865 _RXFIFO	=	0x6000
                    6080    866 _TXFIFO	=	0x6080
                    6100    867 _SRC_ADDR_TABLE	=	0x6100
                    6160    868 _SRCRESMASK0	=	0x6160
                    6161    869 _SRCRESMASK1	=	0x6161
                    6162    870 _SRCRESMASK2	=	0x6162
                    6163    871 _SRCRESINDEX	=	0x6163
                    6164    872 _SRCEXTPENDEN0	=	0x6164
                    6165    873 _SRCEXTPENDEN1	=	0x6165
                    6166    874 _SRCEXTPENDEN2	=	0x6166
                    6167    875 _SRCSHORTPENDEN0	=	0x6167
                    6168    876 _SRCSHORTPENDEN1	=	0x6168
                    6169    877 _SRCSHORTPENDEN2	=	0x6169
                    616A    878 _EXT_ADDR0	=	0x616a
                    616B    879 _EXT_ADDR1	=	0x616b
                    616C    880 _EXT_ADDR2	=	0x616c
                    616D    881 _EXT_ADDR3	=	0x616d
                    616E    882 _EXT_ADDR4	=	0x616e
                    616F    883 _EXT_ADDR5	=	0x616f
                    6170    884 _EXT_ADDR6	=	0x6170
                    6171    885 _EXT_ADDR7	=	0x6171
                    6172    886 _PAN_ID0	=	0x6172
                    6173    887 _PAN_ID1	=	0x6173
                    6174    888 _SHORT_ADDR0	=	0x6174
                    6175    889 _SHORT_ADDR1	=	0x6175
                    6180    890 _FRMFILT0	=	0x6180
                    6181    891 _FRMFILT1	=	0x6181
                    6182    892 _SRCMATCH	=	0x6182
                    6183    893 _SRCSHORTEN0	=	0x6183
                    6184    894 _SRCSHORTEN1	=	0x6184
                    6185    895 _SRCSHORTEN2	=	0x6185
                    6186    896 _SRCEXTEN0	=	0x6186
                    6187    897 _SRCEXTEN1	=	0x6187
                    6188    898 _SRCEXTEN2	=	0x6188
                    6189    899 _FRMCTRL0	=	0x6189
                    618A    900 _FRMCTRL1	=	0x618a
                    618B    901 _RXENABLE	=	0x618b
                    618C    902 _RXMASKSET	=	0x618c
                    618D    903 _RXMASKCLR	=	0x618d
                    618E    904 _FREQTUNE	=	0x618e
                    618F    905 _FREQCTRL	=	0x618f
                    6190    906 _TXPOWER	=	0x6190
                    6191    907 _TXCTRL	=	0x6191
                    6192    908 _FSMSTAT0	=	0x6192
                    6193    909 _FSMSTAT1	=	0x6193
                    6194    910 _FIFOPCTRL	=	0x6194
                    6195    911 _FSMCTRL	=	0x6195
                    6196    912 _CCACTRL0	=	0x6196
                    6197    913 _CCACTRL1	=	0x6197
                    6198    914 _RSSI	=	0x6198
                    6199    915 _RSSISTAT	=	0x6199
                    619A    916 _RXFIRST	=	0x619a
                    619B    917 _RXFIFOCNT	=	0x619b
                    619C    918 _TXFIFOCNT	=	0x619c
                    619D    919 _RXFIRST_PTR	=	0x619d
                    619E    920 _RXLAST_PTR	=	0x619e
                    619F    921 _RXP1_PTR	=	0x619f
                    61A1    922 _TXFIRST_PTR	=	0x61a1
                    61A2    923 _TXLAST_PTR	=	0x61a2
                    61A3    924 _RFIRQM0	=	0x61a3
                    61A4    925 _RFIRQM1	=	0x61a4
                    61A5    926 _RFERRM	=	0x61a5
                    61A7    927 _RFRND	=	0x61a7
                    61A8    928 _MDMCTRL0	=	0x61a8
                    61A9    929 _MDMCTRL1	=	0x61a9
                    61AA    930 _FREQEST	=	0x61aa
                    61AB    931 _RXCTRL	=	0x61ab
                    61AC    932 _FSCTRL	=	0x61ac
                    61AD    933 _FSCAL0	=	0x61ad
                    61AE    934 _FSCAL1	=	0x61ae
                    61AF    935 _FSCAL2	=	0x61af
                    61B0    936 _FSCAL3	=	0x61b0
                    61B1    937 _AGCCTRL0	=	0x61b1
                    61B2    938 _AGCCTRL1	=	0x61b2
                    61B3    939 _AGCCTRL2	=	0x61b3
                    61B4    940 _AGCCTRL3	=	0x61b4
                    61B5    941 _ADCTEST0	=	0x61b5
                    61B6    942 _ADCTEST1	=	0x61b6
                    61B7    943 _ADCTEST2	=	0x61b7
                    61B8    944 _MDMTEST0	=	0x61b8
                    61B9    945 _MDMTEST1	=	0x61b9
                    61BA    946 _DACTEST0	=	0x61ba
                    61BB    947 _DACTEST1	=	0x61bb
                    61BC    948 _DACTEST2	=	0x61bc
                    61BD    949 _ATEST	=	0x61bd
                    61BE    950 _PTEST0	=	0x61be
                    61BF    951 _PTEST1	=	0x61bf
                    61FA    952 _TXFILTCFG	=	0x61fa
                    61EB    953 _RFC_OBS_CTRL0	=	0x61eb
                    61EC    954 _RFC_OBS_CTRL1	=	0x61ec
                    61ED    955 _RFC_OBS_CTRL2	=	0x61ed
                    61C0    956 _CSPPROG0	=	0x61c0
                    61C1    957 _CSPPROG1	=	0x61c1
                    61C2    958 _CSPPROG2	=	0x61c2
                    61C3    959 _CSPPROG3	=	0x61c3
                    61C4    960 _CSPPROG4	=	0x61c4
                    61C5    961 _CSPPROG5	=	0x61c5
                    61C6    962 _CSPPROG6	=	0x61c6
                    61C7    963 _CSPPROG7	=	0x61c7
                    61C8    964 _CSPPROG8	=	0x61c8
                    61C9    965 _CSPPROG9	=	0x61c9
                    61CA    966 _CSPPROG10	=	0x61ca
                    61CB    967 _CSPPROG11	=	0x61cb
                    61CC    968 _CSPPROG12	=	0x61cc
                    61CD    969 _CSPPROG13	=	0x61cd
                    61CE    970 _CSPPROG14	=	0x61ce
                    61CF    971 _CSPPROG15	=	0x61cf
                    61D0    972 _CSPPROG16	=	0x61d0
                    61D1    973 _CSPPROG17	=	0x61d1
                    61D2    974 _CSPPROG18	=	0x61d2
                    61D3    975 _CSPPROG19	=	0x61d3
                    61D4    976 _CSPPROG20	=	0x61d4
                    61D5    977 _CSPPROG21	=	0x61d5
                    61D6    978 _CSPPROG22	=	0x61d6
                    61D7    979 _CSPPROG23	=	0x61d7
                    61E0    980 _CSPCTRL	=	0x61e0
                    61E1    981 _CSPSTAT	=	0x61e1
                    61E2    982 _CSPX	=	0x61e2
                    61E3    983 _CSPY	=	0x61e3
                    61E4    984 _CSPZ	=	0x61e4
                    61E5    985 _CSPT	=	0x61e5
                    6200    986 _USBADDR	=	0x6200
                    6201    987 _USBPOW	=	0x6201
                    6202    988 _USBIIF	=	0x6202
                    6204    989 _USBOIF	=	0x6204
                    6206    990 _USBCIF	=	0x6206
                    6207    991 _USBIIE	=	0x6207
                    6209    992 _USBOIE	=	0x6209
                    620B    993 _USBCIE	=	0x620b
                    620C    994 _USBFRML	=	0x620c
                    620D    995 _USBFRMH	=	0x620d
                    620E    996 _USBINDEX	=	0x620e
                    620F    997 _USBCTRL	=	0x620f
                    6210    998 _USBMAXI	=	0x6210
                    6211    999 _USBCS0	=	0x6211
                    6211   1000 _USBCSIL	=	0x6211
                    6212   1001 _USBCSIH	=	0x6212
                    6213   1002 _USBMAXO	=	0x6213
                    6214   1003 _USBCSOL	=	0x6214
                    6215   1004 _USBCSOH	=	0x6215
                    6216   1005 _USBCNT0	=	0x6216
                    6216   1006 _USBCNTL	=	0x6216
                    6217   1007 _USBCNTH	=	0x6217
                    6220   1008 _USBF0	=	0x6220
                    6222   1009 _USBF1	=	0x6222
                    6224   1010 _USBF2	=	0x6224
                    6226   1011 _USBF3	=	0x6226
                    6228   1012 _USBF4	=	0x6228
                    622A   1013 _USBF5	=	0x622a
                    7080   1014 _X_P0	=	0x7080
                    7086   1015 _X_U0CSR	=	0x7086
                    7089   1016 _X_P0IFG	=	0x7089
                    708A   1017 _X_P1IFG	=	0x708a
                    708B   1018 _X_P2IFG	=	0x708b
                    708C   1019 _X_PICTL	=	0x708c
                    708D   1020 _X_P1IEN	=	0x708d
                    708F   1021 _X_P0INP	=	0x708f
                    7090   1022 _X_P1	=	0x7090
                    7091   1023 _X_RFIRQF1	=	0x7091
                    7093   1024 _X_MPAGE	=	0x7093
                    7093   1025 _X__XPAGE	=	0x7093
                    7094   1026 _X_T2CTRL	=	0x7094
                    7095   1027 _X_ST0	=	0x7095
                    7096   1028 _X_ST1	=	0x7096
                    7097   1029 _X_ST2	=	0x7097
                    709C   1030 _X_T2EVTCFG	=	0x709c
                    709D   1031 _X_SLEEPSTA	=	0x709d
                    709E   1032 _X_CLKCONSTA	=	0x709e
                    709F   1033 _X_FMAP	=	0x709f
                    709F   1034 _X_PSBANK	=	0x709f
                    70A0   1035 _X_P2	=	0x70a0
                    70A1   1036 _X_T2IRQF	=	0x70a1
                    70A2   1037 _X_T2M0	=	0x70a2
                    70A3   1038 _X_T2M1	=	0x70a3
                    70A4   1039 _X_T2MOVF0	=	0x70a4
                    70A5   1040 _X_T2MOVF1	=	0x70a5
                    70A6   1041 _X_T2MOVF2	=	0x70a6
                    70A7   1042 _X_T2IRQM	=	0x70a7
                    70AB   1043 _X_P0IEN	=	0x70ab
                    70AC   1044 _X_P2IEN	=	0x70ac
                    70AD   1045 _X_STLOAD	=	0x70ad
                    70AE   1046 _X_PMUX	=	0x70ae
                    70AF   1047 _X_T1STAT	=	0x70af
                    70B1   1048 _X_ENCDI	=	0x70b1
                    70B2   1049 _X_ENCDO	=	0x70b2
                    70B3   1050 _X_ENCCS	=	0x70b3
                    70B4   1051 _X_ADCCON1	=	0x70b4
                    70B5   1052 _X_ADCCON2	=	0x70b5
                    70B6   1053 _X_ADCCON3	=	0x70b6
                    70BA   1054 _X_ADCL	=	0x70ba
                    70BB   1055 _X_ADCH	=	0x70bb
                    70BC   1056 _X_RNDL	=	0x70bc
                    70BD   1057 _X_RNDH	=	0x70bd
                    70BE   1058 _X_SLEEPCMD	=	0x70be
                    70BF   1059 _X_RFERRF	=	0x70bf
                    70C1   1060 _X_U0DBUF	=	0x70c1
                    70C2   1061 _X_U0BAUD	=	0x70c2
                    70C3   1062 _X_T2MSEL	=	0x70c3
                    70C4   1063 _X_U0UCR	=	0x70c4
                    70C5   1064 _X_U0GCR	=	0x70c5
                    70C6   1065 _X_CLKCONCMD	=	0x70c6
                    70C7   1066 _X_MEMCTR	=	0x70c7
                    70C9   1067 _X_WDCTL	=	0x70c9
                    70CA   1068 _X_T3CNT	=	0x70ca
                    70CB   1069 _X_T3CTL	=	0x70cb
                    70CC   1070 _X_T3CCTL0	=	0x70cc
                    70CD   1071 _X_T3CC0	=	0x70cd
                    70CE   1072 _X_T3CCTL1	=	0x70ce
                    70CF   1073 _X_T3CC1	=	0x70cf
                    70D1   1074 _X_DMAIRQ	=	0x70d1
                    70D2   1075 _X_DMA1CFGL	=	0x70d2
                    70D3   1076 _X_DMA1CFGH	=	0x70d3
                    70D4   1077 _X_DMA0CFGL	=	0x70d4
                    70D5   1078 _X_DMA0CFGH	=	0x70d5
                    70D6   1079 _X_DMAARM	=	0x70d6
                    70D7   1080 _X_DMAREQ	=	0x70d7
                    70D8   1081 _X_TIMIF	=	0x70d8
                    70D9   1082 _X_RFD	=	0x70d9
                    70DA   1083 _X_T1CC0L	=	0x70da
                    70DB   1084 _X_T1CC0H	=	0x70db
                    70DC   1085 _X_T1CC1L	=	0x70dc
                    70DD   1086 _X_T1CC1H	=	0x70dd
                    70DE   1087 _X_T1CC2L	=	0x70de
                    70DF   1088 _X_T1CC2H	=	0x70df
                    70E1   1089 _X_RFST	=	0x70e1
                    70E2   1090 _X_T1CNTL	=	0x70e2
                    70E3   1091 _X_T1CNTH	=	0x70e3
                    70E4   1092 _X_T1CTL	=	0x70e4
                    70E5   1093 _X_T1CCTL0	=	0x70e5
                    70E6   1094 _X_T1CCTL1	=	0x70e6
                    70E7   1095 _X_T1CCTL2	=	0x70e7
                    70E9   1096 _X_RFIRQF0	=	0x70e9
                    70EA   1097 _X_T4CNT	=	0x70ea
                    70EB   1098 _X_T4CTL	=	0x70eb
                    70EC   1099 _X_T4CCTL0	=	0x70ec
                    70ED   1100 _X_T4CC0	=	0x70ed
                    70EE   1101 _X_T4CCTL1	=	0x70ee
                    70EF   1102 _X_T4CC1	=	0x70ef
                    70F1   1103 _X_PERCFG	=	0x70f1
                    70F2   1104 _X_APCFG	=	0x70f2
                    70F3   1105 _X_P0SEL	=	0x70f3
                    70F4   1106 _X_P1SEL	=	0x70f4
                    70F5   1107 _X_P2SEL	=	0x70f5
                    70F6   1108 _X_P1INP	=	0x70f6
                    70F7   1109 _X_P2INP	=	0x70f7
                    70F8   1110 _X_U1CSR	=	0x70f8
                    70F9   1111 _X_U1DBUF	=	0x70f9
                    70FA   1112 _X_U1BAUD	=	0x70fa
                    70FB   1113 _X_U1UCR	=	0x70fb
                    70FC   1114 _X_U1GCR	=	0x70fc
                    70FD   1115 _X_P0DIR	=	0x70fd
                    70FE   1116 _X_P1DIR	=	0x70fe
                    70FF   1117 _X_P2DIR	=	0x70ff
                    7800   1118 _X_INFOPAGE	=	0x7800
                    780C   1119 _X_IEEE_ADDR	=	0x780c
                           1120 ;--------------------------------------------------------
                           1121 ; absolute external ram data
                           1122 ;--------------------------------------------------------
                           1123 	.area XABS    (ABS,XDATA)
                           1124 ;--------------------------------------------------------
                           1125 ; external initialized ram data
                           1126 ;--------------------------------------------------------
                           1127 	.area XISEG   (XDATA)
                           1128 	.area HOME    (CODE)
                           1129 	.area GSINIT0 (CODE)
                           1130 	.area GSINIT1 (CODE)
                           1131 	.area GSINIT2 (CODE)
                           1132 	.area GSINIT3 (CODE)
                           1133 	.area GSINIT4 (CODE)
                           1134 	.area GSINIT5 (CODE)
                           1135 	.area GSINIT  (CODE)
                           1136 	.area GSFINAL (CODE)
                           1137 	.area CSEG    (CODE)
                           1138 ;--------------------------------------------------------
                           1139 ; global & static initialisations
                           1140 ;--------------------------------------------------------
                           1141 	.area HOME    (CODE)
                           1142 	.area GSINIT  (CODE)
                           1143 	.area GSFINAL (CODE)
                           1144 	.area GSINIT  (CODE)
                           1145 ;--------------------------------------------------------
                           1146 ; Home
                           1147 ;--------------------------------------------------------
                           1148 	.area HOME    (CODE)
                           1149 	.area HOME    (CODE)
                           1150 ;--------------------------------------------------------
                           1151 ; code
                           1152 ;--------------------------------------------------------
                           1153 	.area BANK1   (CODE)
                           1154 ;------------------------------------------------------------
                           1155 ;Allocation info for local variables in function 'find_resource_type'
                           1156 ;------------------------------------------------------------
                           1157 ;resource_id               Allocated to registers r6 r7 
                           1158 ;i                         Allocated to registers r4 r5 
                           1159 ;------------------------------------------------------------
                           1160 ;	resource.c:10: resource_type_t *find_resource_type(uint16_t resource_id)
                           1161 ;	-----------------------------------------
                           1162 ;	 function find_resource_type
                           1163 ;	-----------------------------------------
   0000                    1164 _find_resource_type:
                    0007   1165 	ar7 = 0x07
                    0006   1166 	ar6 = 0x06
                    0005   1167 	ar5 = 0x05
                    0004   1168 	ar4 = 0x04
                    0003   1169 	ar3 = 0x03
                    0002   1170 	ar2 = 0x02
                    0001   1171 	ar1 = 0x01
                    0000   1172 	ar0 = 0x00
   0000 AE 82              1173 	mov	r6,dpl
   0002 AF 83              1174 	mov	r7,dph
                           1175 ;	resource.c:20: return NULL;
   0004 7C 00              1176 	mov	r4,#0x00
   0006 7D 00              1177 	mov	r5,#0x00
   0008                    1178 00103$:
                           1179 ;	resource.c:14: for(;i < resource_types_count; i++) {
   0008 90s00r00           1180 	mov	dptr,#_resource_types_count
   000B E0                 1181 	movx	a,@dptr
   000C FA                 1182 	mov	r2,a
   000D A3                 1183 	inc	dptr
   000E E0                 1184 	movx	a,@dptr
   000F FB                 1185 	mov	r3,a
   0010 C3                 1186 	clr	c
   0011 EC                 1187 	mov	a,r4
   0012 9A                 1188 	subb	a,r2
   0013 ED                 1189 	mov	a,r5
   0014 9B                 1190 	subb	a,r3
   0015 50 3E              1191 	jnc	00106$
                           1192 ;	resource.c:15: if (resource_types[i].resource_id == resource_id) {
   0017 8C 02              1193 	mov	ar2,r4
   0019 ED                 1194 	mov	a,r5
   001A CA                 1195 	xch	a,r2
   001B 25 E0              1196 	add	a,acc
   001D CA                 1197 	xch	a,r2
   001E 33                 1198 	rlc	a
   001F CA                 1199 	xch	a,r2
   0020 25 E0              1200 	add	a,acc
   0022 CA                 1201 	xch	a,r2
   0023 33                 1202 	rlc	a
   0024 FB                 1203 	mov	r3,a
   0025 EA                 1204 	mov	a,r2
   0026 24r00              1205 	add	a,#_resource_types
   0028 F5 82              1206 	mov	dpl,a
   002A EB                 1207 	mov	a,r3
   002B 34s00              1208 	addc	a,#(_resource_types >> 8)
   002D F5 83              1209 	mov	dph,a
   002F E0                 1210 	movx	a,@dptr
   0030 F8                 1211 	mov	r0,a
   0031 A3                 1212 	inc	dptr
   0032 E0                 1213 	movx	a,@dptr
   0033 F9                 1214 	mov	r1,a
   0034 E8                 1215 	mov	a,r0
   0035 B5 06 16           1216 	cjne	a,ar6,00105$
   0038 E9                 1217 	mov	a,r1
   0039 B5 07 12           1218 	cjne	a,ar7,00105$
                           1219 ;	resource.c:16: return &resource_types[i];
   003C EA                 1220 	mov	a,r2
   003D 24r00              1221 	add	a,#_resource_types
   003F FA                 1222 	mov	r2,a
   0040 EB                 1223 	mov	a,r3
   0041 34s00              1224 	addc	a,#(_resource_types >> 8)
   0043 F9                 1225 	mov	r1,a
   0044 7B 00              1226 	mov	r3,#0x00
   0046 8A 82              1227 	mov	dpl,r2
   0048 89 83              1228 	mov	dph,r1
   004A 8B F0              1229 	mov	b,r3
   004C 80 0D              1230 	sjmp	00107$
   004E                    1231 00105$:
                           1232 ;	resource.c:14: for(;i < resource_types_count; i++) {
   004E 0C                 1233 	inc	r4
   004F BC 00 B6           1234 	cjne	r4,#0x00,00103$
   0052 0D                 1235 	inc	r5
   0053 80 B3              1236 	sjmp	00103$
   0055                    1237 00106$:
                           1238 ;	resource.c:20: return NULL;
   0055 90 00 00           1239 	mov	dptr,#0x0000
   0058 75 F0 00           1240 	mov	b,#0x00
   005B                    1241 00107$:
   005B 02s00r00           1242 	ljmp	__sdcc_banked_ret
                           1243 ;------------------------------------------------------------
                           1244 ;Allocation info for local variables in function 'resource_instance_init'
                           1245 ;------------------------------------------------------------
                           1246 ;resource_id               Allocated to stack - sp -7
                           1247 ;value                     Allocated to stack - sp -10
                           1248 ;get_func                  Allocated to stack - sp -13
                           1249 ;set_func                  Allocated to stack - sp -16
                           1250 ;instance                  Allocated to stack - sp -2
                           1251 ;resource_type             Allocated to registers r7 r6 r5 
                           1252 ;------------------------------------------------------------
                           1253 ;	resource.c:23: int16_t resource_instance_init(resource_instance_t *instance, uint16_t resource_id, 
                           1254 ;	-----------------------------------------
                           1255 ;	 function resource_instance_init
                           1256 ;	-----------------------------------------
   005E                    1257 _resource_instance_init:
   005E C0 82              1258 	push	dpl
   0060 C0 83              1259 	push	dph
   0062 C0 F0              1260 	push	b
                           1261 ;	resource.c:29: if (instance && value) {
   0064 A8 81              1262 	mov	r0,sp
   0066 18                 1263 	dec	r0
   0067 18                 1264 	dec	r0
   0068 E6                 1265 	mov	a,@r0
   0069 08                 1266 	inc	r0
   006A 46                 1267 	orl	a,@r0
   006B 70 03              1268 	jnz	00119$
   006D 02s01r9C           1269 	ljmp	00107$
   0070                    1270 00119$:
   0070 E5 81              1271 	mov	a,sp
   0072 24 F6              1272 	add	a,#0xf6
   0074 F8                 1273 	mov	r0,a
   0075 E6                 1274 	mov	a,@r0
   0076 08                 1275 	inc	r0
   0077 46                 1276 	orl	a,@r0
   0078 70 03              1277 	jnz	00120$
   007A 02s01r9C           1278 	ljmp	00107$
   007D                    1279 00120$:
                           1280 ;	resource.c:30: resource_type = find_resource_type(resource_id);
   007D E5 81              1281 	mov	a,sp
   007F 24 F9              1282 	add	a,#0xf9
   0081 F8                 1283 	mov	r0,a
   0082 86 82              1284 	mov	dpl,@r0
   0084 08                 1285 	inc	r0
   0085 86 83              1286 	mov	dph,@r0
   0087 78r00              1287 	mov	r0,#_find_resource_type
   0089 79s00              1288 	mov	r1,#(_find_resource_type >> 8)
   008B 7As00              1289 	mov	r2,#(_find_resource_type >> 16)
   008D 12s00r00           1290 	lcall	__sdcc_banked_call
   0090 AA 82              1291 	mov	r2,dpl
   0092 AB 83              1292 	mov	r3,dph
   0094 AC F0              1293 	mov	r4,b
   0096 8A 07              1294 	mov	ar7,r2
   0098 8B 06              1295 	mov	ar6,r3
   009A 8C 05              1296 	mov	ar5,r4
                           1297 ;	resource.c:31: if (resource_type) {
   009C EF                 1298 	mov	a,r7
   009D 4E                 1299 	orl	a,r6
   009E 70 03              1300 	jnz	00121$
   00A0 02s01r81           1301 	ljmp	00104$
   00A3                    1302 00121$:
                           1303 ;	resource.c:32: instance->resource_type = resource_type;
   00A3 A8 81              1304 	mov	r0,sp
   00A5 18                 1305 	dec	r0
   00A6 18                 1306 	dec	r0
   00A7 74 06              1307 	mov	a,#0x06
   00A9 26                 1308 	add	a,@r0
   00AA FA                 1309 	mov	r2,a
   00AB E4                 1310 	clr	a
   00AC 08                 1311 	inc	r0
   00AD 36                 1312 	addc	a,@r0
   00AE FB                 1313 	mov	r3,a
   00AF 08                 1314 	inc	r0
   00B0 86 04              1315 	mov	ar4,@r0
   00B2 8A 82              1316 	mov	dpl,r2
   00B4 8B 83              1317 	mov	dph,r3
   00B6 8C F0              1318 	mov	b,r4
   00B8 EF                 1319 	mov	a,r7
   00B9 12s00r00           1320 	lcall	__gptrput
   00BC A3                 1321 	inc	dptr
   00BD EE                 1322 	mov	a,r6
   00BE 12s00r00           1323 	lcall	__gptrput
   00C1 A3                 1324 	inc	dptr
   00C2 ED                 1325 	mov	a,r5
   00C3 12s00r00           1326 	lcall	__gptrput
                           1327 ;	resource.c:33: instance->next = NULL;
   00C6 A8 81              1328 	mov	r0,sp
   00C8 18                 1329 	dec	r0
   00C9 18                 1330 	dec	r0
   00CA 86 82              1331 	mov	dpl,@r0
   00CC 08                 1332 	inc	r0
   00CD 86 83              1333 	mov	dph,@r0
   00CF 08                 1334 	inc	r0
   00D0 86 F0              1335 	mov	b,@r0
   00D2 E4                 1336 	clr	a
   00D3 12s00r00           1337 	lcall	__gptrput
   00D6 A3                 1338 	inc	dptr
   00D7 E4                 1339 	clr	a
   00D8 12s00r00           1340 	lcall	__gptrput
   00DB A3                 1341 	inc	dptr
   00DC E4                 1342 	clr	a
   00DD 12s00r00           1343 	lcall	__gptrput
                           1344 ;	resource.c:34: if (value) {
   00E0 E5 81              1345 	mov	a,sp
   00E2 24 F6              1346 	add	a,#0xf6
   00E4 F8                 1347 	mov	r0,a
   00E5 E6                 1348 	mov	a,@r0
   00E6 08                 1349 	inc	r0
   00E7 46                 1350 	orl	a,@r0
   00E8 60 3E              1351 	jz	00102$
                           1352 ;	resource.c:35: memcpy(&(instance->value), value, sizeof(resource_value_u));
   00EA E5 81              1353 	mov	a,sp
   00EC 24 F6              1354 	add	a,#0xf6
   00EE F8                 1355 	mov	r0,a
   00EF 86 02              1356 	mov	ar2,@r0
   00F1 08                 1357 	inc	r0
   00F2 86 03              1358 	mov	ar3,@r0
   00F4 08                 1359 	inc	r0
   00F5 86 04              1360 	mov	ar4,@r0
   00F7 A8 81              1361 	mov	r0,sp
   00F9 18                 1362 	dec	r0
   00FA 18                 1363 	dec	r0
   00FB 74 09              1364 	mov	a,#0x09
   00FD 26                 1365 	add	a,@r0
   00FE FD                 1366 	mov	r5,a
   00FF E4                 1367 	clr	a
   0100 08                 1368 	inc	r0
   0101 36                 1369 	addc	a,@r0
   0102 FE                 1370 	mov	r6,a
   0103 08                 1371 	inc	r0
   0104 86 07              1372 	mov	ar7,@r0
   0106 74 08              1373 	mov	a,#0x08
   0108 C0 E0              1374 	push	acc
   010A E4                 1375 	clr	a
   010B C0 E0              1376 	push	acc
   010D C0 02              1377 	push	ar2
   010F C0 03              1378 	push	ar3
   0111 C0 04              1379 	push	ar4
   0113 8D 82              1380 	mov	dpl,r5
   0115 8E 83              1381 	mov	dph,r6
   0117 8F F0              1382 	mov	b,r7
   0119 78r00              1383 	mov	r0,#_memcpy
   011B 79s00              1384 	mov	r1,#(_memcpy >> 8)
   011D 7As00              1385 	mov	r2,#(_memcpy >> 16)
   011F 12s00r00           1386 	lcall	__sdcc_banked_call
   0122 E5 81              1387 	mov	a,sp
   0124 24 FB              1388 	add	a,#0xfb
   0126 F5 81              1389 	mov	sp,a
   0128                    1390 00102$:
                           1391 ;	resource.c:37: instance->get_func = get_func;
   0128 A8 81              1392 	mov	r0,sp
   012A 18                 1393 	dec	r0
   012B 18                 1394 	dec	r0
   012C 74 11              1395 	mov	a,#0x11
   012E 26                 1396 	add	a,@r0
   012F FD                 1397 	mov	r5,a
   0130 E4                 1398 	clr	a
   0131 08                 1399 	inc	r0
   0132 36                 1400 	addc	a,@r0
   0133 FE                 1401 	mov	r6,a
   0134 08                 1402 	inc	r0
   0135 86 07              1403 	mov	ar7,@r0
   0137 8D 82              1404 	mov	dpl,r5
   0139 8E 83              1405 	mov	dph,r6
   013B 8F F0              1406 	mov	b,r7
   013D E5 81              1407 	mov	a,sp
   013F 24 F3              1408 	add	a,#0xf3
   0141 F8                 1409 	mov	r0,a
   0142 E6                 1410 	mov	a,@r0
   0143 12s00r00           1411 	lcall	__gptrput
   0146 A3                 1412 	inc	dptr
   0147 08                 1413 	inc	r0
   0148 E6                 1414 	mov	a,@r0
   0149 12s00r00           1415 	lcall	__gptrput
   014C A3                 1416 	inc	dptr
   014D 08                 1417 	inc	r0
   014E E6                 1418 	mov	a,@r0
   014F 12s00r00           1419 	lcall	__gptrput
                           1420 ;	resource.c:38: instance->set_func = set_func;
   0152 A8 81              1421 	mov	r0,sp
   0154 18                 1422 	dec	r0
   0155 18                 1423 	dec	r0
   0156 74 14              1424 	mov	a,#0x14
   0158 26                 1425 	add	a,@r0
   0159 FD                 1426 	mov	r5,a
   015A E4                 1427 	clr	a
   015B 08                 1428 	inc	r0
   015C 36                 1429 	addc	a,@r0
   015D FE                 1430 	mov	r6,a
   015E 08                 1431 	inc	r0
   015F 86 07              1432 	mov	ar7,@r0
   0161 8D 82              1433 	mov	dpl,r5
   0163 8E 83              1434 	mov	dph,r6
   0165 8F F0              1435 	mov	b,r7
   0167 E5 81              1436 	mov	a,sp
   0169 24 F0              1437 	add	a,#0xf0
   016B F8                 1438 	mov	r0,a
   016C E6                 1439 	mov	a,@r0
   016D 12s00r00           1440 	lcall	__gptrput
   0170 A3                 1441 	inc	dptr
   0171 08                 1442 	inc	r0
   0172 E6                 1443 	mov	a,@r0
   0173 12s00r00           1444 	lcall	__gptrput
   0176 A3                 1445 	inc	dptr
   0177 08                 1446 	inc	r0
   0178 E6                 1447 	mov	a,@r0
   0179 12s00r00           1448 	lcall	__gptrput
                           1449 ;	resource.c:39: return SUCCESS;
   017C 90 00 01           1450 	mov	dptr,#0x0001
   017F 80 1E              1451 	sjmp	00109$
   0181                    1452 00104$:
                           1453 ;	resource.c:41: PRINTF("resource id invalid!\n");
   0181 74r00              1454 	mov	a,#__str_0
   0183 C0 E0              1455 	push	acc
   0185 74s00              1456 	mov	a,#(__str_0 >> 8)
   0187 C0 E0              1457 	push	acc
   0189 74 80              1458 	mov	a,#0x80
   018B C0 E0              1459 	push	acc
   018D 78r00              1460 	mov	r0,#_printf
   018F 79s00              1461 	mov	r1,#(_printf >> 8)
   0191 7As00              1462 	mov	r2,#(_printf >> 16)
   0193 12s00r00           1463 	lcall	__sdcc_banked_call
   0196 15 81              1464 	dec	sp
   0198 15 81              1465 	dec	sp
   019A 15 81              1466 	dec	sp
   019C                    1467 00107$:
                           1468 ;	resource.c:46: return FAIL;
   019C 90 00 00           1469 	mov	dptr,#0x0000
   019F                    1470 00109$:
   019F 15 81              1471 	dec	sp
   01A1 15 81              1472 	dec	sp
   01A3 15 81              1473 	dec	sp
   01A5 02s00r00           1474 	ljmp	__sdcc_banked_ret
                           1475 ;------------------------------------------------------------
                           1476 ;Allocation info for local variables in function 'get_resource_value'
                           1477 ;------------------------------------------------------------
                           1478 ;value                     Allocated to stack - sp -8
                           1479 ;res                       Allocated to stack - sp -2
                           1480 ;------------------------------------------------------------
                           1481 ;	resource.c:49: int8_t get_resource_value(resource_instance_t *res, resource_value_u *value)
                           1482 ;	-----------------------------------------
                           1483 ;	 function get_resource_value
                           1484 ;	-----------------------------------------
   01A8                    1485 _get_resource_value:
   01A8 C0 82              1486 	push	dpl
   01AA C0 83              1487 	push	dph
   01AC C0 F0              1488 	push	b
                           1489 ;	resource.c:51: if (!res || !value) {
   01AE A8 81              1490 	mov	r0,sp
   01B0 18                 1491 	dec	r0
   01B1 18                 1492 	dec	r0
   01B2 E6                 1493 	mov	a,@r0
   01B3 08                 1494 	inc	r0
   01B4 46                 1495 	orl	a,@r0
   01B5 60 0A              1496 	jz	00101$
   01B7 E5 81              1497 	mov	a,sp
   01B9 24 F8              1498 	add	a,#0xf8
   01BB F8                 1499 	mov	r0,a
   01BC E6                 1500 	mov	a,@r0
   01BD 08                 1501 	inc	r0
   01BE 46                 1502 	orl	a,@r0
   01BF 70 06              1503 	jnz	00102$
   01C1                    1504 00101$:
                           1505 ;	resource.c:52: return FAIL;
   01C1 75 82 00           1506 	mov	dpl,#0x00
   01C4 02s02r97           1507 	ljmp	00107$
   01C7                    1508 00102$:
                           1509 ;	resource.c:55: if (res->get_func) {
   01C7 A8 81              1510 	mov	r0,sp
   01C9 18                 1511 	dec	r0
   01CA 18                 1512 	dec	r0
   01CB 74 11              1513 	mov	a,#0x11
   01CD 26                 1514 	add	a,@r0
   01CE FA                 1515 	mov	r2,a
   01CF E4                 1516 	clr	a
   01D0 08                 1517 	inc	r0
   01D1 36                 1518 	addc	a,@r0
   01D2 FB                 1519 	mov	r3,a
   01D3 08                 1520 	inc	r0
   01D4 86 04              1521 	mov	ar4,@r0
   01D6 8A 82              1522 	mov	dpl,r2
   01D8 8B 83              1523 	mov	dph,r3
   01DA 8C F0              1524 	mov	b,r4
   01DC 12s00r00           1525 	lcall	__gptrget
   01DF FA                 1526 	mov	r2,a
   01E0 A3                 1527 	inc	dptr
   01E1 12s00r00           1528 	lcall	__gptrget
   01E4 FB                 1529 	mov	r3,a
   01E5 A3                 1530 	inc	dptr
   01E6 12s00r00           1531 	lcall	__gptrget
   01E9 FC                 1532 	mov	r4,a
   01EA EA                 1533 	mov	a,r2
   01EB 4B                 1534 	orl	a,r3
   01EC 60 68              1535 	jz	00105$
                           1536 ;	resource.c:56: res->get_func(value);
   01EE C0 04              1537 	push	ar4
   01F0 C0 03              1538 	push	ar3
   01F2 C0 02              1539 	push	ar2
   01F4 C0 02              1540 	push	ar2
   01F6 C0 03              1541 	push	ar3
   01F8 C0 04              1542 	push	ar4
   01FA E5 81              1543 	mov	a,sp
   01FC 24 F2              1544 	add	a,#0xf2
   01FE F8                 1545 	mov	r0,a
   01FF 86 82              1546 	mov	dpl,@r0
   0201 08                 1547 	inc	r0
   0202 86 83              1548 	mov	dph,@r0
   0204 08                 1549 	inc	r0
   0205 86 F0              1550 	mov	b,@r0
   0207 D0 02              1551 	pop	ar2
   0209 D0 01              1552 	pop	ar1
   020B D0 00              1553 	pop	ar0
   020D 12s00r00           1554 	lcall	__sdcc_banked_call
   0210 D0 02              1555 	pop	ar2
   0212 D0 03              1556 	pop	ar3
   0214 D0 04              1557 	pop	ar4
                           1558 ;	resource.c:58: memcpy(&res->value, value, sizeof(resource_value_u));
   0216 E5 81              1559 	mov	a,sp
   0218 24 F8              1560 	add	a,#0xf8
   021A F8                 1561 	mov	r0,a
   021B 86 02              1562 	mov	ar2,@r0
   021D 08                 1563 	inc	r0
   021E 86 03              1564 	mov	ar3,@r0
   0220 08                 1565 	inc	r0
   0221 86 04              1566 	mov	ar4,@r0
   0223 A8 81              1567 	mov	r0,sp
   0225 18                 1568 	dec	r0
   0226 18                 1569 	dec	r0
   0227 74 09              1570 	mov	a,#0x09
   0229 26                 1571 	add	a,@r0
   022A FD                 1572 	mov	r5,a
   022B E4                 1573 	clr	a
   022C 08                 1574 	inc	r0
   022D 36                 1575 	addc	a,@r0
   022E FE                 1576 	mov	r6,a
   022F 08                 1577 	inc	r0
   0230 86 07              1578 	mov	ar7,@r0
   0232 74 08              1579 	mov	a,#0x08
   0234 C0 E0              1580 	push	acc
   0236 E4                 1581 	clr	a
   0237 C0 E0              1582 	push	acc
   0239 C0 02              1583 	push	ar2
   023B C0 03              1584 	push	ar3
   023D C0 04              1585 	push	ar4
   023F 8D 82              1586 	mov	dpl,r5
   0241 8E 83              1587 	mov	dph,r6
   0243 8F F0              1588 	mov	b,r7
   0245 78r00              1589 	mov	r0,#_memcpy
   0247 79s00              1590 	mov	r1,#(_memcpy >> 8)
   0249 7As00              1591 	mov	r2,#(_memcpy >> 16)
   024B 12s00r00           1592 	lcall	__sdcc_banked_call
   024E E5 81              1593 	mov	a,sp
   0250 24 FB              1594 	add	a,#0xfb
   0252 F5 81              1595 	mov	sp,a
   0254 80 3E              1596 	sjmp	00106$
   0256                    1597 00105$:
                           1598 ;	resource.c:60: memcpy(value, &res->value, sizeof(resource_value_u));
   0256 A8 81              1599 	mov	r0,sp
   0258 18                 1600 	dec	r0
   0259 18                 1601 	dec	r0
   025A 74 09              1602 	mov	a,#0x09
   025C 26                 1603 	add	a,@r0
   025D FD                 1604 	mov	r5,a
   025E E4                 1605 	clr	a
   025F 08                 1606 	inc	r0
   0260 36                 1607 	addc	a,@r0
   0261 FE                 1608 	mov	r6,a
   0262 08                 1609 	inc	r0
   0263 86 07              1610 	mov	ar7,@r0
   0265 E5 81              1611 	mov	a,sp
   0267 24 F8              1612 	add	a,#0xf8
   0269 F8                 1613 	mov	r0,a
   026A 86 02              1614 	mov	ar2,@r0
   026C 08                 1615 	inc	r0
   026D 86 03              1616 	mov	ar3,@r0
   026F 08                 1617 	inc	r0
   0270 86 04              1618 	mov	ar4,@r0
   0272 74 08              1619 	mov	a,#0x08
   0274 C0 E0              1620 	push	acc
   0276 E4                 1621 	clr	a
   0277 C0 E0              1622 	push	acc
   0279 C0 05              1623 	push	ar5
   027B C0 06              1624 	push	ar6
   027D C0 07              1625 	push	ar7
   027F 8A 82              1626 	mov	dpl,r2
   0281 8B 83              1627 	mov	dph,r3
   0283 8C F0              1628 	mov	b,r4
   0285 78r00              1629 	mov	r0,#_memcpy
   0287 79s00              1630 	mov	r1,#(_memcpy >> 8)
   0289 7As00              1631 	mov	r2,#(_memcpy >> 16)
   028B 12s00r00           1632 	lcall	__sdcc_banked_call
   028E E5 81              1633 	mov	a,sp
   0290 24 FB              1634 	add	a,#0xfb
   0292 F5 81              1635 	mov	sp,a
   0294                    1636 00106$:
                           1637 ;	resource.c:63: return SUCCESS;
   0294 75 82 01           1638 	mov	dpl,#0x01
   0297                    1639 00107$:
   0297 15 81              1640 	dec	sp
   0299 15 81              1641 	dec	sp
   029B 15 81              1642 	dec	sp
   029D 02s00r00           1643 	ljmp	__sdcc_banked_ret
                           1644 ;------------------------------------------------------------
                           1645 ;Allocation info for local variables in function 'set_resource_value'
                           1646 ;------------------------------------------------------------
                           1647 ;value                     Allocated to stack - sp -5
                           1648 ;res                       Allocated to registers r5 r6 r7 
                           1649 ;------------------------------------------------------------
                           1650 ;	resource.c:66: int8_t set_resource_value(resource_instance_t *res, resource_value_u *value)
                           1651 ;	-----------------------------------------
                           1652 ;	 function set_resource_value
                           1653 ;	-----------------------------------------
   02A0                    1654 _set_resource_value:
   02A0 AD 82              1655 	mov	r5,dpl
   02A2 AE 83              1656 	mov	r6,dph
   02A4 AF F0              1657 	mov	r7,b
                           1658 ;	resource.c:68: if (!res || !value) {
   02A6 ED                 1659 	mov	a,r5
   02A7 4E                 1660 	orl	a,r6
   02A8 60 0A              1661 	jz	00101$
   02AA E5 81              1662 	mov	a,sp
   02AC 24 FB              1663 	add	a,#0xfb
   02AE F8                 1664 	mov	r0,a
   02AF E6                 1665 	mov	a,@r0
   02B0 08                 1666 	inc	r0
   02B1 46                 1667 	orl	a,@r0
   02B2 70 06              1668 	jnz	00102$
   02B4                    1669 00101$:
                           1670 ;	resource.c:69: return FAIL;
   02B4 75 82 00           1671 	mov	dpl,#0x00
   02B7 02s03r48           1672 	ljmp	00106$
   02BA                    1673 00102$:
                           1674 ;	resource.c:72: if (res->set_func) {
   02BA 74 14              1675 	mov	a,#0x14
   02BC 2D                 1676 	add	a,r5
   02BD FA                 1677 	mov	r2,a
   02BE E4                 1678 	clr	a
   02BF 3E                 1679 	addc	a,r6
   02C0 FB                 1680 	mov	r3,a
   02C1 8F 04              1681 	mov	ar4,r7
   02C3 8A 82              1682 	mov	dpl,r2
   02C5 8B 83              1683 	mov	dph,r3
   02C7 8C F0              1684 	mov	b,r4
   02C9 12s00r00           1685 	lcall	__gptrget
   02CC FA                 1686 	mov	r2,a
   02CD A3                 1687 	inc	dptr
   02CE 12s00r00           1688 	lcall	__gptrget
   02D1 FB                 1689 	mov	r3,a
   02D2 A3                 1690 	inc	dptr
   02D3 12s00r00           1691 	lcall	__gptrget
   02D6 FC                 1692 	mov	r4,a
   02D7 EA                 1693 	mov	a,r2
   02D8 4B                 1694 	orl	a,r3
   02D9 60 34              1695 	jz	00105$
                           1696 ;	resource.c:73: res->set_func(value);
   02DB C0 07              1697 	push	ar7
   02DD C0 06              1698 	push	ar6
   02DF C0 05              1699 	push	ar5
   02E1 C0 04              1700 	push	ar4
   02E3 C0 03              1701 	push	ar3
   02E5 C0 02              1702 	push	ar2
   02E7 C0 02              1703 	push	ar2
   02E9 C0 03              1704 	push	ar3
   02EB C0 04              1705 	push	ar4
   02ED E5 81              1706 	mov	a,sp
   02EF 24 F2              1707 	add	a,#0xf2
   02F1 F8                 1708 	mov	r0,a
   02F2 86 82              1709 	mov	dpl,@r0
   02F4 08                 1710 	inc	r0
   02F5 86 83              1711 	mov	dph,@r0
   02F7 08                 1712 	inc	r0
   02F8 86 F0              1713 	mov	b,@r0
   02FA D0 02              1714 	pop	ar2
   02FC D0 01              1715 	pop	ar1
   02FE D0 00              1716 	pop	ar0
   0300 12s00r00           1717 	lcall	__sdcc_banked_call
   0303 D0 02              1718 	pop	ar2
   0305 D0 03              1719 	pop	ar3
   0307 D0 04              1720 	pop	ar4
   0309 D0 05              1721 	pop	ar5
   030B D0 06              1722 	pop	ar6
   030D D0 07              1723 	pop	ar7
   030F                    1724 00105$:
                           1725 ;	resource.c:76: memcpy(&res->value, value, sizeof(resource_value_u));
   030F E5 81              1726 	mov	a,sp
   0311 24 FB              1727 	add	a,#0xfb
   0313 F8                 1728 	mov	r0,a
   0314 86 02              1729 	mov	ar2,@r0
   0316 08                 1730 	inc	r0
   0317 86 03              1731 	mov	ar3,@r0
   0319 08                 1732 	inc	r0
   031A 86 04              1733 	mov	ar4,@r0
   031C 74 09              1734 	mov	a,#0x09
   031E 2D                 1735 	add	a,r5
   031F FD                 1736 	mov	r5,a
   0320 E4                 1737 	clr	a
   0321 3E                 1738 	addc	a,r6
   0322 FE                 1739 	mov	r6,a
   0323 74 08              1740 	mov	a,#0x08
   0325 C0 E0              1741 	push	acc
   0327 E4                 1742 	clr	a
   0328 C0 E0              1743 	push	acc
   032A C0 02              1744 	push	ar2
   032C C0 03              1745 	push	ar3
   032E C0 04              1746 	push	ar4
   0330 8D 82              1747 	mov	dpl,r5
   0332 8E 83              1748 	mov	dph,r6
   0334 8F F0              1749 	mov	b,r7
   0336 78r00              1750 	mov	r0,#_memcpy
   0338 79s00              1751 	mov	r1,#(_memcpy >> 8)
   033A 7As00              1752 	mov	r2,#(_memcpy >> 16)
   033C 12s00r00           1753 	lcall	__sdcc_banked_call
   033F E5 81              1754 	mov	a,sp
   0341 24 FB              1755 	add	a,#0xfb
   0343 F5 81              1756 	mov	sp,a
                           1757 ;	resource.c:78: return SUCCESS;
   0345 75 82 01           1758 	mov	dpl,#0x01
   0348                    1759 00106$:
   0348 02s00r00           1760 	ljmp	__sdcc_banked_ret
                           1761 ;------------------------------------------------------------
                           1762 ;Allocation info for local variables in function 'resource_value_compare'
                           1763 ;------------------------------------------------------------
                           1764 ;value                     Allocated to stack - sp -12
                           1765 ;res_instance              Allocated to stack - sp -6
                           1766 ;sloc0                     Allocated to stack - sp -3
                           1767 ;------------------------------------------------------------
                           1768 ;	resource.c:81: int8_t resource_value_compare(resource_instance_t *res_instance, resource_value_u *value)
                           1769 ;	-----------------------------------------
                           1770 ;	 function resource_value_compare
                           1771 ;	-----------------------------------------
   034B                    1772 _resource_value_compare:
   034B C0 82              1773 	push	dpl
   034D C0 83              1774 	push	dph
   034F C0 F0              1775 	push	b
   0351 E5 81              1776 	mov	a,sp
   0353 24 04              1777 	add	a,#0x04
                           1778 ;	resource.c:83: if (res_instance->resource_type->type == Integer){
   0355 F5 81              1779 	mov	sp,a
   0357 24 FA              1780 	add	a,#0xfa
   0359 F8                 1781 	mov	r0,a
   035A 74 06              1782 	mov	a,#0x06
   035C 26                 1783 	add	a,@r0
   035D FA                 1784 	mov	r2,a
   035E E4                 1785 	clr	a
   035F 08                 1786 	inc	r0
   0360 36                 1787 	addc	a,@r0
   0361 FB                 1788 	mov	r3,a
   0362 08                 1789 	inc	r0
   0363 86 04              1790 	mov	ar4,@r0
   0365 8A 82              1791 	mov	dpl,r2
   0367 8B 83              1792 	mov	dph,r3
   0369 8C F0              1793 	mov	b,r4
   036B 12s00r00           1794 	lcall	__gptrget
   036E FA                 1795 	mov	r2,a
   036F A3                 1796 	inc	dptr
   0370 12s00r00           1797 	lcall	__gptrget
   0373 FB                 1798 	mov	r3,a
   0374 A3                 1799 	inc	dptr
   0375 12s00r00           1800 	lcall	__gptrget
   0378 FC                 1801 	mov	r4,a
   0379 74 03              1802 	mov	a,#0x03
   037B 2A                 1803 	add	a,r2
   037C FA                 1804 	mov	r2,a
   037D E4                 1805 	clr	a
   037E 3B                 1806 	addc	a,r3
   037F FB                 1807 	mov	r3,a
   0380 8A 82              1808 	mov	dpl,r2
   0382 8B 83              1809 	mov	dph,r3
   0384 8C F0              1810 	mov	b,r4
   0386 12s00r00           1811 	lcall	__gptrget
   0389 FC                 1812 	mov	r4,a
   038A 70 44              1813 	jnz	00107$
                           1814 ;	resource.c:84: return (value->int_value - res_instance->value.int_value);
   038C E5 81              1815 	mov	a,sp
   038E 24 F4              1816 	add	a,#0xf4
   0390 F8                 1817 	mov	r0,a
   0391 86 02              1818 	mov	ar2,@r0
   0393 08                 1819 	inc	r0
   0394 86 03              1820 	mov	ar3,@r0
   0396 08                 1821 	inc	r0
   0397 86 07              1822 	mov	ar7,@r0
   0399 8A 82              1823 	mov	dpl,r2
   039B 8B 83              1824 	mov	dph,r3
   039D 8F F0              1825 	mov	b,r7
   039F 12s00r00           1826 	lcall	__gptrget
   03A2 FA                 1827 	mov	r2,a
   03A3 A3                 1828 	inc	dptr
   03A4 12s00r00           1829 	lcall	__gptrget
   03A7 FB                 1830 	mov	r3,a
   03A8 E5 81              1831 	mov	a,sp
   03AA 24 FA              1832 	add	a,#0xfa
   03AC F8                 1833 	mov	r0,a
   03AD 74 09              1834 	mov	a,#0x09
   03AF 26                 1835 	add	a,@r0
   03B0 FD                 1836 	mov	r5,a
   03B1 E4                 1837 	clr	a
   03B2 08                 1838 	inc	r0
   03B3 36                 1839 	addc	a,@r0
   03B4 FE                 1840 	mov	r6,a
   03B5 08                 1841 	inc	r0
   03B6 86 07              1842 	mov	ar7,@r0
   03B8 8D 82              1843 	mov	dpl,r5
   03BA 8E 83              1844 	mov	dph,r6
   03BC 8F F0              1845 	mov	b,r7
   03BE 12s00r00           1846 	lcall	__gptrget
   03C1 FD                 1847 	mov	r5,a
   03C2 A3                 1848 	inc	dptr
   03C3 12s00r00           1849 	lcall	__gptrget
   03C6 FE                 1850 	mov	r6,a
   03C7 EA                 1851 	mov	a,r2
   03C8 C3                 1852 	clr	c
   03C9 9D                 1853 	subb	a,r5
   03CA FA                 1854 	mov	r2,a
   03CB F5 82              1855 	mov	dpl,a
   03CD 02s04rAA           1856 	ljmp	00109$
   03D0                    1857 00107$:
                           1858 ;	resource.c:85: } else if (res_instance->resource_type->type == Float) {
   03D0 BC 01 02           1859 	cjne	r4,#0x01,00118$
   03D3 80 03              1860 	sjmp	00119$
   03D5                    1861 00118$:
   03D5 02s04r64           1862 	ljmp	00104$
   03D8                    1863 00119$:
                           1864 ;	resource.c:86: return (value->float_value - res_instance->value.float_value);
   03D8 E5 81              1865 	mov	a,sp
   03DA 24 F4              1866 	add	a,#0xf4
   03DC F8                 1867 	mov	r0,a
   03DD 86 05              1868 	mov	ar5,@r0
   03DF 08                 1869 	inc	r0
   03E0 86 06              1870 	mov	ar6,@r0
   03E2 08                 1871 	inc	r0
   03E3 86 07              1872 	mov	ar7,@r0
   03E5 8D 82              1873 	mov	dpl,r5
   03E7 8E 83              1874 	mov	dph,r6
   03E9 8F F0              1875 	mov	b,r7
   03EB E5 81              1876 	mov	a,sp
   03ED 24 FD              1877 	add	a,#0xfd
   03EF F8                 1878 	mov	r0,a
   03F0 12s00r00           1879 	lcall	__gptrget
   03F3 F6                 1880 	mov	@r0,a
   03F4 A3                 1881 	inc	dptr
   03F5 12s00r00           1882 	lcall	__gptrget
   03F8 08                 1883 	inc	r0
   03F9 F6                 1884 	mov	@r0,a
   03FA A3                 1885 	inc	dptr
   03FB 12s00r00           1886 	lcall	__gptrget
   03FE 08                 1887 	inc	r0
   03FF F6                 1888 	mov	@r0,a
   0400 A3                 1889 	inc	dptr
   0401 12s00r00           1890 	lcall	__gptrget
   0404 08                 1891 	inc	r0
   0405 F6                 1892 	mov	@r0,a
   0406 E5 81              1893 	mov	a,sp
   0408 24 FA              1894 	add	a,#0xfa
   040A F8                 1895 	mov	r0,a
   040B 74 09              1896 	mov	a,#0x09
   040D 26                 1897 	add	a,@r0
   040E FA                 1898 	mov	r2,a
   040F E4                 1899 	clr	a
   0410 08                 1900 	inc	r0
   0411 36                 1901 	addc	a,@r0
   0412 FE                 1902 	mov	r6,a
   0413 08                 1903 	inc	r0
   0414 86 07              1904 	mov	ar7,@r0
   0416 8A 82              1905 	mov	dpl,r2
   0418 8E 83              1906 	mov	dph,r6
   041A 8F F0              1907 	mov	b,r7
   041C 12s00r00           1908 	lcall	__gptrget
   041F FA                 1909 	mov	r2,a
   0420 A3                 1910 	inc	dptr
   0421 12s00r00           1911 	lcall	__gptrget
   0424 FE                 1912 	mov	r6,a
   0425 A3                 1913 	inc	dptr
   0426 12s00r00           1914 	lcall	__gptrget
   0429 FF                 1915 	mov	r7,a
   042A A3                 1916 	inc	dptr
   042B 12s00r00           1917 	lcall	__gptrget
   042E FD                 1918 	mov	r5,a
   042F C0 02              1919 	push	ar2
   0431 C0 06              1920 	push	ar6
   0433 C0 07              1921 	push	ar7
   0435 C0 05              1922 	push	ar5
   0437 E5 81              1923 	mov	a,sp
   0439 24 F9              1924 	add	a,#0xf9
   043B F8                 1925 	mov	r0,a
   043C 86 82              1926 	mov	dpl,@r0
   043E 08                 1927 	inc	r0
   043F 86 83              1928 	mov	dph,@r0
   0441 08                 1929 	inc	r0
   0442 86 F0              1930 	mov	b,@r0
   0444 08                 1931 	inc	r0
   0445 E6                 1932 	mov	a,@r0
   0446 12s00r00           1933 	lcall	___fssub
   0449 AB 82              1934 	mov	r3,dpl
   044B AD 83              1935 	mov	r5,dph
   044D AE F0              1936 	mov	r6,b
   044F FF                 1937 	mov	r7,a
   0450 E5 81              1938 	mov	a,sp
   0452 24 FC              1939 	add	a,#0xfc
   0454 F5 81              1940 	mov	sp,a
   0456 8B 82              1941 	mov	dpl,r3
   0458 8D 83              1942 	mov	dph,r5
   045A 8E F0              1943 	mov	b,r6
   045C EF                 1944 	mov	a,r7
   045D 12s00r00           1945 	lcall	___fs2schar
   0460 AF 82              1946 	mov  r7,dpl
   0462 80 46              1947 	sjmp	00109$
   0464                    1948 00104$:
                           1949 ;	resource.c:87: } else if (res_instance->resource_type->type == String) {
   0464 BC 02 40           1950 	cjne	r4,#0x02,00108$
                           1951 ;	resource.c:88: return strcmp(value->string_value, res_instance->value.string_value);
   0467 E5 81              1952 	mov	a,sp
   0469 24 FA              1953 	add	a,#0xfa
   046B F8                 1954 	mov	r0,a
   046C 74 09              1955 	mov	a,#0x09
   046E 26                 1956 	add	a,@r0
   046F FD                 1957 	mov	r5,a
   0470 E4                 1958 	clr	a
   0471 08                 1959 	inc	r0
   0472 36                 1960 	addc	a,@r0
   0473 FE                 1961 	mov	r6,a
   0474 08                 1962 	inc	r0
   0475 86 07              1963 	mov	ar7,@r0
   0477 E5 81              1964 	mov	a,sp
   0479 24 F4              1965 	add	a,#0xf4
   047B F8                 1966 	mov	r0,a
   047C 86 02              1967 	mov	ar2,@r0
   047E 08                 1968 	inc	r0
   047F 86 03              1969 	mov	ar3,@r0
   0481 08                 1970 	inc	r0
   0482 86 04              1971 	mov	ar4,@r0
   0484 C0 05              1972 	push	ar5
   0486 C0 06              1973 	push	ar6
   0488 C0 07              1974 	push	ar7
   048A 8A 82              1975 	mov	dpl,r2
   048C 8B 83              1976 	mov	dph,r3
   048E 8C F0              1977 	mov	b,r4
   0490 78r00              1978 	mov	r0,#_strcmp
   0492 79s00              1979 	mov	r1,#(_strcmp >> 8)
   0494 7As00              1980 	mov	r2,#(_strcmp >> 16)
   0496 12s00r00           1981 	lcall	__sdcc_banked_call
   0499 AE 82              1982 	mov	r6,dpl
   049B AF 83              1983 	mov	r7,dph
   049D 15 81              1984 	dec	sp
   049F 15 81              1985 	dec	sp
   04A1 15 81              1986 	dec	sp
   04A3 8E 82              1987 	mov	dpl,r6
   04A5 80 03              1988 	sjmp	00109$
   04A7                    1989 00108$:
                           1990 ;	resource.c:91: return 0;
   04A7 75 82 00           1991 	mov	dpl,#0x00
   04AA                    1992 00109$:
   04AA E5 81              1993 	mov	a,sp
   04AC 24 F9              1994 	add	a,#0xF9
   04AE F5 81              1995 	mov	sp,a
   04B0 02s00r00           1996 	ljmp	__sdcc_banked_ret
                           1997 	.area CSEG    (CODE)
                           1998 	.area CONST   (CODE)
   0000                    1999 __str_0:
   0000 72 65 73 6F 75 72  2000 	.ascii "resource id invalid!"
        63 65 20 69 64 20
        69 6E 76 61 6C 69
        64 21
   0014 0A                 2001 	.db 0x0A
   0015 00                 2002 	.db 0x00
                           2003 	.area XINIT   (CODE)
                           2004 	.area CABS    (ABS,CODE)
