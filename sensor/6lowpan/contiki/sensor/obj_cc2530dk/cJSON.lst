                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Oct 29 2014) (Linux)
                              4 ; This file was generated Thu Dec  3 06:32:40 2015
                              5 ;--------------------------------------------------------
                              6 	.module cJSON
                              7 	.optsdcc -mmcs51 --model-huge
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _isupper
                             13 	.globl _malloc
                             14 	.globl _sprintf
                             15 	.globl _strlen
                             16 	.globl _memset
                             17 	.globl _strchr
                             18 	.globl _strncmp
                             19 	.globl _strcpy
                             20 	.globl _memcpy
                             21 	.globl _cJSON_GetErrorPtr
                             22 	.globl _cJSON_Delete
                             23 	.globl _cJSON_ParseWithOpts
                             24 	.globl _cJSON_Parse
                             25 	.globl _cJSON_Print
                             26 	.globl _cJSON_PrintUnformatted
                             27 	.globl _cJSON_GetArraySize
                             28 	.globl _cJSON_GetArrayItem
                             29 	.globl _cJSON_GetObjectItem
                             30 	.globl _cJSON_AddItemToArray
                             31 	.globl _cJSON_AddItemToObject
                             32 	.globl _cJSON_AddItemReferenceToArray
                             33 	.globl _cJSON_AddItemReferenceToObject
                             34 	.globl _cJSON_DetachItemFromArray
                             35 	.globl _cJSON_DeleteItemFromArray
                             36 	.globl _cJSON_DetachItemFromObject
                             37 	.globl _cJSON_DeleteItemFromObject
                             38 	.globl _cJSON_ReplaceItemInArray
                             39 	.globl _cJSON_ReplaceItemInObject
                             40 	.globl _cJSON_CreateNull
                             41 	.globl _cJSON_CreateTrue
                             42 	.globl _cJSON_CreateFalse
                             43 	.globl _cJSON_CreateBool
                             44 	.globl _cJSON_CreateNumber
                             45 	.globl _cJSON_CreateString
                             46 	.globl _cJSON_CreateArray
                             47 	.globl _cJSON_CreateObject
                             48 	.globl _cJSON_CreateIntArray
                             49 	.globl _cJSON_CreateFloatArray
                             50 	.globl _cJSON_CreateDoubleArray
                             51 	.globl _cJSON_CreateStringArray
                             52 	.globl _cJSON_Duplicate
                             53 	.globl _cJSON_Minify
                             54 ;--------------------------------------------------------
                             55 ; special function registers
                             56 ;--------------------------------------------------------
                             57 	.area RSEG    (ABS,DATA)
   0000                      58 	.org 0x0000
                             59 ;--------------------------------------------------------
                             60 ; special function bits
                             61 ;--------------------------------------------------------
                             62 	.area RSEG    (ABS,DATA)
   0000                      63 	.org 0x0000
                             64 ;--------------------------------------------------------
                             65 ; overlayable register banks
                             66 ;--------------------------------------------------------
                             67 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      68 	.ds 8
                             69 ;--------------------------------------------------------
                             70 ; internal ram data
                             71 ;--------------------------------------------------------
                             72 	.area DSEG    (DATA)
                             73 ;--------------------------------------------------------
                             74 ; overlayable items in internal ram 
                             75 ;--------------------------------------------------------
                             76 	.area OSEG    (OVR,DATA)
                             77 ;--------------------------------------------------------
                             78 ; indirectly addressable internal ram data
                             79 ;--------------------------------------------------------
                             80 	.area ISEG    (DATA)
                             81 ;--------------------------------------------------------
                             82 ; absolute internal ram data
                             83 ;--------------------------------------------------------
                             84 	.area IABS    (ABS,DATA)
                             85 	.area IABS    (ABS,DATA)
                             86 ;--------------------------------------------------------
                             87 ; bit data
                             88 ;--------------------------------------------------------
                             89 	.area BSEG    (BIT)
                             90 ;--------------------------------------------------------
                             91 ; paged external ram data
                             92 ;--------------------------------------------------------
                             93 	.area PSEG    (PAG,XDATA)
                             94 ;--------------------------------------------------------
                             95 ; external ram data
                             96 ;--------------------------------------------------------
                             97 	.area XSEG    (XDATA)
   0000                      98 _ep:
   0000                      99 	.ds 3
                            100 ;--------------------------------------------------------
                            101 ; absolute external ram data
                            102 ;--------------------------------------------------------
                            103 	.area XABS    (ABS,XDATA)
                            104 ;--------------------------------------------------------
                            105 ; external initialized ram data
                            106 ;--------------------------------------------------------
                            107 	.area XISEG   (XDATA)
                            108 	.area HOME    (CODE)
                            109 	.area GSINIT0 (CODE)
                            110 	.area GSINIT1 (CODE)
                            111 	.area GSINIT2 (CODE)
                            112 	.area GSINIT3 (CODE)
                            113 	.area GSINIT4 (CODE)
                            114 	.area GSINIT5 (CODE)
                            115 	.area GSINIT  (CODE)
                            116 	.area GSFINAL (CODE)
                            117 	.area CSEG    (CODE)
                            118 ;--------------------------------------------------------
                            119 ; global & static initialisations
                            120 ;--------------------------------------------------------
                            121 	.area HOME    (CODE)
                            122 	.area GSINIT  (CODE)
                            123 	.area GSFINAL (CODE)
                            124 	.area GSINIT  (CODE)
                            125 ;--------------------------------------------------------
                            126 ; Home
                            127 ;--------------------------------------------------------
                            128 	.area HOME    (CODE)
                            129 	.area HOME    (CODE)
                            130 ;--------------------------------------------------------
                            131 ; code
                            132 ;--------------------------------------------------------
                            133 	.area BANK1   (CODE)
                            134 ;------------------------------------------------------------
                            135 ;Allocation info for local variables in function 'cJSON_GetErrorPtr'
                            136 ;------------------------------------------------------------
                            137 ;	cJSON.c:36: const char *cJSON_GetErrorPtr(void) {return ep;}
                            138 ;	-----------------------------------------
                            139 ;	 function cJSON_GetErrorPtr
                            140 ;	-----------------------------------------
   0000                     141 _cJSON_GetErrorPtr:
                    0007    142 	ar7 = 0x07
                    0006    143 	ar6 = 0x06
                    0005    144 	ar5 = 0x05
                    0004    145 	ar4 = 0x04
                    0003    146 	ar3 = 0x03
                    0002    147 	ar2 = 0x02
                    0001    148 	ar1 = 0x01
                    0000    149 	ar0 = 0x00
   0000 90s00r00            150 	mov	dptr,#_ep
   0003 E0                  151 	movx	a,@dptr
   0004 FD                  152 	mov	r5,a
   0005 A3                  153 	inc	dptr
   0006 E0                  154 	movx	a,@dptr
   0007 FE                  155 	mov	r6,a
   0008 A3                  156 	inc	dptr
   0009 E0                  157 	movx	a,@dptr
   000A FF                  158 	mov	r7,a
   000B 8D 82               159 	mov	dpl,r5
   000D 8E 83               160 	mov	dph,r6
   000F 8F F0               161 	mov	b,r7
   0011 02s00r00            162 	ljmp	__sdcc_banked_ret
                            163 ;------------------------------------------------------------
                            164 ;Allocation info for local variables in function 'cJSON_strcasecmp'
                            165 ;------------------------------------------------------------
                            166 ;s2                        Allocated to stack - sp -10
                            167 ;s1                        Allocated to registers r5 r6 r7 
                            168 ;sloc0                     Allocated to stack - sp -4
                            169 ;sloc1                     Allocated to stack - sp -1
                            170 ;sloc2                     Allocated to stack - sp +0
                            171 ;------------------------------------------------------------
                            172 ;	cJSON.c:38: static int cJSON_strcasecmp(const char *s1,const char *s2)
                            173 ;	-----------------------------------------
                            174 ;	 function cJSON_strcasecmp
                            175 ;	-----------------------------------------
   0014                     176 _cJSON_strcasecmp:
   0014 E5 81               177 	mov	a,sp
   0016 24 05               178 	add	a,#0x05
   0018 F5 81               179 	mov	sp,a
   001A AD 82               180 	mov	r5,dpl
   001C AE 83               181 	mov	r6,dph
   001E AF F0               182 	mov	r7,b
                            183 ;	cJSON.c:40: if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
   0020 ED                  184 	mov	a,r5
   0021 4E                  185 	orl	a,r6
   0022 70 2F               186 	jnz	00102$
   0024 E5 81               187 	mov	a,sp
   0026 24 F6               188 	add	a,#0xf6
   0028 F8                  189 	mov	r0,a
   0029 C0 05               190 	push	ar5
   002B C0 06               191 	push	ar6
   002D C0 07               192 	push	ar7
   002F 86 82               193 	mov	dpl,@r0
   0031 08                  194 	inc	r0
   0032 86 83               195 	mov	dph,@r0
   0034 08                  196 	inc	r0
   0035 86 F0               197 	mov	b,@r0
   0037 12s00r00            198 	lcall	___gptr_cmp
   003A 15 81               199 	dec	sp
   003C 15 81               200 	dec	sp
   003E 15 81               201 	dec	sp
   0040 60 02               202 	jz	00145$
   0042 80 04               203 	sjmp	00113$
   0044                     204 00145$:
   0044 7C 00               205 	mov	r4,#0x00
   0046 80 02               206 	sjmp	00114$
   0048                     207 00113$:
   0048 7C 01               208 	mov	r4,#0x01
   004A                     209 00114$:
   004A 7B 00               210 	mov	r3,#0x00
   004C 8C 82               211 	mov	dpl,r4
   004E 8B 83               212 	mov	dph,r3
   0050 02s02r56            213 	ljmp	00111$
   0053                     214 00102$:
   0053 E5 81               215 	mov	a,sp
   0055 24 F6               216 	add	a,#0xf6
   0057 F8                  217 	mov	r0,a
   0058 E6                  218 	mov	a,@r0
   0059 08                  219 	inc	r0
   005A 46                  220 	orl	a,@r0
   005B 70 06               221 	jnz	00130$
   005D 90 00 01            222 	mov	dptr,#0x0001
   0060 02s02r56            223 	ljmp	00111$
   0063                     224 00130$:
   0063 8D 02               225 	mov	ar2,r5
   0065 8E 03               226 	mov	ar3,r6
   0067 8F 04               227 	mov	ar4,r7
   0069 E5 81               228 	mov	a,sp
   006B 24 F6               229 	add	a,#0xf6
   006D F8                  230 	mov	r0,a
   006E E5 81               231 	mov	a,sp
   0070 24 FC               232 	add	a,#0xfc
   0072 F9                  233 	mov	r1,a
   0073 E6                  234 	mov	a,@r0
   0074 F7                  235 	mov	@r1,a
   0075 08                  236 	inc	r0
   0076 09                  237 	inc	r1
   0077 E6                  238 	mov	a,@r0
   0078 F7                  239 	mov	@r1,a
   0079 08                  240 	inc	r0
   007A 09                  241 	inc	r1
   007B E6                  242 	mov	a,@r0
   007C F7                  243 	mov	@r1,a
   007D                     244 00107$:
                            245 ;	cJSON.c:41: for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
   007D C0 05               246 	push	ar5
   007F C0 06               247 	push	ar6
   0081 C0 07               248 	push	ar7
   0083 8A 82               249 	mov	dpl,r2
   0085 8B 83               250 	mov	dph,r3
   0087 8C F0               251 	mov	b,r4
   0089 12s00r00            252 	lcall	__gptrget
   008C FF                  253 	mov	r7,a
   008D F5 82               254 	mov	dpl,a
   008F C0 07               255 	push	ar7
   0091 C0 06               256 	push	ar6
   0093 C0 05               257 	push	ar5
   0095 C0 04               258 	push	ar4
   0097 C0 03               259 	push	ar3
   0099 C0 02               260 	push	ar2
   009B 78r00               261 	mov	r0,#_isupper
   009D 79s00               262 	mov	r1,#(_isupper >> 8)
   009F 7As00               263 	mov	r2,#(_isupper >> 16)
   00A1 12s00r00            264 	lcall	__sdcc_banked_call
   00A4 E5 82               265 	mov	a,dpl
   00A6 D0 02               266 	pop	ar2
   00A8 D0 03               267 	pop	ar3
   00AA D0 04               268 	pop	ar4
   00AC D0 05               269 	pop	ar5
   00AE D0 06               270 	pop	ar6
   00B0 D0 07               271 	pop	ar7
   00B2 D0 07               272 	pop	ar7
   00B4 D0 06               273 	pop	ar6
   00B6 D0 05               274 	pop	ar5
   00B8 60 21               275 	jz	00115$
   00BA C0 05               276 	push	ar5
   00BC C0 06               277 	push	ar6
   00BE C0 07               278 	push	ar7
   00C0 8A 82               279 	mov	dpl,r2
   00C2 8B 83               280 	mov	dph,r3
   00C4 8C F0               281 	mov	b,r4
   00C6 12s00r00            282 	lcall	__gptrget
   00C9 FF                  283 	mov	r7,a
   00CA E5 81               284 	mov	a,sp
   00CC 24 FC               285 	add	a,#0xfc
   00CE F8                  286 	mov	r0,a
   00CF 74 20               287 	mov	a,#0x20
   00D1 4F                  288 	orl	a,r7
   00D2 F6                  289 	mov	@r0,a
   00D3 D0 07               290 	pop	ar7
   00D5 D0 06               291 	pop	ar6
   00D7 D0 05               292 	pop	ar5
   00D9 80 0D               293 	sjmp	00116$
   00DB                     294 00115$:
   00DB 8A 82               295 	mov	dpl,r2
   00DD 8B 83               296 	mov	dph,r3
   00DF 8C F0               297 	mov	b,r4
   00E1 A8 81               298 	mov	r0,sp
   00E3 18                  299 	dec	r0
   00E4 12s00r00            300 	lcall	__gptrget
   00E7 F6                  301 	mov	@r0,a
   00E8                     302 00116$:
   00E8 C0 05               303 	push	ar5
   00EA C0 06               304 	push	ar6
   00EC C0 07               305 	push	ar7
   00EE E5 81               306 	mov	a,sp
   00F0 24 F9               307 	add	a,#0xf9
   00F2 F8                  308 	mov	r0,a
   00F3 86 82               309 	mov	dpl,@r0
   00F5 08                  310 	inc	r0
   00F6 86 83               311 	mov	dph,@r0
   00F8 08                  312 	inc	r0
   00F9 86 F0               313 	mov	b,@r0
   00FB 12s00r00            314 	lcall	__gptrget
   00FE FF                  315 	mov	r7,a
   00FF F5 82               316 	mov	dpl,a
   0101 C0 07               317 	push	ar7
   0103 C0 06               318 	push	ar6
   0105 C0 05               319 	push	ar5
   0107 C0 04               320 	push	ar4
   0109 C0 03               321 	push	ar3
   010B C0 02               322 	push	ar2
   010D 78r00               323 	mov	r0,#_isupper
   010F 79s00               324 	mov	r1,#(_isupper >> 8)
   0111 7As00               325 	mov	r2,#(_isupper >> 16)
   0113 12s00r00            326 	lcall	__sdcc_banked_call
   0116 E5 82               327 	mov	a,dpl
   0118 D0 02               328 	pop	ar2
   011A D0 03               329 	pop	ar3
   011C D0 04               330 	pop	ar4
   011E D0 05               331 	pop	ar5
   0120 D0 06               332 	pop	ar6
   0122 D0 07               333 	pop	ar7
   0124 D0 07               334 	pop	ar7
   0126 D0 06               335 	pop	ar6
   0128 D0 05               336 	pop	ar5
   012A 60 28               337 	jz	00117$
   012C C0 05               338 	push	ar5
   012E C0 06               339 	push	ar6
   0130 C0 07               340 	push	ar7
   0132 E5 81               341 	mov	a,sp
   0134 24 F9               342 	add	a,#0xf9
   0136 F8                  343 	mov	r0,a
   0137 86 82               344 	mov	dpl,@r0
   0139 08                  345 	inc	r0
   013A 86 83               346 	mov	dph,@r0
   013C 08                  347 	inc	r0
   013D 86 F0               348 	mov	b,@r0
   013F 12s00r00            349 	lcall	__gptrget
   0142 FF                  350 	mov	r7,a
   0143 E5 81               351 	mov	a,sp
   0145 24 FD               352 	add	a,#0xfd
   0147 F8                  353 	mov	r0,a
   0148 74 20               354 	mov	a,#0x20
   014A 4F                  355 	orl	a,r7
   014B F6                  356 	mov	@r0,a
   014C D0 07               357 	pop	ar7
   014E D0 06               358 	pop	ar6
   0150 D0 05               359 	pop	ar5
   0152 80 13               360 	sjmp	00118$
   0154                     361 00117$:
   0154 E5 81               362 	mov	a,sp
   0156 24 FC               363 	add	a,#0xfc
   0158 F8                  364 	mov	r0,a
   0159 86 82               365 	mov	dpl,@r0
   015B 08                  366 	inc	r0
   015C 86 83               367 	mov	dph,@r0
   015E 08                  368 	inc	r0
   015F 86 F0               369 	mov	b,@r0
   0161 A9 81               370 	mov	r1,sp
   0163 12s00r00            371 	lcall	__gptrget
   0166 F7                  372 	mov	@r1,a
   0167                     373 00118$:
   0167 A8 81               374 	mov	r0,sp
   0169 18                  375 	dec	r0
   016A A9 81               376 	mov	r1,sp
   016C 86 F0               377 	mov	b,@r0
   016E E7                  378 	mov	a,@r1
   016F B5 F0 3E            379 	cjne	a,b,00110$
   0172 8A 82               380 	mov	dpl,r2
   0174 8B 83               381 	mov	dph,r3
   0176 8C F0               382 	mov	b,r4
   0178 12s00r00            383 	lcall	__gptrget
   017B 70 06               384 	jnz	00109$
   017D 90 00 00            385 	mov	dptr,#0x0000
   0180 02s02r56            386 	ljmp	00111$
   0183                     387 00109$:
   0183 0A                  388 	inc	r2
   0184 BA 00 01            389 	cjne	r2,#0x00,00152$
   0187 0B                  390 	inc	r3
   0188                     391 00152$:
   0188 8A 05               392 	mov	ar5,r2
   018A 8B 06               393 	mov	ar6,r3
   018C 8C 07               394 	mov	ar7,r4
   018E E5 81               395 	mov	a,sp
   0190 24 FC               396 	add	a,#0xfc
   0192 F8                  397 	mov	r0,a
   0193 06                  398 	inc	@r0
   0194 B6 00 02            399 	cjne	@r0,#0x00,00153$
   0197 08                  400 	inc	r0
   0198 06                  401 	inc	@r0
   0199                     402 00153$:
   0199 E5 81               403 	mov	a,sp
   019B 24 FC               404 	add	a,#0xfc
   019D F8                  405 	mov	r0,a
   019E E5 81               406 	mov	a,sp
   01A0 24 F6               407 	add	a,#0xf6
   01A2 F9                  408 	mov	r1,a
   01A3 E6                  409 	mov	a,@r0
   01A4 F7                  410 	mov	@r1,a
   01A5 08                  411 	inc	r0
   01A6 09                  412 	inc	r1
   01A7 E6                  413 	mov	a,@r0
   01A8 F7                  414 	mov	@r1,a
   01A9 08                  415 	inc	r0
   01AA 09                  416 	inc	r1
   01AB E6                  417 	mov	a,@r0
   01AC F7                  418 	mov	@r1,a
   01AD 02s00r7D            419 	ljmp	00107$
   01B0                     420 00110$:
                            421 ;	cJSON.c:42: return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
   01B0 8D 82               422 	mov	dpl,r5
   01B2 8E 83               423 	mov	dph,r6
   01B4 8F F0               424 	mov	b,r7
   01B6 12s00r00            425 	lcall	__gptrget
   01B9 F5 82               426 	mov	dpl,a
   01BB C0 07               427 	push	ar7
   01BD C0 06               428 	push	ar6
   01BF C0 05               429 	push	ar5
   01C1 78r00               430 	mov	r0,#_isupper
   01C3 79s00               431 	mov	r1,#(_isupper >> 8)
   01C5 7As00               432 	mov	r2,#(_isupper >> 16)
   01C7 12s00r00            433 	lcall	__sdcc_banked_call
   01CA E5 82               434 	mov	a,dpl
   01CC D0 05               435 	pop	ar5
   01CE D0 06               436 	pop	ar6
   01D0 D0 07               437 	pop	ar7
   01D2 60 0F               438 	jz	00119$
   01D4 8D 82               439 	mov	dpl,r5
   01D6 8E 83               440 	mov	dph,r6
   01D8 8F F0               441 	mov	b,r7
   01DA 12s00r00            442 	lcall	__gptrget
   01DD FC                  443 	mov	r4,a
   01DE 43 04 20            444 	orl	ar4,#0x20
   01E1 80 0B               445 	sjmp	00120$
   01E3                     446 00119$:
   01E3 8D 82               447 	mov	dpl,r5
   01E5 8E 83               448 	mov	dph,r6
   01E7 8F F0               449 	mov	b,r7
   01E9 12s00r00            450 	lcall	__gptrget
   01EC FD                  451 	mov	r5,a
   01ED FC                  452 	mov	r4,a
   01EE                     453 00120$:
   01EE EC                  454 	mov	a,r4
   01EF 33                  455 	rlc	a
   01F0 95 E0               456 	subb	a,acc
   01F2 FF                  457 	mov	r7,a
   01F3 E5 81               458 	mov	a,sp
   01F5 24 F6               459 	add	a,#0xf6
   01F7 F8                  460 	mov	r0,a
   01F8 86 03               461 	mov	ar3,@r0
   01FA 08                  462 	inc	r0
   01FB 86 05               463 	mov	ar5,@r0
   01FD 08                  464 	inc	r0
   01FE 86 06               465 	mov	ar6,@r0
   0200 8B 82               466 	mov	dpl,r3
   0202 8D 83               467 	mov	dph,r5
   0204 8E F0               468 	mov	b,r6
   0206 12s00r00            469 	lcall	__gptrget
   0209 F5 82               470 	mov	dpl,a
   020B C0 07               471 	push	ar7
   020D C0 06               472 	push	ar6
   020F C0 05               473 	push	ar5
   0211 C0 04               474 	push	ar4
   0213 C0 03               475 	push	ar3
   0215 78r00               476 	mov	r0,#_isupper
   0217 79s00               477 	mov	r1,#(_isupper >> 8)
   0219 7As00               478 	mov	r2,#(_isupper >> 16)
   021B 12s00r00            479 	lcall	__sdcc_banked_call
   021E E5 82               480 	mov	a,dpl
   0220 D0 03               481 	pop	ar3
   0222 D0 04               482 	pop	ar4
   0224 D0 05               483 	pop	ar5
   0226 D0 06               484 	pop	ar6
   0228 D0 07               485 	pop	ar7
   022A 60 0F               486 	jz	00121$
   022C 8B 82               487 	mov	dpl,r3
   022E 8D 83               488 	mov	dph,r5
   0230 8E F0               489 	mov	b,r6
   0232 12s00r00            490 	lcall	__gptrget
   0235 FA                  491 	mov	r2,a
   0236 43 02 20            492 	orl	ar2,#0x20
   0239 80 0B               493 	sjmp	00122$
   023B                     494 00121$:
   023B 8B 82               495 	mov	dpl,r3
   023D 8D 83               496 	mov	dph,r5
   023F 8E F0               497 	mov	b,r6
   0241 12s00r00            498 	lcall	__gptrget
   0244 FB                  499 	mov	r3,a
   0245 FA                  500 	mov	r2,a
   0246                     501 00122$:
   0246 EA                  502 	mov	a,r2
   0247 33                  503 	rlc	a
   0248 95 E0               504 	subb	a,acc
   024A FE                  505 	mov	r6,a
   024B EC                  506 	mov	a,r4
   024C C3                  507 	clr	c
   024D 9A                  508 	subb	a,r2
   024E FC                  509 	mov	r4,a
   024F EF                  510 	mov	a,r7
   0250 9E                  511 	subb	a,r6
   0251 FF                  512 	mov	r7,a
   0252 8C 82               513 	mov	dpl,r4
   0254 8F 83               514 	mov	dph,r7
   0256                     515 00111$:
   0256 E5 81               516 	mov	a,sp
   0258 24 FB               517 	add	a,#0xFB
   025A F5 81               518 	mov	sp,a
   025C 02s00r00            519 	ljmp	__sdcc_banked_ret
                            520 ;------------------------------------------------------------
                            521 ;Allocation info for local variables in function 'cJSON_strdup'
                            522 ;------------------------------------------------------------
                            523 ;str                       Allocated to registers r5 r6 r7 
                            524 ;len                       Allocated to stack - sp -7
                            525 ;copy                      Allocated to stack - sp -5
                            526 ;sloc0                     Allocated to stack - sp -2
                            527 ;------------------------------------------------------------
                            528 ;	cJSON.c:48: static char* cJSON_strdup(const char* str)
                            529 ;	-----------------------------------------
                            530 ;	 function cJSON_strdup
                            531 ;	-----------------------------------------
   025F                     532 _cJSON_strdup:
   025F E5 81               533 	mov	a,sp
   0261 24 08               534 	add	a,#0x08
   0263 F5 81               535 	mov	sp,a
                            536 ;	cJSON.c:53: len = strlen(str) + 1;
   0265 AD 82               537 	mov	r5,dpl
   0267 AE 83               538 	mov	r6,dph
   0269 AF F0               539 	mov	r7,b
   026B C0 07               540 	push	ar7
   026D C0 06               541 	push	ar6
   026F C0 05               542 	push	ar5
   0271 78r00               543 	mov	r0,#_strlen
   0273 79s00               544 	mov	r1,#(_strlen >> 8)
   0275 7As00               545 	mov	r2,#(_strlen >> 16)
   0277 12s00r00            546 	lcall	__sdcc_banked_call
   027A AB 82               547 	mov	r3,dpl
   027C AC 83               548 	mov	r4,dph
   027E D0 05               549 	pop	ar5
   0280 D0 06               550 	pop	ar6
   0282 D0 07               551 	pop	ar7
   0284 E5 81               552 	mov	a,sp
   0286 24 F9               553 	add	a,#0xf9
   0288 F8                  554 	mov	r0,a
   0289 74 01               555 	mov	a,#0x01
   028B 2B                  556 	add	a,r3
   028C F6                  557 	mov	@r0,a
   028D E4                  558 	clr	a
   028E 3C                  559 	addc	a,r4
   028F 08                  560 	inc	r0
   0290 F6                  561 	mov	@r0,a
                            562 ;	cJSON.c:54: if (!(copy = (char*)cJSON_malloc(len))) return 0;
   0291 E5 81               563 	mov	a,sp
   0293 24 F9               564 	add	a,#0xf9
   0295 F8                  565 	mov	r0,a
   0296 86 82               566 	mov	dpl,@r0
   0298 08                  567 	inc	r0
   0299 86 83               568 	mov	dph,@r0
   029B C0 07               569 	push	ar7
   029D C0 06               570 	push	ar6
   029F C0 05               571 	push	ar5
   02A1 78r00               572 	mov	r0,#_malloc
   02A3 79s00               573 	mov	r1,#(_malloc >> 8)
   02A5 7As00               574 	mov	r2,#(_malloc >> 16)
   02A7 12s00r00            575 	lcall	__sdcc_banked_call
   02AA AA 82               576 	mov	r2,dpl
   02AC AC 83               577 	mov	r4,dph
   02AE D0 05               578 	pop	ar5
   02B0 D0 06               579 	pop	ar6
   02B2 D0 07               580 	pop	ar7
   02B4 E5 81               581 	mov	a,sp
   02B6 24 FB               582 	add	a,#0xfb
   02B8 F8                  583 	mov	r0,a
   02B9 A6 02               584 	mov	@r0,ar2
   02BB 08                  585 	inc	r0
   02BC A6 04               586 	mov	@r0,ar4
   02BE 08                  587 	inc	r0
   02BF 76 00               588 	mov	@r0,#0x00
   02C1 E5 81               589 	mov	a,sp
   02C3 24 FB               590 	add	a,#0xfb
   02C5 F8                  591 	mov	r0,a
   02C6 86 02               592 	mov	ar2,@r0
   02C8 08                  593 	inc	r0
   02C9 86 03               594 	mov	ar3,@r0
   02CB 08                  595 	inc	r0
   02CC 86 04               596 	mov	ar4,@r0
   02CE E5 81               597 	mov	a,sp
   02D0 24 FB               598 	add	a,#0xfb
   02D2 F8                  599 	mov	r0,a
   02D3 E6                  600 	mov	a,@r0
   02D4 08                  601 	inc	r0
   02D5 46                  602 	orl	a,@r0
   02D6 70 07               603 	jnz	00102$
   02D8 90 00 00            604 	mov	dptr,#0x0000
   02DB F5 F0               605 	mov	b,a
   02DD 80 55               606 	sjmp	00103$
   02DF                     607 00102$:
                            608 ;	cJSON.c:55: memcpy(copy,str,len);
   02DF A8 81               609 	mov	r0,sp
   02E1 18                  610 	dec	r0
   02E2 18                  611 	dec	r0
   02E3 A6 05               612 	mov	@r0,ar5
   02E5 08                  613 	inc	r0
   02E6 A6 06               614 	mov	@r0,ar6
   02E8 08                  615 	inc	r0
   02E9 A6 07               616 	mov	@r0,ar7
   02EB 8A 05               617 	mov	ar5,r2
   02ED 8B 06               618 	mov	ar6,r3
   02EF 8C 07               619 	mov	ar7,r4
   02F1 C0 04               620 	push	ar4
   02F3 C0 03               621 	push	ar3
   02F5 C0 02               622 	push	ar2
   02F7 E5 81               623 	mov	a,sp
   02F9 24 F6               624 	add	a,#0xf6
   02FB F8                  625 	mov	r0,a
   02FC E6                  626 	mov	a,@r0
   02FD C0 E0               627 	push	acc
   02FF 08                  628 	inc	r0
   0300 E6                  629 	mov	a,@r0
   0301 C0 E0               630 	push	acc
   0303 E5 81               631 	mov	a,sp
   0305 24 F9               632 	add	a,#0xf9
   0307 F8                  633 	mov	r0,a
   0308 E6                  634 	mov	a,@r0
   0309 C0 E0               635 	push	acc
   030B 08                  636 	inc	r0
   030C E6                  637 	mov	a,@r0
   030D C0 E0               638 	push	acc
   030F 08                  639 	inc	r0
   0310 E6                  640 	mov	a,@r0
   0311 C0 E0               641 	push	acc
   0313 8D 82               642 	mov	dpl,r5
   0315 8E 83               643 	mov	dph,r6
   0317 8F F0               644 	mov	b,r7
   0319 78r00               645 	mov	r0,#_memcpy
   031B 79s00               646 	mov	r1,#(_memcpy >> 8)
   031D 7As00               647 	mov	r2,#(_memcpy >> 16)
   031F 12s00r00            648 	lcall	__sdcc_banked_call
   0322 E5 81               649 	mov	a,sp
   0324 24 FB               650 	add	a,#0xfb
   0326 F5 81               651 	mov	sp,a
   0328 D0 02               652 	pop	ar2
   032A D0 03               653 	pop	ar3
   032C D0 04               654 	pop	ar4
                            655 ;	cJSON.c:56: return copy;
   032E 8A 82               656 	mov	dpl,r2
   0330 8B 83               657 	mov	dph,r3
   0332 8C F0               658 	mov	b,r4
   0334                     659 00103$:
   0334 E5 81               660 	mov	a,sp
   0336 24 F8               661 	add	a,#0xF8
   0338 F5 81               662 	mov	sp,a
   033A 02s00r00            663 	ljmp	__sdcc_banked_ret
                            664 ;------------------------------------------------------------
                            665 ;Allocation info for local variables in function 'cJSON_New_Item'
                            666 ;------------------------------------------------------------
                            667 ;node                      Allocated to registers r6 r5 r7 
                            668 ;------------------------------------------------------------
                            669 ;	cJSON.c:60: static cJSON *cJSON_New_Item(void)
                            670 ;	-----------------------------------------
                            671 ;	 function cJSON_New_Item
                            672 ;	-----------------------------------------
   033D                     673 _cJSON_New_Item:
                            674 ;	cJSON.c:62: cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
   033D 90 00 17            675 	mov	dptr,#0x0017
   0340 78r00               676 	mov	r0,#_malloc
   0342 79s00               677 	mov	r1,#(_malloc >> 8)
   0344 7As00               678 	mov	r2,#(_malloc >> 16)
   0346 12s00r00            679 	lcall	__sdcc_banked_call
   0349 AE 82               680 	mov	r6,dpl
   034B AD 83               681 	mov	r5,dph
   034D 7F 00               682 	mov	r7,#0x00
                            683 ;	cJSON.c:63: if (node) memset(node,0,sizeof(cJSON));
   034F EE                  684 	mov	a,r6
   0350 4D                  685 	orl	a,r5
   0351 60 31               686 	jz	00102$
   0353 8E 02               687 	mov	ar2,r6
   0355 8D 03               688 	mov	ar3,r5
   0357 8F 04               689 	mov	ar4,r7
   0359 C0 07               690 	push	ar7
   035B C0 06               691 	push	ar6
   035D C0 05               692 	push	ar5
   035F 74 17               693 	mov	a,#0x17
   0361 C0 E0               694 	push	acc
   0363 E4                  695 	clr	a
   0364 C0 E0               696 	push	acc
   0366 E4                  697 	clr	a
   0367 C0 E0               698 	push	acc
   0369 8A 82               699 	mov	dpl,r2
   036B 8B 83               700 	mov	dph,r3
   036D 8C F0               701 	mov	b,r4
   036F 78r00               702 	mov	r0,#_memset
   0371 79s00               703 	mov	r1,#(_memset >> 8)
   0373 7As00               704 	mov	r2,#(_memset >> 16)
   0375 12s00r00            705 	lcall	__sdcc_banked_call
   0378 15 81               706 	dec	sp
   037A 15 81               707 	dec	sp
   037C 15 81               708 	dec	sp
   037E D0 05               709 	pop	ar5
   0380 D0 06               710 	pop	ar6
   0382 D0 07               711 	pop	ar7
   0384                     712 00102$:
                            713 ;	cJSON.c:64: return node;
   0384 8E 82               714 	mov	dpl,r6
   0386 8D 83               715 	mov	dph,r5
   0388 8F F0               716 	mov	b,r7
   038A 02s00r00            717 	ljmp	__sdcc_banked_ret
                            718 ;------------------------------------------------------------
                            719 ;Allocation info for local variables in function 'cJSON_Delete'
                            720 ;------------------------------------------------------------
                            721 ;c                         Allocated to registers r5 r6 r7 
                            722 ;next                      Allocated to stack - sp -2
                            723 ;------------------------------------------------------------
                            724 ;	cJSON.c:68: void cJSON_Delete(cJSON *c)
                            725 ;	-----------------------------------------
                            726 ;	 function cJSON_Delete
                            727 ;	-----------------------------------------
   038D                     728 _cJSON_Delete:
   038D 05 81               729 	inc	sp
   038F 05 81               730 	inc	sp
   0391 05 81               731 	inc	sp
   0393 AD 82               732 	mov	r5,dpl
   0395 AE 83               733 	mov	r6,dph
   0397 AF F0               734 	mov	r7,b
                            735 ;	cJSON.c:71: while (c)
   0399                     736 00109$:
   0399 ED                  737 	mov	a,r5
   039A 4E                  738 	orl	a,r6
   039B 60 7A               739 	jz	00112$
                            740 ;	cJSON.c:73: next=c->next;
   039D 8D 82               741 	mov	dpl,r5
   039F 8E 83               742 	mov	dph,r6
   03A1 8F F0               743 	mov	b,r7
   03A3 12s00r00            744 	lcall	__gptrget
   03A6 FA                  745 	mov	r2,a
   03A7 A3                  746 	inc	dptr
   03A8 12s00r00            747 	lcall	__gptrget
   03AB FB                  748 	mov	r3,a
   03AC A3                  749 	inc	dptr
   03AD 12s00r00            750 	lcall	__gptrget
   03B0 FC                  751 	mov	r4,a
   03B1 A8 81               752 	mov	r0,sp
   03B3 18                  753 	dec	r0
   03B4 18                  754 	dec	r0
   03B5 A6 02               755 	mov	@r0,ar2
   03B7 08                  756 	inc	r0
   03B8 A6 03               757 	mov	@r0,ar3
   03BA 08                  758 	inc	r0
   03BB A6 04               759 	mov	@r0,ar4
                            760 ;	cJSON.c:74: if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
   03BD 74 09               761 	mov	a,#0x09
   03BF 2D                  762 	add	a,r5
   03C0 FA                  763 	mov	r2,a
   03C1 E4                  764 	clr	a
   03C2 3E                  765 	addc	a,r6
   03C3 FB                  766 	mov	r3,a
   03C4 8F 04               767 	mov	ar4,r7
   03C6 8A 82               768 	mov	dpl,r2
   03C8 8B 83               769 	mov	dph,r3
   03CA 8C F0               770 	mov	b,r4
   03CC 12s00r00            771 	lcall	__gptrget
   03CF FA                  772 	mov	r2,a
   03D0 A3                  773 	inc	dptr
   03D1 12s00r00            774 	lcall	__gptrget
   03D4 FB                  775 	mov	r3,a
   03D5 20 E0 30            776 	jb	acc.0,00105$
   03D8 74 06               777 	mov	a,#0x06
   03DA 2D                  778 	add	a,r5
   03DB FA                  779 	mov	r2,a
   03DC E4                  780 	clr	a
   03DD 3E                  781 	addc	a,r6
   03DE FB                  782 	mov	r3,a
   03DF 8F 04               783 	mov	ar4,r7
   03E1 8A 82               784 	mov	dpl,r2
   03E3 8B 83               785 	mov	dph,r3
   03E5 8C F0               786 	mov	b,r4
   03E7 12s00r00            787 	lcall	__gptrget
   03EA FA                  788 	mov	r2,a
   03EB A3                  789 	inc	dptr
   03EC 12s00r00            790 	lcall	__gptrget
   03EF FB                  791 	mov	r3,a
   03F0 A3                  792 	inc	dptr
   03F1 12s00r00            793 	lcall	__gptrget
   03F4 FC                  794 	mov	r4,a
   03F5 EA                  795 	mov	a,r2
   03F6 4B                  796 	orl	a,r3
   03F7 60 0F               797 	jz	00105$
   03F9 8A 82               798 	mov	dpl,r2
   03FB 8B 83               799 	mov	dph,r3
   03FD 8C F0               800 	mov	b,r4
   03FF 78r8D               801 	mov	r0,#_cJSON_Delete
   0401 79s03               802 	mov	r1,#(_cJSON_Delete >> 8)
   0403 7As00               803 	mov	r2,#(_cJSON_Delete >> 16)
   0405 12s00r00            804 	lcall	__sdcc_banked_call
                            805 ;	cJSON.c:75: if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
   0408                     806 00105$:
                            807 ;	cJSON.c:78: c=next;
   0408 A8 81               808 	mov	r0,sp
   040A 18                  809 	dec	r0
   040B 18                  810 	dec	r0
   040C 86 05               811 	mov	ar5,@r0
   040E 08                  812 	inc	r0
   040F 86 06               813 	mov	ar6,@r0
   0411 08                  814 	inc	r0
   0412 86 07               815 	mov	ar7,@r0
   0414 02s03r99            816 	ljmp	00109$
   0417                     817 00112$:
   0417 15 81               818 	dec	sp
   0419 15 81               819 	dec	sp
   041B 15 81               820 	dec	sp
   041D 02s00r00            821 	ljmp	__sdcc_banked_ret
                            822 ;------------------------------------------------------------
                            823 ;Allocation info for local variables in function 'parse_number'
                            824 ;------------------------------------------------------------
                            825 ;num                       Allocated to stack - sp -31
                            826 ;item                      Allocated to stack - sp -25
                            827 ;n                         Allocated to stack - sp -22
                            828 ;sign                      Allocated to stack - sp -18
                            829 ;scale                     Allocated to stack - sp -14
                            830 ;subscale                  Allocated to registers 
                            831 ;signsubscale              Allocated to registers 
                            832 ;sloc0                     Allocated to stack - sp -10
                            833 ;sloc1                     Allocated to stack - sp -7
                            834 ;sloc2                     Allocated to stack - sp -3
                            835 ;------------------------------------------------------------
                            836 ;	cJSON.c:83: static const char *parse_number(cJSON *item,const char *num)
                            837 ;	-----------------------------------------
                            838 ;	 function parse_number
                            839 ;	-----------------------------------------
   0420                     840 _parse_number:
   0420 C0 82               841 	push	dpl
   0422 C0 83               842 	push	dph
   0424 C0 F0               843 	push	b
   0426 E5 81               844 	mov	a,sp
   0428 24 17               845 	add	a,#0x17
                            846 ;	cJSON.c:85: float n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
   042A F5 81               847 	mov	sp,a
   042C 24 EA               848 	add	a,#0xea
   042E F8                  849 	mov	r0,a
   042F E4                  850 	clr	a
   0430 F6                  851 	mov	@r0,a
   0431 08                  852 	inc	r0
   0432 F6                  853 	mov	@r0,a
   0433 08                  854 	inc	r0
   0434 F6                  855 	mov	@r0,a
   0435 08                  856 	inc	r0
   0436 F6                  857 	mov	@r0,a
   0437 E5 81               858 	mov	a,sp
   0439 24 EE               859 	add	a,#0xee
   043B F8                  860 	mov	r0,a
   043C E4                  861 	clr	a
   043D F6                  862 	mov	@r0,a
   043E 08                  863 	inc	r0
   043F F6                  864 	mov	@r0,a
   0440 08                  865 	inc	r0
   0441 76 80               866 	mov	@r0,#0x80
   0443 08                  867 	inc	r0
   0444 76 3F               868 	mov	@r0,#0x3F
   0446 E5 81               869 	mov	a,sp
   0448 24 F2               870 	add	a,#0xf2
   044A F8                  871 	mov	r0,a
   044B E4                  872 	clr	a
   044C F6                  873 	mov	@r0,a
   044D 08                  874 	inc	r0
   044E F6                  875 	mov	@r0,a
   044F 08                  876 	inc	r0
   0450 F6                  877 	mov	@r0,a
   0451 08                  878 	inc	r0
   0452 F6                  879 	mov	@r0,a
                            880 ;	cJSON.c:87: if (*num=='-') sign=-1,num++;	/* Has sign? */
   0453 E5 81               881 	mov	a,sp
   0455 24 E1               882 	add	a,#0xe1
   0457 F8                  883 	mov	r0,a
   0458 86 05               884 	mov	ar5,@r0
   045A 08                  885 	inc	r0
   045B 86 06               886 	mov	ar6,@r0
   045D 08                  887 	inc	r0
   045E 86 07               888 	mov	ar7,@r0
   0460 8D 82               889 	mov	dpl,r5
   0462 8E 83               890 	mov	dph,r6
   0464 8F F0               891 	mov	b,r7
   0466 12s00r00            892 	lcall	__gptrget
   0469 FC                  893 	mov	r4,a
   046A BC 2D 1F            894 	cjne	r4,#0x2D,00102$
   046D E5 81               895 	mov	a,sp
   046F 24 EE               896 	add	a,#0xee
   0471 F8                  897 	mov	r0,a
   0472 E4                  898 	clr	a
   0473 F6                  899 	mov	@r0,a
   0474 08                  900 	inc	r0
   0475 F6                  901 	mov	@r0,a
   0476 08                  902 	inc	r0
   0477 76 80               903 	mov	@r0,#0x80
   0479 08                  904 	inc	r0
   047A 76 BF               905 	mov	@r0,#0xBF
   047C E5 81               906 	mov	a,sp
   047E 24 E1               907 	add	a,#0xe1
   0480 F8                  908 	mov	r0,a
   0481 74 01               909 	mov	a,#0x01
   0483 2D                  910 	add	a,r5
   0484 F6                  911 	mov	@r0,a
   0485 E4                  912 	clr	a
   0486 3E                  913 	addc	a,r6
   0487 08                  914 	inc	r0
   0488 F6                  915 	mov	@r0,a
   0489 08                  916 	inc	r0
   048A A6 07               917 	mov	@r0,ar7
   048C                     918 00102$:
                            919 ;	cJSON.c:88: if (*num=='0') num++;			/* is zero */
   048C E5 81               920 	mov	a,sp
   048E 24 E1               921 	add	a,#0xe1
   0490 F8                  922 	mov	r0,a
   0491 86 05               923 	mov	ar5,@r0
   0493 08                  924 	inc	r0
   0494 86 06               925 	mov	ar6,@r0
   0496 08                  926 	inc	r0
   0497 86 07               927 	mov	ar7,@r0
   0499 8D 82               928 	mov	dpl,r5
   049B 8E 83               929 	mov	dph,r6
   049D 8F F0               930 	mov	b,r7
   049F 12s00r00            931 	lcall	__gptrget
   04A2 FC                  932 	mov	r4,a
   04A3 BC 30 10            933 	cjne	r4,#0x30,00104$
   04A6 E5 81               934 	mov	a,sp
   04A8 24 E1               935 	add	a,#0xe1
   04AA F8                  936 	mov	r0,a
   04AB 74 01               937 	mov	a,#0x01
   04AD 2D                  938 	add	a,r5
   04AE F6                  939 	mov	@r0,a
   04AF E4                  940 	clr	a
   04B0 3E                  941 	addc	a,r6
   04B1 08                  942 	inc	r0
   04B2 F6                  943 	mov	@r0,a
   04B3 08                  944 	inc	r0
   04B4 A6 07               945 	mov	@r0,ar7
   04B6                     946 00104$:
                            947 ;	cJSON.c:89: if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
   04B6 E5 81               948 	mov	a,sp
   04B8 24 E1               949 	add	a,#0xe1
   04BA F8                  950 	mov	r0,a
   04BB 86 05               951 	mov	ar5,@r0
   04BD 08                  952 	inc	r0
   04BE 86 06               953 	mov	ar6,@r0
   04C0 08                  954 	inc	r0
   04C1 86 07               955 	mov	ar7,@r0
   04C3 8D 82               956 	mov	dpl,r5
   04C5 8E 83               957 	mov	dph,r6
   04C7 8F F0               958 	mov	b,r7
   04C9 12s00r00            959 	lcall	__gptrget
   04CC FC                  960 	mov	r4,a
   04CD C3                  961 	clr	c
   04CE 64 80               962 	xrl	a,#0x80
   04D0 94 B1               963 	subb	a,#0xb1
   04D2 50 03               964 	jnc	00154$
   04D4 02s05rC9            965 	ljmp	00110$
   04D7                     966 00154$:
   04D7 C3                  967 	clr	c
   04D8 74 B9               968 	mov	a,#(0x39 ^ 0x80)
   04DA 8C F0               969 	mov	b,r4
   04DC 63 F0 80            970 	xrl	b,#0x80
   04DF 95 F0               971 	subb	a,b
   04E1 50 03               972 	jnc	00155$
   04E3 02s05rC9            973 	ljmp	00110$
   04E6                     974 00155$:
   04E6 E5 81               975 	mov	a,sp
   04E8 24 F6               976 	add	a,#0xf6
   04EA F8                  977 	mov	r0,a
   04EB A6 05               978 	mov	@r0,ar5
   04ED 08                  979 	inc	r0
   04EE A6 06               980 	mov	@r0,ar6
   04F0 08                  981 	inc	r0
   04F1 A6 07               982 	mov	@r0,ar7
   04F3                     983 00106$:
   04F3 E5 81               984 	mov	a,sp
   04F5 24 EA               985 	add	a,#0xea
   04F7 F8                  986 	mov	r0,a
   04F8 E6                  987 	mov	a,@r0
   04F9 C0 E0               988 	push	acc
   04FB 08                  989 	inc	r0
   04FC E6                  990 	mov	a,@r0
   04FD C0 E0               991 	push	acc
   04FF 08                  992 	inc	r0
   0500 E6                  993 	mov	a,@r0
   0501 C0 E0               994 	push	acc
   0503 08                  995 	inc	r0
   0504 E6                  996 	mov	a,@r0
   0505 C0 E0               997 	push	acc
   0507 90 00 00            998 	mov	dptr,#0x0000
   050A 75 F0 20            999 	mov	b,#0x20
   050D 74 41              1000 	mov	a,#0x41
   050F 12s00r00           1001 	lcall	___fsmul
   0512 C8                 1002 	xch	a,r0
   0513 E5 81              1003 	mov	a,sp
   0515 24 F5              1004 	add	a,#0xf5
   0517 C8                 1005 	xch	a,r0
   0518 A6 82              1006 	mov	@r0,dpl
   051A 08                 1007 	inc	r0
   051B A6 83              1008 	mov	@r0,dph
   051D 08                 1009 	inc	r0
   051E A6 F0              1010 	mov	@r0,b
   0520 08                 1011 	inc	r0
   0521 F6                 1012 	mov	@r0,a
   0522 E5 81              1013 	mov	a,sp
   0524 24 FC              1014 	add	a,#0xfc
   0526 F5 81              1015 	mov	sp,a
   0528 24 F6              1016 	add	a,#0xf6
   052A F8                 1017 	mov	r0,a
   052B 86 82              1018 	mov	dpl,@r0
   052D 08                 1019 	inc	r0
   052E 86 83              1020 	mov	dph,@r0
   0530 08                 1021 	inc	r0
   0531 86 F0              1022 	mov	b,@r0
   0533 12s00r00           1023 	lcall	__gptrget
   0536 FE                 1024 	mov	r6,a
   0537 A3                 1025 	inc	dptr
   0538 18                 1026 	dec	r0
   0539 18                 1027 	dec	r0
   053A A6 82              1028 	mov	@r0,dpl
   053C 08                 1029 	inc	r0
   053D A6 83              1030 	mov	@r0,dph
   053F EE                 1031 	mov	a,r6
   0540 33                 1032 	rlc	a
   0541 95 E0              1033 	subb	a,acc
   0543 FD                 1034 	mov	r5,a
   0544 EE                 1035 	mov	a,r6
   0545 24 D0              1036 	add	a,#0xD0
   0547 FE                 1037 	mov	r6,a
   0548 ED                 1038 	mov	a,r5
   0549 34 FF              1039 	addc	a,#0xFF
   054B FD                 1040 	mov	r5,a
   054C 8E 82              1041 	mov	dpl,r6
   054E 8D 83              1042 	mov	dph,r5
   0550 12s00r00           1043 	lcall	___sint2fs
   0553 AC 82              1044 	mov	r4,dpl
   0555 AD 83              1045 	mov	r5,dph
   0557 AE F0              1046 	mov	r6,b
   0559 FF                 1047 	mov	r7,a
   055A C0 04              1048 	push	ar4
   055C C0 05              1049 	push	ar5
   055E C0 06              1050 	push	ar6
   0560 C0 07              1051 	push	ar7
   0562 E5 81              1052 	mov	a,sp
   0564 24 F5              1053 	add	a,#0xf5
   0566 F8                 1054 	mov	r0,a
   0567 86 82              1055 	mov	dpl,@r0
   0569 08                 1056 	inc	r0
   056A 86 83              1057 	mov	dph,@r0
   056C 08                 1058 	inc	r0
   056D 86 F0              1059 	mov	b,@r0
   056F 08                 1060 	inc	r0
   0570 E6                 1061 	mov	a,@r0
   0571 12s00r00           1062 	lcall	___fsadd
   0574 AC 82              1063 	mov	r4,dpl
   0576 AD 83              1064 	mov	r5,dph
   0578 AE F0              1065 	mov	r6,b
   057A FF                 1066 	mov	r7,a
   057B E5 81              1067 	mov	a,sp
   057D 24 FC              1068 	add	a,#0xfc
   057F F5 81              1069 	mov	sp,a
   0581 24 EA              1070 	add	a,#0xea
   0583 F8                 1071 	mov	r0,a
   0584 A6 04              1072 	mov	@r0,ar4
   0586 08                 1073 	inc	r0
   0587 A6 05              1074 	mov	@r0,ar5
   0589 08                 1075 	inc	r0
   058A A6 06              1076 	mov	@r0,ar6
   058C 08                 1077 	inc	r0
   058D A6 07              1078 	mov	@r0,ar7
   058F E5 81              1079 	mov	a,sp
   0591 24 F6              1080 	add	a,#0xf6
   0593 F8                 1081 	mov	r0,a
   0594 86 82              1082 	mov	dpl,@r0
   0596 08                 1083 	inc	r0
   0597 86 83              1084 	mov	dph,@r0
   0599 08                 1085 	inc	r0
   059A 86 F0              1086 	mov	b,@r0
   059C 12s00r00           1087 	lcall	__gptrget
   059F FF                 1088 	mov	r7,a
   05A0 C3                 1089 	clr	c
   05A1 64 80              1090 	xrl	a,#0x80
   05A3 94 B0              1091 	subb	a,#0xb0
   05A5 40 0E              1092 	jc	00136$
   05A7 74 B9              1093 	mov	a,#(0x39 ^ 0x80)
   05A9 8F F0              1094 	mov	b,r7
   05AB 63 F0 80           1095 	xrl	b,#0x80
   05AE 95 F0              1096 	subb	a,b
   05B0 40 03              1097 	jc	00157$
   05B2 02s04rF3           1098 	ljmp	00106$
   05B5                    1099 00157$:
   05B5                    1100 00136$:
   05B5 E5 81              1101 	mov	a,sp
   05B7 24 F6              1102 	add	a,#0xf6
   05B9 F8                 1103 	mov	r0,a
   05BA E5 81              1104 	mov	a,sp
   05BC 24 E1              1105 	add	a,#0xe1
   05BE F9                 1106 	mov	r1,a
   05BF E6                 1107 	mov	a,@r0
   05C0 F7                 1108 	mov	@r1,a
   05C1 08                 1109 	inc	r0
   05C2 09                 1110 	inc	r1
   05C3 E6                 1111 	mov	a,@r0
   05C4 F7                 1112 	mov	@r1,a
   05C5 08                 1113 	inc	r0
   05C6 09                 1114 	inc	r1
   05C7 E6                 1115 	mov	a,@r0
   05C8 F7                 1116 	mov	@r1,a
   05C9                    1117 00110$:
                           1118 ;	cJSON.c:90: if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale++; while (*num>='0' && *num<='9');}	/* Fractional part? */
   05C9 E5 81              1119 	mov	a,sp
   05CB 24 E1              1120 	add	a,#0xe1
   05CD F8                 1121 	mov	r0,a
   05CE 86 05              1122 	mov	ar5,@r0
   05D0 08                 1123 	inc	r0
   05D1 86 06              1124 	mov	ar6,@r0
   05D3 08                 1125 	inc	r0
   05D4 86 07              1126 	mov	ar7,@r0
   05D6 8D 82              1127 	mov	dpl,r5
   05D8 8E 83              1128 	mov	dph,r6
   05DA 8F F0              1129 	mov	b,r7
   05DC 12s00r00           1130 	lcall	__gptrget
   05DF FC                 1131 	mov	r4,a
   05E0 BC 2E 02           1132 	cjne	r4,#0x2E,00158$
   05E3 80 03              1133 	sjmp	00159$
   05E5                    1134 00158$:
   05E5 02s07r41           1135 	ljmp	00117$
   05E8                    1136 00159$:
   05E8 0D                 1137 	inc	r5
   05E9 BD 00 01           1138 	cjne	r5,#0x00,00160$
   05EC 0E                 1139 	inc	r6
   05ED                    1140 00160$:
   05ED 8D 82              1141 	mov	dpl,r5
   05EF 8E 83              1142 	mov	dph,r6
   05F1 8F F0              1143 	mov	b,r7
   05F3 12s00r00           1144 	lcall	__gptrget
   05F6 FC                 1145 	mov	r4,a
   05F7 C3                 1146 	clr	c
   05F8 64 80              1147 	xrl	a,#0x80
   05FA 94 B0              1148 	subb	a,#0xb0
   05FC 50 03              1149 	jnc	00161$
   05FE 02s07r41           1150 	ljmp	00117$
   0601                    1151 00161$:
   0601 C3                 1152 	clr	c
   0602 74 B9              1153 	mov	a,#(0x39 ^ 0x80)
   0604 8C F0              1154 	mov	b,r4
   0606 63 F0 80           1155 	xrl	b,#0x80
   0609 95 F0              1156 	subb	a,b
   060B 50 03              1157 	jnc	00162$
   060D 02s07r41           1158 	ljmp	00117$
   0610                    1159 00162$:
   0610 E5 81              1160 	mov	a,sp
   0612 24 E1              1161 	add	a,#0xe1
   0614 F8                 1162 	mov	r0,a
   0615 A6 05              1163 	mov	@r0,ar5
   0617 08                 1164 	inc	r0
   0618 A6 06              1165 	mov	@r0,ar6
   061A 08                 1166 	inc	r0
   061B A6 07              1167 	mov	@r0,ar7
   061D E5 81              1168 	mov	a,sp
   061F 24 E1              1169 	add	a,#0xe1
   0621 F8                 1170 	mov	r0,a
   0622 E5 81              1171 	mov	a,sp
   0624 24 F9              1172 	add	a,#0xf9
   0626 F9                 1173 	mov	r1,a
   0627 E6                 1174 	mov	a,@r0
   0628 F7                 1175 	mov	@r1,a
   0629 08                 1176 	inc	r0
   062A 09                 1177 	inc	r1
   062B E6                 1178 	mov	a,@r0
   062C F7                 1179 	mov	@r1,a
   062D 08                 1180 	inc	r0
   062E 09                 1181 	inc	r1
   062F E6                 1182 	mov	a,@r0
   0630 F7                 1183 	mov	@r1,a
   0631                    1184 00113$:
   0631 E5 81              1185 	mov	a,sp
   0633 24 EA              1186 	add	a,#0xea
   0635 F8                 1187 	mov	r0,a
   0636 E6                 1188 	mov	a,@r0
   0637 C0 E0              1189 	push	acc
   0639 08                 1190 	inc	r0
   063A E6                 1191 	mov	a,@r0
   063B C0 E0              1192 	push	acc
   063D 08                 1193 	inc	r0
   063E E6                 1194 	mov	a,@r0
   063F C0 E0              1195 	push	acc
   0641 08                 1196 	inc	r0
   0642 E6                 1197 	mov	a,@r0
   0643 C0 E0              1198 	push	acc
   0645 90 00 00           1199 	mov	dptr,#0x0000
   0648 75 F0 20           1200 	mov	b,#0x20
   064B 74 41              1201 	mov	a,#0x41
   064D 12s00r00           1202 	lcall	___fsmul
   0650 C8                 1203 	xch	a,r0
   0651 E5 81              1204 	mov	a,sp
   0653 24 F9              1205 	add	a,#0xf9
   0655 C8                 1206 	xch	a,r0
   0656 A6 82              1207 	mov	@r0,dpl
   0658 08                 1208 	inc	r0
   0659 A6 83              1209 	mov	@r0,dph
   065B 08                 1210 	inc	r0
   065C A6 F0              1211 	mov	@r0,b
   065E 08                 1212 	inc	r0
   065F F6                 1213 	mov	@r0,a
   0660 E5 81              1214 	mov	a,sp
   0662 24 FC              1215 	add	a,#0xfc
   0664 F5 81              1216 	mov	sp,a
   0666 24 F9              1217 	add	a,#0xf9
   0668 F8                 1218 	mov	r0,a
   0669 86 82              1219 	mov	dpl,@r0
   066B 08                 1220 	inc	r0
   066C 86 83              1221 	mov	dph,@r0
   066E 08                 1222 	inc	r0
   066F 86 F0              1223 	mov	b,@r0
   0671 12s00r00           1224 	lcall	__gptrget
   0674 FE                 1225 	mov	r6,a
   0675 A3                 1226 	inc	dptr
   0676 18                 1227 	dec	r0
   0677 18                 1228 	dec	r0
   0678 A6 82              1229 	mov	@r0,dpl
   067A 08                 1230 	inc	r0
   067B A6 83              1231 	mov	@r0,dph
   067D EE                 1232 	mov	a,r6
   067E 33                 1233 	rlc	a
   067F 95 E0              1234 	subb	a,acc
   0681 FD                 1235 	mov	r5,a
   0682 EE                 1236 	mov	a,r6
   0683 24 D0              1237 	add	a,#0xD0
   0685 FE                 1238 	mov	r6,a
   0686 ED                 1239 	mov	a,r5
   0687 34 FF              1240 	addc	a,#0xFF
   0689 FD                 1241 	mov	r5,a
   068A 8E 82              1242 	mov	dpl,r6
   068C 8D 83              1243 	mov	dph,r5
   068E 12s00r00           1244 	lcall	___sint2fs
   0691 AC 82              1245 	mov	r4,dpl
   0693 AD 83              1246 	mov	r5,dph
   0695 AE F0              1247 	mov	r6,b
   0697 FF                 1248 	mov	r7,a
   0698 C0 04              1249 	push	ar4
   069A C0 05              1250 	push	ar5
   069C C0 06              1251 	push	ar6
   069E C0 07              1252 	push	ar7
   06A0 E5 81              1253 	mov	a,sp
   06A2 24 F9              1254 	add	a,#0xf9
   06A4 F8                 1255 	mov	r0,a
   06A5 86 82              1256 	mov	dpl,@r0
   06A7 08                 1257 	inc	r0
   06A8 86 83              1258 	mov	dph,@r0
   06AA 08                 1259 	inc	r0
   06AB 86 F0              1260 	mov	b,@r0
   06AD 08                 1261 	inc	r0
   06AE E6                 1262 	mov	a,@r0
   06AF 12s00r00           1263 	lcall	___fsadd
   06B2 AC 82              1264 	mov	r4,dpl
   06B4 AD 83              1265 	mov	r5,dph
   06B6 AE F0              1266 	mov	r6,b
   06B8 FF                 1267 	mov	r7,a
   06B9 E5 81              1268 	mov	a,sp
   06BB 24 FC              1269 	add	a,#0xfc
   06BD F5 81              1270 	mov	sp,a
   06BF 24 EA              1271 	add	a,#0xea
   06C1 F8                 1272 	mov	r0,a
   06C2 A6 04              1273 	mov	@r0,ar4
   06C4 08                 1274 	inc	r0
   06C5 A6 05              1275 	mov	@r0,ar5
   06C7 08                 1276 	inc	r0
   06C8 A6 06              1277 	mov	@r0,ar6
   06CA 08                 1278 	inc	r0
   06CB A6 07              1279 	mov	@r0,ar7
   06CD E4                 1280 	clr	a
   06CE C0 E0              1281 	push	acc
   06D0 C0 E0              1282 	push	acc
   06D2 74 80              1283 	mov	a,#0x80
   06D4 C0 E0              1284 	push	acc
   06D6 74 3F              1285 	mov	a,#0x3F
   06D8 C0 E0              1286 	push	acc
   06DA E5 81              1287 	mov	a,sp
   06DC 24 EE              1288 	add	a,#0xee
   06DE F8                 1289 	mov	r0,a
   06DF 86 82              1290 	mov	dpl,@r0
   06E1 08                 1291 	inc	r0
   06E2 86 83              1292 	mov	dph,@r0
   06E4 08                 1293 	inc	r0
   06E5 86 F0              1294 	mov	b,@r0
   06E7 08                 1295 	inc	r0
   06E8 E6                 1296 	mov	a,@r0
   06E9 12s00r00           1297 	lcall	___fsadd
   06EC AC 82              1298 	mov	r4,dpl
   06EE AD 83              1299 	mov	r5,dph
   06F0 AE F0              1300 	mov	r6,b
   06F2 FF                 1301 	mov	r7,a
   06F3 E5 81              1302 	mov	a,sp
   06F5 24 FC              1303 	add	a,#0xfc
   06F7 F5 81              1304 	mov	sp,a
   06F9 24 F2              1305 	add	a,#0xf2
   06FB F8                 1306 	mov	r0,a
   06FC A6 04              1307 	mov	@r0,ar4
   06FE 08                 1308 	inc	r0
   06FF A6 05              1309 	mov	@r0,ar5
   0701 08                 1310 	inc	r0
   0702 A6 06              1311 	mov	@r0,ar6
   0704 08                 1312 	inc	r0
   0705 A6 07              1313 	mov	@r0,ar7
   0707 E5 81              1314 	mov	a,sp
   0709 24 F9              1315 	add	a,#0xf9
   070B F8                 1316 	mov	r0,a
   070C 86 82              1317 	mov	dpl,@r0
   070E 08                 1318 	inc	r0
   070F 86 83              1319 	mov	dph,@r0
   0711 08                 1320 	inc	r0
   0712 86 F0              1321 	mov	b,@r0
   0714 12s00r00           1322 	lcall	__gptrget
   0717 FF                 1323 	mov	r7,a
   0718 C3                 1324 	clr	c
   0719 64 80              1325 	xrl	a,#0x80
   071B 94 B0              1326 	subb	a,#0xb0
   071D 40 0E              1327 	jc	00137$
   071F 74 B9              1328 	mov	a,#(0x39 ^ 0x80)
   0721 8F F0              1329 	mov	b,r7
   0723 63 F0 80           1330 	xrl	b,#0x80
   0726 95 F0              1331 	subb	a,b
   0728 40 03              1332 	jc	00164$
   072A 02s06r31           1333 	ljmp	00113$
   072D                    1334 00164$:
   072D                    1335 00137$:
   072D E5 81              1336 	mov	a,sp
   072F 24 F9              1337 	add	a,#0xf9
   0731 F8                 1338 	mov	r0,a
   0732 E5 81              1339 	mov	a,sp
   0734 24 E1              1340 	add	a,#0xe1
   0736 F9                 1341 	mov	r1,a
   0737 E6                 1342 	mov	a,@r0
   0738 F7                 1343 	mov	@r1,a
   0739 08                 1344 	inc	r0
   073A 09                 1345 	inc	r1
   073B E6                 1346 	mov	a,@r0
   073C F7                 1347 	mov	@r1,a
   073D 08                 1348 	inc	r0
   073E 09                 1349 	inc	r1
   073F E6                 1350 	mov	a,@r0
   0740 F7                 1351 	mov	@r1,a
   0741                    1352 00117$:
                           1353 ;	cJSON.c:92: if (scale) {
   0741 E5 81              1354 	mov	a,sp
   0743 24 F2              1355 	add	a,#0xf2
   0745 F8                 1356 	mov	r0,a
   0746 86 F0              1357 	mov	b,@r0
   0748 08                 1358 	inc	r0
   0749 E6                 1359 	mov	a,@r0
   074A 42 F0              1360 	orl	b,a
   074C 08                 1361 	inc	r0
   074D E6                 1362 	mov	a,@r0
   074E 42 F0              1363 	orl	b,a
   0750 08                 1364 	inc	r0
   0751 E6                 1365 	mov	a,@r0
   0752 54 7F              1366 	anl	a,#0x7F
   0754 45 F0              1367 	orl	a,b
   0756 70 03              1368 	jnz	00165$
   0758 02s07rF8           1369 	ljmp	00121$
   075B                    1370 00165$:
                           1371 ;	cJSON.c:93: n=sign*n/(10.0 * scale);
   075B E5 81              1372 	mov	a,sp
   075D 24 EA              1373 	add	a,#0xea
   075F F8                 1374 	mov	r0,a
   0760 E6                 1375 	mov	a,@r0
   0761 C0 E0              1376 	push	acc
   0763 08                 1377 	inc	r0
   0764 E6                 1378 	mov	a,@r0
   0765 C0 E0              1379 	push	acc
   0767 08                 1380 	inc	r0
   0768 E6                 1381 	mov	a,@r0
   0769 C0 E0              1382 	push	acc
   076B 08                 1383 	inc	r0
   076C E6                 1384 	mov	a,@r0
   076D C0 E0              1385 	push	acc
   076F E5 81              1386 	mov	a,sp
   0771 24 EA              1387 	add	a,#0xea
   0773 F8                 1388 	mov	r0,a
   0774 86 82              1389 	mov	dpl,@r0
   0776 08                 1390 	inc	r0
   0777 86 83              1391 	mov	dph,@r0
   0779 08                 1392 	inc	r0
   077A 86 F0              1393 	mov	b,@r0
   077C 08                 1394 	inc	r0
   077D E6                 1395 	mov	a,@r0
   077E 12s00r00           1396 	lcall	___fsmul
   0781 C8                 1397 	xch	a,r0
   0782 E5 81              1398 	mov	a,sp
   0784 24 F9              1399 	add	a,#0xf9
   0786 C8                 1400 	xch	a,r0
   0787 A6 82              1401 	mov	@r0,dpl
   0789 08                 1402 	inc	r0
   078A A6 83              1403 	mov	@r0,dph
   078C 08                 1404 	inc	r0
   078D A6 F0              1405 	mov	@r0,b
   078F 08                 1406 	inc	r0
   0790 F6                 1407 	mov	@r0,a
   0791 E5 81              1408 	mov	a,sp
   0793 24 FC              1409 	add	a,#0xfc
   0795 F5 81              1410 	mov	sp,a
   0797 24 F2              1411 	add	a,#0xf2
   0799 F8                 1412 	mov	r0,a
   079A E6                 1413 	mov	a,@r0
   079B C0 E0              1414 	push	acc
   079D 08                 1415 	inc	r0
   079E E6                 1416 	mov	a,@r0
   079F C0 E0              1417 	push	acc
   07A1 08                 1418 	inc	r0
   07A2 E6                 1419 	mov	a,@r0
   07A3 C0 E0              1420 	push	acc
   07A5 08                 1421 	inc	r0
   07A6 E6                 1422 	mov	a,@r0
   07A7 C0 E0              1423 	push	acc
   07A9 90 00 00           1424 	mov	dptr,#0x0000
   07AC 75 F0 20           1425 	mov	b,#0x20
   07AF 74 41              1426 	mov	a,#0x41
   07B1 12s00r00           1427 	lcall	___fsmul
   07B4 AA 82              1428 	mov	r2,dpl
   07B6 AB 83              1429 	mov	r3,dph
   07B8 AE F0              1430 	mov	r6,b
   07BA FF                 1431 	mov	r7,a
   07BB E5 81              1432 	mov	a,sp
   07BD 24 FC              1433 	add	a,#0xfc
   07BF F5 81              1434 	mov	sp,a
   07C1 C0 02              1435 	push	ar2
   07C3 C0 03              1436 	push	ar3
   07C5 C0 06              1437 	push	ar6
   07C7 C0 07              1438 	push	ar7
   07C9 E5 81              1439 	mov	a,sp
   07CB 24 F9              1440 	add	a,#0xf9
   07CD F8                 1441 	mov	r0,a
   07CE 86 82              1442 	mov	dpl,@r0
   07D0 08                 1443 	inc	r0
   07D1 86 83              1444 	mov	dph,@r0
   07D3 08                 1445 	inc	r0
   07D4 86 F0              1446 	mov	b,@r0
   07D6 08                 1447 	inc	r0
   07D7 E6                 1448 	mov	a,@r0
   07D8 12s00r00           1449 	lcall	___fsdiv
   07DB AC 82              1450 	mov	r4,dpl
   07DD AD 83              1451 	mov	r5,dph
   07DF AE F0              1452 	mov	r6,b
   07E1 FF                 1453 	mov	r7,a
   07E2 E5 81              1454 	mov	a,sp
   07E4 24 FC              1455 	add	a,#0xfc
   07E6 F5 81              1456 	mov	sp,a
   07E8 24 EA              1457 	add	a,#0xea
   07EA F8                 1458 	mov	r0,a
   07EB A6 04              1459 	mov	@r0,ar4
   07ED 08                 1460 	inc	r0
   07EE A6 05              1461 	mov	@r0,ar5
   07F0 08                 1462 	inc	r0
   07F1 A6 06              1463 	mov	@r0,ar6
   07F3 08                 1464 	inc	r0
   07F4 A6 07              1465 	mov	@r0,ar7
   07F6 80 41              1466 	sjmp	00122$
   07F8                    1467 00121$:
                           1468 ;	cJSON.c:95: n=sign*n;
   07F8 E5 81              1469 	mov	a,sp
   07FA 24 EA              1470 	add	a,#0xea
   07FC F8                 1471 	mov	r0,a
   07FD E6                 1472 	mov	a,@r0
   07FE C0 E0              1473 	push	acc
   0800 08                 1474 	inc	r0
   0801 E6                 1475 	mov	a,@r0
   0802 C0 E0              1476 	push	acc
   0804 08                 1477 	inc	r0
   0805 E6                 1478 	mov	a,@r0
   0806 C0 E0              1479 	push	acc
   0808 08                 1480 	inc	r0
   0809 E6                 1481 	mov	a,@r0
   080A C0 E0              1482 	push	acc
   080C E5 81              1483 	mov	a,sp
   080E 24 EA              1484 	add	a,#0xea
   0810 F8                 1485 	mov	r0,a
   0811 86 82              1486 	mov	dpl,@r0
   0813 08                 1487 	inc	r0
   0814 86 83              1488 	mov	dph,@r0
   0816 08                 1489 	inc	r0
   0817 86 F0              1490 	mov	b,@r0
   0819 08                 1491 	inc	r0
   081A E6                 1492 	mov	a,@r0
   081B 12s00r00           1493 	lcall	___fsmul
   081E AC 82              1494 	mov	r4,dpl
   0820 AD 83              1495 	mov	r5,dph
   0822 AE F0              1496 	mov	r6,b
   0824 FF                 1497 	mov	r7,a
   0825 E5 81              1498 	mov	a,sp
   0827 24 FC              1499 	add	a,#0xfc
   0829 F5 81              1500 	mov	sp,a
   082B 24 EA              1501 	add	a,#0xea
   082D F8                 1502 	mov	r0,a
   082E A6 04              1503 	mov	@r0,ar4
   0830 08                 1504 	inc	r0
   0831 A6 05              1505 	mov	@r0,ar5
   0833 08                 1506 	inc	r0
   0834 A6 06              1507 	mov	@r0,ar6
   0836 08                 1508 	inc	r0
   0837 A6 07              1509 	mov	@r0,ar7
   0839                    1510 00122$:
                           1511 ;	cJSON.c:98: item->valuefloat=n;
   0839 E5 81              1512 	mov	a,sp
   083B 24 E7              1513 	add	a,#0xe7
   083D F8                 1514 	mov	r0,a
   083E 74 10              1515 	mov	a,#0x10
   0840 26                 1516 	add	a,@r0
   0841 FD                 1517 	mov	r5,a
   0842 E4                 1518 	clr	a
   0843 08                 1519 	inc	r0
   0844 36                 1520 	addc	a,@r0
   0845 FE                 1521 	mov	r6,a
   0846 08                 1522 	inc	r0
   0847 86 07              1523 	mov	ar7,@r0
   0849 8D 82              1524 	mov	dpl,r5
   084B 8E 83              1525 	mov	dph,r6
   084D 8F F0              1526 	mov	b,r7
   084F E5 81              1527 	mov	a,sp
   0851 24 EA              1528 	add	a,#0xea
   0853 F8                 1529 	mov	r0,a
   0854 E6                 1530 	mov	a,@r0
   0855 12s00r00           1531 	lcall	__gptrput
   0858 A3                 1532 	inc	dptr
   0859 08                 1533 	inc	r0
   085A E6                 1534 	mov	a,@r0
   085B 12s00r00           1535 	lcall	__gptrput
   085E A3                 1536 	inc	dptr
   085F 08                 1537 	inc	r0
   0860 E6                 1538 	mov	a,@r0
   0861 12s00r00           1539 	lcall	__gptrput
   0864 A3                 1540 	inc	dptr
   0865 08                 1541 	inc	r0
   0866 E6                 1542 	mov	a,@r0
   0867 12s00r00           1543 	lcall	__gptrput
                           1544 ;	cJSON.c:99: item->valueint=(int)n;
   086A E5 81              1545 	mov	a,sp
   086C 24 E7              1546 	add	a,#0xe7
   086E F8                 1547 	mov	r0,a
   086F 74 0E              1548 	mov	a,#0x0E
   0871 26                 1549 	add	a,@r0
   0872 FD                 1550 	mov	r5,a
   0873 E4                 1551 	clr	a
   0874 08                 1552 	inc	r0
   0875 36                 1553 	addc	a,@r0
   0876 FE                 1554 	mov	r6,a
   0877 08                 1555 	inc	r0
   0878 86 07              1556 	mov	ar7,@r0
   087A E5 81              1557 	mov	a,sp
   087C 24 EA              1558 	add	a,#0xea
   087E F8                 1559 	mov	r0,a
   087F 86 82              1560 	mov	dpl,@r0
   0881 08                 1561 	inc	r0
   0882 86 83              1562 	mov	dph,@r0
   0884 08                 1563 	inc	r0
   0885 86 F0              1564 	mov	b,@r0
   0887 08                 1565 	inc	r0
   0888 E6                 1566 	mov	a,@r0
   0889 C0 07              1567 	push	ar7
   088B C0 06              1568 	push	ar6
   088D C0 05              1569 	push	ar5
   088F 12s00r00           1570 	lcall	___fs2sint
   0892 AB 82              1571 	mov	r3,dpl
   0894 AC 83              1572 	mov	r4,dph
   0896 D0 05              1573 	pop	ar5
   0898 D0 06              1574 	pop	ar6
   089A D0 07              1575 	pop	ar7
   089C 8D 82              1576 	mov	dpl,r5
   089E 8E 83              1577 	mov	dph,r6
   08A0 8F F0              1578 	mov	b,r7
   08A2 EB                 1579 	mov	a,r3
   08A3 12s00r00           1580 	lcall	__gptrput
   08A6 A3                 1581 	inc	dptr
   08A7 EC                 1582 	mov	a,r4
   08A8 12s00r00           1583 	lcall	__gptrput
                           1584 ;	cJSON.c:100: item->type=cJSON_Number;
   08AB E5 81              1585 	mov	a,sp
   08AD 24 E7              1586 	add	a,#0xe7
   08AF F8                 1587 	mov	r0,a
   08B0 74 09              1588 	mov	a,#0x09
   08B2 26                 1589 	add	a,@r0
   08B3 FD                 1590 	mov	r5,a
   08B4 E4                 1591 	clr	a
   08B5 08                 1592 	inc	r0
   08B6 36                 1593 	addc	a,@r0
   08B7 FE                 1594 	mov	r6,a
   08B8 08                 1595 	inc	r0
   08B9 86 07              1596 	mov	ar7,@r0
   08BB 8D 82              1597 	mov	dpl,r5
   08BD 8E 83              1598 	mov	dph,r6
   08BF 8F F0              1599 	mov	b,r7
   08C1 74 03              1600 	mov	a,#0x03
   08C3 12s00r00           1601 	lcall	__gptrput
   08C6 A3                 1602 	inc	dptr
   08C7 E4                 1603 	clr	a
   08C8 12s00r00           1604 	lcall	__gptrput
                           1605 ;	cJSON.c:101: return num;
   08CB E5 81              1606 	mov	a,sp
   08CD 24 E1              1607 	add	a,#0xe1
   08CF F8                 1608 	mov	r0,a
   08D0 86 82              1609 	mov	dpl,@r0
   08D2 08                 1610 	inc	r0
   08D3 86 83              1611 	mov	dph,@r0
   08D5 08                 1612 	inc	r0
   08D6 86 F0              1613 	mov	b,@r0
   08D8 E5 81              1614 	mov	a,sp
   08DA 24 E6              1615 	add	a,#0xE6
   08DC F5 81              1616 	mov	sp,a
   08DE 02s00r00           1617 	ljmp	__sdcc_banked_ret
                           1618 ;------------------------------------------------------------
                           1619 ;Allocation info for local variables in function 'print_number'
                           1620 ;------------------------------------------------------------
                           1621 ;item                      Allocated to registers r7 r6 r5 
                           1622 ;str                       Allocated to registers r6 r5 r7 
                           1623 ;d                         Allocated to stack - sp -10
                           1624 ;sloc0                     Allocated to stack - sp -6
                           1625 ;sloc1                     Allocated to stack - sp -2
                           1626 ;------------------------------------------------------------
                           1627 ;	cJSON.c:105: static char *print_number(cJSON *item)
                           1628 ;	-----------------------------------------
                           1629 ;	 function print_number
                           1630 ;	-----------------------------------------
   08E1                    1631 _print_number:
   08E1 E5 81              1632 	mov	a,sp
   08E3 24 0B              1633 	add	a,#0x0B
   08E5 F5 81              1634 	mov	sp,a
   08E7 AF 82              1635 	mov	r7,dpl
   08E9 AE 83              1636 	mov	r6,dph
   08EB AD F0              1637 	mov	r5,b
                           1638 ;	cJSON.c:108: float d=item->valuefloat;
   08ED 74 10              1639 	mov	a,#0x10
   08EF 2F                 1640 	add	a,r7
   08F0 FA                 1641 	mov	r2,a
   08F1 E4                 1642 	clr	a
   08F2 3E                 1643 	addc	a,r6
   08F3 FB                 1644 	mov	r3,a
   08F4 8D 04              1645 	mov	ar4,r5
   08F6 8A 82              1646 	mov	dpl,r2
   08F8 8B 83              1647 	mov	dph,r3
   08FA 8C F0              1648 	mov	b,r4
   08FC E5 81              1649 	mov	a,sp
   08FE 24 F6              1650 	add	a,#0xf6
   0900 F8                 1651 	mov	r0,a
   0901 12s00r00           1652 	lcall	__gptrget
   0904 F6                 1653 	mov	@r0,a
   0905 A3                 1654 	inc	dptr
   0906 12s00r00           1655 	lcall	__gptrget
   0909 08                 1656 	inc	r0
   090A F6                 1657 	mov	@r0,a
   090B A3                 1658 	inc	dptr
   090C 12s00r00           1659 	lcall	__gptrget
   090F 08                 1660 	inc	r0
   0910 F6                 1661 	mov	@r0,a
   0911 A3                 1662 	inc	dptr
   0912 12s00r00           1663 	lcall	__gptrget
   0915 08                 1664 	inc	r0
   0916 F6                 1665 	mov	@r0,a
   0917 E5 81              1666 	mov	a,sp
   0919 24 F6              1667 	add	a,#0xf6
                           1668 ;	cJSON.c:109: if ((float)item->valueint-d<= 0.0000001 || (float)item->valueint-d>= -0.0000001)	
   091B A8 81              1669 	mov	r0,sp
   091D 18                 1670 	dec	r0
   091E 18                 1671 	dec	r0
   091F 74 0E              1672 	mov	a,#0x0E
   0921 2F                 1673 	add	a,r7
   0922 F6                 1674 	mov	@r0,a
   0923 E4                 1675 	clr	a
   0924 3E                 1676 	addc	a,r6
   0925 08                 1677 	inc	r0
   0926 F6                 1678 	mov	@r0,a
   0927 08                 1679 	inc	r0
   0928 A6 05              1680 	mov	@r0,ar5
   092A A8 81              1681 	mov	r0,sp
   092C 18                 1682 	dec	r0
   092D 18                 1683 	dec	r0
   092E 86 82              1684 	mov	dpl,@r0
   0930 08                 1685 	inc	r0
   0931 86 83              1686 	mov	dph,@r0
   0933 08                 1687 	inc	r0
   0934 86 F0              1688 	mov	b,@r0
   0936 12s00r00           1689 	lcall	__gptrget
   0939 FB                 1690 	mov	r3,a
   093A A3                 1691 	inc	dptr
   093B 12s00r00           1692 	lcall	__gptrget
   093E FC                 1693 	mov	r4,a
   093F 8B 82              1694 	mov	dpl,r3
   0941 8C 83              1695 	mov	dph,r4
   0943 12s00r00           1696 	lcall	___sint2fs
   0946 C8                 1697 	xch	a,r0
   0947 E5 81              1698 	mov	a,sp
   0949 24 FA              1699 	add	a,#0xfa
   094B C8                 1700 	xch	a,r0
   094C A6 82              1701 	mov	@r0,dpl
   094E 08                 1702 	inc	r0
   094F A6 83              1703 	mov	@r0,dph
   0951 08                 1704 	inc	r0
   0952 A6 F0              1705 	mov	@r0,b
   0954 08                 1706 	inc	r0
   0955 F6                 1707 	mov	@r0,a
   0956 E5 81              1708 	mov	a,sp
   0958 24 F6              1709 	add	a,#0xf6
   095A F8                 1710 	mov	r0,a
   095B E6                 1711 	mov	a,@r0
   095C C0 E0              1712 	push	acc
   095E 08                 1713 	inc	r0
   095F E6                 1714 	mov	a,@r0
   0960 C0 E0              1715 	push	acc
   0962 08                 1716 	inc	r0
   0963 E6                 1717 	mov	a,@r0
   0964 C0 E0              1718 	push	acc
   0966 08                 1719 	inc	r0
   0967 E6                 1720 	mov	a,@r0
   0968 C0 E0              1721 	push	acc
   096A E5 81              1722 	mov	a,sp
   096C 24 F6              1723 	add	a,#0xf6
   096E F8                 1724 	mov	r0,a
   096F 86 82              1725 	mov	dpl,@r0
   0971 08                 1726 	inc	r0
   0972 86 83              1727 	mov	dph,@r0
   0974 08                 1728 	inc	r0
   0975 86 F0              1729 	mov	b,@r0
   0977 08                 1730 	inc	r0
   0978 E6                 1731 	mov	a,@r0
   0979 12s00r00           1732 	lcall	___fssub
   097C AA 82              1733 	mov	r2,dpl
   097E AB 83              1734 	mov	r3,dph
   0980 AC F0              1735 	mov	r4,b
   0982 FF                 1736 	mov	r7,a
   0983 E5 81              1737 	mov	a,sp
   0985 24 FC              1738 	add	a,#0xfc
   0987 F5 81              1739 	mov	sp,a
   0989 74 95              1740 	mov	a,#0x95
   098B C0 E0              1741 	push	acc
   098D 74 BF              1742 	mov	a,#0xBF
   098F C0 E0              1743 	push	acc
   0991 74 D6              1744 	mov	a,#0xD6
   0993 C0 E0              1745 	push	acc
   0995 74 33              1746 	mov	a,#0x33
   0997 C0 E0              1747 	push	acc
   0999 8A 82              1748 	mov	dpl,r2
   099B 8B 83              1749 	mov	dph,r3
   099D 8C F0              1750 	mov	b,r4
   099F EF                 1751 	mov	a,r7
   09A0 12s00r00           1752 	lcall	___fsgt
   09A3 AF 82              1753 	mov	r7,dpl
   09A5 E5 81              1754 	mov	a,sp
   09A7 24 FC              1755 	add	a,#0xfc
   09A9 F5 81              1756 	mov	sp,a
   09AB EF                 1757 	mov	a,r7
   09AC 60 58              1758 	jz	00105$
   09AE E5 81              1759 	mov	a,sp
   09B0 24 F6              1760 	add	a,#0xf6
   09B2 F8                 1761 	mov	r0,a
   09B3 E6                 1762 	mov	a,@r0
   09B4 C0 E0              1763 	push	acc
   09B6 08                 1764 	inc	r0
   09B7 E6                 1765 	mov	a,@r0
   09B8 C0 E0              1766 	push	acc
   09BA 08                 1767 	inc	r0
   09BB E6                 1768 	mov	a,@r0
   09BC C0 E0              1769 	push	acc
   09BE 08                 1770 	inc	r0
   09BF E6                 1771 	mov	a,@r0
   09C0 C0 E0              1772 	push	acc
   09C2 E5 81              1773 	mov	a,sp
   09C4 24 F6              1774 	add	a,#0xf6
   09C6 F8                 1775 	mov	r0,a
   09C7 86 82              1776 	mov	dpl,@r0
   09C9 08                 1777 	inc	r0
   09CA 86 83              1778 	mov	dph,@r0
   09CC 08                 1779 	inc	r0
   09CD 86 F0              1780 	mov	b,@r0
   09CF 08                 1781 	inc	r0
   09D0 E6                 1782 	mov	a,@r0
   09D1 12s00r00           1783 	lcall	___fssub
   09D4 AC 82              1784 	mov	r4,dpl
   09D6 AD 83              1785 	mov	r5,dph
   09D8 AE F0              1786 	mov	r6,b
   09DA FF                 1787 	mov	r7,a
   09DB E5 81              1788 	mov	a,sp
   09DD 24 FC              1789 	add	a,#0xfc
   09DF F5 81              1790 	mov	sp,a
   09E1 74 95              1791 	mov	a,#0x95
   09E3 C0 E0              1792 	push	acc
   09E5 74 BF              1793 	mov	a,#0xBF
   09E7 C0 E0              1794 	push	acc
   09E9 74 D6              1795 	mov	a,#0xD6
   09EB C0 E0              1796 	push	acc
   09ED 74 B3              1797 	mov	a,#0xB3
   09EF C0 E0              1798 	push	acc
   09F1 8C 82              1799 	mov	dpl,r4
   09F3 8D 83              1800 	mov	dph,r5
   09F5 8E F0              1801 	mov	b,r6
   09F7 EF                 1802 	mov	a,r7
   09F8 12s00r00           1803 	lcall	___fslt
   09FB AF 82              1804 	mov	r7,dpl
   09FD E5 81              1805 	mov	a,sp
   09FF 24 FC              1806 	add	a,#0xfc
   0A01 F5 81              1807 	mov	sp,a
   0A03 EF                 1808 	mov	a,r7
   0A04 70 61              1809 	jnz	00106$
   0A06                    1810 00105$:
                           1811 ;	cJSON.c:111: str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
   0A06 90 00 15           1812 	mov	dptr,#0x0015
   0A09 78r00              1813 	mov	r0,#_malloc
   0A0B 79s00              1814 	mov	r1,#(_malloc >> 8)
   0A0D 7As00              1815 	mov	r2,#(_malloc >> 16)
   0A0F 12s00r00           1816 	lcall	__sdcc_banked_call
   0A12 AE 82              1817 	mov	r6,dpl
   0A14 AD 83              1818 	mov	r5,dph
   0A16 7F 00              1819 	mov	r7,#0x00
                           1820 ;	cJSON.c:112: if (str) sprintf(str,"%d",item->valueint);
   0A18 EE                 1821 	mov	a,r6
   0A19 4D                 1822 	orl	a,r5
   0A1A 70 03              1823 	jnz	00119$
   0A1C 02s0ArC2           1824 	ljmp	00107$
   0A1F                    1825 00119$:
   0A1F A8 81              1826 	mov	r0,sp
   0A21 18                 1827 	dec	r0
   0A22 18                 1828 	dec	r0
   0A23 86 82              1829 	mov	dpl,@r0
   0A25 08                 1830 	inc	r0
   0A26 86 83              1831 	mov	dph,@r0
   0A28 08                 1832 	inc	r0
   0A29 86 F0              1833 	mov	b,@r0
   0A2B 12s00r00           1834 	lcall	__gptrget
   0A2E FB                 1835 	mov	r3,a
   0A2F A3                 1836 	inc	dptr
   0A30 12s00r00           1837 	lcall	__gptrget
   0A33 FC                 1838 	mov	r4,a
   0A34 C0 07              1839 	push	ar7
   0A36 C0 06              1840 	push	ar6
   0A38 C0 05              1841 	push	ar5
   0A3A C0 03              1842 	push	ar3
   0A3C C0 04              1843 	push	ar4
   0A3E 74r00              1844 	mov	a,#__str_0
   0A40 C0 E0              1845 	push	acc
   0A42 74s00              1846 	mov	a,#(__str_0 >> 8)
   0A44 C0 E0              1847 	push	acc
   0A46 74 80              1848 	mov	a,#0x80
   0A48 C0 E0              1849 	push	acc
   0A4A C0 06              1850 	push	ar6
   0A4C C0 05              1851 	push	ar5
   0A4E C0 07              1852 	push	ar7
   0A50 78r00              1853 	mov	r0,#_sprintf
   0A52 79s00              1854 	mov	r1,#(_sprintf >> 8)
   0A54 7As00              1855 	mov	r2,#(_sprintf >> 16)
   0A56 12s00r00           1856 	lcall	__sdcc_banked_call
   0A59 E5 81              1857 	mov	a,sp
   0A5B 24 F8              1858 	add	a,#0xf8
   0A5D F5 81              1859 	mov	sp,a
   0A5F D0 05              1860 	pop	ar5
   0A61 D0 06              1861 	pop	ar6
   0A63 D0 07              1862 	pop	ar7
   0A65 80 5B              1863 	sjmp	00107$
   0A67                    1864 00106$:
                           1865 ;	cJSON.c:116: str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
   0A67 90 00 40           1866 	mov	dptr,#0x0040
   0A6A 78r00              1867 	mov	r0,#_malloc
   0A6C 79s00              1868 	mov	r1,#(_malloc >> 8)
   0A6E 7As00              1869 	mov	r2,#(_malloc >> 16)
   0A70 12s00r00           1870 	lcall	__sdcc_banked_call
   0A73 AB 82              1871 	mov	r3,dpl
   0A75 AC 83              1872 	mov	r4,dph
   0A77 8B 06              1873 	mov	ar6,r3
   0A79 8C 05              1874 	mov	ar5,r4
   0A7B 7F 00              1875 	mov	r7,#0x00
                           1876 ;	cJSON.c:117: if (str)
   0A7D EE                 1877 	mov	a,r6
   0A7E 4D                 1878 	orl	a,r5
   0A7F 60 41              1879 	jz	00107$
                           1880 ;	cJSON.c:119: sprintf(str,"%f",d);
   0A81 C0 07              1881 	push	ar7
   0A83 C0 06              1882 	push	ar6
   0A85 C0 05              1883 	push	ar5
   0A87 E5 81              1884 	mov	a,sp
   0A89 24 F3              1885 	add	a,#0xf3
   0A8B F8                 1886 	mov	r0,a
   0A8C E6                 1887 	mov	a,@r0
   0A8D C0 E0              1888 	push	acc
   0A8F 08                 1889 	inc	r0
   0A90 E6                 1890 	mov	a,@r0
   0A91 C0 E0              1891 	push	acc
   0A93 08                 1892 	inc	r0
   0A94 E6                 1893 	mov	a,@r0
   0A95 C0 E0              1894 	push	acc
   0A97 08                 1895 	inc	r0
   0A98 E6                 1896 	mov	a,@r0
   0A99 C0 E0              1897 	push	acc
   0A9B 74r03              1898 	mov	a,#__str_1
   0A9D C0 E0              1899 	push	acc
   0A9F 74s00              1900 	mov	a,#(__str_1 >> 8)
   0AA1 C0 E0              1901 	push	acc
   0AA3 74 80              1902 	mov	a,#0x80
   0AA5 C0 E0              1903 	push	acc
   0AA7 C0 06              1904 	push	ar6
   0AA9 C0 05              1905 	push	ar5
   0AAB C0 07              1906 	push	ar7
   0AAD 78r00              1907 	mov	r0,#_sprintf
   0AAF 79s00              1908 	mov	r1,#(_sprintf >> 8)
   0AB1 7As00              1909 	mov	r2,#(_sprintf >> 16)
   0AB3 12s00r00           1910 	lcall	__sdcc_banked_call
   0AB6 E5 81              1911 	mov	a,sp
   0AB8 24 F6              1912 	add	a,#0xf6
   0ABA F5 81              1913 	mov	sp,a
   0ABC D0 05              1914 	pop	ar5
   0ABE D0 06              1915 	pop	ar6
   0AC0 D0 07              1916 	pop	ar7
   0AC2                    1917 00107$:
                           1918 ;	cJSON.c:122: return str;
   0AC2 8E 82              1919 	mov	dpl,r6
   0AC4 8D 83              1920 	mov	dph,r5
   0AC6 8F F0              1921 	mov	b,r7
   0AC8 E5 81              1922 	mov	a,sp
   0ACA 24 F5              1923 	add	a,#0xF5
   0ACC F5 81              1924 	mov	sp,a
   0ACE 02s00r00           1925 	ljmp	__sdcc_banked_ret
                           1926 ;------------------------------------------------------------
                           1927 ;Allocation info for local variables in function 'parse_hex4'
                           1928 ;------------------------------------------------------------
                           1929 ;str                       Allocated to registers r5 r6 r7 
                           1930 ;h                         Allocated to registers r2 r3 
                           1931 ;------------------------------------------------------------
                           1932 ;	cJSON.c:125: static unsigned parse_hex4(const char *str)
                           1933 ;	-----------------------------------------
                           1934 ;	 function parse_hex4
                           1935 ;	-----------------------------------------
   0AD1                    1936 _parse_hex4:
                           1937 ;	cJSON.c:128: if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
   0AD1 AD 82              1938 	mov	r5,dpl
   0AD3 AE 83              1939 	mov	r6,dph
   0AD5 AF F0              1940 	mov	r7,b
   0AD7 12s00r00           1941 	lcall	__gptrget
   0ADA FC                 1942 	mov	r4,a
   0ADB C3                 1943 	clr	c
   0ADC 64 80              1944 	xrl	a,#0x80
   0ADE 94 B0              1945 	subb	a,#0xb0
   0AE0 40 1C              1946 	jc	00110$
   0AE2 74 B9              1947 	mov	a,#(0x39 ^ 0x80)
   0AE4 8C F0              1948 	mov	b,r4
   0AE6 63 F0 80           1949 	xrl	b,#0x80
   0AE9 95 F0              1950 	subb	a,b
   0AEB 40 11              1951 	jc	00110$
   0AED EC                 1952 	mov	a,r4
   0AEE FA                 1953 	mov	r2,a
   0AEF 33                 1954 	rlc	a
   0AF0 95 E0              1955 	subb	a,acc
   0AF2 FB                 1956 	mov	r3,a
   0AF3 EA                 1957 	mov	a,r2
   0AF4 24 D0              1958 	add	a,#0xD0
   0AF6 FA                 1959 	mov	r2,a
   0AF7 EB                 1960 	mov	a,r3
   0AF8 34 FF              1961 	addc	a,#0xFF
   0AFA FB                 1962 	mov	r3,a
   0AFB 02s0Br69           1963 	ljmp	00111$
   0AFE                    1964 00110$:
   0AFE C3                 1965 	clr	c
   0AFF EC                 1966 	mov	a,r4
   0B00 64 80              1967 	xrl	a,#0x80
   0B02 94 C1              1968 	subb	a,#0xc1
   0B04 40 2B              1969 	jc	00106$
   0B06 74 C6              1970 	mov	a,#(0x46 ^ 0x80)
   0B08 8C F0              1971 	mov	b,r4
   0B0A 63 F0 80           1972 	xrl	b,#0x80
   0B0D 95 F0              1973 	subb	a,b
   0B0F 40 20              1974 	jc	00106$
   0B11 C0 05              1975 	push	ar5
   0B13 C0 06              1976 	push	ar6
   0B15 C0 07              1977 	push	ar7
   0B17 EC                 1978 	mov	a,r4
   0B18 FE                 1979 	mov	r6,a
   0B19 33                 1980 	rlc	a
   0B1A 95 E0              1981 	subb	a,acc
   0B1C FF                 1982 	mov	r7,a
   0B1D 74 C9              1983 	mov	a,#0xC9
   0B1F 2E                 1984 	add	a,r6
   0B20 FE                 1985 	mov	r6,a
   0B21 74 FF              1986 	mov	a,#0xFF
   0B23 3F                 1987 	addc	a,r7
   0B24 FF                 1988 	mov	r7,a
   0B25 8E 02              1989 	mov	ar2,r6
   0B27 8F 03              1990 	mov	ar3,r7
   0B29 D0 07              1991 	pop	ar7
   0B2B D0 06              1992 	pop	ar6
   0B2D D0 05              1993 	pop	ar5
   0B2F 80 38              1994 	sjmp	00111$
   0B31                    1995 00106$:
   0B31 C3                 1996 	clr	c
   0B32 EC                 1997 	mov	a,r4
   0B33 64 80              1998 	xrl	a,#0x80
   0B35 94 E1              1999 	subb	a,#0xe1
   0B37 40 2A              2000 	jc	00102$
   0B39 74 E6              2001 	mov	a,#(0x66 ^ 0x80)
   0B3B 8C F0              2002 	mov	b,r4
   0B3D 63 F0 80           2003 	xrl	b,#0x80
   0B40 95 F0              2004 	subb	a,b
   0B42 40 1F              2005 	jc	00102$
   0B44 C0 05              2006 	push	ar5
   0B46 C0 06              2007 	push	ar6
   0B48 C0 07              2008 	push	ar7
   0B4A EC                 2009 	mov	a,r4
   0B4B 33                 2010 	rlc	a
   0B4C 95 E0              2011 	subb	a,acc
   0B4E FF                 2012 	mov	r7,a
   0B4F 74 A9              2013 	mov	a,#0xA9
   0B51 2C                 2014 	add	a,r4
   0B52 FC                 2015 	mov	r4,a
   0B53 74 FF              2016 	mov	a,#0xFF
   0B55 3F                 2017 	addc	a,r7
   0B56 FF                 2018 	mov	r7,a
   0B57 8C 02              2019 	mov	ar2,r4
   0B59 8F 03              2020 	mov	ar3,r7
   0B5B D0 07              2021 	pop	ar7
   0B5D D0 06              2022 	pop	ar6
   0B5F D0 05              2023 	pop	ar5
   0B61 80 06              2024 	sjmp	00111$
   0B63                    2025 00102$:
   0B63 90 00 00           2026 	mov	dptr,#0x0000
   0B66 02s0Dr8A           2027 	ljmp	00149$
   0B69                    2028 00111$:
                           2029 ;	cJSON.c:129: h=h<<4;str++;
   0B69 EB                 2030 	mov	a,r3
   0B6A C4                 2031 	swap	a
   0B6B 54 F0              2032 	anl	a,#0xF0
   0B6D CA                 2033 	xch	a,r2
   0B6E C4                 2034 	swap	a
   0B6F CA                 2035 	xch	a,r2
   0B70 6A                 2036 	xrl	a,r2
   0B71 CA                 2037 	xch	a,r2
   0B72 54 F0              2038 	anl	a,#0xF0
   0B74 CA                 2039 	xch	a,r2
   0B75 6A                 2040 	xrl	a,r2
   0B76 FB                 2041 	mov	r3,a
   0B77 0D                 2042 	inc	r5
   0B78 BD 00 01           2043 	cjne	r5,#0x00,00205$
   0B7B 0E                 2044 	inc	r6
   0B7C                    2045 00205$:
                           2046 ;	cJSON.c:130: if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
   0B7C 8D 82              2047 	mov	dpl,r5
   0B7E 8E 83              2048 	mov	dph,r6
   0B80 8F F0              2049 	mov	b,r7
   0B82 12s00r00           2050 	lcall	__gptrget
   0B85 FC                 2051 	mov	r4,a
   0B86 C3                 2052 	clr	c
   0B87 64 80              2053 	xrl	a,#0x80
   0B89 94 B0              2054 	subb	a,#0xb0
   0B8B 40 2E              2055 	jc	00122$
   0B8D 74 B9              2056 	mov	a,#(0x39 ^ 0x80)
   0B8F 8C F0              2057 	mov	b,r4
   0B91 63 F0 80           2058 	xrl	b,#0x80
   0B94 95 F0              2059 	subb	a,b
   0B96 40 23              2060 	jc	00122$
   0B98 C0 05              2061 	push	ar5
   0B9A C0 06              2062 	push	ar6
   0B9C C0 07              2063 	push	ar7
   0B9E EC                 2064 	mov	a,r4
   0B9F FE                 2065 	mov	r6,a
   0BA0 33                 2066 	rlc	a
   0BA1 95 E0              2067 	subb	a,acc
   0BA3 FF                 2068 	mov	r7,a
   0BA4 EE                 2069 	mov	a,r6
   0BA5 24 D0              2070 	add	a,#0xD0
   0BA7 FE                 2071 	mov	r6,a
   0BA8 EF                 2072 	mov	a,r7
   0BA9 34 FF              2073 	addc	a,#0xFF
   0BAB FF                 2074 	mov	r7,a
   0BAC EE                 2075 	mov	a,r6
   0BAD 2A                 2076 	add	a,r2
   0BAE FA                 2077 	mov	r2,a
   0BAF EF                 2078 	mov	a,r7
   0BB0 3B                 2079 	addc	a,r3
   0BB1 FB                 2080 	mov	r3,a
   0BB2 D0 07              2081 	pop	ar7
   0BB4 D0 06              2082 	pop	ar6
   0BB6 D0 05              2083 	pop	ar5
   0BB8 02s0Cr2A           2084 	ljmp	00123$
   0BBB                    2085 00122$:
   0BBB C3                 2086 	clr	c
   0BBC EC                 2087 	mov	a,r4
   0BBD 64 80              2088 	xrl	a,#0x80
   0BBF 94 C1              2089 	subb	a,#0xc1
   0BC1 40 2D              2090 	jc	00118$
   0BC3 74 C6              2091 	mov	a,#(0x46 ^ 0x80)
   0BC5 8C F0              2092 	mov	b,r4
   0BC7 63 F0 80           2093 	xrl	b,#0x80
   0BCA 95 F0              2094 	subb	a,b
   0BCC 40 22              2095 	jc	00118$
   0BCE C0 05              2096 	push	ar5
   0BD0 C0 06              2097 	push	ar6
   0BD2 C0 07              2098 	push	ar7
   0BD4 EC                 2099 	mov	a,r4
   0BD5 FE                 2100 	mov	r6,a
   0BD6 33                 2101 	rlc	a
   0BD7 95 E0              2102 	subb	a,acc
   0BD9 FF                 2103 	mov	r7,a
   0BDA 74 C9              2104 	mov	a,#0xC9
   0BDC 2E                 2105 	add	a,r6
   0BDD FE                 2106 	mov	r6,a
   0BDE 74 FF              2107 	mov	a,#0xFF
   0BE0 3F                 2108 	addc	a,r7
   0BE1 FF                 2109 	mov	r7,a
   0BE2 EE                 2110 	mov	a,r6
   0BE3 2A                 2111 	add	a,r2
   0BE4 FA                 2112 	mov	r2,a
   0BE5 EF                 2113 	mov	a,r7
   0BE6 3B                 2114 	addc	a,r3
   0BE7 FB                 2115 	mov	r3,a
   0BE8 D0 07              2116 	pop	ar7
   0BEA D0 06              2117 	pop	ar6
   0BEC D0 05              2118 	pop	ar5
   0BEE 80 3A              2119 	sjmp	00123$
   0BF0                    2120 00118$:
   0BF0 C3                 2121 	clr	c
   0BF1 EC                 2122 	mov	a,r4
   0BF2 64 80              2123 	xrl	a,#0x80
   0BF4 94 E1              2124 	subb	a,#0xe1
   0BF6 40 2C              2125 	jc	00114$
   0BF8 74 E6              2126 	mov	a,#(0x66 ^ 0x80)
   0BFA 8C F0              2127 	mov	b,r4
   0BFC 63 F0 80           2128 	xrl	b,#0x80
   0BFF 95 F0              2129 	subb	a,b
   0C01 40 21              2130 	jc	00114$
   0C03 C0 05              2131 	push	ar5
   0C05 C0 06              2132 	push	ar6
   0C07 C0 07              2133 	push	ar7
   0C09 EC                 2134 	mov	a,r4
   0C0A 33                 2135 	rlc	a
   0C0B 95 E0              2136 	subb	a,acc
   0C0D FF                 2137 	mov	r7,a
   0C0E 74 A9              2138 	mov	a,#0xA9
   0C10 2C                 2139 	add	a,r4
   0C11 FC                 2140 	mov	r4,a
   0C12 74 FF              2141 	mov	a,#0xFF
   0C14 3F                 2142 	addc	a,r7
   0C15 FF                 2143 	mov	r7,a
   0C16 EC                 2144 	mov	a,r4
   0C17 2A                 2145 	add	a,r2
   0C18 FA                 2146 	mov	r2,a
   0C19 EF                 2147 	mov	a,r7
   0C1A 3B                 2148 	addc	a,r3
   0C1B FB                 2149 	mov	r3,a
   0C1C D0 07              2150 	pop	ar7
   0C1E D0 06              2151 	pop	ar6
   0C20 D0 05              2152 	pop	ar5
   0C22 80 06              2153 	sjmp	00123$
   0C24                    2154 00114$:
   0C24 90 00 00           2155 	mov	dptr,#0x0000
   0C27 02s0Dr8A           2156 	ljmp	00149$
   0C2A                    2157 00123$:
                           2158 ;	cJSON.c:131: h=h<<4;str++;
   0C2A EB                 2159 	mov	a,r3
   0C2B C4                 2160 	swap	a
   0C2C 54 F0              2161 	anl	a,#0xF0
   0C2E CA                 2162 	xch	a,r2
   0C2F C4                 2163 	swap	a
   0C30 CA                 2164 	xch	a,r2
   0C31 6A                 2165 	xrl	a,r2
   0C32 CA                 2166 	xch	a,r2
   0C33 54 F0              2167 	anl	a,#0xF0
   0C35 CA                 2168 	xch	a,r2
   0C36 6A                 2169 	xrl	a,r2
   0C37 FB                 2170 	mov	r3,a
   0C38 0D                 2171 	inc	r5
   0C39 BD 00 01           2172 	cjne	r5,#0x00,00212$
   0C3C 0E                 2173 	inc	r6
   0C3D                    2174 00212$:
                           2175 ;	cJSON.c:132: if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
   0C3D 8D 82              2176 	mov	dpl,r5
   0C3F 8E 83              2177 	mov	dph,r6
   0C41 8F F0              2178 	mov	b,r7
   0C43 12s00r00           2179 	lcall	__gptrget
   0C46 FC                 2180 	mov	r4,a
   0C47 C3                 2181 	clr	c
   0C48 64 80              2182 	xrl	a,#0x80
   0C4A 94 B0              2183 	subb	a,#0xb0
   0C4C 40 2E              2184 	jc	00134$
   0C4E 74 B9              2185 	mov	a,#(0x39 ^ 0x80)
   0C50 8C F0              2186 	mov	b,r4
   0C52 63 F0 80           2187 	xrl	b,#0x80
   0C55 95 F0              2188 	subb	a,b
   0C57 40 23              2189 	jc	00134$
   0C59 C0 05              2190 	push	ar5
   0C5B C0 06              2191 	push	ar6
   0C5D C0 07              2192 	push	ar7
   0C5F EC                 2193 	mov	a,r4
   0C60 FE                 2194 	mov	r6,a
   0C61 33                 2195 	rlc	a
   0C62 95 E0              2196 	subb	a,acc
   0C64 FF                 2197 	mov	r7,a
   0C65 EE                 2198 	mov	a,r6
   0C66 24 D0              2199 	add	a,#0xD0
   0C68 FE                 2200 	mov	r6,a
   0C69 EF                 2201 	mov	a,r7
   0C6A 34 FF              2202 	addc	a,#0xFF
   0C6C FF                 2203 	mov	r7,a
   0C6D EE                 2204 	mov	a,r6
   0C6E 2A                 2205 	add	a,r2
   0C6F FA                 2206 	mov	r2,a
   0C70 EF                 2207 	mov	a,r7
   0C71 3B                 2208 	addc	a,r3
   0C72 FB                 2209 	mov	r3,a
   0C73 D0 07              2210 	pop	ar7
   0C75 D0 06              2211 	pop	ar6
   0C77 D0 05              2212 	pop	ar5
   0C79 02s0CrEB           2213 	ljmp	00135$
   0C7C                    2214 00134$:
   0C7C C3                 2215 	clr	c
   0C7D EC                 2216 	mov	a,r4
   0C7E 64 80              2217 	xrl	a,#0x80
   0C80 94 C1              2218 	subb	a,#0xc1
   0C82 40 2D              2219 	jc	00130$
   0C84 74 C6              2220 	mov	a,#(0x46 ^ 0x80)
   0C86 8C F0              2221 	mov	b,r4
   0C88 63 F0 80           2222 	xrl	b,#0x80
   0C8B 95 F0              2223 	subb	a,b
   0C8D 40 22              2224 	jc	00130$
   0C8F C0 05              2225 	push	ar5
   0C91 C0 06              2226 	push	ar6
   0C93 C0 07              2227 	push	ar7
   0C95 EC                 2228 	mov	a,r4
   0C96 FE                 2229 	mov	r6,a
   0C97 33                 2230 	rlc	a
   0C98 95 E0              2231 	subb	a,acc
   0C9A FF                 2232 	mov	r7,a
   0C9B 74 C9              2233 	mov	a,#0xC9
   0C9D 2E                 2234 	add	a,r6
   0C9E FE                 2235 	mov	r6,a
   0C9F 74 FF              2236 	mov	a,#0xFF
   0CA1 3F                 2237 	addc	a,r7
   0CA2 FF                 2238 	mov	r7,a
   0CA3 EE                 2239 	mov	a,r6
   0CA4 2A                 2240 	add	a,r2
   0CA5 FA                 2241 	mov	r2,a
   0CA6 EF                 2242 	mov	a,r7
   0CA7 3B                 2243 	addc	a,r3
   0CA8 FB                 2244 	mov	r3,a
   0CA9 D0 07              2245 	pop	ar7
   0CAB D0 06              2246 	pop	ar6
   0CAD D0 05              2247 	pop	ar5
   0CAF 80 3A              2248 	sjmp	00135$
   0CB1                    2249 00130$:
   0CB1 C3                 2250 	clr	c
   0CB2 EC                 2251 	mov	a,r4
   0CB3 64 80              2252 	xrl	a,#0x80
   0CB5 94 E1              2253 	subb	a,#0xe1
   0CB7 40 2C              2254 	jc	00126$
   0CB9 74 E6              2255 	mov	a,#(0x66 ^ 0x80)
   0CBB 8C F0              2256 	mov	b,r4
   0CBD 63 F0 80           2257 	xrl	b,#0x80
   0CC0 95 F0              2258 	subb	a,b
   0CC2 40 21              2259 	jc	00126$
   0CC4 C0 05              2260 	push	ar5
   0CC6 C0 06              2261 	push	ar6
   0CC8 C0 07              2262 	push	ar7
   0CCA EC                 2263 	mov	a,r4
   0CCB 33                 2264 	rlc	a
   0CCC 95 E0              2265 	subb	a,acc
   0CCE FF                 2266 	mov	r7,a
   0CCF 74 A9              2267 	mov	a,#0xA9
   0CD1 2C                 2268 	add	a,r4
   0CD2 FC                 2269 	mov	r4,a
   0CD3 74 FF              2270 	mov	a,#0xFF
   0CD5 3F                 2271 	addc	a,r7
   0CD6 FF                 2272 	mov	r7,a
   0CD7 EC                 2273 	mov	a,r4
   0CD8 2A                 2274 	add	a,r2
   0CD9 FA                 2275 	mov	r2,a
   0CDA EF                 2276 	mov	a,r7
   0CDB 3B                 2277 	addc	a,r3
   0CDC FB                 2278 	mov	r3,a
   0CDD D0 07              2279 	pop	ar7
   0CDF D0 06              2280 	pop	ar6
   0CE1 D0 05              2281 	pop	ar5
   0CE3 80 06              2282 	sjmp	00135$
   0CE5                    2283 00126$:
   0CE5 90 00 00           2284 	mov	dptr,#0x0000
   0CE8 02s0Dr8A           2285 	ljmp	00149$
   0CEB                    2286 00135$:
                           2287 ;	cJSON.c:133: h=h<<4;str++;
   0CEB EB                 2288 	mov	a,r3
   0CEC C4                 2289 	swap	a
   0CED 54 F0              2290 	anl	a,#0xF0
   0CEF CA                 2291 	xch	a,r2
   0CF0 C4                 2292 	swap	a
   0CF1 CA                 2293 	xch	a,r2
   0CF2 6A                 2294 	xrl	a,r2
   0CF3 CA                 2295 	xch	a,r2
   0CF4 54 F0              2296 	anl	a,#0xF0
   0CF6 CA                 2297 	xch	a,r2
   0CF7 6A                 2298 	xrl	a,r2
   0CF8 FB                 2299 	mov	r3,a
   0CF9 0D                 2300 	inc	r5
   0CFA BD 00 01           2301 	cjne	r5,#0x00,00219$
   0CFD 0E                 2302 	inc	r6
   0CFE                    2303 00219$:
                           2304 ;	cJSON.c:134: if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
   0CFE 8D 82              2305 	mov	dpl,r5
   0D00 8E 83              2306 	mov	dph,r6
   0D02 8F F0              2307 	mov	b,r7
   0D04 12s00r00           2308 	lcall	__gptrget
   0D07 FF                 2309 	mov	r7,a
   0D08 C3                 2310 	clr	c
   0D09 64 80              2311 	xrl	a,#0x80
   0D0B 94 B0              2312 	subb	a,#0xb0
   0D0D 40 21              2313 	jc	00146$
   0D0F 74 B9              2314 	mov	a,#(0x39 ^ 0x80)
   0D11 8F F0              2315 	mov	b,r7
   0D13 63 F0 80           2316 	xrl	b,#0x80
   0D16 95 F0              2317 	subb	a,b
   0D18 40 16              2318 	jc	00146$
   0D1A EF                 2319 	mov	a,r7
   0D1B FD                 2320 	mov	r5,a
   0D1C 33                 2321 	rlc	a
   0D1D 95 E0              2322 	subb	a,acc
   0D1F FE                 2323 	mov	r6,a
   0D20 ED                 2324 	mov	a,r5
   0D21 24 D0              2325 	add	a,#0xD0
   0D23 FD                 2326 	mov	r5,a
   0D24 EE                 2327 	mov	a,r6
   0D25 34 FF              2328 	addc	a,#0xFF
   0D27 FE                 2329 	mov	r6,a
   0D28 ED                 2330 	mov	a,r5
   0D29 2A                 2331 	add	a,r2
   0D2A FA                 2332 	mov	r2,a
   0D2B EE                 2333 	mov	a,r6
   0D2C 3B                 2334 	addc	a,r3
   0D2D FB                 2335 	mov	r3,a
   0D2E 80 56              2336 	sjmp	00147$
   0D30                    2337 00146$:
   0D30 C3                 2338 	clr	c
   0D31 EF                 2339 	mov	a,r7
   0D32 64 80              2340 	xrl	a,#0x80
   0D34 94 C1              2341 	subb	a,#0xc1
   0D36 40 21              2342 	jc	00142$
   0D38 74 C6              2343 	mov	a,#(0x46 ^ 0x80)
   0D3A 8F F0              2344 	mov	b,r7
   0D3C 63 F0 80           2345 	xrl	b,#0x80
   0D3F 95 F0              2346 	subb	a,b
   0D41 40 16              2347 	jc	00142$
   0D43 EF                 2348 	mov	a,r7
   0D44 FD                 2349 	mov	r5,a
   0D45 33                 2350 	rlc	a
   0D46 95 E0              2351 	subb	a,acc
   0D48 FE                 2352 	mov	r6,a
   0D49 74 C9              2353 	mov	a,#0xC9
   0D4B 2D                 2354 	add	a,r5
   0D4C FD                 2355 	mov	r5,a
   0D4D 74 FF              2356 	mov	a,#0xFF
   0D4F 3E                 2357 	addc	a,r6
   0D50 FE                 2358 	mov	r6,a
   0D51 ED                 2359 	mov	a,r5
   0D52 2A                 2360 	add	a,r2
   0D53 FA                 2361 	mov	r2,a
   0D54 EE                 2362 	mov	a,r6
   0D55 3B                 2363 	addc	a,r3
   0D56 FB                 2364 	mov	r3,a
   0D57 80 2D              2365 	sjmp	00147$
   0D59                    2366 00142$:
   0D59 C3                 2367 	clr	c
   0D5A EF                 2368 	mov	a,r7
   0D5B 64 80              2369 	xrl	a,#0x80
   0D5D 94 E1              2370 	subb	a,#0xe1
   0D5F 40 20              2371 	jc	00138$
   0D61 74 E6              2372 	mov	a,#(0x66 ^ 0x80)
   0D63 8F F0              2373 	mov	b,r7
   0D65 63 F0 80           2374 	xrl	b,#0x80
   0D68 95 F0              2375 	subb	a,b
   0D6A 40 15              2376 	jc	00138$
   0D6C EF                 2377 	mov	a,r7
   0D6D 33                 2378 	rlc	a
   0D6E 95 E0              2379 	subb	a,acc
   0D70 FE                 2380 	mov	r6,a
   0D71 74 A9              2381 	mov	a,#0xA9
   0D73 2F                 2382 	add	a,r7
   0D74 FF                 2383 	mov	r7,a
   0D75 74 FF              2384 	mov	a,#0xFF
   0D77 3E                 2385 	addc	a,r6
   0D78 FE                 2386 	mov	r6,a
   0D79 EF                 2387 	mov	a,r7
   0D7A 2A                 2388 	add	a,r2
   0D7B FA                 2389 	mov	r2,a
   0D7C EE                 2390 	mov	a,r6
   0D7D 3B                 2391 	addc	a,r3
   0D7E FB                 2392 	mov	r3,a
   0D7F 80 05              2393 	sjmp	00147$
   0D81                    2394 00138$:
   0D81 90 00 00           2395 	mov	dptr,#0x0000
   0D84 80 04              2396 	sjmp	00149$
   0D86                    2397 00147$:
                           2398 ;	cJSON.c:135: return h;
   0D86 8A 82              2399 	mov	dpl,r2
   0D88 8B 83              2400 	mov	dph,r3
   0D8A                    2401 00149$:
   0D8A 02s00r00           2402 	ljmp	__sdcc_banked_ret
                           2403 ;------------------------------------------------------------
                           2404 ;Allocation info for local variables in function 'parse_string'
                           2405 ;------------------------------------------------------------
                           2406 ;str                       Allocated to stack - sp -18
                           2407 ;item                      Allocated to stack - sp -12
                           2408 ;ptr                       Allocated to stack - sp -9
                           2409 ;ptr2                      Allocated to registers r5 r6 r7 
                           2410 ;out                       Allocated to stack - sp -6
                           2411 ;len                       Allocated to registers r2 r3 
                           2412 ;uc                        Allocated to stack - sp -3
                           2413 ;uc2                       Allocated to stack - sp -1
                           2414 ;------------------------------------------------------------
                           2415 ;	cJSON.c:140: static const char *parse_string(cJSON *item,const char *str)
                           2416 ;	-----------------------------------------
                           2417 ;	 function parse_string
                           2418 ;	-----------------------------------------
   0D8D                    2419 _parse_string:
   0D8D C0 82              2420 	push	dpl
   0D8F C0 83              2421 	push	dph
   0D91 C0 F0              2422 	push	b
   0D93 E5 81              2423 	mov	a,sp
   0D95 24 0A              2424 	add	a,#0x0A
                           2425 ;	cJSON.c:142: const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
   0D97 F5 81              2426 	mov	sp,a
   0D99 24 EE              2427 	add	a,#0xee
   0D9B F8                 2428 	mov	r0,a
   0D9C E5 81              2429 	mov	a,sp
   0D9E 24 F7              2430 	add	a,#0xf7
   0DA0 F9                 2431 	mov	r1,a
   0DA1 74 01              2432 	mov	a,#0x01
   0DA3 26                 2433 	add	a,@r0
   0DA4 F7                 2434 	mov	@r1,a
   0DA5 E4                 2435 	clr	a
   0DA6 08                 2436 	inc	r0
   0DA7 36                 2437 	addc	a,@r0
   0DA8 09                 2438 	inc	r1
   0DA9 F7                 2439 	mov	@r1,a
   0DAA 08                 2440 	inc	r0
   0DAB 09                 2441 	inc	r1
   0DAC E6                 2442 	mov	a,@r0
   0DAD F7                 2443 	mov	@r1,a
                           2444 ;	cJSON.c:143: if (*str!='\"') {ep=str;return 0;}	/* not a string! */
   0DAE E5 81              2445 	mov	a,sp
   0DB0 24 EE              2446 	add	a,#0xee
   0DB2 F8                 2447 	mov	r0,a
   0DB3 86 05              2448 	mov	ar5,@r0
   0DB5 08                 2449 	inc	r0
   0DB6 86 06              2450 	mov	ar6,@r0
   0DB8 08                 2451 	inc	r0
   0DB9 86 07              2452 	mov	ar7,@r0
   0DBB 8D 82              2453 	mov	dpl,r5
   0DBD 8E 83              2454 	mov	dph,r6
   0DBF 8F F0              2455 	mov	b,r7
   0DC1 12s00r00           2456 	lcall	__gptrget
   0DC4 FC                 2457 	mov	r4,a
   0DC5 BC 22 02           2458 	cjne	r4,#0x22,00222$
   0DC8 80 14              2459 	sjmp	00161$
   0DCA                    2460 00222$:
   0DCA 90s00r00           2461 	mov	dptr,#_ep
   0DCD ED                 2462 	mov	a,r5
   0DCE F0                 2463 	movx	@dptr,a
   0DCF A3                 2464 	inc	dptr
   0DD0 EE                 2465 	mov	a,r6
   0DD1 F0                 2466 	movx	@dptr,a
   0DD2 A3                 2467 	inc	dptr
   0DD3 EF                 2468 	mov	a,r7
   0DD4 F0                 2469 	movx	@dptr,a
   0DD5 90 00 00           2470 	mov	dptr,#0x0000
   0DD8 75 F0 00           2471 	mov	b,#0x00
   0DDB 02s12rE4           2472 	ljmp	00155$
                           2473 ;	cJSON.c:145: while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
   0DDE                    2474 00161$:
   0DDE 7B 00              2475 	mov	r3,#0x00
   0DE0 7C 00              2476 	mov	r4,#0x00
   0DE2                    2477 00107$:
   0DE2 E5 81              2478 	mov	a,sp
   0DE4 24 F7              2479 	add	a,#0xf7
   0DE6 F8                 2480 	mov	r0,a
   0DE7 86 82              2481 	mov	dpl,@r0
   0DE9 08                 2482 	inc	r0
   0DEA 86 83              2483 	mov	dph,@r0
   0DEC 08                 2484 	inc	r0
   0DED 86 F0              2485 	mov	b,@r0
   0DEF 12s00r00           2486 	lcall	__gptrget
   0DF2 FA                 2487 	mov	r2,a
   0DF3 BA 22 02           2488 	cjne	r2,#0x22,00223$
   0DF6 80 27              2489 	sjmp	00109$
   0DF8                    2490 00223$:
   0DF8 EA                 2491 	mov	a,r2
   0DF9 60 24              2492 	jz	00109$
   0DFB 0B                 2493 	inc	r3
   0DFC BB 00 01           2494 	cjne	r3,#0x00,00225$
   0DFF 0C                 2495 	inc	r4
   0E00                    2496 00225$:
   0E00 EB                 2497 	mov	a,r3
   0E01 4C                 2498 	orl	a,r4
   0E02 60 1B              2499 	jz	00109$
   0E04 E5 81              2500 	mov	a,sp
   0E06 24 F7              2501 	add	a,#0xf7
   0E08 F8                 2502 	mov	r0,a
   0E09 06                 2503 	inc	@r0
   0E0A B6 00 02           2504 	cjne	@r0,#0x00,00227$
   0E0D 08                 2505 	inc	r0
   0E0E 06                 2506 	inc	@r0
   0E0F                    2507 00227$:
   0E0F BA 5C D0           2508 	cjne	r2,#0x5C,00107$
   0E12 E5 81              2509 	mov	a,sp
   0E14 24 F7              2510 	add	a,#0xf7
   0E16 F8                 2511 	mov	r0,a
   0E17 06                 2512 	inc	@r0
   0E18 B6 00 02           2513 	cjne	@r0,#0x00,00230$
   0E1B 08                 2514 	inc	r0
   0E1C 06                 2515 	inc	@r0
   0E1D                    2516 00230$:
   0E1D 80 C3              2517 	sjmp	00107$
   0E1F                    2518 00109$:
                           2519 ;	cJSON.c:147: out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
   0E1F 0B                 2520 	inc	r3
   0E20 BB 00 01           2521 	cjne	r3,#0x00,00231$
   0E23 0C                 2522 	inc	r4
   0E24                    2523 00231$:
   0E24 8B 82              2524 	mov	dpl,r3
   0E26 8C 83              2525 	mov	dph,r4
   0E28 C0 07              2526 	push	ar7
   0E2A C0 06              2527 	push	ar6
   0E2C C0 05              2528 	push	ar5
   0E2E 78r00              2529 	mov	r0,#_malloc
   0E30 79s00              2530 	mov	r1,#(_malloc >> 8)
   0E32 7As00              2531 	mov	r2,#(_malloc >> 16)
   0E34 12s00r00           2532 	lcall	__sdcc_banked_call
   0E37 AB 82              2533 	mov	r3,dpl
   0E39 AC 83              2534 	mov	r4,dph
   0E3B D0 05              2535 	pop	ar5
   0E3D D0 06              2536 	pop	ar6
   0E3F D0 07              2537 	pop	ar7
   0E41 E5 81              2538 	mov	a,sp
   0E43 24 FA              2539 	add	a,#0xfa
   0E45 F8                 2540 	mov	r0,a
   0E46 A6 03              2541 	mov	@r0,ar3
   0E48 08                 2542 	inc	r0
   0E49 A6 04              2543 	mov	@r0,ar4
   0E4B 08                 2544 	inc	r0
   0E4C 76 00              2545 	mov	@r0,#0x00
                           2546 ;	cJSON.c:148: if (!out) return 0;
   0E4E E5 81              2547 	mov	a,sp
   0E50 24 FA              2548 	add	a,#0xfa
   0E52 F8                 2549 	mov	r0,a
   0E53 E6                 2550 	mov	a,@r0
   0E54 08                 2551 	inc	r0
   0E55 46                 2552 	orl	a,@r0
   0E56 70 08              2553 	jnz	00111$
   0E58 90 00 00           2554 	mov	dptr,#0x0000
   0E5B F5 F0              2555 	mov	b,a
   0E5D 02s12rE4           2556 	ljmp	00155$
   0E60                    2557 00111$:
                           2558 ;	cJSON.c:150: ptr=str+1;ptr2=out;
   0E60 E5 81              2559 	mov	a,sp
   0E62 24 F7              2560 	add	a,#0xf7
   0E64 F8                 2561 	mov	r0,a
   0E65 74 01              2562 	mov	a,#0x01
   0E67 2D                 2563 	add	a,r5
   0E68 F6                 2564 	mov	@r0,a
   0E69 E4                 2565 	clr	a
   0E6A 3E                 2566 	addc	a,r6
   0E6B 08                 2567 	inc	r0
   0E6C F6                 2568 	mov	@r0,a
   0E6D 08                 2569 	inc	r0
   0E6E A6 07              2570 	mov	@r0,ar7
   0E70 E5 81              2571 	mov	a,sp
   0E72 24 FA              2572 	add	a,#0xfa
   0E74 F8                 2573 	mov	r0,a
   0E75 86 05              2574 	mov	ar5,@r0
   0E77 08                 2575 	inc	r0
   0E78 86 06              2576 	mov	ar6,@r0
   0E7A 08                 2577 	inc	r0
   0E7B 86 07              2578 	mov	ar7,@r0
                           2579 ;	cJSON.c:151: while (*ptr!='\"' && *ptr)
   0E7D                    2580 00150$:
   0E7D E5 81              2581 	mov	a,sp
   0E7F 24 F7              2582 	add	a,#0xf7
   0E81 F8                 2583 	mov	r0,a
   0E82 86 82              2584 	mov	dpl,@r0
   0E84 08                 2585 	inc	r0
   0E85 86 83              2586 	mov	dph,@r0
   0E87 08                 2587 	inc	r0
   0E88 86 F0              2588 	mov	b,@r0
   0E8A 12s00r00           2589 	lcall	__gptrget
   0E8D FC                 2590 	mov	r4,a
   0E8E BC 22 03           2591 	cjne	r4,#0x22,00233$
   0E91 02s12r63           2592 	ljmp	00152$
   0E94                    2593 00233$:
   0E94 EC                 2594 	mov	a,r4
   0E95 70 03              2595 	jnz	00234$
   0E97 02s12r63           2596 	ljmp	00152$
   0E9A                    2597 00234$:
                           2598 ;	cJSON.c:153: if (*ptr!='\\') *ptr2++=*ptr++;
   0E9A BC 5C 02           2599 	cjne	r4,#0x5C,00235$
   0E9D 80 1C              2600 	sjmp	00147$
   0E9F                    2601 00235$:
   0E9F E5 81              2602 	mov	a,sp
   0EA1 24 F7              2603 	add	a,#0xf7
   0EA3 F8                 2604 	mov	r0,a
   0EA4 06                 2605 	inc	@r0
   0EA5 B6 00 02           2606 	cjne	@r0,#0x00,00236$
   0EA8 08                 2607 	inc	r0
   0EA9 06                 2608 	inc	@r0
   0EAA                    2609 00236$:
   0EAA 8D 82              2610 	mov	dpl,r5
   0EAC 8E 83              2611 	mov	dph,r6
   0EAE 8F F0              2612 	mov	b,r7
   0EB0 EC                 2613 	mov	a,r4
   0EB1 12s00r00           2614 	lcall	__gptrput
   0EB4 A3                 2615 	inc	dptr
   0EB5 AD 82              2616 	mov	r5,dpl
   0EB7 AE 83              2617 	mov	r6,dph
   0EB9 80 C2              2618 	sjmp	00150$
   0EBB                    2619 00147$:
                           2620 ;	cJSON.c:156: ptr++;
   0EBB E5 81              2621 	mov	a,sp
   0EBD 24 F7              2622 	add	a,#0xf7
   0EBF F8                 2623 	mov	r0,a
   0EC0 06                 2624 	inc	@r0
   0EC1 B6 00 02           2625 	cjne	@r0,#0x00,00237$
   0EC4 08                 2626 	inc	r0
   0EC5 06                 2627 	inc	@r0
   0EC6                    2628 00237$:
                           2629 ;	cJSON.c:157: switch (*ptr)
   0EC6 E5 81              2630 	mov	a,sp
   0EC8 24 F7              2631 	add	a,#0xf7
   0ECA F8                 2632 	mov	r0,a
   0ECB 86 82              2633 	mov	dpl,@r0
   0ECD 08                 2634 	inc	r0
   0ECE 86 83              2635 	mov	dph,@r0
   0ED0 08                 2636 	inc	r0
   0ED1 86 F0              2637 	mov	b,@r0
   0ED3 12s00r00           2638 	lcall	__gptrget
   0ED6 FC                 2639 	mov	r4,a
   0ED7 BC 62 02           2640 	cjne	r4,#0x62,00238$
   0EDA 80 1C              2641 	sjmp	00112$
   0EDC                    2642 00238$:
   0EDC BC 66 02           2643 	cjne	r4,#0x66,00239$
   0EDF 80 2A              2644 	sjmp	00113$
   0EE1                    2645 00239$:
   0EE1 BC 6E 02           2646 	cjne	r4,#0x6E,00240$
   0EE4 80 38              2647 	sjmp	00114$
   0EE6                    2648 00240$:
   0EE6 BC 72 02           2649 	cjne	r4,#0x72,00241$
   0EE9 80 46              2650 	sjmp	00115$
   0EEB                    2651 00241$:
   0EEB BC 74 02           2652 	cjne	r4,#0x74,00242$
   0EEE 80 54              2653 	sjmp	00116$
   0EF0                    2654 00242$:
   0EF0 BC 75 02           2655 	cjne	r4,#0x75,00243$
   0EF3 80 62              2656 	sjmp	00117$
   0EF5                    2657 00243$:
   0EF5 02s12r4B           2658 	ljmp	00144$
                           2659 ;	cJSON.c:159: case 'b': *ptr2++='\b';	break;
   0EF8                    2660 00112$:
   0EF8 8D 82              2661 	mov	dpl,r5
   0EFA 8E 83              2662 	mov	dph,r6
   0EFC 8F F0              2663 	mov	b,r7
   0EFE 74 08              2664 	mov	a,#0x08
   0F00 12s00r00           2665 	lcall	__gptrput
   0F03 A3                 2666 	inc	dptr
   0F04 AD 82              2667 	mov	r5,dpl
   0F06 AE 83              2668 	mov	r6,dph
   0F08 02s12r55           2669 	ljmp	00145$
                           2670 ;	cJSON.c:160: case 'f': *ptr2++='\f';	break;
   0F0B                    2671 00113$:
   0F0B 8D 82              2672 	mov	dpl,r5
   0F0D 8E 83              2673 	mov	dph,r6
   0F0F 8F F0              2674 	mov	b,r7
   0F11 74 0C              2675 	mov	a,#0x0C
   0F13 12s00r00           2676 	lcall	__gptrput
   0F16 A3                 2677 	inc	dptr
   0F17 AD 82              2678 	mov	r5,dpl
   0F19 AE 83              2679 	mov	r6,dph
   0F1B 02s12r55           2680 	ljmp	00145$
                           2681 ;	cJSON.c:161: case 'n': *ptr2++='\n';	break;
   0F1E                    2682 00114$:
   0F1E 8D 82              2683 	mov	dpl,r5
   0F20 8E 83              2684 	mov	dph,r6
   0F22 8F F0              2685 	mov	b,r7
   0F24 74 0A              2686 	mov	a,#0x0A
   0F26 12s00r00           2687 	lcall	__gptrput
   0F29 A3                 2688 	inc	dptr
   0F2A AD 82              2689 	mov	r5,dpl
   0F2C AE 83              2690 	mov	r6,dph
   0F2E 02s12r55           2691 	ljmp	00145$
                           2692 ;	cJSON.c:162: case 'r': *ptr2++='\r';	break;
   0F31                    2693 00115$:
   0F31 8D 82              2694 	mov	dpl,r5
   0F33 8E 83              2695 	mov	dph,r6
   0F35 8F F0              2696 	mov	b,r7
   0F37 74 0D              2697 	mov	a,#0x0D
   0F39 12s00r00           2698 	lcall	__gptrput
   0F3C A3                 2699 	inc	dptr
   0F3D AD 82              2700 	mov	r5,dpl
   0F3F AE 83              2701 	mov	r6,dph
   0F41 02s12r55           2702 	ljmp	00145$
                           2703 ;	cJSON.c:163: case 't': *ptr2++='\t';	break;
   0F44                    2704 00116$:
   0F44 8D 82              2705 	mov	dpl,r5
   0F46 8E 83              2706 	mov	dph,r6
   0F48 8F F0              2707 	mov	b,r7
   0F4A 74 09              2708 	mov	a,#0x09
   0F4C 12s00r00           2709 	lcall	__gptrput
   0F4F A3                 2710 	inc	dptr
   0F50 AD 82              2711 	mov	r5,dpl
   0F52 AE 83              2712 	mov	r6,dph
   0F54 02s12r55           2713 	ljmp	00145$
                           2714 ;	cJSON.c:164: case 'u':	 /* transcode utf16 to utf8. */
   0F57                    2715 00117$:
                           2716 ;	cJSON.c:165: uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
   0F57 C0 05              2717 	push	ar5
   0F59 C0 06              2718 	push	ar6
   0F5B C0 07              2719 	push	ar7
   0F5D E5 81              2720 	mov	a,sp
   0F5F 24 F4              2721 	add	a,#0xf4
   0F61 F8                 2722 	mov	r0,a
   0F62 74 01              2723 	mov	a,#0x01
   0F64 26                 2724 	add	a,@r0
   0F65 FA                 2725 	mov	r2,a
   0F66 E4                 2726 	clr	a
   0F67 08                 2727 	inc	r0
   0F68 36                 2728 	addc	a,@r0
   0F69 FB                 2729 	mov	r3,a
   0F6A 08                 2730 	inc	r0
   0F6B 86 07              2731 	mov	ar7,@r0
   0F6D 8A 82              2732 	mov	dpl,r2
   0F6F 8B 83              2733 	mov	dph,r3
   0F71 8F F0              2734 	mov	b,r7
   0F73 C0 05              2735 	push	ar5
   0F75 78rD1              2736 	mov	r0,#_parse_hex4
   0F77 79s0A              2737 	mov	r1,#(_parse_hex4 >> 8)
   0F79 7As00              2738 	mov	r2,#(_parse_hex4 >> 16)
   0F7B 12s00r00           2739 	lcall	__sdcc_banked_call
   0F7E AE 82              2740 	mov	r6,dpl
   0F80 AF 83              2741 	mov	r7,dph
   0F82 D0 05              2742 	pop	ar5
   0F84 E5 81              2743 	mov	a,sp
   0F86 24 FA              2744 	add	a,#0xfa
   0F88 F8                 2745 	mov	r0,a
   0F89 A6 06              2746 	mov	@r0,ar6
   0F8B 08                 2747 	inc	r0
   0F8C A6 07              2748 	mov	@r0,ar7
   0F8E E5 81              2749 	mov	a,sp
   0F90 24 F4              2750 	add	a,#0xf4
   0F92 F8                 2751 	mov	r0,a
   0F93 74 04              2752 	mov	a,#0x04
   0F95 26                 2753 	add	a,@r0
   0F96 F6                 2754 	mov	@r0,a
   0F97 E4                 2755 	clr	a
   0F98 08                 2756 	inc	r0
   0F99 36                 2757 	addc	a,@r0
   0F9A F6                 2758 	mov	@r0,a
                           2759 ;	cJSON.c:167: if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
   0F9B E5 81              2760 	mov	a,sp
   0F9D 24 FA              2761 	add	a,#0xfa
   0F9F F8                 2762 	mov	r0,a
   0FA0 C3                 2763 	clr	c
   0FA1 08                 2764 	inc	r0
   0FA2 E6                 2765 	mov	a,@r0
   0FA3 94 DC              2766 	subb	a,#0xDC
   0FA5 D0 07              2767 	pop	ar7
   0FA7 D0 06              2768 	pop	ar6
   0FA9 D0 05              2769 	pop	ar5
   0FAB 40 12              2770 	jc	00121$
   0FAD E5 81              2771 	mov	a,sp
   0FAF 24 FD              2772 	add	a,#0xfd
   0FB1 F8                 2773 	mov	r0,a
   0FB2 C3                 2774 	clr	c
   0FB3 74 FF              2775 	mov	a,#0xFF
   0FB5 96                 2776 	subb	a,@r0
   0FB6 74 DF              2777 	mov	a,#0xDF
   0FB8 08                 2778 	inc	r0
   0FB9 96                 2779 	subb	a,@r0
   0FBA 40 03              2780 	jc	00245$
   0FBC 02s12r55           2781 	ljmp	00145$
   0FBF                    2782 00245$:
   0FBF                    2783 00121$:
   0FBF E5 81              2784 	mov	a,sp
   0FC1 24 FD              2785 	add	a,#0xfd
   0FC3 F8                 2786 	mov	r0,a
   0FC4 E6                 2787 	mov	a,@r0
   0FC5 08                 2788 	inc	r0
   0FC6 46                 2789 	orl	a,@r0
   0FC7 70 03              2790 	jnz	00246$
   0FC9 02s12r55           2791 	ljmp	00145$
   0FCC                    2792 00246$:
                           2793 ;	cJSON.c:169: if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
   0FCC E5 81              2794 	mov	a,sp
   0FCE 24 FD              2795 	add	a,#0xfd
   0FD0 F8                 2796 	mov	r0,a
   0FD1 C3                 2797 	clr	c
   0FD2 08                 2798 	inc	r0
   0FD3 E6                 2799 	mov	a,@r0
   0FD4 94 D8              2800 	subb	a,#0xD8
   0FD6 50 03              2801 	jnc	00247$
   0FD8 02s11r00           2802 	ljmp	00129$
   0FDB                    2803 00247$:
   0FDB E5 81              2804 	mov	a,sp
   0FDD 24 FD              2805 	add	a,#0xfd
   0FDF F8                 2806 	mov	r0,a
   0FE0 C3                 2807 	clr	c
   0FE1 74 FF              2808 	mov	a,#0xFF
   0FE3 96                 2809 	subb	a,@r0
   0FE4 74 DB              2810 	mov	a,#0xDB
   0FE6 08                 2811 	inc	r0
   0FE7 96                 2812 	subb	a,@r0
   0FE8 50 03              2813 	jnc	00248$
   0FEA 02s11r00           2814 	ljmp	00129$
   0FED                    2815 00248$:
                           2816 ;	cJSON.c:171: if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
   0FED C0 05              2817 	push	ar5
   0FEF C0 06              2818 	push	ar6
   0FF1 C0 07              2819 	push	ar7
   0FF3 E5 81              2820 	mov	a,sp
   0FF5 24 F4              2821 	add	a,#0xf4
   0FF7 F8                 2822 	mov	r0,a
   0FF8 74 01              2823 	mov	a,#0x01
   0FFA 26                 2824 	add	a,@r0
   0FFB FA                 2825 	mov	r2,a
   0FFC E4                 2826 	clr	a
   0FFD 08                 2827 	inc	r0
   0FFE 36                 2828 	addc	a,@r0
   0FFF FB                 2829 	mov	r3,a
   1000 08                 2830 	inc	r0
   1001 86 07              2831 	mov	ar7,@r0
   1003 8A 82              2832 	mov	dpl,r2
   1005 8B 83              2833 	mov	dph,r3
   1007 8F F0              2834 	mov	b,r7
   1009 12s00r00           2835 	lcall	__gptrget
   100C FA                 2836 	mov	r2,a
   100D BA 5C 02           2837 	cjne	r2,#0x5C,00249$
   1010 80 09              2838 	sjmp	00250$
   1012                    2839 00249$:
   1012 D0 07              2840 	pop	ar7
   1014 D0 06              2841 	pop	ar6
   1016 D0 05              2842 	pop	ar5
   1018 02s12r55           2843 	ljmp	00145$
   101B                    2844 00250$:
   101B D0 07              2845 	pop	ar7
   101D D0 06              2846 	pop	ar6
   101F D0 05              2847 	pop	ar5
   1021 C0 05              2848 	push	ar5
   1023 C0 06              2849 	push	ar6
   1025 C0 07              2850 	push	ar7
   1027 E5 81              2851 	mov	a,sp
   1029 24 F4              2852 	add	a,#0xf4
   102B F8                 2853 	mov	r0,a
   102C 74 02              2854 	mov	a,#0x02
   102E 26                 2855 	add	a,@r0
   102F FA                 2856 	mov	r2,a
   1030 E4                 2857 	clr	a
   1031 08                 2858 	inc	r0
   1032 36                 2859 	addc	a,@r0
   1033 FB                 2860 	mov	r3,a
   1034 08                 2861 	inc	r0
   1035 86 07              2862 	mov	ar7,@r0
   1037 8A 82              2863 	mov	dpl,r2
   1039 8B 83              2864 	mov	dph,r3
   103B 8F F0              2865 	mov	b,r7
   103D 12s00r00           2866 	lcall	__gptrget
   1040 FA                 2867 	mov	r2,a
   1041 BA 75 02           2868 	cjne	r2,#0x75,00251$
   1044 80 09              2869 	sjmp	00252$
   1046                    2870 00251$:
   1046 D0 07              2871 	pop	ar7
   1048 D0 06              2872 	pop	ar6
   104A D0 05              2873 	pop	ar5
   104C 02s12r55           2874 	ljmp	00145$
   104F                    2875 00252$:
   104F D0 07              2876 	pop	ar7
   1051 D0 06              2877 	pop	ar6
   1053 D0 05              2878 	pop	ar5
                           2879 ;	cJSON.c:172: uc2=parse_hex4(ptr+3);ptr+=6;
   1055 C0 05              2880 	push	ar5
   1057 C0 06              2881 	push	ar6
   1059 C0 07              2882 	push	ar7
   105B E5 81              2883 	mov	a,sp
   105D 24 F4              2884 	add	a,#0xf4
   105F F8                 2885 	mov	r0,a
   1060 74 03              2886 	mov	a,#0x03
   1062 26                 2887 	add	a,@r0
   1063 FA                 2888 	mov	r2,a
   1064 E4                 2889 	clr	a
   1065 08                 2890 	inc	r0
   1066 36                 2891 	addc	a,@r0
   1067 FB                 2892 	mov	r3,a
   1068 08                 2893 	inc	r0
   1069 86 07              2894 	mov	ar7,@r0
   106B 8A 82              2895 	mov	dpl,r2
   106D 8B 83              2896 	mov	dph,r3
   106F 8F F0              2897 	mov	b,r7
   1071 C0 05              2898 	push	ar5
   1073 78rD1              2899 	mov	r0,#_parse_hex4
   1075 79s0A              2900 	mov	r1,#(_parse_hex4 >> 8)
   1077 7As00              2901 	mov	r2,#(_parse_hex4 >> 16)
   1079 12s00r00           2902 	lcall	__sdcc_banked_call
   107C AE 82              2903 	mov	r6,dpl
   107E AF 83              2904 	mov	r7,dph
   1080 D0 05              2905 	pop	ar5
   1082 E5 81              2906 	mov	a,sp
   1084 24 FC              2907 	add	a,#0xfc
   1086 F8                 2908 	mov	r0,a
   1087 A6 06              2909 	mov	@r0,ar6
   1089 08                 2910 	inc	r0
   108A A6 07              2911 	mov	@r0,ar7
   108C E5 81              2912 	mov	a,sp
   108E 24 F4              2913 	add	a,#0xf4
   1090 F8                 2914 	mov	r0,a
   1091 74 06              2915 	mov	a,#0x06
   1093 26                 2916 	add	a,@r0
   1094 F6                 2917 	mov	@r0,a
   1095 E4                 2918 	clr	a
   1096 08                 2919 	inc	r0
   1097 36                 2920 	addc	a,@r0
   1098 F6                 2921 	mov	@r0,a
                           2922 ;	cJSON.c:173: if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
   1099 E5 81              2923 	mov	a,sp
   109B 24 FC              2924 	add	a,#0xfc
   109D F8                 2925 	mov	r0,a
   109E C3                 2926 	clr	c
   109F 08                 2927 	inc	r0
   10A0 E6                 2928 	mov	a,@r0
   10A1 94 DC              2929 	subb	a,#0xDC
   10A3 D0 07              2930 	pop	ar7
   10A5 D0 06              2931 	pop	ar6
   10A7 D0 05              2932 	pop	ar5
   10A9 50 03              2933 	jnc	00253$
   10AB 02s12r55           2934 	ljmp	00145$
   10AE                    2935 00253$:
   10AE A8 81              2936 	mov	r0,sp
   10B0 18                 2937 	dec	r0
   10B1 C3                 2938 	clr	c
   10B2 74 FF              2939 	mov	a,#0xFF
   10B4 96                 2940 	subb	a,@r0
   10B5 74 DF              2941 	mov	a,#0xDF
   10B7 08                 2942 	inc	r0
   10B8 96                 2943 	subb	a,@r0
   10B9 50 03              2944 	jnc	00254$
   10BB 02s12r55           2945 	ljmp	00145$
   10BE                    2946 00254$:
                           2947 ;	cJSON.c:174: uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
   10BE C0 05              2948 	push	ar5
   10C0 C0 06              2949 	push	ar6
   10C2 C0 07              2950 	push	ar7
   10C4 E5 81              2951 	mov	a,sp
   10C6 24 FA              2952 	add	a,#0xfa
   10C8 F8                 2953 	mov	r0,a
   10C9 86 02              2954 	mov	ar2,@r0
   10CB 74 03              2955 	mov	a,#0x03
   10CD 08                 2956 	inc	r0
   10CE 56                 2957 	anl	a,@r0
   10CF EA                 2958 	mov	a,r2
   10D0 2A                 2959 	add	a,r2
   10D1 25 E0              2960 	add	a,acc
   10D3 FB                 2961 	mov	r3,a
   10D4 7A 00              2962 	mov	r2,#0x00
   10D6 E5 81              2963 	mov	a,sp
   10D8 24 FC              2964 	add	a,#0xfc
   10DA F8                 2965 	mov	r0,a
   10DB 86 06              2966 	mov	ar6,@r0
   10DD 74 03              2967 	mov	a,#0x03
   10DF 08                 2968 	inc	r0
   10E0 56                 2969 	anl	a,@r0
   10E1 FF                 2970 	mov	r7,a
   10E2 EE                 2971 	mov	a,r6
   10E3 42 02              2972 	orl	ar2,a
   10E5 EF                 2973 	mov	a,r7
   10E6 42 03              2974 	orl	ar3,a
   10E8 E4                 2975 	clr	a
   10E9 FF                 2976 	mov	r7,a
   10EA FE                 2977 	mov	r6,a
   10EB 74 01              2978 	mov	a,#0x01
   10ED 2F                 2979 	add	a,r7
   10EE E4                 2980 	clr	a
   10EF 3E                 2981 	addc	a,r6
   10F0 E5 81              2982 	mov	a,sp
   10F2 24 FA              2983 	add	a,#0xfa
   10F4 F8                 2984 	mov	r0,a
   10F5 A6 02              2985 	mov	@r0,ar2
   10F7 08                 2986 	inc	r0
   10F8 A6 03              2987 	mov	@r0,ar3
                           2988 ;	cJSON.c:196: return ptr;
   10FA D0 07              2989 	pop	ar7
   10FC D0 06              2990 	pop	ar6
   10FE D0 05              2991 	pop	ar5
                           2992 ;	cJSON.c:174: uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
   1100                    2993 00129$:
                           2994 ;	cJSON.c:177: len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
   1100 E5 81              2995 	mov	a,sp
   1102 24 FD              2996 	add	a,#0xfd
   1104 F8                 2997 	mov	r0,a
   1105 C3                 2998 	clr	c
   1106 E6                 2999 	mov	a,@r0
   1107 94 80              3000 	subb	a,#0x80
   1109 08                 3001 	inc	r0
   110A E6                 3002 	mov	a,@r0
   110B 94 00              3003 	subb	a,#0x00
   110D 50 06              3004 	jnc	00137$
   110F 7A 01              3005 	mov	r2,#0x01
   1111 7B 00              3006 	mov	r3,#0x00
   1113 80 14              3007 	sjmp	00138$
   1115                    3008 00137$:
   1115 E5 81              3009 	mov	a,sp
   1117 24 FD              3010 	add	a,#0xfd
   1119 F8                 3011 	mov	r0,a
   111A 08                 3012 	inc	r0
   111B E6                 3013 	mov	a,@r0
   111C 54 F8              3014 	anl	a,#0xF8
   111E 70 05              3015 	jnz	00131$
   1120 7A 02              3016 	mov	r2,#0x02
   1122 FB                 3017 	mov	r3,a
   1123 80 04              3018 	sjmp	00138$
   1125                    3019 00131$:
   1125 7A 03              3020 	mov	r2,#0x03
   1127 7B 00              3021 	mov	r3,#0x00
   1129                    3022 00138$:
   1129 EA                 3023 	mov	a,r2
   112A 2D                 3024 	add	a,r5
   112B FD                 3025 	mov	r5,a
   112C EB                 3026 	mov	a,r3
   112D 3E                 3027 	addc	a,r6
   112E FE                 3028 	mov	r6,a
                           3029 ;	cJSON.c:179: switch (len) {
   112F BA 01 06           3030 	cjne	r2,#0x01,00258$
   1132 BB 00 03           3031 	cjne	r3,#0x00,00258$
   1135 02s12r11           3032 	ljmp	00142$
   1138                    3033 00258$:
   1138 BA 02 06           3034 	cjne	r2,#0x02,00259$
   113B BB 00 03           3035 	cjne	r3,#0x00,00259$
   113E 02s11rD2           3036 	ljmp	00141$
   1141                    3037 00259$:
   1141 BA 03 05           3038 	cjne	r2,#0x03,00260$
   1144 BB 00 02           3039 	cjne	r3,#0x00,00260$
   1147 80 4A              3040 	sjmp	00140$
   1149                    3041 00260$:
   1149 BA 04 05           3042 	cjne	r2,#0x04,00261$
   114C BB 00 02           3043 	cjne	r3,#0x00,00261$
   114F 80 03              3044 	sjmp	00262$
   1151                    3045 00261$:
   1151 02s12r43           3046 	ljmp	00143$
   1154                    3047 00262$:
                           3048 ;	cJSON.c:180: case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
   1154 C0 02              3049 	push	ar2
   1156 C0 03              3050 	push	ar3
   1158 1D                 3051 	dec	r5
   1159 BD FF 01           3052 	cjne	r5,#0xFF,00263$
   115C 1E                 3053 	dec	r6
   115D                    3054 00263$:
   115D E5 81              3055 	mov	a,sp
   115F 24 FB              3056 	add	a,#0xfb
   1161 F8                 3057 	mov	r0,a
   1162 74 80              3058 	mov	a,#0x80
   1164 46                 3059 	orl	a,@r0
   1165 FA                 3060 	mov	r2,a
   1166 08                 3061 	inc	r0
   1167 86 03              3062 	mov	ar3,@r0
   1169 53 02 BF           3063 	anl	ar2,#0xBF
   116C 8D 82              3064 	mov	dpl,r5
   116E 8E 83              3065 	mov	dph,r6
   1170 8F F0              3066 	mov	b,r7
   1172 EA                 3067 	mov	a,r2
   1173 12s00r00           3068 	lcall	__gptrput
   1176 E5 81              3069 	mov	a,sp
   1178 24 FB              3070 	add	a,#0xfb
   117A F8                 3071 	mov	r0,a
   117B 08                 3072 	inc	r0
   117C E6                 3073 	mov	a,@r0
   117D 18                 3074 	dec	r0
   117E A2 E7              3075 	mov	c,acc.7
   1180 C6                 3076 	xch	a,@r0
   1181 33                 3077 	rlc	a
   1182 C6                 3078 	xch	a,@r0
   1183 33                 3079 	rlc	a
   1184 A2 E7              3080 	mov	c,acc.7
   1186 C6                 3081 	xch	a,@r0
   1187 33                 3082 	rlc	a
   1188 C6                 3083 	xch	a,@r0
   1189 33                 3084 	rlc	a
   118A C6                 3085 	xch	a,@r0
   118B 54 03              3086 	anl	a,#0x03
   118D 08                 3087 	inc	r0
   118E F6                 3088 	mov	@r0,a
                           3089 ;	cJSON.c:196: return ptr;
   118F D0 03              3090 	pop	ar3
   1191 D0 02              3091 	pop	ar2
                           3092 ;	cJSON.c:181: case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
   1193                    3093 00140$:
   1193 C0 02              3094 	push	ar2
   1195 C0 03              3095 	push	ar3
   1197 1D                 3096 	dec	r5
   1198 BD FF 01           3097 	cjne	r5,#0xFF,00264$
   119B 1E                 3098 	dec	r6
   119C                    3099 00264$:
   119C E5 81              3100 	mov	a,sp
   119E 24 FB              3101 	add	a,#0xfb
   11A0 F8                 3102 	mov	r0,a
   11A1 74 80              3103 	mov	a,#0x80
   11A3 46                 3104 	orl	a,@r0
   11A4 FA                 3105 	mov	r2,a
   11A5 08                 3106 	inc	r0
   11A6 86 03              3107 	mov	ar3,@r0
   11A8 53 02 BF           3108 	anl	ar2,#0xBF
   11AB 8D 82              3109 	mov	dpl,r5
   11AD 8E 83              3110 	mov	dph,r6
   11AF 8F F0              3111 	mov	b,r7
   11B1 EA                 3112 	mov	a,r2
   11B2 12s00r00           3113 	lcall	__gptrput
   11B5 E5 81              3114 	mov	a,sp
   11B7 24 FB              3115 	add	a,#0xfb
   11B9 F8                 3116 	mov	r0,a
   11BA 08                 3117 	inc	r0
   11BB E6                 3118 	mov	a,@r0
   11BC 18                 3119 	dec	r0
   11BD A2 E7              3120 	mov	c,acc.7
   11BF C6                 3121 	xch	a,@r0
   11C0 33                 3122 	rlc	a
   11C1 C6                 3123 	xch	a,@r0
   11C2 33                 3124 	rlc	a
   11C3 A2 E7              3125 	mov	c,acc.7
   11C5 C6                 3126 	xch	a,@r0
   11C6 33                 3127 	rlc	a
   11C7 C6                 3128 	xch	a,@r0
   11C8 33                 3129 	rlc	a
   11C9 C6                 3130 	xch	a,@r0
   11CA 54 03              3131 	anl	a,#0x03
   11CC 08                 3132 	inc	r0
   11CD F6                 3133 	mov	@r0,a
                           3134 ;	cJSON.c:196: return ptr;
   11CE D0 03              3135 	pop	ar3
   11D0 D0 02              3136 	pop	ar2
                           3137 ;	cJSON.c:182: case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
   11D2                    3138 00141$:
   11D2 C0 02              3139 	push	ar2
   11D4 C0 03              3140 	push	ar3
   11D6 1D                 3141 	dec	r5
   11D7 BD FF 01           3142 	cjne	r5,#0xFF,00265$
   11DA 1E                 3143 	dec	r6
   11DB                    3144 00265$:
   11DB E5 81              3145 	mov	a,sp
   11DD 24 FB              3146 	add	a,#0xfb
   11DF F8                 3147 	mov	r0,a
   11E0 74 80              3148 	mov	a,#0x80
   11E2 46                 3149 	orl	a,@r0
   11E3 FA                 3150 	mov	r2,a
   11E4 08                 3151 	inc	r0
   11E5 86 03              3152 	mov	ar3,@r0
   11E7 53 02 BF           3153 	anl	ar2,#0xBF
   11EA 8D 82              3154 	mov	dpl,r5
   11EC 8E 83              3155 	mov	dph,r6
   11EE 8F F0              3156 	mov	b,r7
   11F0 EA                 3157 	mov	a,r2
   11F1 12s00r00           3158 	lcall	__gptrput
   11F4 E5 81              3159 	mov	a,sp
   11F6 24 FB              3160 	add	a,#0xfb
   11F8 F8                 3161 	mov	r0,a
   11F9 08                 3162 	inc	r0
   11FA E6                 3163 	mov	a,@r0
   11FB 18                 3164 	dec	r0
   11FC A2 E7              3165 	mov	c,acc.7
   11FE C6                 3166 	xch	a,@r0
   11FF 33                 3167 	rlc	a
   1200 C6                 3168 	xch	a,@r0
   1201 33                 3169 	rlc	a
   1202 A2 E7              3170 	mov	c,acc.7
   1204 C6                 3171 	xch	a,@r0
   1205 33                 3172 	rlc	a
   1206 C6                 3173 	xch	a,@r0
   1207 33                 3174 	rlc	a
   1208 C6                 3175 	xch	a,@r0
   1209 54 03              3176 	anl	a,#0x03
   120B 08                 3177 	inc	r0
   120C F6                 3178 	mov	@r0,a
                           3179 ;	cJSON.c:196: return ptr;
   120D D0 03              3180 	pop	ar3
   120F D0 02              3181 	pop	ar2
                           3182 ;	cJSON.c:183: case 1: *--ptr2 =(uc | firstByteMark[len]);
   1211                    3183 00142$:
   1211 1D                 3184 	dec	r5
   1212 BD FF 01           3185 	cjne	r5,#0xFF,00266$
   1215 1E                 3186 	dec	r6
   1216                    3187 00266$:
   1216 EA                 3188 	mov	a,r2
   1217 24r06              3189 	add	a,#_firstByteMark
   1219 F5 82              3190 	mov	dpl,a
   121B EB                 3191 	mov	a,r3
   121C 34s00              3192 	addc	a,#(_firstByteMark >> 8)
   121E F5 83              3193 	mov	dph,a
   1220 C0 02              3194 	push	ar2
   1222 C0 03              3195 	push	ar3
   1224 E4                 3196 	clr	a
   1225 93                 3197 	movc	a,@a+dptr
   1226 FB                 3198 	mov	r3,a
   1227 7A 00              3199 	mov	r2,#0x00
   1229 E5 81              3200 	mov	a,sp
   122B 24 FB              3201 	add	a,#0xfb
   122D F8                 3202 	mov	r0,a
   122E E6                 3203 	mov	a,@r0
   122F 42 03              3204 	orl	ar3,a
   1231 08                 3205 	inc	r0
   1232 E6                 3206 	mov	a,@r0
   1233 42 02              3207 	orl	ar2,a
   1235 8D 82              3208 	mov	dpl,r5
   1237 8E 83              3209 	mov	dph,r6
   1239 8F F0              3210 	mov	b,r7
   123B EB                 3211 	mov	a,r3
   123C 12s00r00           3212 	lcall	__gptrput
                           3213 ;	cJSON.c:196: return ptr;
   123F D0 03              3214 	pop	ar3
   1241 D0 02              3215 	pop	ar2
                           3216 ;	cJSON.c:184: }
   1243                    3217 00143$:
                           3218 ;	cJSON.c:185: ptr2+=len;
   1243 EA                 3219 	mov	a,r2
   1244 2D                 3220 	add	a,r5
   1245 FD                 3221 	mov	r5,a
   1246 EB                 3222 	mov	a,r3
   1247 3E                 3223 	addc	a,r6
   1248 FE                 3224 	mov	r6,a
                           3225 ;	cJSON.c:186: break;
                           3226 ;	cJSON.c:187: default:  *ptr2++=*ptr; break;
   1249 80 0A              3227 	sjmp	00145$
   124B                    3228 00144$:
   124B 8D 82              3229 	mov	dpl,r5
   124D 8E 83              3230 	mov	dph,r6
   124F 8F F0              3231 	mov	b,r7
   1251 EC                 3232 	mov	a,r4
   1252 12s00r00           3233 	lcall	__gptrput
                           3234 ;	cJSON.c:188: }
   1255                    3235 00145$:
                           3236 ;	cJSON.c:189: ptr++;
   1255 E5 81              3237 	mov	a,sp
   1257 24 F7              3238 	add	a,#0xf7
   1259 F8                 3239 	mov	r0,a
   125A 06                 3240 	inc	@r0
   125B B6 00 02           3241 	cjne	@r0,#0x00,00267$
   125E 08                 3242 	inc	r0
   125F 06                 3243 	inc	@r0
   1260                    3244 00267$:
   1260 02s0Er7D           3245 	ljmp	00150$
   1263                    3246 00152$:
                           3247 ;	cJSON.c:192: *ptr2=0;
   1263 8D 82              3248 	mov	dpl,r5
   1265 8E 83              3249 	mov	dph,r6
   1267 8F F0              3250 	mov	b,r7
   1269 E4                 3251 	clr	a
   126A 12s00r00           3252 	lcall	__gptrput
                           3253 ;	cJSON.c:193: if (*ptr=='\"') ptr++;
   126D E5 81              3254 	mov	a,sp
   126F 24 F7              3255 	add	a,#0xf7
   1271 F8                 3256 	mov	r0,a
   1272 86 82              3257 	mov	dpl,@r0
   1274 08                 3258 	inc	r0
   1275 86 83              3259 	mov	dph,@r0
   1277 08                 3260 	inc	r0
   1278 86 F0              3261 	mov	b,@r0
   127A 12s00r00           3262 	lcall	__gptrget
   127D FF                 3263 	mov	r7,a
   127E BF 22 0B           3264 	cjne	r7,#0x22,00154$
   1281 E5 81              3265 	mov	a,sp
   1283 24 F7              3266 	add	a,#0xf7
   1285 F8                 3267 	mov	r0,a
   1286 06                 3268 	inc	@r0
   1287 B6 00 02           3269 	cjne	@r0,#0x00,00270$
   128A 08                 3270 	inc	r0
   128B 06                 3271 	inc	@r0
   128C                    3272 00270$:
   128C                    3273 00154$:
                           3274 ;	cJSON.c:194: item->valuestring=out;
   128C E5 81              3275 	mov	a,sp
   128E 24 F4              3276 	add	a,#0xf4
   1290 F8                 3277 	mov	r0,a
   1291 74 0B              3278 	mov	a,#0x0B
   1293 26                 3279 	add	a,@r0
   1294 FD                 3280 	mov	r5,a
   1295 E4                 3281 	clr	a
   1296 08                 3282 	inc	r0
   1297 36                 3283 	addc	a,@r0
   1298 FE                 3284 	mov	r6,a
   1299 08                 3285 	inc	r0
   129A 86 07              3286 	mov	ar7,@r0
   129C 8D 82              3287 	mov	dpl,r5
   129E 8E 83              3288 	mov	dph,r6
   12A0 8F F0              3289 	mov	b,r7
   12A2 E5 81              3290 	mov	a,sp
   12A4 24 FA              3291 	add	a,#0xfa
   12A6 F8                 3292 	mov	r0,a
   12A7 E6                 3293 	mov	a,@r0
   12A8 12s00r00           3294 	lcall	__gptrput
   12AB A3                 3295 	inc	dptr
   12AC 08                 3296 	inc	r0
   12AD E6                 3297 	mov	a,@r0
   12AE 12s00r00           3298 	lcall	__gptrput
   12B1 A3                 3299 	inc	dptr
   12B2 08                 3300 	inc	r0
   12B3 E6                 3301 	mov	a,@r0
   12B4 12s00r00           3302 	lcall	__gptrput
                           3303 ;	cJSON.c:195: item->type=cJSON_String;
   12B7 E5 81              3304 	mov	a,sp
   12B9 24 F4              3305 	add	a,#0xf4
   12BB F8                 3306 	mov	r0,a
   12BC 74 09              3307 	mov	a,#0x09
   12BE 26                 3308 	add	a,@r0
   12BF FD                 3309 	mov	r5,a
   12C0 E4                 3310 	clr	a
   12C1 08                 3311 	inc	r0
   12C2 36                 3312 	addc	a,@r0
   12C3 FE                 3313 	mov	r6,a
   12C4 08                 3314 	inc	r0
   12C5 86 07              3315 	mov	ar7,@r0
   12C7 8D 82              3316 	mov	dpl,r5
   12C9 8E 83              3317 	mov	dph,r6
   12CB 8F F0              3318 	mov	b,r7
   12CD 74 04              3319 	mov	a,#0x04
   12CF 12s00r00           3320 	lcall	__gptrput
   12D2 A3                 3321 	inc	dptr
   12D3 E4                 3322 	clr	a
   12D4 12s00r00           3323 	lcall	__gptrput
                           3324 ;	cJSON.c:196: return ptr;
   12D7 E5 81              3325 	mov	a,sp
   12D9 24 F7              3326 	add	a,#0xf7
   12DB F8                 3327 	mov	r0,a
   12DC 86 82              3328 	mov	dpl,@r0
   12DE 08                 3329 	inc	r0
   12DF 86 83              3330 	mov	dph,@r0
   12E1 08                 3331 	inc	r0
   12E2 86 F0              3332 	mov	b,@r0
   12E4                    3333 00155$:
   12E4 E5 81              3334 	mov	a,sp
   12E6 24 F3              3335 	add	a,#0xF3
   12E8 F5 81              3336 	mov	sp,a
   12EA 02s00r00           3337 	ljmp	__sdcc_banked_ret
                           3338 ;------------------------------------------------------------
                           3339 ;Allocation info for local variables in function 'print_string_ptr'
                           3340 ;------------------------------------------------------------
                           3341 ;str                       Allocated to stack - sp -14
                           3342 ;ptr                       Allocated to registers r2 r3 r4 
                           3343 ;ptr2                      Allocated to stack - sp -11
                           3344 ;out                       Allocated to stack - sp -8
                           3345 ;len                       Allocated to stack - sp -5
                           3346 ;token                     Allocated to stack - sp -3
                           3347 ;sloc0                     Allocated to stack - sp -2
                           3348 ;------------------------------------------------------------
                           3349 ;	cJSON.c:200: static char *print_string_ptr(const char *str)
                           3350 ;	-----------------------------------------
                           3351 ;	 function print_string_ptr
                           3352 ;	-----------------------------------------
   12ED                    3353 _print_string_ptr:
   12ED C0 82              3354 	push	dpl
   12EF C0 83              3355 	push	dph
   12F1 C0 F0              3356 	push	b
   12F3 E5 81              3357 	mov	a,sp
   12F5 24 0C              3358 	add	a,#0x0C
                           3359 ;	cJSON.c:202: const char *ptr;char *ptr2,*out;int len=0;unsigned char token;
   12F7 F5 81              3360 	mov	sp,a
   12F9 24 FB              3361 	add	a,#0xfb
   12FB F8                 3362 	mov	r0,a
   12FC E4                 3363 	clr	a
   12FD F6                 3364 	mov	@r0,a
   12FE 08                 3365 	inc	r0
   12FF F6                 3366 	mov	@r0,a
                           3367 ;	cJSON.c:204: if (!str) return cJSON_strdup("");
   1300 E5 81              3368 	mov	a,sp
   1302 24 F2              3369 	add	a,#0xf2
   1304 F8                 3370 	mov	r0,a
   1305 E6                 3371 	mov	a,@r0
   1306 08                 3372 	inc	r0
   1307 46                 3373 	orl	a,@r0
   1308 70 2A              3374 	jnz	00138$
   130A 90s00r0D           3375 	mov	dptr,#__str_2
   130D 75 F0 80           3376 	mov	b,#0x80
   1310 78r5F              3377 	mov	r0,#_cJSON_strdup
   1312 79s02              3378 	mov	r1,#(_cJSON_strdup >> 8)
   1314 7As00              3379 	mov	r2,#(_cJSON_strdup >> 16)
   1316 12s00r00           3380 	lcall	__sdcc_banked_call
   1319 A8 81              3381 	mov	r0,sp
   131B 18                 3382 	dec	r0
   131C 18                 3383 	dec	r0
   131D A6 82              3384 	mov	@r0,dpl
   131F 08                 3385 	inc	r0
   1320 A6 83              3386 	mov	@r0,dph
   1322 08                 3387 	inc	r0
   1323 A6 F0              3388 	mov	@r0,b
   1325 A8 81              3389 	mov	r0,sp
   1327 18                 3390 	dec	r0
   1328 18                 3391 	dec	r0
   1329 86 82              3392 	mov	dpl,@r0
   132B 08                 3393 	inc	r0
   132C 86 83              3394 	mov	dph,@r0
   132E 08                 3395 	inc	r0
   132F 86 F0              3396 	mov	b,@r0
   1331 02s16r12           3397 	ljmp	00131$
                           3398 ;	cJSON.c:205: ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
   1334                    3399 00138$:
   1334 E5 81              3400 	mov	a,sp
   1336 24 F2              3401 	add	a,#0xf2
   1338 F8                 3402 	mov	r0,a
   1339 86 02              3403 	mov	ar2,@r0
   133B 08                 3404 	inc	r0
   133C 86 06              3405 	mov	ar6,@r0
   133E 08                 3406 	inc	r0
   133F 86 07              3407 	mov	ar7,@r0
   1341                    3408 00109$:
   1341 8A 82              3409 	mov	dpl,r2
   1343 8E 83              3410 	mov	dph,r6
   1345 8F F0              3411 	mov	b,r7
   1347 12s00r00           3412 	lcall	__gptrget
   134A FD                 3413 	mov	r5,a
   134B E5 81              3414 	mov	a,sp
   134D 24 FD              3415 	add	a,#0xfd
   134F F8                 3416 	mov	r0,a
   1350 A6 05              3417 	mov	@r0,ar5
   1352 ED                 3418 	mov	a,r5
   1353 60 71              3419 	jz	00111$
   1355 E5 81              3420 	mov	a,sp
   1357 24 FB              3421 	add	a,#0xfb
   1359 F8                 3422 	mov	r0,a
   135A 06                 3423 	inc	@r0
   135B B6 00 02           3424 	cjne	@r0,#0x00,00174$
   135E 08                 3425 	inc	r0
   135F 06                 3426 	inc	@r0
   1360                    3427 00174$:
   1360 E5 81              3428 	mov	a,sp
   1362 24 FB              3429 	add	a,#0xfb
   1364 F8                 3430 	mov	r0,a
   1365 E6                 3431 	mov	a,@r0
   1366 08                 3432 	inc	r0
   1367 46                 3433 	orl	a,@r0
   1368 60 5C              3434 	jz	00111$
   136A E5 81              3435 	mov	a,sp
   136C 24 FD              3436 	add	a,#0xfd
   136E F8                 3437 	mov	r0,a
   136F 86 05              3438 	mov	ar5,@r0
   1371 C0 07              3439 	push	ar7
   1373 C0 06              3440 	push	ar6
   1375 C0 02              3441 	push	ar2
   1377 C0 05              3442 	push	ar5
   1379 90s00r0E           3443 	mov	dptr,#__str_3
   137C 75 F0 80           3444 	mov	b,#0x80
   137F 78r00              3445 	mov	r0,#_strchr
   1381 79s00              3446 	mov	r1,#(_strchr >> 8)
   1383 7As00              3447 	mov	r2,#(_strchr >> 16)
   1385 12s00r00           3448 	lcall	__sdcc_banked_call
   1388 AB 82              3449 	mov	r3,dpl
   138A AC 83              3450 	mov	r4,dph
   138C AD F0              3451 	mov	r5,b
   138E 15 81              3452 	dec	sp
   1390 D0 02              3453 	pop	ar2
   1392 D0 06              3454 	pop	ar6
   1394 D0 07              3455 	pop	ar7
   1396 EB                 3456 	mov	a,r3
   1397 4C                 3457 	orl	a,r4
   1398 60 0D              3458 	jz	00106$
   139A E5 81              3459 	mov	a,sp
   139C 24 FB              3460 	add	a,#0xfb
   139E F8                 3461 	mov	r0,a
   139F 06                 3462 	inc	@r0
   13A0 B6 00 02           3463 	cjne	@r0,#0x00,00177$
   13A3 08                 3464 	inc	r0
   13A4 06                 3465 	inc	@r0
   13A5                    3466 00177$:
   13A5 80 17              3467 	sjmp	00107$
   13A7                    3468 00106$:
   13A7 E5 81              3469 	mov	a,sp
   13A9 24 FD              3470 	add	a,#0xfd
   13AB F8                 3471 	mov	r0,a
   13AC B6 20 00           3472 	cjne	@r0,#0x20,00178$
   13AF                    3473 00178$:
   13AF 50 0D              3474 	jnc	00107$
   13B1 E5 81              3475 	mov	a,sp
   13B3 24 FB              3476 	add	a,#0xfb
   13B5 F8                 3477 	mov	r0,a
   13B6 74 05              3478 	mov	a,#0x05
   13B8 26                 3479 	add	a,@r0
   13B9 F6                 3480 	mov	@r0,a
   13BA E4                 3481 	clr	a
   13BB 08                 3482 	inc	r0
   13BC 36                 3483 	addc	a,@r0
   13BD F6                 3484 	mov	@r0,a
   13BE                    3485 00107$:
   13BE 0A                 3486 	inc	r2
   13BF BA 00 01           3487 	cjne	r2,#0x00,00180$
   13C2 0E                 3488 	inc	r6
   13C3                    3489 00180$:
   13C3 02s13r41           3490 	ljmp	00109$
   13C6                    3491 00111$:
                           3492 ;	cJSON.c:207: out=(char*)cJSON_malloc(len+3);
   13C6 E5 81              3493 	mov	a,sp
   13C8 24 FB              3494 	add	a,#0xfb
   13CA F8                 3495 	mov	r0,a
   13CB 74 03              3496 	mov	a,#0x03
   13CD 26                 3497 	add	a,@r0
   13CE FE                 3498 	mov	r6,a
   13CF E4                 3499 	clr	a
   13D0 08                 3500 	inc	r0
   13D1 36                 3501 	addc	a,@r0
   13D2 FF                 3502 	mov	r7,a
   13D3 8E 82              3503 	mov	dpl,r6
   13D5 8F 83              3504 	mov	dph,r7
   13D7 78r00              3505 	mov	r0,#_malloc
   13D9 79s00              3506 	mov	r1,#(_malloc >> 8)
   13DB 7As00              3507 	mov	r2,#(_malloc >> 16)
   13DD 12s00r00           3508 	lcall	__sdcc_banked_call
   13E0 AE 82              3509 	mov	r6,dpl
   13E2 AF 83              3510 	mov	r7,dph
   13E4 E5 81              3511 	mov	a,sp
   13E6 24 F8              3512 	add	a,#0xf8
   13E8 F8                 3513 	mov	r0,a
   13E9 A6 06              3514 	mov	@r0,ar6
   13EB 08                 3515 	inc	r0
   13EC A6 07              3516 	mov	@r0,ar7
   13EE 08                 3517 	inc	r0
   13EF 76 00              3518 	mov	@r0,#0x00
                           3519 ;	cJSON.c:208: if (!out) return 0;
   13F1 E5 81              3520 	mov	a,sp
   13F3 24 F8              3521 	add	a,#0xf8
   13F5 F8                 3522 	mov	r0,a
   13F6 E6                 3523 	mov	a,@r0
   13F7 08                 3524 	inc	r0
   13F8 46                 3525 	orl	a,@r0
   13F9 70 08              3526 	jnz	00113$
   13FB 90 00 00           3527 	mov	dptr,#0x0000
   13FE F5 F0              3528 	mov	b,a
   1400 02s16r12           3529 	ljmp	00131$
   1403                    3530 00113$:
                           3531 ;	cJSON.c:210: ptr2=out;ptr=str;
   1403 E5 81              3532 	mov	a,sp
   1405 24 F2              3533 	add	a,#0xf2
   1407 F8                 3534 	mov	r0,a
   1408 86 02              3535 	mov	ar2,@r0
   140A 08                 3536 	inc	r0
   140B 86 03              3537 	mov	ar3,@r0
   140D 08                 3538 	inc	r0
   140E 86 04              3539 	mov	ar4,@r0
                           3540 ;	cJSON.c:211: *ptr2++='\"';
   1410 E5 81              3541 	mov	a,sp
   1412 24 F8              3542 	add	a,#0xf8
   1414 F8                 3543 	mov	r0,a
   1415 86 82              3544 	mov	dpl,@r0
   1417 08                 3545 	inc	r0
   1418 86 83              3546 	mov	dph,@r0
   141A 08                 3547 	inc	r0
   141B 86 F0              3548 	mov	b,@r0
   141D 74 22              3549 	mov	a,#0x22
   141F 12s00r00           3550 	lcall	__gptrput
                           3551 ;	cJSON.c:212: while (*ptr)
   1422                    3552 00128$:
   1422 8A 82              3553 	mov	dpl,r2
   1424 8B 83              3554 	mov	dph,r3
   1426 8C F0              3555 	mov	b,r4
   1428 12s00r00           3556 	lcall	__gptrget
   142B FF                 3557 	mov	r7,a
   142C 70 03              3558 	jnz	00182$
   142E 02s15rDA           3559 	ljmp	00130$
   1431                    3560 00182$:
                           3561 ;	cJSON.c:214: if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
   1431 8F 06              3562 	mov	ar6,r7
   1433 EE                 3563 	mov	a,r6
   1434 24 E0              3564 	add	a,#0xff - 0x1F
   1436 50 2A              3565 	jnc	00124$
   1438 BF 22 02           3566 	cjne	r7,#0x22,00184$
   143B 80 25              3567 	sjmp	00124$
   143D                    3568 00184$:
   143D BF 5C 02           3569 	cjne	r7,#0x5C,00185$
   1440 80 20              3570 	sjmp	00124$
   1442                    3571 00185$:
   1442 0A                 3572 	inc	r2
   1443 BA 00 01           3573 	cjne	r2,#0x00,00186$
   1446 0B                 3574 	inc	r3
   1447                    3575 00186$:
   1447 E5 81              3576 	mov	a,sp
   1449 24 F5              3577 	add	a,#0xf5
   144B F8                 3578 	mov	r0,a
   144C 86 82              3579 	mov	dpl,@r0
   144E 08                 3580 	inc	r0
   144F 86 83              3581 	mov	dph,@r0
   1451 08                 3582 	inc	r0
   1452 86 F0              3583 	mov	b,@r0
   1454 EF                 3584 	mov	a,r7
   1455 12s00r00           3585 	lcall	__gptrput
   1458 A3                 3586 	inc	dptr
   1459 18                 3587 	dec	r0
   145A 18                 3588 	dec	r0
   145B A6 82              3589 	mov	@r0,dpl
   145D 08                 3590 	inc	r0
   145E A6 83              3591 	mov	@r0,dph
   1460 80 C0              3592 	sjmp	00128$
   1462                    3593 00124$:
                           3594 ;	cJSON.c:217: *ptr2++='\\';
   1462 E5 81              3595 	mov	a,sp
   1464 24 F5              3596 	add	a,#0xf5
   1466 F8                 3597 	mov	r0,a
   1467 86 82              3598 	mov	dpl,@r0
   1469 08                 3599 	inc	r0
   146A 86 83              3600 	mov	dph,@r0
   146C 08                 3601 	inc	r0
   146D 86 F0              3602 	mov	b,@r0
   146F 74 5C              3603 	mov	a,#0x5C
   1471 12s00r00           3604 	lcall	__gptrput
   1474 A3                 3605 	inc	dptr
   1475 18                 3606 	dec	r0
   1476 18                 3607 	dec	r0
   1477 A6 82              3608 	mov	@r0,dpl
   1479 08                 3609 	inc	r0
   147A A6 83              3610 	mov	@r0,dph
                           3611 ;	cJSON.c:218: switch (token=*ptr++)
   147C 8A 82              3612 	mov	dpl,r2
   147E 8B 83              3613 	mov	dph,r3
   1480 8C F0              3614 	mov	b,r4
   1482 12s00r00           3615 	lcall	__gptrget
   1485 FF                 3616 	mov	r7,a
   1486 A3                 3617 	inc	dptr
   1487 AA 82              3618 	mov	r2,dpl
   1489 AB 83              3619 	mov	r3,dph
   148B E5 81              3620 	mov	a,sp
   148D 24 FD              3621 	add	a,#0xfd
   148F F8                 3622 	mov	r0,a
   1490 A6 07              3623 	mov	@r0,ar7
   1492 BF 08 02           3624 	cjne	r7,#0x08,00187$
   1495 80 5E              3625 	sjmp	00116$
   1497                    3626 00187$:
   1497 BF 09 03           3627 	cjne	r7,#0x09,00188$
   149A 02s15r69           3628 	ljmp	00120$
   149D                    3629 00188$:
   149D BF 0A 03           3630 	cjne	r7,#0x0A,00189$
   14A0 02s15r2F           3631 	ljmp	00118$
   14A3                    3632 00189$:
   14A3 BF 0C 02           3633 	cjne	r7,#0x0C,00190$
   14A6 80 6A              3634 	sjmp	00117$
   14A8                    3635 00190$:
   14A8 BF 0D 03           3636 	cjne	r7,#0x0D,00191$
   14AB 02s15r4C           3637 	ljmp	00119$
   14AE                    3638 00191$:
   14AE BF 22 02           3639 	cjne	r7,#0x22,00192$
   14B1 80 25              3640 	sjmp	00115$
   14B3                    3641 00192$:
   14B3 BF 5C 02           3642 	cjne	r7,#0x5C,00193$
   14B6 80 03              3643 	sjmp	00194$
   14B8                    3644 00193$:
   14B8 02s15r86           3645 	ljmp	00121$
   14BB                    3646 00194$:
                           3647 ;	cJSON.c:220: case '\\':	*ptr2++='\\';	break;
   14BB E5 81              3648 	mov	a,sp
   14BD 24 F5              3649 	add	a,#0xf5
   14BF F8                 3650 	mov	r0,a
   14C0 86 82              3651 	mov	dpl,@r0
   14C2 08                 3652 	inc	r0
   14C3 86 83              3653 	mov	dph,@r0
   14C5 08                 3654 	inc	r0
   14C6 86 F0              3655 	mov	b,@r0
   14C8 74 5C              3656 	mov	a,#0x5C
   14CA 12s00r00           3657 	lcall	__gptrput
   14CD A3                 3658 	inc	dptr
   14CE 18                 3659 	dec	r0
   14CF 18                 3660 	dec	r0
   14D0 A6 82              3661 	mov	@r0,dpl
   14D2 08                 3662 	inc	r0
   14D3 A6 83              3663 	mov	@r0,dph
   14D5 02s14r22           3664 	ljmp	00128$
                           3665 ;	cJSON.c:221: case '\"':	*ptr2++='\"';	break;
   14D8                    3666 00115$:
   14D8 E5 81              3667 	mov	a,sp
   14DA 24 F5              3668 	add	a,#0xf5
   14DC F8                 3669 	mov	r0,a
   14DD 86 82              3670 	mov	dpl,@r0
   14DF 08                 3671 	inc	r0
   14E0 86 83              3672 	mov	dph,@r0
   14E2 08                 3673 	inc	r0
   14E3 86 F0              3674 	mov	b,@r0
   14E5 74 22              3675 	mov	a,#0x22
   14E7 12s00r00           3676 	lcall	__gptrput
   14EA A3                 3677 	inc	dptr
   14EB 18                 3678 	dec	r0
   14EC 18                 3679 	dec	r0
   14ED A6 82              3680 	mov	@r0,dpl
   14EF 08                 3681 	inc	r0
   14F0 A6 83              3682 	mov	@r0,dph
   14F2 02s14r22           3683 	ljmp	00128$
                           3684 ;	cJSON.c:222: case '\b':	*ptr2++='b';	break;
   14F5                    3685 00116$:
   14F5 E5 81              3686 	mov	a,sp
   14F7 24 F5              3687 	add	a,#0xf5
   14F9 F8                 3688 	mov	r0,a
   14FA 86 82              3689 	mov	dpl,@r0
   14FC 08                 3690 	inc	r0
   14FD 86 83              3691 	mov	dph,@r0
   14FF 08                 3692 	inc	r0
   1500 86 F0              3693 	mov	b,@r0
   1502 74 62              3694 	mov	a,#0x62
   1504 12s00r00           3695 	lcall	__gptrput
   1507 A3                 3696 	inc	dptr
   1508 18                 3697 	dec	r0
   1509 18                 3698 	dec	r0
   150A A6 82              3699 	mov	@r0,dpl
   150C 08                 3700 	inc	r0
   150D A6 83              3701 	mov	@r0,dph
   150F 02s14r22           3702 	ljmp	00128$
                           3703 ;	cJSON.c:223: case '\f':	*ptr2++='f';	break;
   1512                    3704 00117$:
   1512 E5 81              3705 	mov	a,sp
   1514 24 F5              3706 	add	a,#0xf5
   1516 F8                 3707 	mov	r0,a
   1517 86 82              3708 	mov	dpl,@r0
   1519 08                 3709 	inc	r0
   151A 86 83              3710 	mov	dph,@r0
   151C 08                 3711 	inc	r0
   151D 86 F0              3712 	mov	b,@r0
   151F 74 66              3713 	mov	a,#0x66
   1521 12s00r00           3714 	lcall	__gptrput
   1524 A3                 3715 	inc	dptr
   1525 18                 3716 	dec	r0
   1526 18                 3717 	dec	r0
   1527 A6 82              3718 	mov	@r0,dpl
   1529 08                 3719 	inc	r0
   152A A6 83              3720 	mov	@r0,dph
   152C 02s14r22           3721 	ljmp	00128$
                           3722 ;	cJSON.c:224: case '\n':	*ptr2++='n';	break;
   152F                    3723 00118$:
   152F E5 81              3724 	mov	a,sp
   1531 24 F5              3725 	add	a,#0xf5
   1533 F8                 3726 	mov	r0,a
   1534 86 82              3727 	mov	dpl,@r0
   1536 08                 3728 	inc	r0
   1537 86 83              3729 	mov	dph,@r0
   1539 08                 3730 	inc	r0
   153A 86 F0              3731 	mov	b,@r0
   153C 74 6E              3732 	mov	a,#0x6E
   153E 12s00r00           3733 	lcall	__gptrput
   1541 A3                 3734 	inc	dptr
   1542 18                 3735 	dec	r0
   1543 18                 3736 	dec	r0
   1544 A6 82              3737 	mov	@r0,dpl
   1546 08                 3738 	inc	r0
   1547 A6 83              3739 	mov	@r0,dph
   1549 02s14r22           3740 	ljmp	00128$
                           3741 ;	cJSON.c:225: case '\r':	*ptr2++='r';	break;
   154C                    3742 00119$:
   154C E5 81              3743 	mov	a,sp
   154E 24 F5              3744 	add	a,#0xf5
   1550 F8                 3745 	mov	r0,a
   1551 86 82              3746 	mov	dpl,@r0
   1553 08                 3747 	inc	r0
   1554 86 83              3748 	mov	dph,@r0
   1556 08                 3749 	inc	r0
   1557 86 F0              3750 	mov	b,@r0
   1559 74 72              3751 	mov	a,#0x72
   155B 12s00r00           3752 	lcall	__gptrput
   155E A3                 3753 	inc	dptr
   155F 18                 3754 	dec	r0
   1560 18                 3755 	dec	r0
   1561 A6 82              3756 	mov	@r0,dpl
   1563 08                 3757 	inc	r0
   1564 A6 83              3758 	mov	@r0,dph
   1566 02s14r22           3759 	ljmp	00128$
                           3760 ;	cJSON.c:226: case '\t':	*ptr2++='t';	break;
   1569                    3761 00120$:
   1569 E5 81              3762 	mov	a,sp
   156B 24 F5              3763 	add	a,#0xf5
   156D F8                 3764 	mov	r0,a
   156E 86 82              3765 	mov	dpl,@r0
   1570 08                 3766 	inc	r0
   1571 86 83              3767 	mov	dph,@r0
   1573 08                 3768 	inc	r0
   1574 86 F0              3769 	mov	b,@r0
   1576 74 74              3770 	mov	a,#0x74
   1578 12s00r00           3771 	lcall	__gptrput
   157B A3                 3772 	inc	dptr
   157C 18                 3773 	dec	r0
   157D 18                 3774 	dec	r0
   157E A6 82              3775 	mov	@r0,dpl
   1580 08                 3776 	inc	r0
   1581 A6 83              3777 	mov	@r0,dph
   1583 02s14r22           3778 	ljmp	00128$
                           3779 ;	cJSON.c:227: default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
   1586                    3780 00121$:
   1586 E5 81              3781 	mov	a,sp
   1588 24 FD              3782 	add	a,#0xfd
   158A F8                 3783 	mov	r0,a
   158B 86 06              3784 	mov	ar6,@r0
   158D 7F 00              3785 	mov	r7,#0x00
   158F C0 04              3786 	push	ar4
   1591 C0 03              3787 	push	ar3
   1593 C0 02              3788 	push	ar2
   1595 C0 06              3789 	push	ar6
   1597 C0 07              3790 	push	ar7
   1599 74r16              3791 	mov	a,#__str_4
   159B C0 E0              3792 	push	acc
   159D 74s00              3793 	mov	a,#(__str_4 >> 8)
   159F C0 E0              3794 	push	acc
   15A1 74 80              3795 	mov	a,#0x80
   15A3 C0 E0              3796 	push	acc
   15A5 E5 81              3797 	mov	a,sp
   15A7 24 ED              3798 	add	a,#0xed
   15A9 F8                 3799 	mov	r0,a
   15AA E6                 3800 	mov	a,@r0
   15AB C0 E0              3801 	push	acc
   15AD 08                 3802 	inc	r0
   15AE E6                 3803 	mov	a,@r0
   15AF C0 E0              3804 	push	acc
   15B1 08                 3805 	inc	r0
   15B2 E6                 3806 	mov	a,@r0
   15B3 C0 E0              3807 	push	acc
   15B5 78r00              3808 	mov	r0,#_sprintf
   15B7 79s00              3809 	mov	r1,#(_sprintf >> 8)
   15B9 7As00              3810 	mov	r2,#(_sprintf >> 16)
   15BB 12s00r00           3811 	lcall	__sdcc_banked_call
   15BE E5 81              3812 	mov	a,sp
   15C0 24 F8              3813 	add	a,#0xf8
   15C2 F5 81              3814 	mov	sp,a
   15C4 D0 02              3815 	pop	ar2
   15C6 D0 03              3816 	pop	ar3
   15C8 D0 04              3817 	pop	ar4
   15CA E5 81              3818 	mov	a,sp
   15CC 24 F5              3819 	add	a,#0xf5
   15CE F8                 3820 	mov	r0,a
   15CF 74 05              3821 	mov	a,#0x05
   15D1 26                 3822 	add	a,@r0
   15D2 F6                 3823 	mov	@r0,a
   15D3 E4                 3824 	clr	a
   15D4 08                 3825 	inc	r0
   15D5 36                 3826 	addc	a,@r0
   15D6 F6                 3827 	mov	@r0,a
                           3828 ;	cJSON.c:228: }
   15D7 02s14r22           3829 	ljmp	00128$
   15DA                    3830 00130$:
                           3831 ;	cJSON.c:231: *ptr2++='\"';*ptr2++=0;
   15DA E5 81              3832 	mov	a,sp
   15DC 24 F5              3833 	add	a,#0xf5
   15DE F8                 3834 	mov	r0,a
   15DF 86 82              3835 	mov	dpl,@r0
   15E1 08                 3836 	inc	r0
   15E2 86 83              3837 	mov	dph,@r0
   15E4 08                 3838 	inc	r0
   15E5 86 F0              3839 	mov	b,@r0
   15E7 74 22              3840 	mov	a,#0x22
   15E9 12s00r00           3841 	lcall	__gptrput
   15EC A3                 3842 	inc	dptr
   15ED 18                 3843 	dec	r0
   15EE 18                 3844 	dec	r0
   15EF A6 82              3845 	mov	@r0,dpl
   15F1 08                 3846 	inc	r0
   15F2 A6 83              3847 	mov	@r0,dph
   15F4 E5 81              3848 	mov	a,sp
   15F6 24 F5              3849 	add	a,#0xf5
   15F8 F8                 3850 	mov	r0,a
   15F9 86 82              3851 	mov	dpl,@r0
   15FB 08                 3852 	inc	r0
   15FC 86 83              3853 	mov	dph,@r0
   15FE 08                 3854 	inc	r0
   15FF 86 F0              3855 	mov	b,@r0
   1601 E4                 3856 	clr	a
   1602 12s00r00           3857 	lcall	__gptrput
                           3858 ;	cJSON.c:232: return out;
   1605 E5 81              3859 	mov	a,sp
   1607 24 F8              3860 	add	a,#0xf8
   1609 F8                 3861 	mov	r0,a
   160A 86 82              3862 	mov	dpl,@r0
   160C 08                 3863 	inc	r0
   160D 86 83              3864 	mov	dph,@r0
   160F 08                 3865 	inc	r0
   1610 86 F0              3866 	mov	b,@r0
   1612                    3867 00131$:
   1612 E5 81              3868 	mov	a,sp
   1614 24 F1              3869 	add	a,#0xF1
   1616 F5 81              3870 	mov	sp,a
   1618 02s00r00           3871 	ljmp	__sdcc_banked_ret
                           3872 ;------------------------------------------------------------
                           3873 ;Allocation info for local variables in function 'print_string'
                           3874 ;------------------------------------------------------------
                           3875 ;item                      Allocated to registers r5 r6 r7 
                           3876 ;------------------------------------------------------------
                           3877 ;	cJSON.c:235: static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}
                           3878 ;	-----------------------------------------
                           3879 ;	 function print_string
                           3880 ;	-----------------------------------------
   161B                    3881 _print_string:
   161B AD 82              3882 	mov	r5,dpl
   161D AE 83              3883 	mov	r6,dph
   161F AF F0              3884 	mov	r7,b
   1621 74 0B              3885 	mov	a,#0x0B
   1623 2D                 3886 	add	a,r5
   1624 FD                 3887 	mov	r5,a
   1625 E4                 3888 	clr	a
   1626 3E                 3889 	addc	a,r6
   1627 FE                 3890 	mov	r6,a
   1628 8D 82              3891 	mov	dpl,r5
   162A 8E 83              3892 	mov	dph,r6
   162C 8F F0              3893 	mov	b,r7
   162E 12s00r00           3894 	lcall	__gptrget
   1631 FD                 3895 	mov	r5,a
   1632 A3                 3896 	inc	dptr
   1633 12s00r00           3897 	lcall	__gptrget
   1636 FE                 3898 	mov	r6,a
   1637 A3                 3899 	inc	dptr
   1638 12s00r00           3900 	lcall	__gptrget
   163B FF                 3901 	mov	r7,a
   163C 8D 82              3902 	mov	dpl,r5
   163E 8E 83              3903 	mov	dph,r6
   1640 8F F0              3904 	mov	b,r7
   1642 78rED              3905 	mov	r0,#_print_string_ptr
   1644 79s12              3906 	mov	r1,#(_print_string_ptr >> 8)
   1646 7As00              3907 	mov	r2,#(_print_string_ptr >> 16)
   1648 12s00r00           3908 	lcall	__sdcc_banked_call
   164B AD 82              3909 	mov	r5,dpl
   164D AE 83              3910 	mov	r6,dph
   164F AF F0              3911 	mov	r7,b
   1651 02s00r00           3912 	ljmp	__sdcc_banked_ret
                           3913 ;------------------------------------------------------------
                           3914 ;Allocation info for local variables in function 'skip'
                           3915 ;------------------------------------------------------------
                           3916 ;in                        Allocated to registers 
                           3917 ;------------------------------------------------------------
                           3918 ;	cJSON.c:246: static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
                           3919 ;	-----------------------------------------
                           3920 ;	 function skip
                           3921 ;	-----------------------------------------
   1654                    3922 _skip:
   1654 AD 82              3923 	mov	r5,dpl
   1656 AE 83              3924 	mov	r6,dph
   1658 AF F0              3925 	mov	r7,b
   165A                    3926 00103$:
   165A ED                 3927 	mov	a,r5
   165B 4E                 3928 	orl	a,r6
   165C 60 18              3929 	jz	00105$
   165E 8D 82              3930 	mov	dpl,r5
   1660 8E 83              3931 	mov	dph,r6
   1662 8F F0              3932 	mov	b,r7
   1664 12s00r00           3933 	lcall	__gptrget
   1667 FC                 3934 	mov	r4,a
   1668 60 0C              3935 	jz	00105$
   166A EC                 3936 	mov	a,r4
   166B 24 DF              3937 	add	a,#0xff - 0x20
   166D 40 07              3938 	jc	00105$
   166F 0D                 3939 	inc	r5
   1670 BD 00 E7           3940 	cjne	r5,#0x00,00103$
   1673 0E                 3941 	inc	r6
   1674 80 E4              3942 	sjmp	00103$
   1676                    3943 00105$:
   1676 8D 82              3944 	mov	dpl,r5
   1678 8E 83              3945 	mov	dph,r6
   167A 8F F0              3946 	mov	b,r7
   167C 02s00r00           3947 	ljmp	__sdcc_banked_ret
                           3948 ;------------------------------------------------------------
                           3949 ;Allocation info for local variables in function 'cJSON_ParseWithOpts'
                           3950 ;------------------------------------------------------------
                           3951 ;return_parse_end          Allocated to stack - sp -8
                           3952 ;require_null_terminated   Allocated to stack - sp -10
                           3953 ;value                     Allocated to registers r5 r6 r7 
                           3954 ;end                       Allocated to registers r5 r6 r7 
                           3955 ;c                         Allocated to stack - sp -2
                           3956 ;------------------------------------------------------------
                           3957 ;	cJSON.c:249: cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
                           3958 ;	-----------------------------------------
                           3959 ;	 function cJSON_ParseWithOpts
                           3960 ;	-----------------------------------------
   167F                    3961 _cJSON_ParseWithOpts:
   167F 05 81              3962 	inc	sp
   1681 05 81              3963 	inc	sp
   1683 05 81              3964 	inc	sp
   1685 AD 82              3965 	mov	r5,dpl
   1687 AE 83              3966 	mov	r6,dph
   1689 AF F0              3967 	mov	r7,b
                           3968 ;	cJSON.c:252: cJSON *c=cJSON_New_Item();
   168B C0 07              3969 	push	ar7
   168D C0 06              3970 	push	ar6
   168F C0 05              3971 	push	ar5
   1691 78r3D              3972 	mov	r0,#_cJSON_New_Item
   1693 79s03              3973 	mov	r1,#(_cJSON_New_Item >> 8)
   1695 7As00              3974 	mov	r2,#(_cJSON_New_Item >> 16)
   1697 12s00r00           3975 	lcall	__sdcc_banked_call
   169A AA 82              3976 	mov	r2,dpl
   169C AB 83              3977 	mov	r3,dph
   169E AC F0              3978 	mov	r4,b
   16A0 D0 05              3979 	pop	ar5
   16A2 D0 06              3980 	pop	ar6
   16A4 D0 07              3981 	pop	ar7
   16A6 A8 81              3982 	mov	r0,sp
   16A8 18                 3983 	dec	r0
   16A9 18                 3984 	dec	r0
   16AA A6 02              3985 	mov	@r0,ar2
   16AC 08                 3986 	inc	r0
   16AD A6 03              3987 	mov	@r0,ar3
   16AF 08                 3988 	inc	r0
   16B0 A6 04              3989 	mov	@r0,ar4
                           3990 ;	cJSON.c:253: ep=0;
   16B2 90s00r00           3991 	mov	dptr,#_ep
   16B5 E4                 3992 	clr	a
   16B6 F0                 3993 	movx	@dptr,a
   16B7 A3                 3994 	inc	dptr
   16B8 F0                 3995 	movx	@dptr,a
   16B9 A3                 3996 	inc	dptr
   16BA F0                 3997 	movx	@dptr,a
                           3998 ;	cJSON.c:254: if (!c) return 0;       /* memory fail */
   16BB A8 81              3999 	mov	r0,sp
   16BD 18                 4000 	dec	r0
   16BE 18                 4001 	dec	r0
   16BF E6                 4002 	mov	a,@r0
   16C0 08                 4003 	inc	r0
   16C1 46                 4004 	orl	a,@r0
   16C2 70 08              4005 	jnz	00102$
   16C4 90 00 00           4006 	mov	dptr,#0x0000
   16C7 F5 F0              4007 	mov	b,a
   16C9 02s17rC6           4008 	ljmp	00111$
   16CC                    4009 00102$:
                           4010 ;	cJSON.c:256: end=parse_value(c,skip(value));
   16CC 8D 82              4011 	mov	dpl,r5
   16CE 8E 83              4012 	mov	dph,r6
   16D0 8F F0              4013 	mov	b,r7
   16D2 78r54              4014 	mov	r0,#_skip
   16D4 79s16              4015 	mov	r1,#(_skip >> 8)
   16D6 7As00              4016 	mov	r2,#(_skip >> 16)
   16D8 12s00r00           4017 	lcall	__sdcc_banked_call
   16DB AD 82              4018 	mov	r5,dpl
   16DD AE 83              4019 	mov	r6,dph
   16DF AF F0              4020 	mov	r7,b
   16E1 C0 05              4021 	push	ar5
   16E3 C0 06              4022 	push	ar6
   16E5 C0 07              4023 	push	ar7
   16E7 E5 81              4024 	mov	a,sp
   16E9 24 FB              4025 	add	a,#0xfb
   16EB F8                 4026 	mov	r0,a
   16EC 86 82              4027 	mov	dpl,@r0
   16EE 08                 4028 	inc	r0
   16EF 86 83              4029 	mov	dph,@r0
   16F1 08                 4030 	inc	r0
   16F2 86 F0              4031 	mov	b,@r0
   16F4 78r6F              4032 	mov	r0,#_parse_value
   16F6 79s18              4033 	mov	r1,#(_parse_value >> 8)
   16F8 7As00              4034 	mov	r2,#(_parse_value >> 16)
   16FA 12s00r00           4035 	lcall	__sdcc_banked_call
   16FD AD 82              4036 	mov	r5,dpl
   16FF AE 83              4037 	mov	r6,dph
   1701 AF F0              4038 	mov	r7,b
   1703 15 81              4039 	dec	sp
   1705 15 81              4040 	dec	sp
   1707 15 81              4041 	dec	sp
                           4042 ;	cJSON.c:257: if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
   1709 ED                 4043 	mov	a,r5
   170A 4E                 4044 	orl	a,r6
   170B 70 1E              4045 	jnz	00104$
   170D A8 81              4046 	mov	r0,sp
   170F 18                 4047 	dec	r0
   1710 18                 4048 	dec	r0
   1711 86 82              4049 	mov	dpl,@r0
   1713 08                 4050 	inc	r0
   1714 86 83              4051 	mov	dph,@r0
   1716 08                 4052 	inc	r0
   1717 86 F0              4053 	mov	b,@r0
   1719 78r8D              4054 	mov	r0,#_cJSON_Delete
   171B 79s03              4055 	mov	r1,#(_cJSON_Delete >> 8)
   171D 7As00              4056 	mov	r2,#(_cJSON_Delete >> 16)
   171F 12s00r00           4057 	lcall	__sdcc_banked_call
   1722 90 00 00           4058 	mov	dptr,#0x0000
   1725 75 F0 00           4059 	mov	b,#0x00
   1728 02s17rC6           4060 	ljmp	00111$
   172B                    4061 00104$:
                           4062 ;	cJSON.c:260: if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
   172B E5 81              4063 	mov	a,sp
   172D 24 F6              4064 	add	a,#0xf6
   172F F8                 4065 	mov	r0,a
   1730 E6                 4066 	mov	a,@r0
   1731 08                 4067 	inc	r0
   1732 46                 4068 	orl	a,@r0
   1733 60 5A              4069 	jz	00108$
   1735 8D 82              4070 	mov	dpl,r5
   1737 8E 83              4071 	mov	dph,r6
   1739 8F F0              4072 	mov	b,r7
   173B 78r54              4073 	mov	r0,#_skip
   173D 79s16              4074 	mov	r1,#(_skip >> 8)
   173F 7As00              4075 	mov	r2,#(_skip >> 16)
   1741 12s00r00           4076 	lcall	__sdcc_banked_call
   1744 AA 82              4077 	mov	r2,dpl
   1746 AB 83              4078 	mov	r3,dph
   1748 AC F0              4079 	mov	r4,b
   174A 8A 05              4080 	mov	ar5,r2
   174C 8B 06              4081 	mov	ar6,r3
   174E 8C 07              4082 	mov	ar7,r4
   1750 8D 82              4083 	mov	dpl,r5
   1752 8E 83              4084 	mov	dph,r6
   1754 8F F0              4085 	mov	b,r7
   1756 12s00r00           4086 	lcall	__gptrget
   1759 60 34              4087 	jz	00108$
   175B A8 81              4088 	mov	r0,sp
   175D 18                 4089 	dec	r0
   175E 18                 4090 	dec	r0
   175F 86 82              4091 	mov	dpl,@r0
   1761 08                 4092 	inc	r0
   1762 86 83              4093 	mov	dph,@r0
   1764 08                 4094 	inc	r0
   1765 86 F0              4095 	mov	b,@r0
   1767 C0 07              4096 	push	ar7
   1769 C0 06              4097 	push	ar6
   176B C0 05              4098 	push	ar5
   176D 78r8D              4099 	mov	r0,#_cJSON_Delete
   176F 79s03              4100 	mov	r1,#(_cJSON_Delete >> 8)
   1771 7As00              4101 	mov	r2,#(_cJSON_Delete >> 16)
   1773 12s00r00           4102 	lcall	__sdcc_banked_call
   1776 D0 05              4103 	pop	ar5
   1778 D0 06              4104 	pop	ar6
   177A D0 07              4105 	pop	ar7
   177C 90s00r00           4106 	mov	dptr,#_ep
   177F ED                 4107 	mov	a,r5
   1780 F0                 4108 	movx	@dptr,a
   1781 A3                 4109 	inc	dptr
   1782 EE                 4110 	mov	a,r6
   1783 F0                 4111 	movx	@dptr,a
   1784 A3                 4112 	inc	dptr
   1785 EF                 4113 	mov	a,r7
   1786 F0                 4114 	movx	@dptr,a
   1787 90 00 00           4115 	mov	dptr,#0x0000
   178A 75 F0 00           4116 	mov	b,#0x00
   178D 80 37              4117 	sjmp	00111$
   178F                    4118 00108$:
                           4119 ;	cJSON.c:261: if (return_parse_end) *return_parse_end=end;
   178F E5 81              4120 	mov	a,sp
   1791 24 F8              4121 	add	a,#0xf8
   1793 F8                 4122 	mov	r0,a
   1794 E6                 4123 	mov	a,@r0
   1795 08                 4124 	inc	r0
   1796 46                 4125 	orl	a,@r0
   1797 60 21              4126 	jz	00110$
   1799 E5 81              4127 	mov	a,sp
   179B 24 F8              4128 	add	a,#0xf8
   179D F8                 4129 	mov	r0,a
   179E 86 02              4130 	mov	ar2,@r0
   17A0 08                 4131 	inc	r0
   17A1 86 03              4132 	mov	ar3,@r0
   17A3 08                 4133 	inc	r0
   17A4 86 04              4134 	mov	ar4,@r0
   17A6 8A 82              4135 	mov	dpl,r2
   17A8 8B 83              4136 	mov	dph,r3
   17AA 8C F0              4137 	mov	b,r4
   17AC ED                 4138 	mov	a,r5
   17AD 12s00r00           4139 	lcall	__gptrput
   17B0 A3                 4140 	inc	dptr
   17B1 EE                 4141 	mov	a,r6
   17B2 12s00r00           4142 	lcall	__gptrput
   17B5 A3                 4143 	inc	dptr
   17B6 EF                 4144 	mov	a,r7
   17B7 12s00r00           4145 	lcall	__gptrput
   17BA                    4146 00110$:
                           4147 ;	cJSON.c:262: return c;
   17BA A8 81              4148 	mov	r0,sp
   17BC 18                 4149 	dec	r0
   17BD 18                 4150 	dec	r0
   17BE 86 82              4151 	mov	dpl,@r0
   17C0 08                 4152 	inc	r0
   17C1 86 83              4153 	mov	dph,@r0
   17C3 08                 4154 	inc	r0
   17C4 86 F0              4155 	mov	b,@r0
   17C6                    4156 00111$:
   17C6 15 81              4157 	dec	sp
   17C8 15 81              4158 	dec	sp
   17CA 15 81              4159 	dec	sp
   17CC 02s00r00           4160 	ljmp	__sdcc_banked_ret
                           4161 ;------------------------------------------------------------
                           4162 ;Allocation info for local variables in function 'cJSON_Parse'
                           4163 ;------------------------------------------------------------
                           4164 ;value                     Allocated to registers r5 r6 r7 
                           4165 ;------------------------------------------------------------
                           4166 ;	cJSON.c:265: cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
                           4167 ;	-----------------------------------------
                           4168 ;	 function cJSON_Parse
                           4169 ;	-----------------------------------------
   17CF                    4170 _cJSON_Parse:
   17CF AD 82              4171 	mov	r5,dpl
   17D1 AE 83              4172 	mov	r6,dph
   17D3 AF F0              4173 	mov	r7,b
   17D5 E4                 4174 	clr	a
   17D6 C0 E0              4175 	push	acc
   17D8 C0 E0              4176 	push	acc
   17DA E4                 4177 	clr	a
   17DB C0 E0              4178 	push	acc
   17DD C0 E0              4179 	push	acc
   17DF C0 E0              4180 	push	acc
   17E1 8D 82              4181 	mov	dpl,r5
   17E3 8E 83              4182 	mov	dph,r6
   17E5 8F F0              4183 	mov	b,r7
   17E7 78r7F              4184 	mov	r0,#_cJSON_ParseWithOpts
   17E9 79s16              4185 	mov	r1,#(_cJSON_ParseWithOpts >> 8)
   17EB 7As00              4186 	mov	r2,#(_cJSON_ParseWithOpts >> 16)
   17ED 12s00r00           4187 	lcall	__sdcc_banked_call
   17F0 AD 82              4188 	mov	r5,dpl
   17F2 AE 83              4189 	mov	r6,dph
   17F4 AF F0              4190 	mov	r7,b
   17F6 E5 81              4191 	mov	a,sp
   17F8 24 FB              4192 	add	a,#0xfb
   17FA F5 81              4193 	mov	sp,a
   17FC 8D 82              4194 	mov	dpl,r5
   17FE 8E 83              4195 	mov	dph,r6
   1800 8F F0              4196 	mov	b,r7
   1802 02s00r00           4197 	ljmp	__sdcc_banked_ret
                           4198 ;------------------------------------------------------------
                           4199 ;Allocation info for local variables in function 'cJSON_Print'
                           4200 ;------------------------------------------------------------
                           4201 ;item                      Allocated to registers r5 r6 r7 
                           4202 ;------------------------------------------------------------
                           4203 ;	cJSON.c:268: char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}
                           4204 ;	-----------------------------------------
                           4205 ;	 function cJSON_Print
                           4206 ;	-----------------------------------------
   1805                    4207 _cJSON_Print:
   1805 AD 82              4208 	mov	r5,dpl
   1807 AE 83              4209 	mov	r6,dph
   1809 AF F0              4210 	mov	r7,b
   180B 74 01              4211 	mov	a,#0x01
   180D C0 E0              4212 	push	acc
   180F E4                 4213 	clr	a
   1810 C0 E0              4214 	push	acc
   1812 E4                 4215 	clr	a
   1813 C0 E0              4216 	push	acc
   1815 C0 E0              4217 	push	acc
   1817 8D 82              4218 	mov	dpl,r5
   1819 8E 83              4219 	mov	dph,r6
   181B 8F F0              4220 	mov	b,r7
   181D 78r4A              4221 	mov	r0,#_print_value
   181F 79s1B              4222 	mov	r1,#(_print_value >> 8)
   1821 7As00              4223 	mov	r2,#(_print_value >> 16)
   1823 12s00r00           4224 	lcall	__sdcc_banked_call
   1826 AD 82              4225 	mov	r5,dpl
   1828 AE 83              4226 	mov	r6,dph
   182A AF F0              4227 	mov	r7,b
   182C E5 81              4228 	mov	a,sp
   182E 24 FC              4229 	add	a,#0xfc
   1830 F5 81              4230 	mov	sp,a
   1832 8D 82              4231 	mov	dpl,r5
   1834 8E 83              4232 	mov	dph,r6
   1836 8F F0              4233 	mov	b,r7
   1838 02s00r00           4234 	ljmp	__sdcc_banked_ret
                           4235 ;------------------------------------------------------------
                           4236 ;Allocation info for local variables in function 'cJSON_PrintUnformatted'
                           4237 ;------------------------------------------------------------
                           4238 ;item                      Allocated to registers r5 r6 r7 
                           4239 ;------------------------------------------------------------
                           4240 ;	cJSON.c:269: char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}
                           4241 ;	-----------------------------------------
                           4242 ;	 function cJSON_PrintUnformatted
                           4243 ;	-----------------------------------------
   183B                    4244 _cJSON_PrintUnformatted:
   183B AD 82              4245 	mov	r5,dpl
   183D AE 83              4246 	mov	r6,dph
   183F AF F0              4247 	mov	r7,b
   1841 E4                 4248 	clr	a
   1842 C0 E0              4249 	push	acc
   1844 C0 E0              4250 	push	acc
   1846 E4                 4251 	clr	a
   1847 C0 E0              4252 	push	acc
   1849 C0 E0              4253 	push	acc
   184B 8D 82              4254 	mov	dpl,r5
   184D 8E 83              4255 	mov	dph,r6
   184F 8F F0              4256 	mov	b,r7
   1851 78r4A              4257 	mov	r0,#_print_value
   1853 79s1B              4258 	mov	r1,#(_print_value >> 8)
   1855 7As00              4259 	mov	r2,#(_print_value >> 16)
   1857 12s00r00           4260 	lcall	__sdcc_banked_call
   185A AD 82              4261 	mov	r5,dpl
   185C AE 83              4262 	mov	r6,dph
   185E AF F0              4263 	mov	r7,b
   1860 E5 81              4264 	mov	a,sp
   1862 24 FC              4265 	add	a,#0xfc
   1864 F5 81              4266 	mov	sp,a
   1866 8D 82              4267 	mov	dpl,r5
   1868 8E 83              4268 	mov	dph,r6
   186A 8F F0              4269 	mov	b,r7
   186C 02s00r00           4270 	ljmp	__sdcc_banked_ret
                           4271 ;------------------------------------------------------------
                           4272 ;Allocation info for local variables in function 'parse_value'
                           4273 ;------------------------------------------------------------
                           4274 ;value                     Allocated to stack - sp -9
                           4275 ;item                      Allocated to registers r5 r6 r7 
                           4276 ;sloc0                     Allocated to stack - sp -3
                           4277 ;sloc1                     Allocated to stack - sp -2
                           4278 ;------------------------------------------------------------
                           4279 ;	cJSON.c:272: static const char *parse_value(cJSON *item,const char *value)
                           4280 ;	-----------------------------------------
                           4281 ;	 function parse_value
                           4282 ;	-----------------------------------------
   186F                    4283 _parse_value:
   186F E5 81              4284 	mov	a,sp
   1871 24 04              4285 	add	a,#0x04
   1873 F5 81              4286 	mov	sp,a
   1875 AD 82              4287 	mov	r5,dpl
   1877 AE 83              4288 	mov	r6,dph
   1879 AF F0              4289 	mov	r7,b
                           4290 ;	cJSON.c:274: if (!value)						return 0;	/* Fail on null. */
   187B E5 81              4291 	mov	a,sp
   187D 24 F7              4292 	add	a,#0xf7
   187F F8                 4293 	mov	r0,a
   1880 E6                 4294 	mov	a,@r0
   1881 08                 4295 	inc	r0
   1882 46                 4296 	orl	a,@r0
   1883 70 08              4297 	jnz	00102$
   1885 90 00 00           4298 	mov	dptr,#0x0000
   1888 F5 F0              4299 	mov	b,a
   188A 02s1Br41           4300 	ljmp	00119$
   188D                    4301 00102$:
                           4302 ;	cJSON.c:275: if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
   188D C0 07              4303 	push	ar7
   188F C0 06              4304 	push	ar6
   1891 C0 05              4305 	push	ar5
   1893 74 04              4306 	mov	a,#0x04
   1895 C0 E0              4307 	push	acc
   1897 E4                 4308 	clr	a
   1898 C0 E0              4309 	push	acc
   189A 74r1C              4310 	mov	a,#__str_5
   189C C0 E0              4311 	push	acc
   189E 74s00              4312 	mov	a,#(__str_5 >> 8)
   18A0 C0 E0              4313 	push	acc
   18A2 74 80              4314 	mov	a,#0x80
   18A4 C0 E0              4315 	push	acc
   18A6 E5 81              4316 	mov	a,sp
   18A8 24 EF              4317 	add	a,#0xef
   18AA F8                 4318 	mov	r0,a
   18AB 86 82              4319 	mov	dpl,@r0
   18AD 08                 4320 	inc	r0
   18AE 86 83              4321 	mov	dph,@r0
   18B0 08                 4322 	inc	r0
   18B1 86 F0              4323 	mov	b,@r0
   18B3 78r00              4324 	mov	r0,#_strncmp
   18B5 79s00              4325 	mov	r1,#(_strncmp >> 8)
   18B7 7As00              4326 	mov	r2,#(_strncmp >> 16)
   18B9 12s00r00           4327 	lcall	__sdcc_banked_call
   18BC AB 82              4328 	mov	r3,dpl
   18BE AC 83              4329 	mov	r4,dph
   18C0 E5 81              4330 	mov	a,sp
   18C2 24 FB              4331 	add	a,#0xfb
   18C4 F5 81              4332 	mov	sp,a
   18C6 D0 05              4333 	pop	ar5
   18C8 D0 06              4334 	pop	ar6
   18CA D0 07              4335 	pop	ar7
   18CC EB                 4336 	mov	a,r3
   18CD 4C                 4337 	orl	a,r4
   18CE 70 32              4338 	jnz	00104$
   18D0 74 09              4339 	mov	a,#0x09
   18D2 2D                 4340 	add	a,r5
   18D3 FA                 4341 	mov	r2,a
   18D4 E4                 4342 	clr	a
   18D5 3E                 4343 	addc	a,r6
   18D6 FB                 4344 	mov	r3,a
   18D7 8F 04              4345 	mov	ar4,r7
   18D9 8A 82              4346 	mov	dpl,r2
   18DB 8B 83              4347 	mov	dph,r3
   18DD 8C F0              4348 	mov	b,r4
   18DF 74 02              4349 	mov	a,#0x02
   18E1 12s00r00           4350 	lcall	__gptrput
   18E4 A3                 4351 	inc	dptr
   18E5 E4                 4352 	clr	a
   18E6 12s00r00           4353 	lcall	__gptrput
   18E9 E5 81              4354 	mov	a,sp
   18EB 24 F7              4355 	add	a,#0xf7
   18ED F8                 4356 	mov	r0,a
   18EE 74 04              4357 	mov	a,#0x04
   18F0 26                 4358 	add	a,@r0
   18F1 FA                 4359 	mov	r2,a
   18F2 E4                 4360 	clr	a
   18F3 08                 4361 	inc	r0
   18F4 36                 4362 	addc	a,@r0
   18F5 FB                 4363 	mov	r3,a
   18F6 08                 4364 	inc	r0
   18F7 86 04              4365 	mov	ar4,@r0
   18F9 8A 82              4366 	mov	dpl,r2
   18FB 8B 83              4367 	mov	dph,r3
   18FD 8C F0              4368 	mov	b,r4
   18FF 02s1Br41           4369 	ljmp	00119$
   1902                    4370 00104$:
                           4371 ;	cJSON.c:276: if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
   1902 C0 07              4372 	push	ar7
   1904 C0 06              4373 	push	ar6
   1906 C0 05              4374 	push	ar5
   1908 74 05              4375 	mov	a,#0x05
   190A C0 E0              4376 	push	acc
   190C E4                 4377 	clr	a
   190D C0 E0              4378 	push	acc
   190F 74r21              4379 	mov	a,#__str_6
   1911 C0 E0              4380 	push	acc
   1913 74s00              4381 	mov	a,#(__str_6 >> 8)
   1915 C0 E0              4382 	push	acc
   1917 74 80              4383 	mov	a,#0x80
   1919 C0 E0              4384 	push	acc
   191B E5 81              4385 	mov	a,sp
   191D 24 EF              4386 	add	a,#0xef
   191F F8                 4387 	mov	r0,a
   1920 86 82              4388 	mov	dpl,@r0
   1922 08                 4389 	inc	r0
   1923 86 83              4390 	mov	dph,@r0
   1925 08                 4391 	inc	r0
   1926 86 F0              4392 	mov	b,@r0
   1928 78r00              4393 	mov	r0,#_strncmp
   192A 79s00              4394 	mov	r1,#(_strncmp >> 8)
   192C 7As00              4395 	mov	r2,#(_strncmp >> 16)
   192E 12s00r00           4396 	lcall	__sdcc_banked_call
   1931 AB 82              4397 	mov	r3,dpl
   1933 AC 83              4398 	mov	r4,dph
   1935 E5 81              4399 	mov	a,sp
   1937 24 FB              4400 	add	a,#0xfb
   1939 F5 81              4401 	mov	sp,a
   193B D0 05              4402 	pop	ar5
   193D D0 06              4403 	pop	ar6
   193F D0 07              4404 	pop	ar7
   1941 EB                 4405 	mov	a,r3
   1942 4C                 4406 	orl	a,r4
   1943 70 31              4407 	jnz	00106$
   1945 74 09              4408 	mov	a,#0x09
   1947 2D                 4409 	add	a,r5
   1948 FA                 4410 	mov	r2,a
   1949 E4                 4411 	clr	a
   194A 3E                 4412 	addc	a,r6
   194B FB                 4413 	mov	r3,a
   194C 8F 04              4414 	mov	ar4,r7
   194E 8A 82              4415 	mov	dpl,r2
   1950 8B 83              4416 	mov	dph,r3
   1952 8C F0              4417 	mov	b,r4
   1954 E4                 4418 	clr	a
   1955 12s00r00           4419 	lcall	__gptrput
   1958 A3                 4420 	inc	dptr
   1959 E4                 4421 	clr	a
   195A 12s00r00           4422 	lcall	__gptrput
   195D E5 81              4423 	mov	a,sp
   195F 24 F7              4424 	add	a,#0xf7
   1961 F8                 4425 	mov	r0,a
   1962 74 05              4426 	mov	a,#0x05
   1964 26                 4427 	add	a,@r0
   1965 FA                 4428 	mov	r2,a
   1966 E4                 4429 	clr	a
   1967 08                 4430 	inc	r0
   1968 36                 4431 	addc	a,@r0
   1969 FB                 4432 	mov	r3,a
   196A 08                 4433 	inc	r0
   196B 86 04              4434 	mov	ar4,@r0
   196D 8A 82              4435 	mov	dpl,r2
   196F 8B 83              4436 	mov	dph,r3
   1971 8C F0              4437 	mov	b,r4
   1973 02s1Br41           4438 	ljmp	00119$
   1976                    4439 00106$:
                           4440 ;	cJSON.c:277: if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
   1976 C0 07              4441 	push	ar7
   1978 C0 06              4442 	push	ar6
   197A C0 05              4443 	push	ar5
   197C 74 04              4444 	mov	a,#0x04
   197E C0 E0              4445 	push	acc
   1980 E4                 4446 	clr	a
   1981 C0 E0              4447 	push	acc
   1983 74r27              4448 	mov	a,#__str_7
   1985 C0 E0              4449 	push	acc
   1987 74s00              4450 	mov	a,#(__str_7 >> 8)
   1989 C0 E0              4451 	push	acc
   198B 74 80              4452 	mov	a,#0x80
   198D C0 E0              4453 	push	acc
   198F E5 81              4454 	mov	a,sp
   1991 24 EF              4455 	add	a,#0xef
   1993 F8                 4456 	mov	r0,a
   1994 86 82              4457 	mov	dpl,@r0
   1996 08                 4458 	inc	r0
   1997 86 83              4459 	mov	dph,@r0
   1999 08                 4460 	inc	r0
   199A 86 F0              4461 	mov	b,@r0
   199C 78r00              4462 	mov	r0,#_strncmp
   199E 79s00              4463 	mov	r1,#(_strncmp >> 8)
   19A0 7As00              4464 	mov	r2,#(_strncmp >> 16)
   19A2 12s00r00           4465 	lcall	__sdcc_banked_call
   19A5 AB 82              4466 	mov	r3,dpl
   19A7 AC 83              4467 	mov	r4,dph
   19A9 E5 81              4468 	mov	a,sp
   19AB 24 FB              4469 	add	a,#0xfb
   19AD F5 81              4470 	mov	sp,a
   19AF D0 05              4471 	pop	ar5
   19B1 D0 06              4472 	pop	ar6
   19B3 D0 07              4473 	pop	ar7
   19B5 EB                 4474 	mov	a,r3
   19B6 4C                 4475 	orl	a,r4
   19B7 70 4B              4476 	jnz	00108$
   19B9 74 09              4477 	mov	a,#0x09
   19BB 2D                 4478 	add	a,r5
   19BC FA                 4479 	mov	r2,a
   19BD E4                 4480 	clr	a
   19BE 3E                 4481 	addc	a,r6
   19BF FB                 4482 	mov	r3,a
   19C0 8F 04              4483 	mov	ar4,r7
   19C2 8A 82              4484 	mov	dpl,r2
   19C4 8B 83              4485 	mov	dph,r3
   19C6 8C F0              4486 	mov	b,r4
   19C8 74 01              4487 	mov	a,#0x01
   19CA 12s00r00           4488 	lcall	__gptrput
   19CD A3                 4489 	inc	dptr
   19CE E4                 4490 	clr	a
   19CF 12s00r00           4491 	lcall	__gptrput
   19D2 74 0E              4492 	mov	a,#0x0E
   19D4 2D                 4493 	add	a,r5
   19D5 FA                 4494 	mov	r2,a
   19D6 E4                 4495 	clr	a
   19D7 3E                 4496 	addc	a,r6
   19D8 FB                 4497 	mov	r3,a
   19D9 8F 04              4498 	mov	ar4,r7
   19DB 8A 82              4499 	mov	dpl,r2
   19DD 8B 83              4500 	mov	dph,r3
   19DF 8C F0              4501 	mov	b,r4
   19E1 74 01              4502 	mov	a,#0x01
   19E3 12s00r00           4503 	lcall	__gptrput
   19E6 A3                 4504 	inc	dptr
   19E7 E4                 4505 	clr	a
   19E8 12s00r00           4506 	lcall	__gptrput
   19EB E5 81              4507 	mov	a,sp
   19ED 24 F7              4508 	add	a,#0xf7
   19EF F8                 4509 	mov	r0,a
   19F0 74 04              4510 	mov	a,#0x04
   19F2 26                 4511 	add	a,@r0
   19F3 FA                 4512 	mov	r2,a
   19F4 E4                 4513 	clr	a
   19F5 08                 4514 	inc	r0
   19F6 36                 4515 	addc	a,@r0
   19F7 FB                 4516 	mov	r3,a
   19F8 08                 4517 	inc	r0
   19F9 86 04              4518 	mov	ar4,@r0
   19FB 8A 82              4519 	mov	dpl,r2
   19FD 8B 83              4520 	mov	dph,r3
   19FF 8C F0              4521 	mov	b,r4
   1A01 02s1Br41           4522 	ljmp	00119$
   1A04                    4523 00108$:
                           4524 ;	cJSON.c:278: if (*value=='\"')				{ return parse_string(item,value); }
   1A04 E5 81              4525 	mov	a,sp
   1A06 24 F7              4526 	add	a,#0xf7
   1A08 F8                 4527 	mov	r0,a
   1A09 86 02              4528 	mov	ar2,@r0
   1A0B 08                 4529 	inc	r0
   1A0C 86 03              4530 	mov	ar3,@r0
   1A0E 08                 4531 	inc	r0
   1A0F 86 04              4532 	mov	ar4,@r0
   1A11 8A 82              4533 	mov	dpl,r2
   1A13 8B 83              4534 	mov	dph,r3
   1A15 8C F0              4535 	mov	b,r4
   1A17 E5 81              4536 	mov	a,sp
   1A19 24 FD              4537 	add	a,#0xfd
   1A1B F8                 4538 	mov	r0,a
   1A1C 12s00r00           4539 	lcall	__gptrget
   1A1F F6                 4540 	mov	@r0,a
   1A20 E5 81              4541 	mov	a,sp
   1A22 24 FD              4542 	add	a,#0xfd
   1A24 F8                 4543 	mov	r0,a
   1A25 B6 22 38           4544 	cjne	@r0,#0x22,00110$
   1A28 C0 02              4545 	push	ar2
   1A2A C0 03              4546 	push	ar3
   1A2C C0 04              4547 	push	ar4
   1A2E 8D 82              4548 	mov	dpl,r5
   1A30 8E 83              4549 	mov	dph,r6
   1A32 8F F0              4550 	mov	b,r7
   1A34 78r8D              4551 	mov	r0,#_parse_string
   1A36 79s0D              4552 	mov	r1,#(_parse_string >> 8)
   1A38 7As00              4553 	mov	r2,#(_parse_string >> 16)
   1A3A 12s00r00           4554 	lcall	__sdcc_banked_call
   1A3D C8                 4555 	xch	a,r0
   1A3E E5 81              4556 	mov	a,sp
   1A40 24 FB              4557 	add	a,#0xfb
   1A42 C8                 4558 	xch	a,r0
   1A43 A6 82              4559 	mov	@r0,dpl
   1A45 08                 4560 	inc	r0
   1A46 A6 83              4561 	mov	@r0,dph
   1A48 08                 4562 	inc	r0
   1A49 A6 F0              4563 	mov	@r0,b
   1A4B 15 81              4564 	dec	sp
   1A4D 15 81              4565 	dec	sp
   1A4F 15 81              4566 	dec	sp
   1A51 A8 81              4567 	mov	r0,sp
   1A53 18                 4568 	dec	r0
   1A54 18                 4569 	dec	r0
   1A55 86 82              4570 	mov	dpl,@r0
   1A57 08                 4571 	inc	r0
   1A58 86 83              4572 	mov	dph,@r0
   1A5A 08                 4573 	inc	r0
   1A5B 86 F0              4574 	mov	b,@r0
   1A5D 02s1Br41           4575 	ljmp	00119$
   1A60                    4576 00110$:
                           4577 ;	cJSON.c:279: if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
   1A60 E5 81              4578 	mov	a,sp
   1A62 24 FD              4579 	add	a,#0xfd
   1A64 F8                 4580 	mov	r0,a
   1A65 B6 2D 02           4581 	cjne	@r0,#0x2D,00145$
   1A68 80 1E              4582 	sjmp	00111$
   1A6A                    4583 00145$:
   1A6A E5 81              4584 	mov	a,sp
   1A6C 24 FD              4585 	add	a,#0xfd
   1A6E F8                 4586 	mov	r0,a
   1A6F C3                 4587 	clr	c
   1A70 E6                 4588 	mov	a,@r0
   1A71 64 80              4589 	xrl	a,#0x80
   1A73 94 B0              4590 	subb	a,#0xb0
   1A75 40 49              4591 	jc	00112$
   1A77 E5 81              4592 	mov	a,sp
   1A79 24 FD              4593 	add	a,#0xfd
   1A7B F8                 4594 	mov	r0,a
   1A7C C3                 4595 	clr	c
   1A7D 74 B9              4596 	mov	a,#(0x39 ^ 0x80)
   1A7F 86 F0              4597 	mov	b,@r0
   1A81 63 F0 80           4598 	xrl	b,#0x80
   1A84 95 F0              4599 	subb	a,b
   1A86 40 38              4600 	jc	00112$
   1A88                    4601 00111$:
   1A88 C0 02              4602 	push	ar2
   1A8A C0 03              4603 	push	ar3
   1A8C C0 04              4604 	push	ar4
   1A8E 8D 82              4605 	mov	dpl,r5
   1A90 8E 83              4606 	mov	dph,r6
   1A92 8F F0              4607 	mov	b,r7
   1A94 78r20              4608 	mov	r0,#_parse_number
   1A96 79s04              4609 	mov	r1,#(_parse_number >> 8)
   1A98 7As00              4610 	mov	r2,#(_parse_number >> 16)
   1A9A 12s00r00           4611 	lcall	__sdcc_banked_call
   1A9D C8                 4612 	xch	a,r0
   1A9E E5 81              4613 	mov	a,sp
   1AA0 24 FB              4614 	add	a,#0xfb
   1AA2 C8                 4615 	xch	a,r0
   1AA3 A6 82              4616 	mov	@r0,dpl
   1AA5 08                 4617 	inc	r0
   1AA6 A6 83              4618 	mov	@r0,dph
   1AA8 08                 4619 	inc	r0
   1AA9 A6 F0              4620 	mov	@r0,b
   1AAB 15 81              4621 	dec	sp
   1AAD 15 81              4622 	dec	sp
   1AAF 15 81              4623 	dec	sp
   1AB1 A8 81              4624 	mov	r0,sp
   1AB3 18                 4625 	dec	r0
   1AB4 18                 4626 	dec	r0
   1AB5 86 82              4627 	mov	dpl,@r0
   1AB7 08                 4628 	inc	r0
   1AB8 86 83              4629 	mov	dph,@r0
   1ABA 08                 4630 	inc	r0
   1ABB 86 F0              4631 	mov	b,@r0
   1ABD 02s1Br41           4632 	ljmp	00119$
   1AC0                    4633 00112$:
                           4634 ;	cJSON.c:280: if (*value=='[')				{ return parse_array(item,value); }
   1AC0 E5 81              4635 	mov	a,sp
   1AC2 24 FD              4636 	add	a,#0xfd
   1AC4 F8                 4637 	mov	r0,a
   1AC5 B6 5B 37           4638 	cjne	@r0,#0x5B,00116$
   1AC8 C0 02              4639 	push	ar2
   1ACA C0 03              4640 	push	ar3
   1ACC C0 04              4641 	push	ar4
   1ACE 8D 82              4642 	mov	dpl,r5
   1AD0 8E 83              4643 	mov	dph,r6
   1AD2 8F F0              4644 	mov	b,r7
   1AD4 78rEB              4645 	mov	r0,#_parse_array
   1AD6 79s1C              4646 	mov	r1,#(_parse_array >> 8)
   1AD8 7As00              4647 	mov	r2,#(_parse_array >> 16)
   1ADA 12s00r00           4648 	lcall	__sdcc_banked_call
   1ADD C8                 4649 	xch	a,r0
   1ADE E5 81              4650 	mov	a,sp
   1AE0 24 FB              4651 	add	a,#0xfb
   1AE2 C8                 4652 	xch	a,r0
   1AE3 A6 82              4653 	mov	@r0,dpl
   1AE5 08                 4654 	inc	r0
   1AE6 A6 83              4655 	mov	@r0,dph
   1AE8 08                 4656 	inc	r0
   1AE9 A6 F0              4657 	mov	@r0,b
   1AEB 15 81              4658 	dec	sp
   1AED 15 81              4659 	dec	sp
   1AEF 15 81              4660 	dec	sp
   1AF1 A8 81              4661 	mov	r0,sp
   1AF3 18                 4662 	dec	r0
   1AF4 18                 4663 	dec	r0
   1AF5 86 82              4664 	mov	dpl,@r0
   1AF7 08                 4665 	inc	r0
   1AF8 86 83              4666 	mov	dph,@r0
   1AFA 08                 4667 	inc	r0
   1AFB 86 F0              4668 	mov	b,@r0
   1AFD 80 42              4669 	sjmp	00119$
   1AFF                    4670 00116$:
                           4671 ;	cJSON.c:281: if (*value=='{')				{ return parse_object(item,value); }
   1AFF E5 81              4672 	mov	a,sp
   1B01 24 FD              4673 	add	a,#0xfd
   1B03 F8                 4674 	mov	r0,a
   1B04 B6 7B 29           4675 	cjne	@r0,#0x7B,00118$
   1B07 C0 02              4676 	push	ar2
   1B09 C0 03              4677 	push	ar3
   1B0B C0 04              4678 	push	ar4
   1B0D 8D 82              4679 	mov	dpl,r5
   1B0F 8E 83              4680 	mov	dph,r6
   1B11 8F F0              4681 	mov	b,r7
   1B13 78r24              4682 	mov	r0,#_parse_object
   1B15 79s25              4683 	mov	r1,#(_parse_object >> 8)
   1B17 7As00              4684 	mov	r2,#(_parse_object >> 16)
   1B19 12s00r00           4685 	lcall	__sdcc_banked_call
   1B1C AD 82              4686 	mov	r5,dpl
   1B1E AE 83              4687 	mov	r6,dph
   1B20 AF F0              4688 	mov	r7,b
   1B22 15 81              4689 	dec	sp
   1B24 15 81              4690 	dec	sp
   1B26 15 81              4691 	dec	sp
   1B28 8D 82              4692 	mov	dpl,r5
   1B2A 8E 83              4693 	mov	dph,r6
   1B2C 8F F0              4694 	mov	b,r7
   1B2E 80 11              4695 	sjmp	00119$
   1B30                    4696 00118$:
                           4697 ;	cJSON.c:283: ep=value;return 0;	/* failure. */
   1B30 90s00r00           4698 	mov	dptr,#_ep
   1B33 EA                 4699 	mov	a,r2
   1B34 F0                 4700 	movx	@dptr,a
   1B35 A3                 4701 	inc	dptr
   1B36 EB                 4702 	mov	a,r3
   1B37 F0                 4703 	movx	@dptr,a
   1B38 A3                 4704 	inc	dptr
   1B39 EC                 4705 	mov	a,r4
   1B3A F0                 4706 	movx	@dptr,a
   1B3B 90 00 00           4707 	mov	dptr,#0x0000
   1B3E 75 F0 00           4708 	mov	b,#0x00
   1B41                    4709 00119$:
   1B41 E5 81              4710 	mov	a,sp
   1B43 24 FC              4711 	add	a,#0xFC
   1B45 F5 81              4712 	mov	sp,a
   1B47 02s00r00           4713 	ljmp	__sdcc_banked_ret
                           4714 ;------------------------------------------------------------
                           4715 ;Allocation info for local variables in function 'print_value'
                           4716 ;------------------------------------------------------------
                           4717 ;depth                     Allocated to stack - sp -6
                           4718 ;fmt                       Allocated to stack - sp -8
                           4719 ;item                      Allocated to registers r5 r6 r7 
                           4720 ;out                       Allocated to registers r2 r3 r4 
                           4721 ;sloc0                     Allocated to stack - sp -1
                           4722 ;------------------------------------------------------------
                           4723 ;	cJSON.c:287: static char *print_value(cJSON *item,int depth,int fmt)
                           4724 ;	-----------------------------------------
                           4725 ;	 function print_value
                           4726 ;	-----------------------------------------
   1B4A                    4727 _print_value:
   1B4A 05 81              4728 	inc	sp
   1B4C 05 81              4729 	inc	sp
   1B4E AD 82              4730 	mov	r5,dpl
   1B50 AE 83              4731 	mov	r6,dph
   1B52 AF F0              4732 	mov	r7,b
                           4733 ;	cJSON.c:289: char *out=0;
                           4734 ;	cJSON.c:290: if (!item) return 0;
   1B54 E4                 4735 	clr	a
   1B55 FA                 4736 	mov	r2,a
   1B56 FB                 4737 	mov	r3,a
   1B57 FC                 4738 	mov	r4,a
   1B58 ED                 4739 	mov	a,r5
   1B59 4E                 4740 	orl	a,r6
   1B5A 70 08              4741 	jnz	00102$
   1B5C 90 00 00           4742 	mov	dptr,#0x0000
   1B5F F5 F0              4743 	mov	b,a
   1B61 02s1CrE4           4744 	ljmp	00111$
   1B64                    4745 00102$:
                           4746 ;	cJSON.c:291: switch ((item->type)&255)
   1B64 C0 02              4747 	push	ar2
   1B66 C0 03              4748 	push	ar3
   1B68 C0 04              4749 	push	ar4
   1B6A 74 09              4750 	mov	a,#0x09
   1B6C 2D                 4751 	add	a,r5
   1B6D FA                 4752 	mov	r2,a
   1B6E E4                 4753 	clr	a
   1B6F 3E                 4754 	addc	a,r6
   1B70 FB                 4755 	mov	r3,a
   1B71 8F 04              4756 	mov	ar4,r7
   1B73 8A 82              4757 	mov	dpl,r2
   1B75 8B 83              4758 	mov	dph,r3
   1B77 8C F0              4759 	mov	b,r4
   1B79 12s00r00           4760 	lcall	__gptrget
   1B7C FA                 4761 	mov	r2,a
   1B7D A3                 4762 	inc	dptr
   1B7E 12s00r00           4763 	lcall	__gptrget
   1B81 E5 81              4764 	mov	a,sp
   1B83 24 FC              4765 	add	a,#0xfc
   1B85 F8                 4766 	mov	r0,a
   1B86 A6 02              4767 	mov	@r0,ar2
   1B88 08                 4768 	inc	r0
   1B89 76 00              4769 	mov	@r0,#0x00
   1B8B E5 81              4770 	mov	a,sp
   1B8D 24 FC              4771 	add	a,#0xfc
   1B8F F8                 4772 	mov	r0,a
   1B90 08                 4773 	inc	r0
   1B91 E6                 4774 	mov	a,@r0
   1B92 D0 04              4775 	pop	ar4
   1B94 D0 03              4776 	pop	ar3
   1B96 D0 02              4777 	pop	ar2
   1B98 30 E7 03           4778 	jnb	acc.7,00120$
   1B9B 02s1CrDE           4779 	ljmp	00110$
   1B9E                    4780 00120$:
   1B9E A8 81              4781 	mov	r0,sp
   1BA0 18                 4782 	dec	r0
   1BA1 C3                 4783 	clr	c
   1BA2 74 06              4784 	mov	a,#0x06
   1BA4 96                 4785 	subb	a,@r0
   1BA5 E4                 4786 	clr	a
   1BA6 64 80              4787 	xrl	a,#0x80
   1BA8 08                 4788 	inc	r0
   1BA9 86 F0              4789 	mov	b,@r0
   1BAB 63 F0 80           4790 	xrl	b,#0x80
   1BAE 95 F0              4791 	subb	a,b
   1BB0 50 03              4792 	jnc	00121$
   1BB2 02s1CrDE           4793 	ljmp	00110$
   1BB5                    4794 00121$:
   1BB5 A8 81              4795 	mov	r0,sp
   1BB7 18                 4796 	dec	r0
   1BB8 E6                 4797 	mov	a,@r0
   1BB9 25 E0              4798 	add	a,acc
   1BBB 26                 4799 	add	a,@r0
   1BBC 90s1BrC0           4800 	mov	dptr,#00122$
   1BBF 73                 4801 	jmp	@a+dptr
   1BC0                    4802 00122$:
   1BC0 02s1BrF3           4803 	ljmp	00104$
   1BC3 02s1Cr11           4804 	ljmp	00105$
   1BC6 02s1BrD5           4805 	ljmp	00103$
   1BC9 02s1Cr2F           4806 	ljmp	00106$
   1BCC 02s1Cr4D           4807 	ljmp	00107$
   1BCF 02s1Cr6A           4808 	ljmp	00108$
   1BD2 02s1CrA5           4809 	ljmp	00109$
                           4810 ;	cJSON.c:293: case cJSON_NULL:	out=cJSON_strdup("null");	break;
   1BD5                    4811 00103$:
   1BD5 90s00r1C           4812 	mov	dptr,#__str_5
   1BD8 75 F0 80           4813 	mov	b,#0x80
   1BDB 78r5F              4814 	mov	r0,#_cJSON_strdup
   1BDD 79s02              4815 	mov	r1,#(_cJSON_strdup >> 8)
   1BDF 7As00              4816 	mov	r2,#(_cJSON_strdup >> 16)
   1BE1 12s00r00           4817 	lcall	__sdcc_banked_call
   1BE4 AF 82              4818 	mov	r7,dpl
   1BE6 AE 83              4819 	mov	r6,dph
   1BE8 AD F0              4820 	mov	r5,b
   1BEA 8F 02              4821 	mov	ar2,r7
   1BEC 8E 03              4822 	mov	ar3,r6
   1BEE 8D 04              4823 	mov	ar4,r5
   1BF0 02s1CrDE           4824 	ljmp	00110$
                           4825 ;	cJSON.c:294: case cJSON_False:	out=cJSON_strdup("false");break;
   1BF3                    4826 00104$:
   1BF3 90s00r21           4827 	mov	dptr,#__str_6
   1BF6 75 F0 80           4828 	mov	b,#0x80
   1BF9 78r5F              4829 	mov	r0,#_cJSON_strdup
   1BFB 79s02              4830 	mov	r1,#(_cJSON_strdup >> 8)
   1BFD 7As00              4831 	mov	r2,#(_cJSON_strdup >> 16)
   1BFF 12s00r00           4832 	lcall	__sdcc_banked_call
   1C02 AF 82              4833 	mov	r7,dpl
   1C04 AE 83              4834 	mov	r6,dph
   1C06 AD F0              4835 	mov	r5,b
   1C08 8F 02              4836 	mov	ar2,r7
   1C0A 8E 03              4837 	mov	ar3,r6
   1C0C 8D 04              4838 	mov	ar4,r5
   1C0E 02s1CrDE           4839 	ljmp	00110$
                           4840 ;	cJSON.c:295: case cJSON_True:	out=cJSON_strdup("true"); break;
   1C11                    4841 00105$:
   1C11 90s00r27           4842 	mov	dptr,#__str_7
   1C14 75 F0 80           4843 	mov	b,#0x80
   1C17 78r5F              4844 	mov	r0,#_cJSON_strdup
   1C19 79s02              4845 	mov	r1,#(_cJSON_strdup >> 8)
   1C1B 7As00              4846 	mov	r2,#(_cJSON_strdup >> 16)
   1C1D 12s00r00           4847 	lcall	__sdcc_banked_call
   1C20 AF 82              4848 	mov	r7,dpl
   1C22 AE 83              4849 	mov	r6,dph
   1C24 AD F0              4850 	mov	r5,b
   1C26 8F 02              4851 	mov	ar2,r7
   1C28 8E 03              4852 	mov	ar3,r6
   1C2A 8D 04              4853 	mov	ar4,r5
   1C2C 02s1CrDE           4854 	ljmp	00110$
                           4855 ;	cJSON.c:296: case cJSON_Number:	out=print_number(item);break;
   1C2F                    4856 00106$:
   1C2F 8D 82              4857 	mov	dpl,r5
   1C31 8E 83              4858 	mov	dph,r6
   1C33 8F F0              4859 	mov	b,r7
   1C35 78rE1              4860 	mov	r0,#_print_number
   1C37 79s08              4861 	mov	r1,#(_print_number >> 8)
   1C39 7As00              4862 	mov	r2,#(_print_number >> 16)
   1C3B 12s00r00           4863 	lcall	__sdcc_banked_call
   1C3E AF 82              4864 	mov	r7,dpl
   1C40 AE 83              4865 	mov	r6,dph
   1C42 AD F0              4866 	mov	r5,b
   1C44 8F 02              4867 	mov	ar2,r7
   1C46 8E 03              4868 	mov	ar3,r6
   1C48 8D 04              4869 	mov	ar4,r5
   1C4A 02s1CrDE           4870 	ljmp	00110$
                           4871 ;	cJSON.c:297: case cJSON_String:	out=print_string(item);break;
   1C4D                    4872 00107$:
   1C4D 8D 82              4873 	mov	dpl,r5
   1C4F 8E 83              4874 	mov	dph,r6
   1C51 8F F0              4875 	mov	b,r7
   1C53 78r1B              4876 	mov	r0,#_print_string
   1C55 79s16              4877 	mov	r1,#(_print_string >> 8)
   1C57 7As00              4878 	mov	r2,#(_print_string >> 16)
   1C59 12s00r00           4879 	lcall	__sdcc_banked_call
   1C5C AF 82              4880 	mov	r7,dpl
   1C5E AE 83              4881 	mov	r6,dph
   1C60 AD F0              4882 	mov	r5,b
   1C62 8F 02              4883 	mov	ar2,r7
   1C64 8E 03              4884 	mov	ar3,r6
   1C66 8D 04              4885 	mov	ar4,r5
                           4886 ;	cJSON.c:298: case cJSON_Array:	out=print_array(item,depth,fmt);break;
   1C68 80 74              4887 	sjmp	00110$
   1C6A                    4888 00108$:
   1C6A E5 81              4889 	mov	a,sp
   1C6C 24 F8              4890 	add	a,#0xf8
   1C6E F8                 4891 	mov	r0,a
   1C6F E6                 4892 	mov	a,@r0
   1C70 C0 E0              4893 	push	acc
   1C72 08                 4894 	inc	r0
   1C73 E6                 4895 	mov	a,@r0
   1C74 C0 E0              4896 	push	acc
   1C76 E5 81              4897 	mov	a,sp
   1C78 24 F8              4898 	add	a,#0xf8
   1C7A F8                 4899 	mov	r0,a
   1C7B E6                 4900 	mov	a,@r0
   1C7C C0 E0              4901 	push	acc
   1C7E 08                 4902 	inc	r0
   1C7F E6                 4903 	mov	a,@r0
   1C80 C0 E0              4904 	push	acc
   1C82 8D 82              4905 	mov	dpl,r5
   1C84 8E 83              4906 	mov	dph,r6
   1C86 8F F0              4907 	mov	b,r7
   1C88 78rB9              4908 	mov	r0,#_print_array
   1C8A 79s1F              4909 	mov	r1,#(_print_array >> 8)
   1C8C 7As00              4910 	mov	r2,#(_print_array >> 16)
   1C8E 12s00r00           4911 	lcall	__sdcc_banked_call
   1C91 AF 82              4912 	mov	r7,dpl
   1C93 AE 83              4913 	mov	r6,dph
   1C95 AD F0              4914 	mov	r5,b
   1C97 E5 81              4915 	mov	a,sp
   1C99 24 FC              4916 	add	a,#0xfc
   1C9B F5 81              4917 	mov	sp,a
   1C9D 8F 02              4918 	mov	ar2,r7
   1C9F 8E 03              4919 	mov	ar3,r6
   1CA1 8D 04              4920 	mov	ar4,r5
                           4921 ;	cJSON.c:299: case cJSON_Object:	out=print_object(item,depth,fmt);break;
   1CA3 80 39              4922 	sjmp	00110$
   1CA5                    4923 00109$:
   1CA5 E5 81              4924 	mov	a,sp
   1CA7 24 F8              4925 	add	a,#0xf8
   1CA9 F8                 4926 	mov	r0,a
   1CAA E6                 4927 	mov	a,@r0
   1CAB C0 E0              4928 	push	acc
   1CAD 08                 4929 	inc	r0
   1CAE E6                 4930 	mov	a,@r0
   1CAF C0 E0              4931 	push	acc
   1CB1 E5 81              4932 	mov	a,sp
   1CB3 24 F8              4933 	add	a,#0xf8
   1CB5 F8                 4934 	mov	r0,a
   1CB6 E6                 4935 	mov	a,@r0
   1CB7 C0 E0              4936 	push	acc
   1CB9 08                 4937 	inc	r0
   1CBA E6                 4938 	mov	a,@r0
   1CBB C0 E0              4939 	push	acc
   1CBD 8D 82              4940 	mov	dpl,r5
   1CBF 8E 83              4941 	mov	dph,r6
   1CC1 8F F0              4942 	mov	b,r7
   1CC3 78r17              4943 	mov	r0,#_print_object
   1CC5 79s2A              4944 	mov	r1,#(_print_object >> 8)
   1CC7 7As00              4945 	mov	r2,#(_print_object >> 16)
   1CC9 12s00r00           4946 	lcall	__sdcc_banked_call
   1CCC AD 82              4947 	mov	r5,dpl
   1CCE AE 83              4948 	mov	r6,dph
   1CD0 AF F0              4949 	mov	r7,b
   1CD2 E5 81              4950 	mov	a,sp
   1CD4 24 FC              4951 	add	a,#0xfc
   1CD6 F5 81              4952 	mov	sp,a
   1CD8 8D 02              4953 	mov	ar2,r5
   1CDA 8E 03              4954 	mov	ar3,r6
   1CDC 8F 04              4955 	mov	ar4,r7
                           4956 ;	cJSON.c:300: }
   1CDE                    4957 00110$:
                           4958 ;	cJSON.c:301: return out;
   1CDE 8A 82              4959 	mov	dpl,r2
   1CE0 8B 83              4960 	mov	dph,r3
   1CE2 8C F0              4961 	mov	b,r4
   1CE4                    4962 00111$:
   1CE4 15 81              4963 	dec	sp
   1CE6 15 81              4964 	dec	sp
   1CE8 02s00r00           4965 	ljmp	__sdcc_banked_ret
                           4966 ;------------------------------------------------------------
                           4967 ;Allocation info for local variables in function 'parse_array'
                           4968 ;------------------------------------------------------------
                           4969 ;value                     Allocated to stack - sp -17
                           4970 ;item                      Allocated to stack - sp -11
                           4971 ;child                     Allocated to stack - sp -8
                           4972 ;new_item                  Allocated to stack - sp -5
                           4973 ;sloc0                     Allocated to stack - sp -2
                           4974 ;sloc1                     Allocated to stack - sp -2
                           4975 ;------------------------------------------------------------
                           4976 ;	cJSON.c:305: static const char *parse_array(cJSON *item,const char *value)
                           4977 ;	-----------------------------------------
                           4978 ;	 function parse_array
                           4979 ;	-----------------------------------------
   1CEB                    4980 _parse_array:
   1CEB C0 82              4981 	push	dpl
   1CED C0 83              4982 	push	dph
   1CEF C0 F0              4983 	push	b
   1CF1 E5 81              4984 	mov	a,sp
   1CF3 24 09              4985 	add	a,#0x09
                           4986 ;	cJSON.c:308: if (*value!='[')	{ep=value;return 0;}	/* not an array! */
   1CF5 F5 81              4987 	mov	sp,a
   1CF7 24 EF              4988 	add	a,#0xef
   1CF9 F8                 4989 	mov	r0,a
   1CFA 86 02              4990 	mov	ar2,@r0
   1CFC 08                 4991 	inc	r0
   1CFD 86 03              4992 	mov	ar3,@r0
   1CFF 08                 4993 	inc	r0
   1D00 86 04              4994 	mov	ar4,@r0
   1D02 8A 82              4995 	mov	dpl,r2
   1D04 8B 83              4996 	mov	dph,r3
   1D06 8C F0              4997 	mov	b,r4
   1D08 12s00r00           4998 	lcall	__gptrget
   1D0B FF                 4999 	mov	r7,a
   1D0C BF 5B 02           5000 	cjne	r7,#0x5B,00138$
   1D0F 80 14              5001 	sjmp	00102$
   1D11                    5002 00138$:
   1D11 90s00r00           5003 	mov	dptr,#_ep
   1D14 EA                 5004 	mov	a,r2
   1D15 F0                 5005 	movx	@dptr,a
   1D16 A3                 5006 	inc	dptr
   1D17 EB                 5007 	mov	a,r3
   1D18 F0                 5008 	movx	@dptr,a
   1D19 A3                 5009 	inc	dptr
   1D1A EC                 5010 	mov	a,r4
   1D1B F0                 5011 	movx	@dptr,a
   1D1C 90 00 00           5012 	mov	dptr,#0x0000
   1D1F 75 F0 00           5013 	mov	b,#0x00
   1D22 02s1FrB0           5014 	ljmp	00118$
   1D25                    5015 00102$:
                           5016 ;	cJSON.c:310: item->type=cJSON_Array;
   1D25 E5 81              5017 	mov	a,sp
   1D27 24 F5              5018 	add	a,#0xf5
   1D29 F8                 5019 	mov	r0,a
   1D2A 74 09              5020 	mov	a,#0x09
   1D2C 26                 5021 	add	a,@r0
   1D2D FD                 5022 	mov	r5,a
   1D2E E4                 5023 	clr	a
   1D2F 08                 5024 	inc	r0
   1D30 36                 5025 	addc	a,@r0
   1D31 FE                 5026 	mov	r6,a
   1D32 08                 5027 	inc	r0
   1D33 86 07              5028 	mov	ar7,@r0
   1D35 8D 82              5029 	mov	dpl,r5
   1D37 8E 83              5030 	mov	dph,r6
   1D39 8F F0              5031 	mov	b,r7
   1D3B 74 05              5032 	mov	a,#0x05
   1D3D 12s00r00           5033 	lcall	__gptrput
   1D40 A3                 5034 	inc	dptr
   1D41 E4                 5035 	clr	a
   1D42 12s00r00           5036 	lcall	__gptrput
                           5037 ;	cJSON.c:311: value=skip(value+1);
   1D45 0A                 5038 	inc	r2
   1D46 BA 00 01           5039 	cjne	r2,#0x00,00139$
   1D49 0B                 5040 	inc	r3
   1D4A                    5041 00139$:
   1D4A 8A 82              5042 	mov	dpl,r2
   1D4C 8B 83              5043 	mov	dph,r3
   1D4E 8C F0              5044 	mov	b,r4
   1D50 78r54              5045 	mov	r0,#_skip
   1D52 79s16              5046 	mov	r1,#(_skip >> 8)
   1D54 7As00              5047 	mov	r2,#(_skip >> 16)
   1D56 12s00r00           5048 	lcall	__sdcc_banked_call
                           5049 ;	cJSON.c:312: if (*value==']') return value+1;	/* empty array. */
   1D59 AD 82              5050 	mov	r5,dpl
   1D5B AE 83              5051 	mov	r6,dph
   1D5D AF F0              5052 	mov	r7,b
   1D5F 12s00r00           5053 	lcall	__gptrget
   1D62 FC                 5054 	mov	r4,a
   1D63 BC 5D 12           5055 	cjne	r4,#0x5D,00104$
   1D66 74 01              5056 	mov	a,#0x01
   1D68 2D                 5057 	add	a,r5
   1D69 FA                 5058 	mov	r2,a
   1D6A E4                 5059 	clr	a
   1D6B 3E                 5060 	addc	a,r6
   1D6C FB                 5061 	mov	r3,a
   1D6D 8F 04              5062 	mov	ar4,r7
   1D6F 8A 82              5063 	mov	dpl,r2
   1D71 8B 83              5064 	mov	dph,r3
   1D73 8C F0              5065 	mov	b,r4
   1D75 02s1FrB0           5066 	ljmp	00118$
   1D78                    5067 00104$:
                           5068 ;	cJSON.c:314: item->child=child=cJSON_New_Item();
   1D78 E5 81              5069 	mov	a,sp
   1D7A 24 F5              5070 	add	a,#0xf5
   1D7C F8                 5071 	mov	r0,a
   1D7D 74 06              5072 	mov	a,#0x06
   1D7F 26                 5073 	add	a,@r0
   1D80 FC                 5074 	mov	r4,a
   1D81 E4                 5075 	clr	a
   1D82 08                 5076 	inc	r0
   1D83 36                 5077 	addc	a,@r0
   1D84 FB                 5078 	mov	r3,a
   1D85 08                 5079 	inc	r0
   1D86 86 02              5080 	mov	ar2,@r0
   1D88 C0 07              5081 	push	ar7
   1D8A C0 06              5082 	push	ar6
   1D8C C0 05              5083 	push	ar5
   1D8E C0 04              5084 	push	ar4
   1D90 C0 03              5085 	push	ar3
   1D92 C0 02              5086 	push	ar2
   1D94 78r3D              5087 	mov	r0,#_cJSON_New_Item
   1D96 79s03              5088 	mov	r1,#(_cJSON_New_Item >> 8)
   1D98 7As00              5089 	mov	r2,#(_cJSON_New_Item >> 16)
   1D9A 12s00r00           5090 	lcall	__sdcc_banked_call
   1D9D C8                 5091 	xch	a,r0
   1D9E E5 81              5092 	mov	a,sp
   1DA0 24 F8              5093 	add	a,#0xf8
   1DA2 C8                 5094 	xch	a,r0
   1DA3 A6 82              5095 	mov	@r0,dpl
   1DA5 08                 5096 	inc	r0
   1DA6 A6 83              5097 	mov	@r0,dph
   1DA8 08                 5098 	inc	r0
   1DA9 A6 F0              5099 	mov	@r0,b
   1DAB D0 02              5100 	pop	ar2
   1DAD D0 03              5101 	pop	ar3
   1DAF D0 04              5102 	pop	ar4
   1DB1 D0 05              5103 	pop	ar5
   1DB3 D0 06              5104 	pop	ar6
   1DB5 D0 07              5105 	pop	ar7
   1DB7 A8 81              5106 	mov	r0,sp
   1DB9 18                 5107 	dec	r0
   1DBA 18                 5108 	dec	r0
   1DBB E5 81              5109 	mov	a,sp
   1DBD 24 F8              5110 	add	a,#0xf8
   1DBF F9                 5111 	mov	r1,a
   1DC0 E6                 5112 	mov	a,@r0
   1DC1 F7                 5113 	mov	@r1,a
   1DC2 08                 5114 	inc	r0
   1DC3 09                 5115 	inc	r1
   1DC4 E6                 5116 	mov	a,@r0
   1DC5 F7                 5117 	mov	@r1,a
   1DC6 08                 5118 	inc	r0
   1DC7 09                 5119 	inc	r1
   1DC8 E6                 5120 	mov	a,@r0
   1DC9 F7                 5121 	mov	@r1,a
   1DCA 8C 82              5122 	mov	dpl,r4
   1DCC 8B 83              5123 	mov	dph,r3
   1DCE 8A F0              5124 	mov	b,r2
   1DD0 A8 81              5125 	mov	r0,sp
   1DD2 18                 5126 	dec	r0
   1DD3 18                 5127 	dec	r0
   1DD4 E6                 5128 	mov	a,@r0
   1DD5 12s00r00           5129 	lcall	__gptrput
   1DD8 A3                 5130 	inc	dptr
   1DD9 08                 5131 	inc	r0
   1DDA E6                 5132 	mov	a,@r0
   1DDB 12s00r00           5133 	lcall	__gptrput
   1DDE A3                 5134 	inc	dptr
   1DDF 08                 5135 	inc	r0
   1DE0 E6                 5136 	mov	a,@r0
   1DE1 12s00r00           5137 	lcall	__gptrput
                           5138 ;	cJSON.c:315: if (!item->child) return 0;		 /* memory fail */
   1DE4 A8 81              5139 	mov	r0,sp
   1DE6 18                 5140 	dec	r0
   1DE7 18                 5141 	dec	r0
   1DE8 E6                 5142 	mov	a,@r0
   1DE9 08                 5143 	inc	r0
   1DEA 46                 5144 	orl	a,@r0
   1DEB 70 08              5145 	jnz	00106$
   1DED 90 00 00           5146 	mov	dptr,#0x0000
   1DF0 F5 F0              5147 	mov	b,a
   1DF2 02s1FrB0           5148 	ljmp	00118$
   1DF5                    5149 00106$:
                           5150 ;	cJSON.c:316: value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
   1DF5 8D 82              5151 	mov	dpl,r5
   1DF7 8E 83              5152 	mov	dph,r6
   1DF9 8F F0              5153 	mov	b,r7
   1DFB 78r54              5154 	mov	r0,#_skip
   1DFD 79s16              5155 	mov	r1,#(_skip >> 8)
   1DFF 7As00              5156 	mov	r2,#(_skip >> 16)
   1E01 12s00r00           5157 	lcall	__sdcc_banked_call
   1E04 AD 82              5158 	mov	r5,dpl
   1E06 AE 83              5159 	mov	r6,dph
   1E08 AF F0              5160 	mov	r7,b
   1E0A C0 05              5161 	push	ar5
   1E0C C0 06              5162 	push	ar6
   1E0E C0 07              5163 	push	ar7
   1E10 E5 81              5164 	mov	a,sp
   1E12 24 F5              5165 	add	a,#0xf5
   1E14 F8                 5166 	mov	r0,a
   1E15 86 82              5167 	mov	dpl,@r0
   1E17 08                 5168 	inc	r0
   1E18 86 83              5169 	mov	dph,@r0
   1E1A 08                 5170 	inc	r0
   1E1B 86 F0              5171 	mov	b,@r0
   1E1D 78r6F              5172 	mov	r0,#_parse_value
   1E1F 79s18              5173 	mov	r1,#(_parse_value >> 8)
   1E21 7As00              5174 	mov	r2,#(_parse_value >> 16)
   1E23 12s00r00           5175 	lcall	__sdcc_banked_call
   1E26 AD 82              5176 	mov	r5,dpl
   1E28 AE 83              5177 	mov	r6,dph
   1E2A AF F0              5178 	mov	r7,b
   1E2C 15 81              5179 	dec	sp
   1E2E 15 81              5180 	dec	sp
   1E30 15 81              5181 	dec	sp
   1E32 8D 82              5182 	mov	dpl,r5
   1E34 8E 83              5183 	mov	dph,r6
   1E36 8F F0              5184 	mov	b,r7
   1E38 78r54              5185 	mov	r0,#_skip
   1E3A 79s16              5186 	mov	r1,#(_skip >> 8)
   1E3C 7As00              5187 	mov	r2,#(_skip >> 16)
   1E3E 12s00r00           5188 	lcall	__sdcc_banked_call
   1E41 AD 82              5189 	mov	r5,dpl
   1E43 AE 83              5190 	mov	r6,dph
   1E45 AF F0              5191 	mov	r7,b
   1E47 E5 81              5192 	mov	a,sp
   1E49 24 EF              5193 	add	a,#0xef
   1E4B F8                 5194 	mov	r0,a
   1E4C A6 05              5195 	mov	@r0,ar5
   1E4E 08                 5196 	inc	r0
   1E4F A6 06              5197 	mov	@r0,ar6
   1E51 08                 5198 	inc	r0
   1E52 A6 07              5199 	mov	@r0,ar7
                           5200 ;	cJSON.c:317: if (!value) return 0;
   1E54 ED                 5201 	mov	a,r5
   1E55 4E                 5202 	orl	a,r6
   1E56 70 08              5203 	jnz	00113$
   1E58 90 00 00           5204 	mov	dptr,#0x0000
   1E5B F5 F0              5205 	mov	b,a
   1E5D 02s1FrB0           5206 	ljmp	00118$
                           5207 ;	cJSON.c:319: while (*value==',')
   1E60                    5208 00113$:
   1E60 E5 81              5209 	mov	a,sp
   1E62 24 EF              5210 	add	a,#0xef
   1E64 F8                 5211 	mov	r0,a
   1E65 86 05              5212 	mov	ar5,@r0
   1E67 08                 5213 	inc	r0
   1E68 86 06              5214 	mov	ar6,@r0
   1E6A 08                 5215 	inc	r0
   1E6B 86 07              5216 	mov	ar7,@r0
   1E6D 8D 82              5217 	mov	dpl,r5
   1E6F 8E 83              5218 	mov	dph,r6
   1E71 8F F0              5219 	mov	b,r7
   1E73 12s00r00           5220 	lcall	__gptrget
   1E76 FC                 5221 	mov	r4,a
   1E77 BC 2C 02           5222 	cjne	r4,#0x2C,00144$
   1E7A 80 03              5223 	sjmp	00145$
   1E7C                    5224 00144$:
   1E7C 02s1Fr8B           5225 	ljmp	00115$
   1E7F                    5226 00145$:
                           5227 ;	cJSON.c:322: if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
   1E7F C0 07              5228 	push	ar7
   1E81 C0 06              5229 	push	ar6
   1E83 C0 05              5230 	push	ar5
   1E85 78r3D              5231 	mov	r0,#_cJSON_New_Item
   1E87 79s03              5232 	mov	r1,#(_cJSON_New_Item >> 8)
   1E89 7As00              5233 	mov	r2,#(_cJSON_New_Item >> 16)
   1E8B 12s00r00           5234 	lcall	__sdcc_banked_call
   1E8E AC 82              5235 	mov	r4,dpl
   1E90 AB 83              5236 	mov	r3,dph
   1E92 AA F0              5237 	mov	r2,b
   1E94 D0 05              5238 	pop	ar5
   1E96 D0 06              5239 	pop	ar6
   1E98 D0 07              5240 	pop	ar7
   1E9A E5 81              5241 	mov	a,sp
   1E9C 24 FB              5242 	add	a,#0xfb
   1E9E F8                 5243 	mov	r0,a
   1E9F A6 04              5244 	mov	@r0,ar4
   1EA1 08                 5245 	inc	r0
   1EA2 A6 03              5246 	mov	@r0,ar3
   1EA4 08                 5247 	inc	r0
   1EA5 A6 02              5248 	mov	@r0,ar2
   1EA7 EC                 5249 	mov	a,r4
   1EA8 4B                 5250 	orl	a,r3
   1EA9 70 08              5251 	jnz	00110$
   1EAB 90 00 00           5252 	mov	dptr,#0x0000
   1EAE F5 F0              5253 	mov	b,a
   1EB0 02s1FrB0           5254 	ljmp	00118$
   1EB3                    5255 00110$:
                           5256 ;	cJSON.c:323: child->next=new_item;new_item->prev=child;child=new_item;
   1EB3 E5 81              5257 	mov	a,sp
   1EB5 24 F8              5258 	add	a,#0xf8
   1EB7 F8                 5259 	mov	r0,a
   1EB8 86 82              5260 	mov	dpl,@r0
   1EBA 08                 5261 	inc	r0
   1EBB 86 83              5262 	mov	dph,@r0
   1EBD 08                 5263 	inc	r0
   1EBE 86 F0              5264 	mov	b,@r0
   1EC0 E5 81              5265 	mov	a,sp
   1EC2 24 FB              5266 	add	a,#0xfb
   1EC4 F9                 5267 	mov	r1,a
   1EC5 E7                 5268 	mov	a,@r1
   1EC6 12s00r00           5269 	lcall	__gptrput
   1EC9 A3                 5270 	inc	dptr
   1ECA 09                 5271 	inc	r1
   1ECB E7                 5272 	mov	a,@r1
   1ECC 12s00r00           5273 	lcall	__gptrput
   1ECF A3                 5274 	inc	dptr
   1ED0 09                 5275 	inc	r1
   1ED1 E7                 5276 	mov	a,@r1
   1ED2 12s00r00           5277 	lcall	__gptrput
   1ED5 E5 81              5278 	mov	a,sp
   1ED7 24 FB              5279 	add	a,#0xfb
   1ED9 F8                 5280 	mov	r0,a
   1EDA 74 03              5281 	mov	a,#0x03
   1EDC 26                 5282 	add	a,@r0
   1EDD FA                 5283 	mov	r2,a
   1EDE E4                 5284 	clr	a
   1EDF 08                 5285 	inc	r0
   1EE0 36                 5286 	addc	a,@r0
   1EE1 FB                 5287 	mov	r3,a
   1EE2 08                 5288 	inc	r0
   1EE3 86 04              5289 	mov	ar4,@r0
   1EE5 8A 82              5290 	mov	dpl,r2
   1EE7 8B 83              5291 	mov	dph,r3
   1EE9 8C F0              5292 	mov	b,r4
   1EEB E5 81              5293 	mov	a,sp
   1EED 24 F8              5294 	add	a,#0xf8
   1EEF F8                 5295 	mov	r0,a
   1EF0 E6                 5296 	mov	a,@r0
   1EF1 12s00r00           5297 	lcall	__gptrput
   1EF4 A3                 5298 	inc	dptr
   1EF5 08                 5299 	inc	r0
   1EF6 E6                 5300 	mov	a,@r0
   1EF7 12s00r00           5301 	lcall	__gptrput
   1EFA A3                 5302 	inc	dptr
   1EFB 08                 5303 	inc	r0
   1EFC E6                 5304 	mov	a,@r0
   1EFD 12s00r00           5305 	lcall	__gptrput
   1F00 E5 81              5306 	mov	a,sp
   1F02 24 FB              5307 	add	a,#0xfb
   1F04 F8                 5308 	mov	r0,a
   1F05 E5 81              5309 	mov	a,sp
   1F07 24 F8              5310 	add	a,#0xf8
   1F09 F9                 5311 	mov	r1,a
   1F0A E6                 5312 	mov	a,@r0
   1F0B F7                 5313 	mov	@r1,a
   1F0C 08                 5314 	inc	r0
   1F0D 09                 5315 	inc	r1
   1F0E E6                 5316 	mov	a,@r0
   1F0F F7                 5317 	mov	@r1,a
   1F10 08                 5318 	inc	r0
   1F11 09                 5319 	inc	r1
   1F12 E6                 5320 	mov	a,@r0
   1F13 F7                 5321 	mov	@r1,a
                           5322 ;	cJSON.c:324: value=skip(parse_value(child,skip(value+1)));
   1F14 74 01              5323 	mov	a,#0x01
   1F16 2D                 5324 	add	a,r5
   1F17 FA                 5325 	mov	r2,a
   1F18 E4                 5326 	clr	a
   1F19 3E                 5327 	addc	a,r6
   1F1A FB                 5328 	mov	r3,a
   1F1B 8F 04              5329 	mov	ar4,r7
   1F1D 8A 82              5330 	mov	dpl,r2
   1F1F 8B 83              5331 	mov	dph,r3
   1F21 8C F0              5332 	mov	b,r4
   1F23 78r54              5333 	mov	r0,#_skip
   1F25 79s16              5334 	mov	r1,#(_skip >> 8)
   1F27 7As00              5335 	mov	r2,#(_skip >> 16)
   1F29 12s00r00           5336 	lcall	__sdcc_banked_call
   1F2C AA 82              5337 	mov	r2,dpl
   1F2E AB 83              5338 	mov	r3,dph
   1F30 AC F0              5339 	mov	r4,b
   1F32 C0 02              5340 	push	ar2
   1F34 C0 03              5341 	push	ar3
   1F36 C0 04              5342 	push	ar4
   1F38 E5 81              5343 	mov	a,sp
   1F3A 24 F8              5344 	add	a,#0xf8
   1F3C F8                 5345 	mov	r0,a
   1F3D 86 82              5346 	mov	dpl,@r0
   1F3F 08                 5347 	inc	r0
   1F40 86 83              5348 	mov	dph,@r0
   1F42 08                 5349 	inc	r0
   1F43 86 F0              5350 	mov	b,@r0
   1F45 78r6F              5351 	mov	r0,#_parse_value
   1F47 79s18              5352 	mov	r1,#(_parse_value >> 8)
   1F49 7As00              5353 	mov	r2,#(_parse_value >> 16)
   1F4B 12s00r00           5354 	lcall	__sdcc_banked_call
   1F4E AA 82              5355 	mov	r2,dpl
   1F50 AB 83              5356 	mov	r3,dph
   1F52 AC F0              5357 	mov	r4,b
   1F54 15 81              5358 	dec	sp
   1F56 15 81              5359 	dec	sp
   1F58 15 81              5360 	dec	sp
   1F5A 8A 82              5361 	mov	dpl,r2
   1F5C 8B 83              5362 	mov	dph,r3
   1F5E 8C F0              5363 	mov	b,r4
   1F60 78r54              5364 	mov	r0,#_skip
   1F62 79s16              5365 	mov	r1,#(_skip >> 8)
   1F64 7As00              5366 	mov	r2,#(_skip >> 16)
   1F66 12s00r00           5367 	lcall	__sdcc_banked_call
   1F69 AA 82              5368 	mov	r2,dpl
   1F6B AB 83              5369 	mov	r3,dph
   1F6D AC F0              5370 	mov	r4,b
   1F6F E5 81              5371 	mov	a,sp
   1F71 24 EF              5372 	add	a,#0xef
   1F73 F8                 5373 	mov	r0,a
   1F74 A6 02              5374 	mov	@r0,ar2
   1F76 08                 5375 	inc	r0
   1F77 A6 03              5376 	mov	@r0,ar3
   1F79 08                 5377 	inc	r0
   1F7A A6 04              5378 	mov	@r0,ar4
                           5379 ;	cJSON.c:325: if (!value) return 0;	/* memory fail */
   1F7C EA                 5380 	mov	a,r2
   1F7D 4B                 5381 	orl	a,r3
   1F7E 60 03              5382 	jz	00147$
   1F80 02s1Er60           5383 	ljmp	00113$
   1F83                    5384 00147$:
   1F83 90 00 00           5385 	mov	dptr,#0x0000
   1F86 75 F0 00           5386 	mov	b,#0x00
   1F89 80 25              5387 	sjmp	00118$
   1F8B                    5388 00115$:
                           5389 ;	cJSON.c:328: if (*value==']') return value+1;	/* end of array */
   1F8B BC 5D 11           5390 	cjne	r4,#0x5D,00117$
   1F8E 74 01              5391 	mov	a,#0x01
   1F90 2D                 5392 	add	a,r5
   1F91 FA                 5393 	mov	r2,a
   1F92 E4                 5394 	clr	a
   1F93 3E                 5395 	addc	a,r6
   1F94 FB                 5396 	mov	r3,a
   1F95 8F 04              5397 	mov	ar4,r7
   1F97 8A 82              5398 	mov	dpl,r2
   1F99 8B 83              5399 	mov	dph,r3
   1F9B 8C F0              5400 	mov	b,r4
   1F9D 80 11              5401 	sjmp	00118$
   1F9F                    5402 00117$:
                           5403 ;	cJSON.c:329: ep=value;return 0;	/* malformed. */
   1F9F 90s00r00           5404 	mov	dptr,#_ep
   1FA2 ED                 5405 	mov	a,r5
   1FA3 F0                 5406 	movx	@dptr,a
   1FA4 A3                 5407 	inc	dptr
   1FA5 EE                 5408 	mov	a,r6
   1FA6 F0                 5409 	movx	@dptr,a
   1FA7 A3                 5410 	inc	dptr
   1FA8 EF                 5411 	mov	a,r7
   1FA9 F0                 5412 	movx	@dptr,a
   1FAA 90 00 00           5413 	mov	dptr,#0x0000
   1FAD 75 F0 00           5414 	mov	b,#0x00
   1FB0                    5415 00118$:
   1FB0 E5 81              5416 	mov	a,sp
   1FB2 24 F4              5417 	add	a,#0xF4
   1FB4 F5 81              5418 	mov	sp,a
   1FB6 02s00r00           5419 	ljmp	__sdcc_banked_ret
                           5420 ;------------------------------------------------------------
                           5421 ;Allocation info for local variables in function 'print_array'
                           5422 ;------------------------------------------------------------
                           5423 ;depth                     Allocated to stack - sp -26
                           5424 ;fmt                       Allocated to stack - sp -28
                           5425 ;item                      Allocated to registers r5 r6 r7 
                           5426 ;entries                   Allocated to stack - sp -21
                           5427 ;out                       Allocated to stack - sp -18
                           5428 ;ptr                       Allocated to stack - sp -15
                           5429 ;ret                       Allocated to registers r4 r3 r5 
                           5430 ;len                       Allocated to stack - sp -12
                           5431 ;child                     Allocated to stack - sp -10
                           5432 ;numentries                Allocated to stack - sp -3
                           5433 ;i                         Allocated to stack - sp -7
                           5434 ;fail                      Allocated to stack - sp -5
                           5435 ;sloc0                     Allocated to stack - sp -3
                           5436 ;sloc1                     Allocated to stack - sp -1
                           5437 ;------------------------------------------------------------
                           5438 ;	cJSON.c:333: static char *print_array(cJSON *item,int depth,int fmt)
                           5439 ;	-----------------------------------------
                           5440 ;	 function print_array
                           5441 ;	-----------------------------------------
   1FB9                    5442 _print_array:
   1FB9 E5 81              5443 	mov	a,sp
   1FBB 24 16              5444 	add	a,#0x16
   1FBD F5 81              5445 	mov	sp,a
   1FBF AD 82              5446 	mov	r5,dpl
   1FC1 AE 83              5447 	mov	r6,dph
   1FC3 AF F0              5448 	mov	r7,b
                           5449 ;	cJSON.c:336: char *out=0,*ptr,*ret;int len=5;
   1FC5 E5 81              5450 	mov	a,sp
   1FC7 24 EE              5451 	add	a,#0xee
   1FC9 F8                 5452 	mov	r0,a
   1FCA E4                 5453 	clr	a
   1FCB F6                 5454 	mov	@r0,a
   1FCC 08                 5455 	inc	r0
   1FCD F6                 5456 	mov	@r0,a
   1FCE 08                 5457 	inc	r0
   1FCF 76 00              5458 	mov	@r0,#0x00
   1FD1 E5 81              5459 	mov	a,sp
   1FD3 24 F4              5460 	add	a,#0xf4
   1FD5 F8                 5461 	mov	r0,a
   1FD6 76 05              5462 	mov	@r0,#0x05
   1FD8 08                 5463 	inc	r0
   1FD9 76 00              5464 	mov	@r0,#0x00
                           5465 ;	cJSON.c:337: cJSON *child=item->child;
   1FDB 74 06              5466 	mov	a,#0x06
   1FDD 2D                 5467 	add	a,r5
   1FDE FD                 5468 	mov	r5,a
   1FDF E4                 5469 	clr	a
   1FE0 3E                 5470 	addc	a,r6
   1FE1 FE                 5471 	mov	r6,a
   1FE2 8D 82              5472 	mov	dpl,r5
   1FE4 8E 83              5473 	mov	dph,r6
   1FE6 8F F0              5474 	mov	b,r7
   1FE8 12s00r00           5475 	lcall	__gptrget
   1FEB FC                 5476 	mov	r4,a
   1FEC A3                 5477 	inc	dptr
   1FED 12s00r00           5478 	lcall	__gptrget
   1FF0 FB                 5479 	mov	r3,a
   1FF1 A3                 5480 	inc	dptr
   1FF2 12s00r00           5481 	lcall	__gptrget
   1FF5 FA                 5482 	mov	r2,a
   1FF6 E5 81              5483 	mov	a,sp
   1FF8 24 F6              5484 	add	a,#0xf6
   1FFA F8                 5485 	mov	r0,a
   1FFB A6 04              5486 	mov	@r0,ar4
   1FFD 08                 5487 	inc	r0
   1FFE A6 03              5488 	mov	@r0,ar3
   2000 08                 5489 	inc	r0
   2001 A6 02              5490 	mov	@r0,ar2
                           5491 ;	cJSON.c:338: int numentries=0,i=0,fail=0;
   2003 E5 81              5492 	mov	a,sp
   2005 24 FD              5493 	add	a,#0xfd
   2007 F8                 5494 	mov	r0,a
   2008 E4                 5495 	clr	a
   2009 F6                 5496 	mov	@r0,a
   200A 08                 5497 	inc	r0
   200B F6                 5498 	mov	@r0,a
   200C E5 81              5499 	mov	a,sp
   200E 24 FB              5500 	add	a,#0xfb
   2010 F8                 5501 	mov	r0,a
   2011 E4                 5502 	clr	a
   2012 F6                 5503 	mov	@r0,a
   2013 08                 5504 	inc	r0
   2014 F6                 5505 	mov	@r0,a
                           5506 ;	cJSON.c:341: while (child) numentries++,child=child->next;
   2015 7A 00              5507 	mov	r2,#0x00
   2017 7C 00              5508 	mov	r4,#0x00
   2019                    5509 00101$:
   2019 E5 81              5510 	mov	a,sp
   201B 24 F6              5511 	add	a,#0xf6
   201D F8                 5512 	mov	r0,a
   201E E6                 5513 	mov	a,@r0
   201F 08                 5514 	inc	r0
   2020 46                 5515 	orl	a,@r0
   2021 60 30              5516 	jz	00160$
   2023 0A                 5517 	inc	r2
   2024 BA 00 01           5518 	cjne	r2,#0x00,00184$
   2027 0C                 5519 	inc	r4
   2028                    5520 00184$:
   2028 E5 81              5521 	mov	a,sp
   202A 24 FD              5522 	add	a,#0xfd
   202C F8                 5523 	mov	r0,a
   202D A6 02              5524 	mov	@r0,ar2
   202F 08                 5525 	inc	r0
   2030 A6 04              5526 	mov	@r0,ar4
   2032 E5 81              5527 	mov	a,sp
   2034 24 F6              5528 	add	a,#0xf6
   2036 F8                 5529 	mov	r0,a
   2037 86 82              5530 	mov	dpl,@r0
   2039 08                 5531 	inc	r0
   203A 86 83              5532 	mov	dph,@r0
   203C 08                 5533 	inc	r0
   203D 86 F0              5534 	mov	b,@r0
   203F 12s00r00           5535 	lcall	__gptrget
   2042 18                 5536 	dec	r0
   2043 18                 5537 	dec	r0
   2044 F6                 5538 	mov	@r0,a
   2045 A3                 5539 	inc	dptr
   2046 12s00r00           5540 	lcall	__gptrget
   2049 08                 5541 	inc	r0
   204A F6                 5542 	mov	@r0,a
   204B A3                 5543 	inc	dptr
   204C 12s00r00           5544 	lcall	__gptrget
   204F 08                 5545 	inc	r0
   2050 F6                 5546 	mov	@r0,a
   2051 80 C6              5547 	sjmp	00101$
   2053                    5548 00160$:
   2053 E5 81              5549 	mov	a,sp
   2055 24 FD              5550 	add	a,#0xfd
   2057 F8                 5551 	mov	r0,a
   2058 A6 02              5552 	mov	@r0,ar2
   205A 08                 5553 	inc	r0
   205B A6 04              5554 	mov	@r0,ar4
                           5555 ;	cJSON.c:343: if (!numentries)
   205D EA                 5556 	mov	a,r2
   205E 4C                 5557 	orl	a,r4
   205F 70 5F              5558 	jnz	00107$
                           5559 ;	cJSON.c:345: out=(char*)cJSON_malloc(3);
   2061 90 00 03           5560 	mov	dptr,#0x0003
   2064 78r00              5561 	mov	r0,#_malloc
   2066 79s00              5562 	mov	r1,#(_malloc >> 8)
   2068 7As00              5563 	mov	r2,#(_malloc >> 16)
   206A 12s00r00           5564 	lcall	__sdcc_banked_call
   206D AF 82              5565 	mov	r7,dpl
   206F AE 83              5566 	mov	r6,dph
   2071 E5 81              5567 	mov	a,sp
   2073 24 EE              5568 	add	a,#0xee
   2075 F8                 5569 	mov	r0,a
   2076 A6 07              5570 	mov	@r0,ar7
   2078 08                 5571 	inc	r0
   2079 A6 06              5572 	mov	@r0,ar6
   207B 08                 5573 	inc	r0
   207C 76 00              5574 	mov	@r0,#0x00
                           5575 ;	cJSON.c:346: if (out) strcpy(out,"[]");
   207E E5 81              5576 	mov	a,sp
   2080 24 EE              5577 	add	a,#0xee
   2082 F8                 5578 	mov	r0,a
   2083 E6                 5579 	mov	a,@r0
   2084 08                 5580 	inc	r0
   2085 46                 5581 	orl	a,@r0
   2086 60 28              5582 	jz	00105$
   2088 74r2C              5583 	mov	a,#__str_8
   208A C0 E0              5584 	push	acc
   208C 74s00              5585 	mov	a,#(__str_8 >> 8)
   208E C0 E0              5586 	push	acc
   2090 74 80              5587 	mov	a,#0x80
   2092 C0 E0              5588 	push	acc
   2094 E5 81              5589 	mov	a,sp
   2096 24 EB              5590 	add	a,#0xeb
   2098 F8                 5591 	mov	r0,a
   2099 86 82              5592 	mov	dpl,@r0
   209B 08                 5593 	inc	r0
   209C 86 83              5594 	mov	dph,@r0
   209E 08                 5595 	inc	r0
   209F 86 F0              5596 	mov	b,@r0
   20A1 78r00              5597 	mov	r0,#_strcpy
   20A3 79s00              5598 	mov	r1,#(_strcpy >> 8)
   20A5 7As00              5599 	mov	r2,#(_strcpy >> 16)
   20A7 12s00r00           5600 	lcall	__sdcc_banked_call
   20AA 15 81              5601 	dec	sp
   20AC 15 81              5602 	dec	sp
   20AE 15 81              5603 	dec	sp
   20B0                    5604 00105$:
                           5605 ;	cJSON.c:347: return out;
   20B0 E5 81              5606 	mov	a,sp
   20B2 24 EE              5607 	add	a,#0xee
   20B4 F8                 5608 	mov	r0,a
   20B5 86 82              5609 	mov	dpl,@r0
   20B7 08                 5610 	inc	r0
   20B8 86 83              5611 	mov	dph,@r0
   20BA 08                 5612 	inc	r0
   20BB 86 F0              5613 	mov	b,@r0
   20BD 02s25r1B           5614 	ljmp	00137$
   20C0                    5615 00107$:
                           5616 ;	cJSON.c:350: entries=(char**)cJSON_malloc(numentries*sizeof(char*));
   20C0 C0 05              5617 	push	ar5
   20C2 C0 06              5618 	push	ar6
   20C4 C0 07              5619 	push	ar7
   20C6 C0 07              5620 	push	ar7
   20C8 C0 06              5621 	push	ar6
   20CA C0 05              5622 	push	ar5
   20CC C0 02              5623 	push	ar2
   20CE C0 04              5624 	push	ar4
   20D0 90 00 03           5625 	mov	dptr,#0x0003
   20D3 12s00r00           5626 	lcall	__mulint
   20D6 AB 82              5627 	mov	r3,dpl
   20D8 AC 83              5628 	mov	r4,dph
   20DA 15 81              5629 	dec	sp
   20DC 15 81              5630 	dec	sp
   20DE D0 05              5631 	pop	ar5
   20E0 D0 06              5632 	pop	ar6
   20E2 D0 07              5633 	pop	ar7
   20E4 E5 81              5634 	mov	a,sp
   20E6 24 FC              5635 	add	a,#0xfc
   20E8 F8                 5636 	mov	r0,a
   20E9 A6 03              5637 	mov	@r0,ar3
   20EB 08                 5638 	inc	r0
   20EC A6 04              5639 	mov	@r0,ar4
   20EE E5 81              5640 	mov	a,sp
   20F0 24 FC              5641 	add	a,#0xfc
   20F2 F8                 5642 	mov	r0,a
   20F3 86 82              5643 	mov	dpl,@r0
   20F5 08                 5644 	inc	r0
   20F6 86 83              5645 	mov	dph,@r0
   20F8 C0 06              5646 	push	ar6
   20FA C0 05              5647 	push	ar5
   20FC 78r00              5648 	mov	r0,#_malloc
   20FE 79s00              5649 	mov	r1,#(_malloc >> 8)
   2100 7As00              5650 	mov	r2,#(_malloc >> 16)
   2102 12s00r00           5651 	lcall	__sdcc_banked_call
   2105 AA 82              5652 	mov	r2,dpl
   2107 AF 83              5653 	mov	r7,dph
   2109 D0 05              5654 	pop	ar5
   210B D0 06              5655 	pop	ar6
   210D E5 81              5656 	mov	a,sp
   210F 24 E8              5657 	add	a,#0xe8
   2111 F8                 5658 	mov	r0,a
   2112 A6 02              5659 	mov	@r0,ar2
   2114 08                 5660 	inc	r0
   2115 A6 07              5661 	mov	@r0,ar7
   2117 08                 5662 	inc	r0
   2118 76 00              5663 	mov	@r0,#0x00
                           5664 ;	cJSON.c:351: if (!entries) return 0;
   211A D0 07              5665 	pop	ar7
   211C D0 06              5666 	pop	ar6
   211E D0 05              5667 	pop	ar5
   2120 E5 81              5668 	mov	a,sp
   2122 24 EB              5669 	add	a,#0xeb
   2124 F8                 5670 	mov	r0,a
   2125 E6                 5671 	mov	a,@r0
   2126 08                 5672 	inc	r0
   2127 46                 5673 	orl	a,@r0
   2128 70 08              5674 	jnz	00109$
   212A 90 00 00           5675 	mov	dptr,#0x0000
   212D F5 F0              5676 	mov	b,a
   212F 02s25r1B           5677 	ljmp	00137$
   2132                    5678 00109$:
                           5679 ;	cJSON.c:352: memset(entries,0,numentries*sizeof(char*));
   2132 E5 81              5680 	mov	a,sp
   2134 24 EB              5681 	add	a,#0xeb
   2136 F8                 5682 	mov	r0,a
   2137 86 02              5683 	mov	ar2,@r0
   2139 08                 5684 	inc	r0
   213A 86 03              5685 	mov	ar3,@r0
   213C 08                 5686 	inc	r0
   213D 86 04              5687 	mov	ar4,@r0
   213F C0 07              5688 	push	ar7
   2141 C0 06              5689 	push	ar6
   2143 C0 05              5690 	push	ar5
   2145 E5 81              5691 	mov	a,sp
   2147 24 FC              5692 	add	a,#0xfc
   2149 F8                 5693 	mov	r0,a
   214A E6                 5694 	mov	a,@r0
   214B C0 E0              5695 	push	acc
   214D 08                 5696 	inc	r0
   214E E6                 5697 	mov	a,@r0
   214F C0 E0              5698 	push	acc
   2151 E4                 5699 	clr	a
   2152 C0 E0              5700 	push	acc
   2154 8A 82              5701 	mov	dpl,r2
   2156 8B 83              5702 	mov	dph,r3
   2158 8C F0              5703 	mov	b,r4
   215A 78r00              5704 	mov	r0,#_memset
   215C 79s00              5705 	mov	r1,#(_memset >> 8)
   215E 7As00              5706 	mov	r2,#(_memset >> 16)
   2160 12s00r00           5707 	lcall	__sdcc_banked_call
   2163 15 81              5708 	dec	sp
   2165 15 81              5709 	dec	sp
   2167 15 81              5710 	dec	sp
   2169 D0 05              5711 	pop	ar5
   216B D0 06              5712 	pop	ar6
   216D D0 07              5713 	pop	ar7
                           5714 ;	cJSON.c:354: child=item->child;
   216F 8D 82              5715 	mov	dpl,r5
   2171 8E 83              5716 	mov	dph,r6
   2173 8F F0              5717 	mov	b,r7
   2175 12s00r00           5718 	lcall	__gptrget
   2178 FD                 5719 	mov	r5,a
   2179 A3                 5720 	inc	dptr
   217A 12s00r00           5721 	lcall	__gptrget
   217D FE                 5722 	mov	r6,a
   217E A3                 5723 	inc	dptr
   217F 12s00r00           5724 	lcall	__gptrget
   2182 FF                 5725 	mov	r7,a
   2183 E5 81              5726 	mov	a,sp
   2185 24 F6              5727 	add	a,#0xf6
   2187 F8                 5728 	mov	r0,a
   2188 A6 05              5729 	mov	@r0,ar5
   218A 08                 5730 	inc	r0
   218B A6 06              5731 	mov	@r0,ar6
   218D 08                 5732 	inc	r0
   218E A6 07              5733 	mov	@r0,ar7
                           5734 ;	cJSON.c:355: while (child && !fail)
   2190 E5 81              5735 	mov	a,sp
   2192 24 E6              5736 	add	a,#0xe6
   2194 F8                 5737 	mov	r0,a
   2195 74 01              5738 	mov	a,#0x01
   2197 26                 5739 	add	a,@r0
   2198 FE                 5740 	mov	r6,a
   2199 E4                 5741 	clr	a
   219A 08                 5742 	inc	r0
   219B 36                 5743 	addc	a,@r0
   219C FF                 5744 	mov	r7,a
   219D E5 81              5745 	mov	a,sp
   219F 24 F9              5746 	add	a,#0xf9
   21A1 F8                 5747 	mov	r0,a
   21A2 E4                 5748 	clr	a
   21A3 F6                 5749 	mov	@r0,a
   21A4 08                 5750 	inc	r0
   21A5 F6                 5751 	mov	@r0,a
   21A6                    5752 00114$:
   21A6 E5 81              5753 	mov	a,sp
   21A8 24 F6              5754 	add	a,#0xf6
   21AA F8                 5755 	mov	r0,a
   21AB E6                 5756 	mov	a,@r0
   21AC 08                 5757 	inc	r0
   21AD 46                 5758 	orl	a,@r0
   21AE 70 03              5759 	jnz	00188$
   21B0 02s22rE1           5760 	ljmp	00116$
   21B3                    5761 00188$:
   21B3 E5 81              5762 	mov	a,sp
   21B5 24 FB              5763 	add	a,#0xfb
   21B7 F8                 5764 	mov	r0,a
   21B8 E6                 5765 	mov	a,@r0
   21B9 08                 5766 	inc	r0
   21BA 46                 5767 	orl	a,@r0
   21BB 60 03              5768 	jz	00189$
   21BD 02s22rE1           5769 	ljmp	00116$
   21C0                    5770 00189$:
                           5771 ;	cJSON.c:357: ret=print_value(child,depth+1,fmt);
   21C0 C0 07              5772 	push	ar7
   21C2 C0 06              5773 	push	ar6
   21C4 E5 81              5774 	mov	a,sp
   21C6 24 E2              5775 	add	a,#0xe2
   21C8 F8                 5776 	mov	r0,a
   21C9 E6                 5777 	mov	a,@r0
   21CA C0 E0              5778 	push	acc
   21CC 08                 5779 	inc	r0
   21CD E6                 5780 	mov	a,@r0
   21CE C0 E0              5781 	push	acc
   21D0 C0 06              5782 	push	ar6
   21D2 C0 07              5783 	push	ar7
   21D4 E5 81              5784 	mov	a,sp
   21D6 24 F0              5785 	add	a,#0xf0
   21D8 F8                 5786 	mov	r0,a
   21D9 86 82              5787 	mov	dpl,@r0
   21DB 08                 5788 	inc	r0
   21DC 86 83              5789 	mov	dph,@r0
   21DE 08                 5790 	inc	r0
   21DF 86 F0              5791 	mov	b,@r0
   21E1 78r4A              5792 	mov	r0,#_print_value
   21E3 79s1B              5793 	mov	r1,#(_print_value >> 8)
   21E5 7As00              5794 	mov	r2,#(_print_value >> 16)
   21E7 12s00r00           5795 	lcall	__sdcc_banked_call
   21EA AA 82              5796 	mov	r2,dpl
   21EC AB 83              5797 	mov	r3,dph
   21EE AD F0              5798 	mov	r5,b
   21F0 E5 81              5799 	mov	a,sp
   21F2 24 FC              5800 	add	a,#0xfc
   21F4 F5 81              5801 	mov	sp,a
   21F6 D0 06              5802 	pop	ar6
   21F8 D0 07              5803 	pop	ar7
   21FA 8A 04              5804 	mov	ar4,r2
                           5805 ;	cJSON.c:358: entries[i++]=ret;
   21FC C0 06              5806 	push	ar6
   21FE C0 07              5807 	push	ar7
   2200 E5 81              5808 	mov	a,sp
   2202 24 F7              5809 	add	a,#0xf7
   2204 F8                 5810 	mov	r0,a
   2205 86 02              5811 	mov	ar2,@r0
   2207 08                 5812 	inc	r0
   2208 86 07              5813 	mov	ar7,@r0
   220A E5 81              5814 	mov	a,sp
   220C 24 F7              5815 	add	a,#0xf7
   220E F8                 5816 	mov	r0,a
   220F 06                 5817 	inc	@r0
   2210 B6 00 02           5818 	cjne	@r0,#0x00,00190$
   2213 08                 5819 	inc	r0
   2214 06                 5820 	inc	@r0
   2215                    5821 00190$:
   2215 C0 05              5822 	push	ar5
   2217 C0 04              5823 	push	ar4
   2219 C0 03              5824 	push	ar3
   221B C0 02              5825 	push	ar2
   221D C0 07              5826 	push	ar7
   221F 90 00 03           5827 	mov	dptr,#0x0003
   2222 12s00r00           5828 	lcall	__mulint
   2225 AE 82              5829 	mov	r6,dpl
   2227 AF 83              5830 	mov	r7,dph
   2229 15 81              5831 	dec	sp
   222B 15 81              5832 	dec	sp
   222D D0 03              5833 	pop	ar3
   222F D0 04              5834 	pop	ar4
   2231 D0 05              5835 	pop	ar5
   2233 E5 81              5836 	mov	a,sp
   2235 24 E9              5837 	add	a,#0xe9
   2237 F8                 5838 	mov	r0,a
   2238 EE                 5839 	mov	a,r6
   2239 26                 5840 	add	a,@r0
   223A FE                 5841 	mov	r6,a
   223B EF                 5842 	mov	a,r7
   223C 08                 5843 	inc	r0
   223D 36                 5844 	addc	a,@r0
   223E FF                 5845 	mov	r7,a
   223F 08                 5846 	inc	r0
   2240 86 02              5847 	mov	ar2,@r0
   2242 8E 82              5848 	mov	dpl,r6
   2244 8F 83              5849 	mov	dph,r7
   2246 8A F0              5850 	mov	b,r2
   2248 EC                 5851 	mov	a,r4
   2249 12s00r00           5852 	lcall	__gptrput
   224C A3                 5853 	inc	dptr
   224D EB                 5854 	mov	a,r3
   224E 12s00r00           5855 	lcall	__gptrput
   2251 A3                 5856 	inc	dptr
   2252 ED                 5857 	mov	a,r5
   2253 12s00r00           5858 	lcall	__gptrput
                           5859 ;	cJSON.c:359: if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
   2256 D0 07              5860 	pop	ar7
   2258 D0 06              5861 	pop	ar6
   225A EC                 5862 	mov	a,r4
   225B 4B                 5863 	orl	a,r3
   225C 60 57              5864 	jz	00111$
   225E 8C 82              5865 	mov	dpl,r4
   2260 8B 83              5866 	mov	dph,r3
   2262 8D F0              5867 	mov	b,r5
   2264 C0 07              5868 	push	ar7
   2266 C0 06              5869 	push	ar6
   2268 78r00              5870 	mov	r0,#_strlen
   226A 79s00              5871 	mov	r1,#(_strlen >> 8)
   226C 7As00              5872 	mov	r2,#(_strlen >> 16)
   226E 12s00r00           5873 	lcall	__sdcc_banked_call
   2271 E5 82              5874 	mov	a,dpl
   2273 85 83 F0           5875 	mov	b,dph
   2276 D0 06              5876 	pop	ar6
   2278 D0 07              5877 	pop	ar7
   227A 24 02              5878 	add	a,#0x02
   227C FC                 5879 	mov	r4,a
   227D E4                 5880 	clr	a
   227E 35 F0              5881 	addc	a,b
   2280 FD                 5882 	mov	r5,a
   2281 E5 81              5883 	mov	a,sp
   2283 24 E4              5884 	add	a,#0xe4
   2285 F8                 5885 	mov	r0,a
   2286 E6                 5886 	mov	a,@r0
   2287 08                 5887 	inc	r0
   2288 46                 5888 	orl	a,@r0
   2289 60 04              5889 	jz	00139$
   228B 7B 01              5890 	mov	r3,#0x01
   228D 80 02              5891 	sjmp	00140$
   228F                    5892 00139$:
   228F 7B 00              5893 	mov	r3,#0x00
   2291                    5894 00140$:
   2291 7A 00              5895 	mov	r2,#0x00
   2293 EB                 5896 	mov	a,r3
   2294 2C                 5897 	add	a,r4
   2295 FC                 5898 	mov	r4,a
   2296 EA                 5899 	mov	a,r2
   2297 3D                 5900 	addc	a,r5
   2298 FD                 5901 	mov	r5,a
   2299 E5 81              5902 	mov	a,sp
   229B 24 F4              5903 	add	a,#0xf4
   229D F8                 5904 	mov	r0,a
   229E 86 02              5905 	mov	ar2,@r0
   22A0 08                 5906 	inc	r0
   22A1 86 03              5907 	mov	ar3,@r0
   22A3 EC                 5908 	mov	a,r4
   22A4 2A                 5909 	add	a,r2
   22A5 FC                 5910 	mov	r4,a
   22A6 ED                 5911 	mov	a,r5
   22A7 3B                 5912 	addc	a,r3
   22A8 FD                 5913 	mov	r5,a
   22A9 E5 81              5914 	mov	a,sp
   22AB 24 F4              5915 	add	a,#0xf4
   22AD F8                 5916 	mov	r0,a
   22AE A6 04              5917 	mov	@r0,ar4
   22B0 08                 5918 	inc	r0
   22B1 A6 05              5919 	mov	@r0,ar5
   22B3 80 0A              5920 	sjmp	00112$
   22B5                    5921 00111$:
   22B5 E5 81              5922 	mov	a,sp
   22B7 24 FB              5923 	add	a,#0xfb
   22B9 F8                 5924 	mov	r0,a
   22BA 76 01              5925 	mov	@r0,#0x01
   22BC 08                 5926 	inc	r0
   22BD 76 00              5927 	mov	@r0,#0x00
   22BF                    5928 00112$:
                           5929 ;	cJSON.c:360: child=child->next;
   22BF E5 81              5930 	mov	a,sp
   22C1 24 F6              5931 	add	a,#0xf6
   22C3 F8                 5932 	mov	r0,a
   22C4 86 82              5933 	mov	dpl,@r0
   22C6 08                 5934 	inc	r0
   22C7 86 83              5935 	mov	dph,@r0
   22C9 08                 5936 	inc	r0
   22CA 86 F0              5937 	mov	b,@r0
   22CC 12s00r00           5938 	lcall	__gptrget
   22CF 18                 5939 	dec	r0
   22D0 18                 5940 	dec	r0
   22D1 F6                 5941 	mov	@r0,a
   22D2 A3                 5942 	inc	dptr
   22D3 12s00r00           5943 	lcall	__gptrget
   22D6 08                 5944 	inc	r0
   22D7 F6                 5945 	mov	@r0,a
   22D8 A3                 5946 	inc	dptr
   22D9 12s00r00           5947 	lcall	__gptrget
   22DC 08                 5948 	inc	r0
   22DD F6                 5949 	mov	@r0,a
   22DE 02s21rA6           5950 	ljmp	00114$
   22E1                    5951 00116$:
                           5952 ;	cJSON.c:364: if (!fail) out=(char*)cJSON_malloc(len);
   22E1 E5 81              5953 	mov	a,sp
   22E3 24 FB              5954 	add	a,#0xfb
   22E5 F8                 5955 	mov	r0,a
   22E6 E6                 5956 	mov	a,@r0
   22E7 08                 5957 	inc	r0
   22E8 46                 5958 	orl	a,@r0
   22E9 70 28              5959 	jnz	00118$
   22EB E5 81              5960 	mov	a,sp
   22ED 24 F4              5961 	add	a,#0xf4
   22EF F8                 5962 	mov	r0,a
   22F0 86 06              5963 	mov	ar6,@r0
   22F2 08                 5964 	inc	r0
   22F3 86 07              5965 	mov	ar7,@r0
   22F5 8E 82              5966 	mov	dpl,r6
   22F7 8F 83              5967 	mov	dph,r7
   22F9 78r00              5968 	mov	r0,#_malloc
   22FB 79s00              5969 	mov	r1,#(_malloc >> 8)
   22FD 7As00              5970 	mov	r2,#(_malloc >> 16)
   22FF 12s00r00           5971 	lcall	__sdcc_banked_call
   2302 AE 82              5972 	mov	r6,dpl
   2304 AF 83              5973 	mov	r7,dph
   2306 E5 81              5974 	mov	a,sp
   2308 24 EE              5975 	add	a,#0xee
   230A F8                 5976 	mov	r0,a
   230B A6 06              5977 	mov	@r0,ar6
   230D 08                 5978 	inc	r0
   230E A6 07              5979 	mov	@r0,ar7
   2310 08                 5980 	inc	r0
   2311 76 00              5981 	mov	@r0,#0x00
   2313                    5982 00118$:
                           5983 ;	cJSON.c:366: if (!out) fail=1;
   2313 E5 81              5984 	mov	a,sp
   2315 24 EE              5985 	add	a,#0xee
   2317 F8                 5986 	mov	r0,a
   2318 E6                 5987 	mov	a,@r0
   2319 08                 5988 	inc	r0
   231A 46                 5989 	orl	a,@r0
   231B 70 0A              5990 	jnz	00120$
   231D E5 81              5991 	mov	a,sp
   231F 24 FB              5992 	add	a,#0xfb
   2321 F8                 5993 	mov	r0,a
   2322 76 01              5994 	mov	@r0,#0x01
   2324 08                 5995 	inc	r0
   2325 76 00              5996 	mov	@r0,#0x00
   2327                    5997 00120$:
                           5998 ;	cJSON.c:369: if (fail)
   2327 E5 81              5999 	mov	a,sp
   2329 24 FB              6000 	add	a,#0xfb
   232B F8                 6001 	mov	r0,a
   232C E6                 6002 	mov	a,@r0
   232D 08                 6003 	inc	r0
   232E 46                 6004 	orl	a,@r0
   232F 60 29              6005 	jz	00124$
                           6006 ;	cJSON.c:371: for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
   2331 7E 00              6007 	mov	r6,#0x00
   2333 7F 00              6008 	mov	r7,#0x00
   2335                    6009 00129$:
   2335 E5 81              6010 	mov	a,sp
   2337 24 FD              6011 	add	a,#0xfd
   2339 F8                 6012 	mov	r0,a
   233A C3                 6013 	clr	c
   233B EE                 6014 	mov	a,r6
   233C 96                 6015 	subb	a,@r0
   233D EF                 6016 	mov	a,r7
   233E 64 80              6017 	xrl	a,#0x80
   2340 08                 6018 	inc	r0
   2341 86 F0              6019 	mov	b,@r0
   2343 63 F0 80           6020 	xrl	b,#0x80
   2346 95 F0              6021 	subb	a,b
   2348 50 07              6022 	jnc	00132$
   234A 0E                 6023 	inc	r6
   234B BE 00 E7           6024 	cjne	r6,#0x00,00129$
   234E 0F                 6025 	inc	r7
   234F 80 E4              6026 	sjmp	00129$
   2351                    6027 00132$:
                           6028 ;	cJSON.c:373: return 0;
   2351 90 00 00           6029 	mov	dptr,#0x0000
   2354 75 F0 00           6030 	mov	b,#0x00
   2357 02s25r1B           6031 	ljmp	00137$
   235A                    6032 00124$:
                           6033 ;	cJSON.c:377: *out='[';
   235A E5 81              6034 	mov	a,sp
   235C 24 EE              6035 	add	a,#0xee
   235E F8                 6036 	mov	r0,a
   235F 86 82              6037 	mov	dpl,@r0
   2361 08                 6038 	inc	r0
   2362 86 83              6039 	mov	dph,@r0
   2364 08                 6040 	inc	r0
   2365 86 F0              6041 	mov	b,@r0
   2367 74 5B              6042 	mov	a,#0x5B
   2369 12s00r00           6043 	lcall	__gptrput
                           6044 ;	cJSON.c:378: ptr=out+1;*ptr=0;
   236C E5 81              6045 	mov	a,sp
   236E 24 EE              6046 	add	a,#0xee
   2370 F8                 6047 	mov	r0,a
   2371 E5 81              6048 	mov	a,sp
   2373 24 F1              6049 	add	a,#0xf1
   2375 F9                 6050 	mov	r1,a
   2376 74 01              6051 	mov	a,#0x01
   2378 26                 6052 	add	a,@r0
   2379 F7                 6053 	mov	@r1,a
   237A E4                 6054 	clr	a
   237B 08                 6055 	inc	r0
   237C 36                 6056 	addc	a,@r0
   237D 09                 6057 	inc	r1
   237E F7                 6058 	mov	@r1,a
   237F 08                 6059 	inc	r0
   2380 09                 6060 	inc	r1
   2381 E6                 6061 	mov	a,@r0
   2382 F7                 6062 	mov	@r1,a
   2383 E5 81              6063 	mov	a,sp
   2385 24 F1              6064 	add	a,#0xf1
   2387 F8                 6065 	mov	r0,a
   2388 86 82              6066 	mov	dpl,@r0
   238A 08                 6067 	inc	r0
   238B 86 83              6068 	mov	dph,@r0
   238D 08                 6069 	inc	r0
   238E 86 F0              6070 	mov	b,@r0
   2390 E4                 6071 	clr	a
   2391 12s00r00           6072 	lcall	__gptrput
                           6073 ;	cJSON.c:379: for (i=0;i<numentries;i++)
   2394 E5 81              6074 	mov	a,sp
   2396 24 FD              6075 	add	a,#0xfd
   2398 F8                 6076 	mov	r0,a
   2399 A9 81              6077 	mov	r1,sp
   239B 19                 6078 	dec	r1
   239C E6                 6079 	mov	a,@r0
   239D 24 FF              6080 	add	a,#0xFF
   239F F7                 6081 	mov	@r1,a
   23A0 08                 6082 	inc	r0
   23A1 E6                 6083 	mov	a,@r0
   23A2 34 FF              6084 	addc	a,#0xFF
   23A4 09                 6085 	inc	r1
   23A5 F7                 6086 	mov	@r1,a
   23A6 E5 81              6087 	mov	a,sp
   23A8 24 F9              6088 	add	a,#0xf9
   23AA F8                 6089 	mov	r0,a
   23AB E4                 6090 	clr	a
   23AC F6                 6091 	mov	@r0,a
   23AD 08                 6092 	inc	r0
   23AE F6                 6093 	mov	@r0,a
   23AF 7D 00              6094 	mov	r5,#0x00
   23B1 7E 00              6095 	mov	r6,#0x00
   23B3                    6096 00133$:
   23B3 E5 81              6097 	mov	a,sp
   23B5 24 F9              6098 	add	a,#0xf9
   23B7 F8                 6099 	mov	r0,a
   23B8 E5 81              6100 	mov	a,sp
   23BA 24 FD              6101 	add	a,#0xfd
   23BC F9                 6102 	mov	r1,a
   23BD C3                 6103 	clr	c
   23BE E6                 6104 	mov	a,@r0
   23BF 97                 6105 	subb	a,@r1
   23C0 08                 6106 	inc	r0
   23C1 E6                 6107 	mov	a,@r0
   23C2 64 80              6108 	xrl	a,#0x80
   23C4 09                 6109 	inc	r1
   23C5 87 F0              6110 	mov	b,@r1
   23C7 63 F0 80           6111 	xrl	b,#0x80
   23CA 95 F0              6112 	subb	a,b
   23CC 40 03              6113 	jc	00198$
   23CE 02s24rE3           6114 	ljmp	00136$
   23D1                    6115 00198$:
                           6116 ;	cJSON.c:381: strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
   23D1 E5 81              6117 	mov	a,sp
   23D3 24 EB              6118 	add	a,#0xeb
   23D5 F8                 6119 	mov	r0,a
   23D6 ED                 6120 	mov	a,r5
   23D7 26                 6121 	add	a,@r0
   23D8 FA                 6122 	mov	r2,a
   23D9 EE                 6123 	mov	a,r6
   23DA 08                 6124 	inc	r0
   23DB 36                 6125 	addc	a,@r0
   23DC FC                 6126 	mov	r4,a
   23DD 08                 6127 	inc	r0
   23DE 86 07              6128 	mov	ar7,@r0
   23E0 C0 05              6129 	push	ar5
   23E2 C0 06              6130 	push	ar6
   23E4 8A 82              6131 	mov	dpl,r2
   23E6 8C 83              6132 	mov	dph,r4
   23E8 8F F0              6133 	mov	b,r7
   23EA 12s00r00           6134 	lcall	__gptrget
   23ED FB                 6135 	mov	r3,a
   23EE A3                 6136 	inc	dptr
   23EF 12s00r00           6137 	lcall	__gptrget
   23F2 FD                 6138 	mov	r5,a
   23F3 A3                 6139 	inc	dptr
   23F4 12s00r00           6140 	lcall	__gptrget
   23F7 FE                 6141 	mov	r6,a
   23F8 C0 07              6142 	push	ar7
   23FA C0 06              6143 	push	ar6
   23FC C0 05              6144 	push	ar5
   23FE C0 04              6145 	push	ar4
   2400 C0 02              6146 	push	ar2
   2402 C0 03              6147 	push	ar3
   2404 C0 05              6148 	push	ar5
   2406 C0 06              6149 	push	ar6
   2408 E5 81              6150 	mov	a,sp
   240A 24 E7              6151 	add	a,#0xe7
   240C F8                 6152 	mov	r0,a
   240D 86 82              6153 	mov	dpl,@r0
   240F 08                 6154 	inc	r0
   2410 86 83              6155 	mov	dph,@r0
   2412 08                 6156 	inc	r0
   2413 86 F0              6157 	mov	b,@r0
   2415 78r00              6158 	mov	r0,#_strcpy
   2417 79s00              6159 	mov	r1,#(_strcpy >> 8)
   2419 7As00              6160 	mov	r2,#(_strcpy >> 16)
   241B 12s00r00           6161 	lcall	__sdcc_banked_call
   241E 15 81              6162 	dec	sp
   2420 15 81              6163 	dec	sp
   2422 15 81              6164 	dec	sp
   2424 D0 02              6165 	pop	ar2
   2426 D0 04              6166 	pop	ar4
   2428 D0 05              6167 	pop	ar5
   242A D0 06              6168 	pop	ar6
   242C D0 07              6169 	pop	ar7
   242E 8A 82              6170 	mov	dpl,r2
   2430 8C 83              6171 	mov	dph,r4
   2432 8F F0              6172 	mov	b,r7
   2434 12s00r00           6173 	lcall	__gptrget
   2437 FA                 6174 	mov	r2,a
   2438 A3                 6175 	inc	dptr
   2439 12s00r00           6176 	lcall	__gptrget
   243C FC                 6177 	mov	r4,a
   243D A3                 6178 	inc	dptr
   243E 12s00r00           6179 	lcall	__gptrget
   2441 FF                 6180 	mov	r7,a
   2442 8A 82              6181 	mov	dpl,r2
   2444 8C 83              6182 	mov	dph,r4
   2446 8F F0              6183 	mov	b,r7
   2448 C0 05              6184 	push	ar5
   244A 78r00              6185 	mov	r0,#_strlen
   244C 79s00              6186 	mov	r1,#(_strlen >> 8)
   244E 7As00              6187 	mov	r2,#(_strlen >> 16)
   2450 12s00r00           6188 	lcall	__sdcc_banked_call
   2453 AE 82              6189 	mov	r6,dpl
   2455 AF 83              6190 	mov	r7,dph
   2457 D0 05              6191 	pop	ar5
   2459 E5 81              6192 	mov	a,sp
   245B 24 EF              6193 	add	a,#0xef
   245D F8                 6194 	mov	r0,a
   245E EE                 6195 	mov	a,r6
   245F 26                 6196 	add	a,@r0
   2460 F6                 6197 	mov	@r0,a
   2461 EF                 6198 	mov	a,r7
   2462 08                 6199 	inc	r0
   2463 36                 6200 	addc	a,@r0
   2464 F6                 6201 	mov	@r0,a
                           6202 ;	cJSON.c:382: if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
   2465 E5 81              6203 	mov	a,sp
   2467 24 F7              6204 	add	a,#0xf7
   2469 F8                 6205 	mov	r0,a
   246A E5 81              6206 	mov	a,sp
   246C 24 FD              6207 	add	a,#0xfd
   246E F9                 6208 	mov	r1,a
   246F 86 F0              6209 	mov	b,@r0
   2471 E7                 6210 	mov	a,@r1
   2472 B5 F0 0E           6211 	cjne	a,b,00199$
   2475 08                 6212 	inc	r0
   2476 86 F0              6213 	mov	b,@r0
   2478 09                 6214 	inc	r1
   2479 E7                 6215 	mov	a,@r1
   247A B5 F0 06           6216 	cjne	a,b,00199$
   247D D0 06              6217 	pop	ar6
   247F D0 05              6218 	pop	ar5
   2481 80 4B              6219 	sjmp	00128$
   2483                    6220 00199$:
   2483 D0 06              6221 	pop	ar6
   2485 D0 05              6222 	pop	ar5
   2487 E5 81              6223 	mov	a,sp
   2489 24 F1              6224 	add	a,#0xf1
   248B F8                 6225 	mov	r0,a
   248C 86 82              6226 	mov	dpl,@r0
   248E 08                 6227 	inc	r0
   248F 86 83              6228 	mov	dph,@r0
   2491 08                 6229 	inc	r0
   2492 86 F0              6230 	mov	b,@r0
   2494 74 2C              6231 	mov	a,#0x2C
   2496 12s00r00           6232 	lcall	__gptrput
   2499 A3                 6233 	inc	dptr
   249A 18                 6234 	dec	r0
   249B 18                 6235 	dec	r0
   249C A6 82              6236 	mov	@r0,dpl
   249E 08                 6237 	inc	r0
   249F A6 83              6238 	mov	@r0,dph
   24A1 E5 81              6239 	mov	a,sp
   24A3 24 E4              6240 	add	a,#0xe4
   24A5 F8                 6241 	mov	r0,a
   24A6 E6                 6242 	mov	a,@r0
   24A7 08                 6243 	inc	r0
   24A8 46                 6244 	orl	a,@r0
   24A9 60 12              6245 	jz	00126$
   24AB E5 81              6246 	mov	a,sp
   24AD 24 F1              6247 	add	a,#0xf1
   24AF F8                 6248 	mov	r0,a
   24B0 86 82              6249 	mov	dpl,@r0
   24B2 08                 6250 	inc	r0
   24B3 86 83              6251 	mov	dph,@r0
   24B5 08                 6252 	inc	r0
   24B6 86 F0              6253 	mov	b,@r0
   24B8 74 20              6254 	mov	a,#0x20
   24BA 12s00r00           6255 	lcall	__gptrput
   24BD                    6256 00126$:
   24BD E5 81              6257 	mov	a,sp
   24BF 24 F1              6258 	add	a,#0xf1
   24C1 F8                 6259 	mov	r0,a
   24C2 86 82              6260 	mov	dpl,@r0
   24C4 08                 6261 	inc	r0
   24C5 86 83              6262 	mov	dph,@r0
   24C7 08                 6263 	inc	r0
   24C8 86 F0              6264 	mov	b,@r0
   24CA E4                 6265 	clr	a
   24CB 12s00r00           6266 	lcall	__gptrput
   24CE                    6267 00128$:
                           6268 ;	cJSON.c:379: for (i=0;i<numentries;i++)
   24CE 74 03              6269 	mov	a,#0x03
   24D0 2D                 6270 	add	a,r5
   24D1 FD                 6271 	mov	r5,a
   24D2 E4                 6272 	clr	a
   24D3 3E                 6273 	addc	a,r6
   24D4 FE                 6274 	mov	r6,a
   24D5 E5 81              6275 	mov	a,sp
   24D7 24 F9              6276 	add	a,#0xf9
   24D9 F8                 6277 	mov	r0,a
   24DA 06                 6278 	inc	@r0
   24DB B6 00 02           6279 	cjne	@r0,#0x00,00201$
   24DE 08                 6280 	inc	r0
   24DF 06                 6281 	inc	@r0
   24E0                    6282 00201$:
   24E0 02s23rB3           6283 	ljmp	00133$
   24E3                    6284 00136$:
                           6285 ;	cJSON.c:386: *ptr++=']';*ptr++=0;
   24E3 E5 81              6286 	mov	a,sp
   24E5 24 F1              6287 	add	a,#0xf1
   24E7 F8                 6288 	mov	r0,a
   24E8 86 82              6289 	mov	dpl,@r0
   24EA 08                 6290 	inc	r0
   24EB 86 83              6291 	mov	dph,@r0
   24ED 08                 6292 	inc	r0
   24EE 86 F0              6293 	mov	b,@r0
   24F0 74 5D              6294 	mov	a,#0x5D
   24F2 12s00r00           6295 	lcall	__gptrput
   24F5 A3                 6296 	inc	dptr
   24F6 18                 6297 	dec	r0
   24F7 18                 6298 	dec	r0
   24F8 A6 82              6299 	mov	@r0,dpl
   24FA 08                 6300 	inc	r0
   24FB A6 83              6301 	mov	@r0,dph
   24FD E5 81              6302 	mov	a,sp
   24FF 24 F1              6303 	add	a,#0xf1
   2501 F8                 6304 	mov	r0,a
   2502 86 82              6305 	mov	dpl,@r0
   2504 08                 6306 	inc	r0
   2505 86 83              6307 	mov	dph,@r0
   2507 08                 6308 	inc	r0
   2508 86 F0              6309 	mov	b,@r0
   250A E4                 6310 	clr	a
   250B 12s00r00           6311 	lcall	__gptrput
                           6312 ;	cJSON.c:387: return out;	
   250E E5 81              6313 	mov	a,sp
   2510 24 EE              6314 	add	a,#0xee
   2512 F8                 6315 	mov	r0,a
   2513 86 82              6316 	mov	dpl,@r0
   2515 08                 6317 	inc	r0
   2516 86 83              6318 	mov	dph,@r0
   2518 08                 6319 	inc	r0
   2519 86 F0              6320 	mov	b,@r0
   251B                    6321 00137$:
   251B E5 81              6322 	mov	a,sp
   251D 24 EA              6323 	add	a,#0xEA
   251F F5 81              6324 	mov	sp,a
   2521 02s00r00           6325 	ljmp	__sdcc_banked_ret
                           6326 ;------------------------------------------------------------
                           6327 ;Allocation info for local variables in function 'parse_object'
                           6328 ;------------------------------------------------------------
                           6329 ;value                     Allocated to stack - sp -26
                           6330 ;item                      Allocated to stack - sp -20
                           6331 ;child                     Allocated to stack - sp -17
                           6332 ;new_item                  Allocated to stack - sp -14
                           6333 ;sloc0                     Allocated to stack - sp -11
                           6334 ;sloc1                     Allocated to stack - sp -8
                           6335 ;sloc2                     Allocated to stack - sp -5
                           6336 ;sloc3                     Allocated to stack - sp -2
                           6337 ;------------------------------------------------------------
                           6338 ;	cJSON.c:391: static const char *parse_object(cJSON *item,const char *value)
                           6339 ;	-----------------------------------------
                           6340 ;	 function parse_object
                           6341 ;	-----------------------------------------
   2524                    6342 _parse_object:
   2524 C0 82              6343 	push	dpl
   2526 C0 83              6344 	push	dph
   2528 C0 F0              6345 	push	b
   252A E5 81              6346 	mov	a,sp
   252C 24 12              6347 	add	a,#0x12
                           6348 ;	cJSON.c:394: if (*value!='{')	{ep=value;return 0;}	/* not an object! */
   252E F5 81              6349 	mov	sp,a
   2530 24 E6              6350 	add	a,#0xe6
   2532 F8                 6351 	mov	r0,a
   2533 86 02              6352 	mov	ar2,@r0
   2535 08                 6353 	inc	r0
   2536 86 03              6354 	mov	ar3,@r0
   2538 08                 6355 	inc	r0
   2539 86 04              6356 	mov	ar4,@r0
   253B 8A 82              6357 	mov	dpl,r2
   253D 8B 83              6358 	mov	dph,r3
   253F 8C F0              6359 	mov	b,r4
   2541 12s00r00           6360 	lcall	__gptrget
   2544 FF                 6361 	mov	r7,a
   2545 BF 7B 02           6362 	cjne	r7,#0x7B,00154$
   2548 80 14              6363 	sjmp	00102$
   254A                    6364 00154$:
   254A 90s00r00           6365 	mov	dptr,#_ep
   254D EA                 6366 	mov	a,r2
   254E F0                 6367 	movx	@dptr,a
   254F A3                 6368 	inc	dptr
   2550 EB                 6369 	mov	a,r3
   2551 F0                 6370 	movx	@dptr,a
   2552 A3                 6371 	inc	dptr
   2553 EC                 6372 	mov	a,r4
   2554 F0                 6373 	movx	@dptr,a
   2555 90 00 00           6374 	mov	dptr,#0x0000
   2558 75 F0 00           6375 	mov	b,#0x00
   255B 02s2Ar0E           6376 	ljmp	00126$
   255E                    6377 00102$:
                           6378 ;	cJSON.c:396: item->type=cJSON_Object;
   255E E5 81              6379 	mov	a,sp
   2560 24 EC              6380 	add	a,#0xec
   2562 F8                 6381 	mov	r0,a
   2563 74 09              6382 	mov	a,#0x09
   2565 26                 6383 	add	a,@r0
   2566 FD                 6384 	mov	r5,a
   2567 E4                 6385 	clr	a
   2568 08                 6386 	inc	r0
   2569 36                 6387 	addc	a,@r0
   256A FE                 6388 	mov	r6,a
   256B 08                 6389 	inc	r0
   256C 86 07              6390 	mov	ar7,@r0
   256E 8D 82              6391 	mov	dpl,r5
   2570 8E 83              6392 	mov	dph,r6
   2572 8F F0              6393 	mov	b,r7
   2574 74 06              6394 	mov	a,#0x06
   2576 12s00r00           6395 	lcall	__gptrput
   2579 A3                 6396 	inc	dptr
   257A E4                 6397 	clr	a
   257B 12s00r00           6398 	lcall	__gptrput
                           6399 ;	cJSON.c:397: value=skip(value+1);
   257E 0A                 6400 	inc	r2
   257F BA 00 01           6401 	cjne	r2,#0x00,00155$
   2582 0B                 6402 	inc	r3
   2583                    6403 00155$:
   2583 8A 82              6404 	mov	dpl,r2
   2585 8B 83              6405 	mov	dph,r3
   2587 8C F0              6406 	mov	b,r4
   2589 78r54              6407 	mov	r0,#_skip
   258B 79s16              6408 	mov	r1,#(_skip >> 8)
   258D 7As00              6409 	mov	r2,#(_skip >> 16)
   258F 12s00r00           6410 	lcall	__sdcc_banked_call
                           6411 ;	cJSON.c:398: if (*value=='}') return value+1;	/* empty array. */
   2592 AD 82              6412 	mov	r5,dpl
   2594 AE 83              6413 	mov	r6,dph
   2596 AF F0              6414 	mov	r7,b
   2598 12s00r00           6415 	lcall	__gptrget
   259B FC                 6416 	mov	r4,a
   259C BC 7D 12           6417 	cjne	r4,#0x7D,00104$
   259F 74 01              6418 	mov	a,#0x01
   25A1 2D                 6419 	add	a,r5
   25A2 FA                 6420 	mov	r2,a
   25A3 E4                 6421 	clr	a
   25A4 3E                 6422 	addc	a,r6
   25A5 FB                 6423 	mov	r3,a
   25A6 8F 04              6424 	mov	ar4,r7
   25A8 8A 82              6425 	mov	dpl,r2
   25AA 8B 83              6426 	mov	dph,r3
   25AC 8C F0              6427 	mov	b,r4
   25AE 02s2Ar0E           6428 	ljmp	00126$
   25B1                    6429 00104$:
                           6430 ;	cJSON.c:400: item->child=child=cJSON_New_Item();
   25B1 E5 81              6431 	mov	a,sp
   25B3 24 EC              6432 	add	a,#0xec
   25B5 F8                 6433 	mov	r0,a
   25B6 74 06              6434 	mov	a,#0x06
   25B8 26                 6435 	add	a,@r0
   25B9 FC                 6436 	mov	r4,a
   25BA E4                 6437 	clr	a
   25BB 08                 6438 	inc	r0
   25BC 36                 6439 	addc	a,@r0
   25BD FB                 6440 	mov	r3,a
   25BE 08                 6441 	inc	r0
   25BF 86 02              6442 	mov	ar2,@r0
   25C1 C0 07              6443 	push	ar7
   25C3 C0 06              6444 	push	ar6
   25C5 C0 05              6445 	push	ar5
   25C7 C0 04              6446 	push	ar4
   25C9 C0 03              6447 	push	ar3
   25CB C0 02              6448 	push	ar2
   25CD 78r3D              6449 	mov	r0,#_cJSON_New_Item
   25CF 79s03              6450 	mov	r1,#(_cJSON_New_Item >> 8)
   25D1 7As00              6451 	mov	r2,#(_cJSON_New_Item >> 16)
   25D3 12s00r00           6452 	lcall	__sdcc_banked_call
   25D6 C8                 6453 	xch	a,r0
   25D7 E5 81              6454 	mov	a,sp
   25D9 24 F2              6455 	add	a,#0xf2
   25DB C8                 6456 	xch	a,r0
   25DC A6 82              6457 	mov	@r0,dpl
   25DE 08                 6458 	inc	r0
   25DF A6 83              6459 	mov	@r0,dph
   25E1 08                 6460 	inc	r0
   25E2 A6 F0              6461 	mov	@r0,b
   25E4 D0 02              6462 	pop	ar2
   25E6 D0 03              6463 	pop	ar3
   25E8 D0 04              6464 	pop	ar4
   25EA D0 05              6465 	pop	ar5
   25EC D0 06              6466 	pop	ar6
   25EE D0 07              6467 	pop	ar7
   25F0 E5 81              6468 	mov	a,sp
   25F2 24 F8              6469 	add	a,#0xf8
   25F4 F8                 6470 	mov	r0,a
   25F5 E5 81              6471 	mov	a,sp
   25F7 24 EF              6472 	add	a,#0xef
   25F9 F9                 6473 	mov	r1,a
   25FA E6                 6474 	mov	a,@r0
   25FB F7                 6475 	mov	@r1,a
   25FC 08                 6476 	inc	r0
   25FD 09                 6477 	inc	r1
   25FE E6                 6478 	mov	a,@r0
   25FF F7                 6479 	mov	@r1,a
   2600 08                 6480 	inc	r0
   2601 09                 6481 	inc	r1
   2602 E6                 6482 	mov	a,@r0
   2603 F7                 6483 	mov	@r1,a
   2604 8C 82              6484 	mov	dpl,r4
   2606 8B 83              6485 	mov	dph,r3
   2608 8A F0              6486 	mov	b,r2
   260A E5 81              6487 	mov	a,sp
   260C 24 F8              6488 	add	a,#0xf8
   260E F8                 6489 	mov	r0,a
   260F E6                 6490 	mov	a,@r0
   2610 12s00r00           6491 	lcall	__gptrput
   2613 A3                 6492 	inc	dptr
   2614 08                 6493 	inc	r0
   2615 E6                 6494 	mov	a,@r0
   2616 12s00r00           6495 	lcall	__gptrput
   2619 A3                 6496 	inc	dptr
   261A 08                 6497 	inc	r0
   261B E6                 6498 	mov	a,@r0
   261C 12s00r00           6499 	lcall	__gptrput
                           6500 ;	cJSON.c:401: if (!item->child) return 0;
   261F E5 81              6501 	mov	a,sp
   2621 24 F8              6502 	add	a,#0xf8
   2623 F8                 6503 	mov	r0,a
   2624 E6                 6504 	mov	a,@r0
   2625 08                 6505 	inc	r0
   2626 46                 6506 	orl	a,@r0
   2627 70 08              6507 	jnz	00106$
   2629 90 00 00           6508 	mov	dptr,#0x0000
   262C F5 F0              6509 	mov	b,a
   262E 02s2Ar0E           6510 	ljmp	00126$
   2631                    6511 00106$:
                           6512 ;	cJSON.c:402: value=skip(parse_string(child,skip(value)));
   2631 8D 82              6513 	mov	dpl,r5
   2633 8E 83              6514 	mov	dph,r6
   2635 8F F0              6515 	mov	b,r7
   2637 78r54              6516 	mov	r0,#_skip
   2639 79s16              6517 	mov	r1,#(_skip >> 8)
   263B 7As00              6518 	mov	r2,#(_skip >> 16)
   263D 12s00r00           6519 	lcall	__sdcc_banked_call
   2640 AD 82              6520 	mov	r5,dpl
   2642 AE 83              6521 	mov	r6,dph
   2644 AF F0              6522 	mov	r7,b
   2646 C0 05              6523 	push	ar5
   2648 C0 06              6524 	push	ar6
   264A C0 07              6525 	push	ar7
   264C E5 81              6526 	mov	a,sp
   264E 24 EC              6527 	add	a,#0xec
   2650 F8                 6528 	mov	r0,a
   2651 86 82              6529 	mov	dpl,@r0
   2653 08                 6530 	inc	r0
   2654 86 83              6531 	mov	dph,@r0
   2656 08                 6532 	inc	r0
   2657 86 F0              6533 	mov	b,@r0
   2659 78r8D              6534 	mov	r0,#_parse_string
   265B 79s0D              6535 	mov	r1,#(_parse_string >> 8)
   265D 7As00              6536 	mov	r2,#(_parse_string >> 16)
   265F 12s00r00           6537 	lcall	__sdcc_banked_call
   2662 AD 82              6538 	mov	r5,dpl
   2664 AE 83              6539 	mov	r6,dph
   2666 AF F0              6540 	mov	r7,b
   2668 15 81              6541 	dec	sp
   266A 15 81              6542 	dec	sp
   266C 15 81              6543 	dec	sp
   266E 8D 82              6544 	mov	dpl,r5
   2670 8E 83              6545 	mov	dph,r6
   2672 8F F0              6546 	mov	b,r7
   2674 78r54              6547 	mov	r0,#_skip
   2676 79s16              6548 	mov	r1,#(_skip >> 8)
   2678 7As00              6549 	mov	r2,#(_skip >> 16)
   267A 12s00r00           6550 	lcall	__sdcc_banked_call
   267D AD 82              6551 	mov	r5,dpl
   267F AE 83              6552 	mov	r6,dph
   2681 AF F0              6553 	mov	r7,b
                           6554 ;	cJSON.c:403: if (!value) return 0;
   2683 ED                 6555 	mov	a,r5
   2684 4E                 6556 	orl	a,r6
   2685 70 08              6557 	jnz	00108$
   2687 90 00 00           6558 	mov	dptr,#0x0000
   268A F5 F0              6559 	mov	b,a
   268C 02s2Ar0E           6560 	ljmp	00126$
   268F                    6561 00108$:
                           6562 ;	cJSON.c:404: child->string=child->valuestring;child->valuestring=0;
   268F E5 81              6563 	mov	a,sp
   2691 24 EF              6564 	add	a,#0xef
   2693 F8                 6565 	mov	r0,a
   2694 E5 81              6566 	mov	a,sp
   2696 24 F8              6567 	add	a,#0xf8
   2698 F9                 6568 	mov	r1,a
   2699 74 14              6569 	mov	a,#0x14
   269B 26                 6570 	add	a,@r0
   269C F7                 6571 	mov	@r1,a
   269D E4                 6572 	clr	a
   269E 08                 6573 	inc	r0
   269F 36                 6574 	addc	a,@r0
   26A0 09                 6575 	inc	r1
   26A1 F7                 6576 	mov	@r1,a
   26A2 08                 6577 	inc	r0
   26A3 09                 6578 	inc	r1
   26A4 E6                 6579 	mov	a,@r0
   26A5 F7                 6580 	mov	@r1,a
   26A6 E5 81              6581 	mov	a,sp
   26A8 24 EF              6582 	add	a,#0xef
   26AA F8                 6583 	mov	r0,a
   26AB E5 81              6584 	mov	a,sp
   26AD 24 F5              6585 	add	a,#0xf5
   26AF F9                 6586 	mov	r1,a
   26B0 74 0B              6587 	mov	a,#0x0B
   26B2 26                 6588 	add	a,@r0
   26B3 F7                 6589 	mov	@r1,a
   26B4 E4                 6590 	clr	a
   26B5 08                 6591 	inc	r0
   26B6 36                 6592 	addc	a,@r0
   26B7 09                 6593 	inc	r1
   26B8 F7                 6594 	mov	@r1,a
   26B9 08                 6595 	inc	r0
   26BA 09                 6596 	inc	r1
   26BB E6                 6597 	mov	a,@r0
   26BC F7                 6598 	mov	@r1,a
   26BD E5 81              6599 	mov	a,sp
   26BF 24 F5              6600 	add	a,#0xf5
   26C1 F8                 6601 	mov	r0,a
   26C2 86 82              6602 	mov	dpl,@r0
   26C4 08                 6603 	inc	r0
   26C5 86 83              6604 	mov	dph,@r0
   26C7 08                 6605 	inc	r0
   26C8 86 F0              6606 	mov	b,@r0
   26CA 12s00r00           6607 	lcall	__gptrget
   26CD FA                 6608 	mov	r2,a
   26CE A3                 6609 	inc	dptr
   26CF 12s00r00           6610 	lcall	__gptrget
   26D2 FB                 6611 	mov	r3,a
   26D3 A3                 6612 	inc	dptr
   26D4 12s00r00           6613 	lcall	__gptrget
   26D7 FC                 6614 	mov	r4,a
   26D8 E5 81              6615 	mov	a,sp
   26DA 24 F8              6616 	add	a,#0xf8
   26DC F8                 6617 	mov	r0,a
   26DD 86 82              6618 	mov	dpl,@r0
   26DF 08                 6619 	inc	r0
   26E0 86 83              6620 	mov	dph,@r0
   26E2 08                 6621 	inc	r0
   26E3 86 F0              6622 	mov	b,@r0
   26E5 EA                 6623 	mov	a,r2
   26E6 12s00r00           6624 	lcall	__gptrput
   26E9 A3                 6625 	inc	dptr
   26EA EB                 6626 	mov	a,r3
   26EB 12s00r00           6627 	lcall	__gptrput
   26EE A3                 6628 	inc	dptr
   26EF EC                 6629 	mov	a,r4
   26F0 12s00r00           6630 	lcall	__gptrput
   26F3 E5 81              6631 	mov	a,sp
   26F5 24 F5              6632 	add	a,#0xf5
   26F7 F8                 6633 	mov	r0,a
   26F8 86 82              6634 	mov	dpl,@r0
   26FA 08                 6635 	inc	r0
   26FB 86 83              6636 	mov	dph,@r0
   26FD 08                 6637 	inc	r0
   26FE 86 F0              6638 	mov	b,@r0
   2700 E4                 6639 	clr	a
   2701 12s00r00           6640 	lcall	__gptrput
   2704 A3                 6641 	inc	dptr
   2705 E4                 6642 	clr	a
   2706 12s00r00           6643 	lcall	__gptrput
   2709 A3                 6644 	inc	dptr
   270A E4                 6645 	clr	a
   270B 12s00r00           6646 	lcall	__gptrput
                           6647 ;	cJSON.c:405: if (*value!=':') {ep=value;return 0;}	/* fail! */
   270E 8D 82              6648 	mov	dpl,r5
   2710 8E 83              6649 	mov	dph,r6
   2712 8F F0              6650 	mov	b,r7
   2714 12s00r00           6651 	lcall	__gptrget
   2717 FC                 6652 	mov	r4,a
   2718 BC 3A 02           6653 	cjne	r4,#0x3A,00160$
   271B 80 14              6654 	sjmp	00110$
   271D                    6655 00160$:
   271D 90s00r00           6656 	mov	dptr,#_ep
   2720 ED                 6657 	mov	a,r5
   2721 F0                 6658 	movx	@dptr,a
   2722 A3                 6659 	inc	dptr
   2723 EE                 6660 	mov	a,r6
   2724 F0                 6661 	movx	@dptr,a
   2725 A3                 6662 	inc	dptr
   2726 EF                 6663 	mov	a,r7
   2727 F0                 6664 	movx	@dptr,a
   2728 90 00 00           6665 	mov	dptr,#0x0000
   272B 75 F0 00           6666 	mov	b,#0x00
   272E 02s2Ar0E           6667 	ljmp	00126$
   2731                    6668 00110$:
                           6669 ;	cJSON.c:406: value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
   2731 0D                 6670 	inc	r5
   2732 BD 00 01           6671 	cjne	r5,#0x00,00161$
   2735 0E                 6672 	inc	r6
   2736                    6673 00161$:
   2736 8D 82              6674 	mov	dpl,r5
   2738 8E 83              6675 	mov	dph,r6
   273A 8F F0              6676 	mov	b,r7
   273C 78r54              6677 	mov	r0,#_skip
   273E 79s16              6678 	mov	r1,#(_skip >> 8)
   2740 7As00              6679 	mov	r2,#(_skip >> 16)
   2742 12s00r00           6680 	lcall	__sdcc_banked_call
   2745 AD 82              6681 	mov	r5,dpl
   2747 AE 83              6682 	mov	r6,dph
   2749 AF F0              6683 	mov	r7,b
   274B C0 05              6684 	push	ar5
   274D C0 06              6685 	push	ar6
   274F C0 07              6686 	push	ar7
   2751 E5 81              6687 	mov	a,sp
   2753 24 EC              6688 	add	a,#0xec
   2755 F8                 6689 	mov	r0,a
   2756 86 82              6690 	mov	dpl,@r0
   2758 08                 6691 	inc	r0
   2759 86 83              6692 	mov	dph,@r0
   275B 08                 6693 	inc	r0
   275C 86 F0              6694 	mov	b,@r0
   275E 78r6F              6695 	mov	r0,#_parse_value
   2760 79s18              6696 	mov	r1,#(_parse_value >> 8)
   2762 7As00              6697 	mov	r2,#(_parse_value >> 16)
   2764 12s00r00           6698 	lcall	__sdcc_banked_call
   2767 AD 82              6699 	mov	r5,dpl
   2769 AE 83              6700 	mov	r6,dph
   276B AF F0              6701 	mov	r7,b
   276D 15 81              6702 	dec	sp
   276F 15 81              6703 	dec	sp
   2771 15 81              6704 	dec	sp
   2773 8D 82              6705 	mov	dpl,r5
   2775 8E 83              6706 	mov	dph,r6
   2777 8F F0              6707 	mov	b,r7
   2779 78r54              6708 	mov	r0,#_skip
   277B 79s16              6709 	mov	r1,#(_skip >> 8)
   277D 7As00              6710 	mov	r2,#(_skip >> 16)
   277F 12s00r00           6711 	lcall	__sdcc_banked_call
   2782 AD 82              6712 	mov	r5,dpl
   2784 AE 83              6713 	mov	r6,dph
   2786 AF F0              6714 	mov	r7,b
   2788 E5 81              6715 	mov	a,sp
   278A 24 E6              6716 	add	a,#0xe6
   278C F8                 6717 	mov	r0,a
   278D A6 05              6718 	mov	@r0,ar5
   278F 08                 6719 	inc	r0
   2790 A6 06              6720 	mov	@r0,ar6
   2792 08                 6721 	inc	r0
   2793 A6 07              6722 	mov	@r0,ar7
                           6723 ;	cJSON.c:407: if (!value) return 0;
   2795 ED                 6724 	mov	a,r5
   2796 4E                 6725 	orl	a,r6
   2797 70 08              6726 	jnz	00121$
   2799 90 00 00           6727 	mov	dptr,#0x0000
   279C F5 F0              6728 	mov	b,a
   279E 02s2Ar0E           6729 	ljmp	00126$
                           6730 ;	cJSON.c:409: while (*value==',')
   27A1                    6731 00121$:
   27A1 E5 81              6732 	mov	a,sp
   27A3 24 E6              6733 	add	a,#0xe6
   27A5 F8                 6734 	mov	r0,a
   27A6 E5 81              6735 	mov	a,sp
   27A8 24 F8              6736 	add	a,#0xf8
   27AA F9                 6737 	mov	r1,a
   27AB E6                 6738 	mov	a,@r0
   27AC F7                 6739 	mov	@r1,a
   27AD 08                 6740 	inc	r0
   27AE 09                 6741 	inc	r1
   27AF E6                 6742 	mov	a,@r0
   27B0 F7                 6743 	mov	@r1,a
   27B1 08                 6744 	inc	r0
   27B2 09                 6745 	inc	r1
   27B3 E6                 6746 	mov	a,@r0
   27B4 F7                 6747 	mov	@r1,a
   27B5 E5 81              6748 	mov	a,sp
   27B7 24 F8              6749 	add	a,#0xf8
   27B9 F8                 6750 	mov	r0,a
   27BA 86 82              6751 	mov	dpl,@r0
   27BC 08                 6752 	inc	r0
   27BD 86 83              6753 	mov	dph,@r0
   27BF 08                 6754 	inc	r0
   27C0 86 F0              6755 	mov	b,@r0
   27C2 12s00r00           6756 	lcall	__gptrget
   27C5 FC                 6757 	mov	r4,a
   27C6 BC 2C 02           6758 	cjne	r4,#0x2C,00163$
   27C9 80 03              6759 	sjmp	00164$
   27CB                    6760 00163$:
   27CB 02s29rDB           6761 	ljmp	00123$
   27CE                    6762 00164$:
                           6763 ;	cJSON.c:412: if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
   27CE 78r3D              6764 	mov	r0,#_cJSON_New_Item
   27D0 79s03              6765 	mov	r1,#(_cJSON_New_Item >> 8)
   27D2 7As00              6766 	mov	r2,#(_cJSON_New_Item >> 16)
   27D4 12s00r00           6767 	lcall	__sdcc_banked_call
   27D7 AF 82              6768 	mov	r7,dpl
   27D9 AE 83              6769 	mov	r6,dph
   27DB AD F0              6770 	mov	r5,b
   27DD E5 81              6771 	mov	a,sp
   27DF 24 F2              6772 	add	a,#0xf2
   27E1 F8                 6773 	mov	r0,a
   27E2 A6 07              6774 	mov	@r0,ar7
   27E4 08                 6775 	inc	r0
   27E5 A6 06              6776 	mov	@r0,ar6
   27E7 08                 6777 	inc	r0
   27E8 A6 05              6778 	mov	@r0,ar5
   27EA EF                 6779 	mov	a,r7
   27EB 4E                 6780 	orl	a,r6
   27EC 70 08              6781 	jnz	00114$
   27EE 90 00 00           6782 	mov	dptr,#0x0000
   27F1 F5 F0              6783 	mov	b,a
   27F3 02s2Ar0E           6784 	ljmp	00126$
   27F6                    6785 00114$:
                           6786 ;	cJSON.c:413: child->next=new_item;new_item->prev=child;child=new_item;
   27F6 E5 81              6787 	mov	a,sp
   27F8 24 EF              6788 	add	a,#0xef
   27FA F8                 6789 	mov	r0,a
   27FB 86 82              6790 	mov	dpl,@r0
   27FD 08                 6791 	inc	r0
   27FE 86 83              6792 	mov	dph,@r0
   2800 08                 6793 	inc	r0
   2801 86 F0              6794 	mov	b,@r0
   2803 E5 81              6795 	mov	a,sp
   2805 24 F2              6796 	add	a,#0xf2
   2807 F9                 6797 	mov	r1,a
   2808 E7                 6798 	mov	a,@r1
   2809 12s00r00           6799 	lcall	__gptrput
   280C A3                 6800 	inc	dptr
   280D 09                 6801 	inc	r1
   280E E7                 6802 	mov	a,@r1
   280F 12s00r00           6803 	lcall	__gptrput
   2812 A3                 6804 	inc	dptr
   2813 09                 6805 	inc	r1
   2814 E7                 6806 	mov	a,@r1
   2815 12s00r00           6807 	lcall	__gptrput
   2818 E5 81              6808 	mov	a,sp
   281A 24 F2              6809 	add	a,#0xf2
   281C F8                 6810 	mov	r0,a
   281D 74 03              6811 	mov	a,#0x03
   281F 26                 6812 	add	a,@r0
   2820 FA                 6813 	mov	r2,a
   2821 E4                 6814 	clr	a
   2822 08                 6815 	inc	r0
   2823 36                 6816 	addc	a,@r0
   2824 FB                 6817 	mov	r3,a
   2825 08                 6818 	inc	r0
   2826 86 07              6819 	mov	ar7,@r0
   2828 8A 82              6820 	mov	dpl,r2
   282A 8B 83              6821 	mov	dph,r3
   282C 8F F0              6822 	mov	b,r7
   282E E5 81              6823 	mov	a,sp
   2830 24 EF              6824 	add	a,#0xef
   2832 F8                 6825 	mov	r0,a
   2833 E6                 6826 	mov	a,@r0
   2834 12s00r00           6827 	lcall	__gptrput
   2837 A3                 6828 	inc	dptr
   2838 08                 6829 	inc	r0
   2839 E6                 6830 	mov	a,@r0
   283A 12s00r00           6831 	lcall	__gptrput
   283D A3                 6832 	inc	dptr
   283E 08                 6833 	inc	r0
   283F E6                 6834 	mov	a,@r0
   2840 12s00r00           6835 	lcall	__gptrput
   2843 E5 81              6836 	mov	a,sp
   2845 24 F2              6837 	add	a,#0xf2
   2847 F8                 6838 	mov	r0,a
   2848 E5 81              6839 	mov	a,sp
   284A 24 EF              6840 	add	a,#0xef
   284C F9                 6841 	mov	r1,a
   284D E6                 6842 	mov	a,@r0
   284E F7                 6843 	mov	@r1,a
   284F 08                 6844 	inc	r0
   2850 09                 6845 	inc	r1
   2851 E6                 6846 	mov	a,@r0
   2852 F7                 6847 	mov	@r1,a
   2853 08                 6848 	inc	r0
   2854 09                 6849 	inc	r1
   2855 E6                 6850 	mov	a,@r0
   2856 F7                 6851 	mov	@r1,a
                           6852 ;	cJSON.c:414: value=skip(parse_string(child,skip(value+1)));
   2857 E5 81              6853 	mov	a,sp
   2859 24 F8              6854 	add	a,#0xf8
   285B F8                 6855 	mov	r0,a
   285C 74 01              6856 	mov	a,#0x01
   285E 26                 6857 	add	a,@r0
   285F FD                 6858 	mov	r5,a
   2860 E4                 6859 	clr	a
   2861 08                 6860 	inc	r0
   2862 36                 6861 	addc	a,@r0
   2863 FE                 6862 	mov	r6,a
   2864 08                 6863 	inc	r0
   2865 86 07              6864 	mov	ar7,@r0
   2867 8D 82              6865 	mov	dpl,r5
   2869 8E 83              6866 	mov	dph,r6
   286B 8F F0              6867 	mov	b,r7
   286D 78r54              6868 	mov	r0,#_skip
   286F 79s16              6869 	mov	r1,#(_skip >> 8)
   2871 7As00              6870 	mov	r2,#(_skip >> 16)
   2873 12s00r00           6871 	lcall	__sdcc_banked_call
   2876 AD 82              6872 	mov	r5,dpl
   2878 AE 83              6873 	mov	r6,dph
   287A AF F0              6874 	mov	r7,b
   287C C0 05              6875 	push	ar5
   287E C0 06              6876 	push	ar6
   2880 C0 07              6877 	push	ar7
   2882 E5 81              6878 	mov	a,sp
   2884 24 EF              6879 	add	a,#0xef
   2886 F8                 6880 	mov	r0,a
   2887 86 82              6881 	mov	dpl,@r0
   2889 08                 6882 	inc	r0
   288A 86 83              6883 	mov	dph,@r0
   288C 08                 6884 	inc	r0
   288D 86 F0              6885 	mov	b,@r0
   288F 78r8D              6886 	mov	r0,#_parse_string
   2891 79s0D              6887 	mov	r1,#(_parse_string >> 8)
   2893 7As00              6888 	mov	r2,#(_parse_string >> 16)
   2895 12s00r00           6889 	lcall	__sdcc_banked_call
   2898 AD 82              6890 	mov	r5,dpl
   289A AE 83              6891 	mov	r6,dph
   289C AF F0              6892 	mov	r7,b
   289E 15 81              6893 	dec	sp
   28A0 15 81              6894 	dec	sp
   28A2 15 81              6895 	dec	sp
   28A4 8D 82              6896 	mov	dpl,r5
   28A6 8E 83              6897 	mov	dph,r6
   28A8 8F F0              6898 	mov	b,r7
   28AA 78r54              6899 	mov	r0,#_skip
   28AC 79s16              6900 	mov	r1,#(_skip >> 8)
   28AE 7As00              6901 	mov	r2,#(_skip >> 16)
   28B0 12s00r00           6902 	lcall	__sdcc_banked_call
   28B3 AD 82              6903 	mov	r5,dpl
   28B5 AE 83              6904 	mov	r6,dph
   28B7 AC F0              6905 	mov	r4,b
                           6906 ;	cJSON.c:415: if (!value) return 0;
   28B9 ED                 6907 	mov	a,r5
   28BA 4E                 6908 	orl	a,r6
   28BB 70 08              6909 	jnz	00116$
   28BD 90 00 00           6910 	mov	dptr,#0x0000
   28C0 F5 F0              6911 	mov	b,a
   28C2 02s2Ar0E           6912 	ljmp	00126$
   28C5                    6913 00116$:
                           6914 ;	cJSON.c:416: child->string=child->valuestring;child->valuestring=0;
   28C5 E5 81              6915 	mov	a,sp
   28C7 24 F2              6916 	add	a,#0xf2
   28C9 F8                 6917 	mov	r0,a
   28CA E5 81              6918 	mov	a,sp
   28CC 24 FB              6919 	add	a,#0xfb
   28CE F9                 6920 	mov	r1,a
   28CF 74 14              6921 	mov	a,#0x14
   28D1 26                 6922 	add	a,@r0
   28D2 F7                 6923 	mov	@r1,a
   28D3 E4                 6924 	clr	a
   28D4 08                 6925 	inc	r0
   28D5 36                 6926 	addc	a,@r0
   28D6 09                 6927 	inc	r1
   28D7 F7                 6928 	mov	@r1,a
   28D8 08                 6929 	inc	r0
   28D9 09                 6930 	inc	r1
   28DA E6                 6931 	mov	a,@r0
   28DB F7                 6932 	mov	@r1,a
   28DC E5 81              6933 	mov	a,sp
   28DE 24 F2              6934 	add	a,#0xf2
   28E0 F8                 6935 	mov	r0,a
   28E1 A9 81              6936 	mov	r1,sp
   28E3 19                 6937 	dec	r1
   28E4 19                 6938 	dec	r1
   28E5 74 0B              6939 	mov	a,#0x0B
   28E7 26                 6940 	add	a,@r0
   28E8 F7                 6941 	mov	@r1,a
   28E9 E4                 6942 	clr	a
   28EA 08                 6943 	inc	r0
   28EB 36                 6944 	addc	a,@r0
   28EC 09                 6945 	inc	r1
   28ED F7                 6946 	mov	@r1,a
   28EE 08                 6947 	inc	r0
   28EF 09                 6948 	inc	r1
   28F0 E6                 6949 	mov	a,@r0
   28F1 F7                 6950 	mov	@r1,a
   28F2 A8 81              6951 	mov	r0,sp
   28F4 18                 6952 	dec	r0
   28F5 18                 6953 	dec	r0
   28F6 86 82              6954 	mov	dpl,@r0
   28F8 08                 6955 	inc	r0
   28F9 86 83              6956 	mov	dph,@r0
   28FB 08                 6957 	inc	r0
   28FC 86 F0              6958 	mov	b,@r0
   28FE 12s00r00           6959 	lcall	__gptrget
   2901 FA                 6960 	mov	r2,a
   2902 A3                 6961 	inc	dptr
   2903 12s00r00           6962 	lcall	__gptrget
   2906 FB                 6963 	mov	r3,a
   2907 A3                 6964 	inc	dptr
   2908 12s00r00           6965 	lcall	__gptrget
   290B FF                 6966 	mov	r7,a
   290C E5 81              6967 	mov	a,sp
   290E 24 FB              6968 	add	a,#0xfb
   2910 F8                 6969 	mov	r0,a
   2911 86 82              6970 	mov	dpl,@r0
   2913 08                 6971 	inc	r0
   2914 86 83              6972 	mov	dph,@r0
   2916 08                 6973 	inc	r0
   2917 86 F0              6974 	mov	b,@r0
   2919 EA                 6975 	mov	a,r2
   291A 12s00r00           6976 	lcall	__gptrput
   291D A3                 6977 	inc	dptr
   291E EB                 6978 	mov	a,r3
   291F 12s00r00           6979 	lcall	__gptrput
   2922 A3                 6980 	inc	dptr
   2923 EF                 6981 	mov	a,r7
   2924 12s00r00           6982 	lcall	__gptrput
   2927 A8 81              6983 	mov	r0,sp
   2929 18                 6984 	dec	r0
   292A 18                 6985 	dec	r0
   292B 86 82              6986 	mov	dpl,@r0
   292D 08                 6987 	inc	r0
   292E 86 83              6988 	mov	dph,@r0
   2930 08                 6989 	inc	r0
   2931 86 F0              6990 	mov	b,@r0
   2933 E4                 6991 	clr	a
   2934 12s00r00           6992 	lcall	__gptrput
   2937 A3                 6993 	inc	dptr
   2938 E4                 6994 	clr	a
   2939 12s00r00           6995 	lcall	__gptrput
   293C A3                 6996 	inc	dptr
   293D E4                 6997 	clr	a
   293E 12s00r00           6998 	lcall	__gptrput
                           6999 ;	cJSON.c:417: if (*value!=':') {ep=value;return 0;}	/* fail! */
   2941 8D 82              7000 	mov	dpl,r5
   2943 8E 83              7001 	mov	dph,r6
   2945 8C F0              7002 	mov	b,r4
   2947 12s00r00           7003 	lcall	__gptrget
   294A FF                 7004 	mov	r7,a
   294B BF 3A 02           7005 	cjne	r7,#0x3A,00167$
   294E 80 14              7006 	sjmp	00118$
   2950                    7007 00167$:
   2950 90s00r00           7008 	mov	dptr,#_ep
   2953 ED                 7009 	mov	a,r5
   2954 F0                 7010 	movx	@dptr,a
   2955 A3                 7011 	inc	dptr
   2956 EE                 7012 	mov	a,r6
   2957 F0                 7013 	movx	@dptr,a
   2958 A3                 7014 	inc	dptr
   2959 EC                 7015 	mov	a,r4
   295A F0                 7016 	movx	@dptr,a
   295B 90 00 00           7017 	mov	dptr,#0x0000
   295E 75 F0 00           7018 	mov	b,#0x00
   2961 02s2Ar0E           7019 	ljmp	00126$
   2964                    7020 00118$:
                           7021 ;	cJSON.c:418: value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
   2964 74 01              7022 	mov	a,#0x01
   2966 2D                 7023 	add	a,r5
   2967 FD                 7024 	mov	r5,a
   2968 E4                 7025 	clr	a
   2969 3E                 7026 	addc	a,r6
   296A FE                 7027 	mov	r6,a
   296B 8C 07              7028 	mov	ar7,r4
   296D 8D 82              7029 	mov	dpl,r5
   296F 8E 83              7030 	mov	dph,r6
   2971 8F F0              7031 	mov	b,r7
   2973 78r54              7032 	mov	r0,#_skip
   2975 79s16              7033 	mov	r1,#(_skip >> 8)
   2977 7As00              7034 	mov	r2,#(_skip >> 16)
   2979 12s00r00           7035 	lcall	__sdcc_banked_call
   297C AD 82              7036 	mov	r5,dpl
   297E AE 83              7037 	mov	r6,dph
   2980 AF F0              7038 	mov	r7,b
   2982 C0 05              7039 	push	ar5
   2984 C0 06              7040 	push	ar6
   2986 C0 07              7041 	push	ar7
   2988 E5 81              7042 	mov	a,sp
   298A 24 EF              7043 	add	a,#0xef
   298C F8                 7044 	mov	r0,a
   298D 86 82              7045 	mov	dpl,@r0
   298F 08                 7046 	inc	r0
   2990 86 83              7047 	mov	dph,@r0
   2992 08                 7048 	inc	r0
   2993 86 F0              7049 	mov	b,@r0
   2995 78r6F              7050 	mov	r0,#_parse_value
   2997 79s18              7051 	mov	r1,#(_parse_value >> 8)
   2999 7As00              7052 	mov	r2,#(_parse_value >> 16)
   299B 12s00r00           7053 	lcall	__sdcc_banked_call
   299E AD 82              7054 	mov	r5,dpl
   29A0 AE 83              7055 	mov	r6,dph
   29A2 AF F0              7056 	mov	r7,b
   29A4 15 81              7057 	dec	sp
   29A6 15 81              7058 	dec	sp
   29A8 15 81              7059 	dec	sp
   29AA 8D 82              7060 	mov	dpl,r5
   29AC 8E 83              7061 	mov	dph,r6
   29AE 8F F0              7062 	mov	b,r7
   29B0 78r54              7063 	mov	r0,#_skip
   29B2 79s16              7064 	mov	r1,#(_skip >> 8)
   29B4 7As00              7065 	mov	r2,#(_skip >> 16)
   29B6 12s00r00           7066 	lcall	__sdcc_banked_call
   29B9 AD 82              7067 	mov	r5,dpl
   29BB AE 83              7068 	mov	r6,dph
   29BD AF F0              7069 	mov	r7,b
   29BF E5 81              7070 	mov	a,sp
   29C1 24 E6              7071 	add	a,#0xe6
   29C3 F8                 7072 	mov	r0,a
   29C4 A6 05              7073 	mov	@r0,ar5
   29C6 08                 7074 	inc	r0
   29C7 A6 06              7075 	mov	@r0,ar6
   29C9 08                 7076 	inc	r0
   29CA A6 07              7077 	mov	@r0,ar7
                           7078 ;	cJSON.c:419: if (!value) return 0;
   29CC ED                 7079 	mov	a,r5
   29CD 4E                 7080 	orl	a,r6
   29CE 60 03              7081 	jz	00168$
   29D0 02s27rA1           7082 	ljmp	00121$
   29D3                    7083 00168$:
   29D3 90 00 00           7084 	mov	dptr,#0x0000
   29D6 75 F0 00           7085 	mov	b,#0x00
   29D9 80 33              7086 	sjmp	00126$
   29DB                    7087 00123$:
                           7088 ;	cJSON.c:422: if (*value=='}') return value+1;	/* end of array */
   29DB BC 7D 18           7089 	cjne	r4,#0x7D,00125$
   29DE E5 81              7090 	mov	a,sp
   29E0 24 F8              7091 	add	a,#0xf8
   29E2 F8                 7092 	mov	r0,a
   29E3 74 01              7093 	mov	a,#0x01
   29E5 26                 7094 	add	a,@r0
   29E6 FD                 7095 	mov	r5,a
   29E7 E4                 7096 	clr	a
   29E8 08                 7097 	inc	r0
   29E9 36                 7098 	addc	a,@r0
   29EA FE                 7099 	mov	r6,a
   29EB 08                 7100 	inc	r0
   29EC 86 07              7101 	mov	ar7,@r0
   29EE 8D 82              7102 	mov	dpl,r5
   29F0 8E 83              7103 	mov	dph,r6
   29F2 8F F0              7104 	mov	b,r7
   29F4 80 18              7105 	sjmp	00126$
   29F6                    7106 00125$:
                           7107 ;	cJSON.c:423: ep=value;return 0;	/* malformed. */
   29F6 E5 81              7108 	mov	a,sp
   29F8 24 F8              7109 	add	a,#0xf8
   29FA F8                 7110 	mov	r0,a
   29FB 90s00r00           7111 	mov	dptr,#_ep
   29FE E6                 7112 	mov	a,@r0
   29FF F0                 7113 	movx	@dptr,a
   2A00 08                 7114 	inc	r0
   2A01 A3                 7115 	inc	dptr
   2A02 E6                 7116 	mov	a,@r0
   2A03 F0                 7117 	movx	@dptr,a
   2A04 08                 7118 	inc	r0
   2A05 A3                 7119 	inc	dptr
   2A06 E6                 7120 	mov	a,@r0
   2A07 F0                 7121 	movx	@dptr,a
   2A08 90 00 00           7122 	mov	dptr,#0x0000
   2A0B 75 F0 00           7123 	mov	b,#0x00
   2A0E                    7124 00126$:
   2A0E E5 81              7125 	mov	a,sp
   2A10 24 EB              7126 	add	a,#0xEB
   2A12 F5 81              7127 	mov	sp,a
   2A14 02s00r00           7128 	ljmp	__sdcc_banked_ret
                           7129 ;------------------------------------------------------------
                           7130 ;Allocation info for local variables in function 'print_object'
                           7131 ;------------------------------------------------------------
                           7132 ;depth                     Allocated to stack - sp -38
                           7133 ;fmt                       Allocated to stack - sp -40
                           7134 ;item                      Allocated to registers r7 r6 r5 
                           7135 ;entries                   Allocated to stack - sp -33
                           7136 ;names                     Allocated to stack - sp -30
                           7137 ;out                       Allocated to stack - sp -27
                           7138 ;ptr                       Allocated to stack - sp -24
                           7139 ;ret                       Allocated to stack - sp -2
                           7140 ;str                       Allocated to stack - sp -5
                           7141 ;len                       Allocated to stack - sp -21
                           7142 ;i                         Allocated to stack - sp -19
                           7143 ;j                         Allocated to registers r4 r5 
                           7144 ;child                     Allocated to stack - sp -17
                           7145 ;numentries                Allocated to stack - sp -12
                           7146 ;fail                      Allocated to stack - sp -14
                           7147 ;sloc0                     Allocated to stack - sp -12
                           7148 ;sloc1                     Allocated to stack - sp -10
                           7149 ;sloc2                     Allocated to stack - sp -8
                           7150 ;sloc3                     Allocated to stack - sp -5
                           7151 ;sloc4                     Allocated to stack - sp -2
                           7152 ;------------------------------------------------------------
                           7153 ;	cJSON.c:427: static char *print_object(cJSON *item,int depth,int fmt)
                           7154 ;	-----------------------------------------
                           7155 ;	 function print_object
                           7156 ;	-----------------------------------------
   2A17                    7157 _print_object:
   2A17 E5 81              7158 	mov	a,sp
   2A19 24 22              7159 	add	a,#0x22
   2A1B F5 81              7160 	mov	sp,a
   2A1D AF 82              7161 	mov	r7,dpl
   2A1F AE 83              7162 	mov	r6,dph
   2A21 AD F0              7163 	mov	r5,b
                           7164 ;	cJSON.c:430: char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
   2A23 E5 81              7165 	mov	a,sp
   2A25 24 E5              7166 	add	a,#0xe5
   2A27 F8                 7167 	mov	r0,a
   2A28 E4                 7168 	clr	a
   2A29 F6                 7169 	mov	@r0,a
   2A2A 08                 7170 	inc	r0
   2A2B F6                 7171 	mov	@r0,a
   2A2C 08                 7172 	inc	r0
   2A2D 76 00              7173 	mov	@r0,#0x00
   2A2F E5 81              7174 	mov	a,sp
   2A31 24 EB              7175 	add	a,#0xeb
   2A33 F8                 7176 	mov	r0,a
   2A34 76 07              7177 	mov	@r0,#0x07
   2A36 08                 7178 	inc	r0
   2A37 76 00              7179 	mov	@r0,#0x00
                           7180 ;	cJSON.c:431: cJSON *child=item->child;
   2A39 E5 81              7181 	mov	a,sp
   2A3B 24 F8              7182 	add	a,#0xf8
   2A3D F8                 7183 	mov	r0,a
   2A3E 74 06              7184 	mov	a,#0x06
   2A40 2F                 7185 	add	a,r7
   2A41 F6                 7186 	mov	@r0,a
   2A42 E4                 7187 	clr	a
   2A43 3E                 7188 	addc	a,r6
   2A44 08                 7189 	inc	r0
   2A45 F6                 7190 	mov	@r0,a
   2A46 08                 7191 	inc	r0
   2A47 A6 05              7192 	mov	@r0,ar5
   2A49 E5 81              7193 	mov	a,sp
   2A4B 24 F8              7194 	add	a,#0xf8
   2A4D F8                 7195 	mov	r0,a
   2A4E 86 82              7196 	mov	dpl,@r0
   2A50 08                 7197 	inc	r0
   2A51 86 83              7198 	mov	dph,@r0
   2A53 08                 7199 	inc	r0
   2A54 86 F0              7200 	mov	b,@r0
   2A56 12s00r00           7201 	lcall	__gptrget
   2A59 FF                 7202 	mov	r7,a
   2A5A A3                 7203 	inc	dptr
   2A5B 12s00r00           7204 	lcall	__gptrget
   2A5E FE                 7205 	mov	r6,a
   2A5F A3                 7206 	inc	dptr
   2A60 12s00r00           7207 	lcall	__gptrget
   2A63 FD                 7208 	mov	r5,a
   2A64 E5 81              7209 	mov	a,sp
   2A66 24 EF              7210 	add	a,#0xef
   2A68 F8                 7211 	mov	r0,a
   2A69 A6 07              7212 	mov	@r0,ar7
   2A6B 08                 7213 	inc	r0
   2A6C A6 06              7214 	mov	@r0,ar6
   2A6E 08                 7215 	inc	r0
   2A6F A6 05              7216 	mov	@r0,ar5
                           7217 ;	cJSON.c:432: int numentries=0,fail=0;
   2A71 E5 81              7218 	mov	a,sp
   2A73 24 F4              7219 	add	a,#0xf4
   2A75 F8                 7220 	mov	r0,a
   2A76 E4                 7221 	clr	a
   2A77 F6                 7222 	mov	@r0,a
   2A78 08                 7223 	inc	r0
   2A79 F6                 7224 	mov	@r0,a
   2A7A E5 81              7225 	mov	a,sp
   2A7C 24 F2              7226 	add	a,#0xf2
   2A7E F8                 7227 	mov	r0,a
   2A7F E4                 7228 	clr	a
   2A80 F6                 7229 	mov	@r0,a
   2A81 08                 7230 	inc	r0
   2A82 F6                 7231 	mov	@r0,a
                           7232 ;	cJSON.c:434: while (child) numentries++,child=child->next;
   2A83 7A 00              7233 	mov	r2,#0x00
   2A85 7C 00              7234 	mov	r4,#0x00
   2A87                    7235 00101$:
   2A87 E5 81              7236 	mov	a,sp
   2A89 24 EF              7237 	add	a,#0xef
   2A8B F8                 7238 	mov	r0,a
   2A8C E6                 7239 	mov	a,@r0
   2A8D 08                 7240 	inc	r0
   2A8E 46                 7241 	orl	a,@r0
   2A8F 60 30              7242 	jz	00204$
   2A91 0A                 7243 	inc	r2
   2A92 BA 00 01           7244 	cjne	r2,#0x00,00245$
   2A95 0C                 7245 	inc	r4
   2A96                    7246 00245$:
   2A96 E5 81              7247 	mov	a,sp
   2A98 24 F4              7248 	add	a,#0xf4
   2A9A F8                 7249 	mov	r0,a
   2A9B A6 02              7250 	mov	@r0,ar2
   2A9D 08                 7251 	inc	r0
   2A9E A6 04              7252 	mov	@r0,ar4
   2AA0 E5 81              7253 	mov	a,sp
   2AA2 24 EF              7254 	add	a,#0xef
   2AA4 F8                 7255 	mov	r0,a
   2AA5 86 82              7256 	mov	dpl,@r0
   2AA7 08                 7257 	inc	r0
   2AA8 86 83              7258 	mov	dph,@r0
   2AAA 08                 7259 	inc	r0
   2AAB 86 F0              7260 	mov	b,@r0
   2AAD 12s00r00           7261 	lcall	__gptrget
   2AB0 18                 7262 	dec	r0
   2AB1 18                 7263 	dec	r0
   2AB2 F6                 7264 	mov	@r0,a
   2AB3 A3                 7265 	inc	dptr
   2AB4 12s00r00           7266 	lcall	__gptrget
   2AB7 08                 7267 	inc	r0
   2AB8 F6                 7268 	mov	@r0,a
   2AB9 A3                 7269 	inc	dptr
   2ABA 12s00r00           7270 	lcall	__gptrget
   2ABD 08                 7271 	inc	r0
   2ABE F6                 7272 	mov	@r0,a
   2ABF 80 C6              7273 	sjmp	00101$
   2AC1                    7274 00204$:
   2AC1 E5 81              7275 	mov	a,sp
   2AC3 24 F4              7276 	add	a,#0xf4
   2AC5 F8                 7277 	mov	r0,a
   2AC6 A6 02              7278 	mov	@r0,ar2
   2AC8 08                 7279 	inc	r0
   2AC9 A6 04              7280 	mov	@r0,ar4
                           7281 ;	cJSON.c:436: if (!numentries)
   2ACB EA                 7282 	mov	a,r2
   2ACC 4C                 7283 	orl	a,r4
   2ACD 60 03              7284 	jz	00246$
   2ACF 02s2Cr23           7285 	ljmp	00109$
   2AD2                    7286 00246$:
                           7287 ;	cJSON.c:438: out=(char*)cJSON_malloc(fmt?depth+4:3);
   2AD2 E5 81              7288 	mov	a,sp
   2AD4 24 D8              7289 	add	a,#0xd8
   2AD6 F8                 7290 	mov	r0,a
   2AD7 E6                 7291 	mov	a,@r0
   2AD8 08                 7292 	inc	r0
   2AD9 46                 7293 	orl	a,@r0
   2ADA 60 15              7294 	jz	00167$
   2ADC E5 81              7295 	mov	a,sp
   2ADE 24 DA              7296 	add	a,#0xda
   2AE0 F8                 7297 	mov	r0,a
   2AE1 E5 81              7298 	mov	a,sp
   2AE3 24 F6              7299 	add	a,#0xf6
   2AE5 F9                 7300 	mov	r1,a
   2AE6 74 04              7301 	mov	a,#0x04
   2AE8 26                 7302 	add	a,@r0
   2AE9 F7                 7303 	mov	@r1,a
   2AEA E4                 7304 	clr	a
   2AEB 08                 7305 	inc	r0
   2AEC 36                 7306 	addc	a,@r0
   2AED 09                 7307 	inc	r1
   2AEE F7                 7308 	mov	@r1,a
   2AEF 80 0A              7309 	sjmp	00168$
   2AF1                    7310 00167$:
   2AF1 E5 81              7311 	mov	a,sp
   2AF3 24 F6              7312 	add	a,#0xf6
   2AF5 F8                 7313 	mov	r0,a
   2AF6 76 03              7314 	mov	@r0,#0x03
   2AF8 08                 7315 	inc	r0
   2AF9 76 00              7316 	mov	@r0,#0x00
   2AFB                    7317 00168$:
   2AFB E5 81              7318 	mov	a,sp
   2AFD 24 F6              7319 	add	a,#0xf6
   2AFF E5 81              7320 	mov	a,sp
   2B01 24 F6              7321 	add	a,#0xf6
   2B03 F8                 7322 	mov	r0,a
   2B04 86 82              7323 	mov	dpl,@r0
   2B06 08                 7324 	inc	r0
   2B07 86 83              7325 	mov	dph,@r0
   2B09 78r00              7326 	mov	r0,#_malloc
   2B0B 79s00              7327 	mov	r1,#(_malloc >> 8)
   2B0D 7As00              7328 	mov	r2,#(_malloc >> 16)
   2B0F 12s00r00           7329 	lcall	__sdcc_banked_call
   2B12 AF 82              7330 	mov	r7,dpl
   2B14 AE 83              7331 	mov	r6,dph
   2B16 E5 81              7332 	mov	a,sp
   2B18 24 E5              7333 	add	a,#0xe5
   2B1A F8                 7334 	mov	r0,a
   2B1B A6 07              7335 	mov	@r0,ar7
   2B1D 08                 7336 	inc	r0
   2B1E A6 06              7337 	mov	@r0,ar6
   2B20 08                 7338 	inc	r0
   2B21 76 00              7339 	mov	@r0,#0x00
                           7340 ;	cJSON.c:439: if (!out)	return 0;
   2B23 E5 81              7341 	mov	a,sp
   2B25 24 E5              7342 	add	a,#0xe5
   2B27 F8                 7343 	mov	r0,a
   2B28 E6                 7344 	mov	a,@r0
   2B29 08                 7345 	inc	r0
   2B2A 46                 7346 	orl	a,@r0
   2B2B 70 08              7347 	jnz	00105$
   2B2D 90 00 00           7348 	mov	dptr,#0x0000
   2B30 F5 F0              7349 	mov	b,a
   2B32 02s33r81           7350 	ljmp	00165$
   2B35                    7351 00105$:
                           7352 ;	cJSON.c:440: ptr=out;*ptr++='{';
   2B35 E5 81              7353 	mov	a,sp
   2B37 24 E5              7354 	add	a,#0xe5
   2B39 F8                 7355 	mov	r0,a
   2B3A 86 82              7356 	mov	dpl,@r0
   2B3C 08                 7357 	inc	r0
   2B3D 86 83              7358 	mov	dph,@r0
   2B3F 08                 7359 	inc	r0
   2B40 86 F0              7360 	mov	b,@r0
   2B42 74 7B              7361 	mov	a,#0x7B
   2B44 12s00r00           7362 	lcall	__gptrput
   2B47 E5 81              7363 	mov	a,sp
   2B49 24 E5              7364 	add	a,#0xe5
   2B4B F8                 7365 	mov	r0,a
   2B4C E5 81              7366 	mov	a,sp
   2B4E 24 E8              7367 	add	a,#0xe8
   2B50 F9                 7368 	mov	r1,a
   2B51 74 01              7369 	mov	a,#0x01
   2B53 26                 7370 	add	a,@r0
   2B54 F7                 7371 	mov	@r1,a
   2B55 E4                 7372 	clr	a
   2B56 08                 7373 	inc	r0
   2B57 36                 7374 	addc	a,@r0
   2B58 09                 7375 	inc	r1
   2B59 F7                 7376 	mov	@r1,a
   2B5A 08                 7377 	inc	r0
   2B5B 09                 7378 	inc	r1
   2B5C E6                 7379 	mov	a,@r0
   2B5D F7                 7380 	mov	@r1,a
                           7381 ;	cJSON.c:441: if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
   2B5E E5 81              7382 	mov	a,sp
   2B60 24 D8              7383 	add	a,#0xd8
   2B62 F8                 7384 	mov	r0,a
   2B63 E6                 7385 	mov	a,@r0
   2B64 08                 7386 	inc	r0
   2B65 46                 7387 	orl	a,@r0
   2B66 70 03              7388 	jnz	00249$
   2B68 02s2BrE8           7389 	ljmp	00107$
   2B6B                    7390 00249$:
   2B6B E5 81              7391 	mov	a,sp
   2B6D 24 E8              7392 	add	a,#0xe8
   2B6F F8                 7393 	mov	r0,a
   2B70 86 82              7394 	mov	dpl,@r0
   2B72 08                 7395 	inc	r0
   2B73 86 83              7396 	mov	dph,@r0
   2B75 08                 7397 	inc	r0
   2B76 86 F0              7398 	mov	b,@r0
   2B78 74 0A              7399 	mov	a,#0x0A
   2B7A 12s00r00           7400 	lcall	__gptrput
   2B7D A3                 7401 	inc	dptr
   2B7E 18                 7402 	dec	r0
   2B7F 18                 7403 	dec	r0
   2B80 A6 82              7404 	mov	@r0,dpl
   2B82 08                 7405 	inc	r0
   2B83 A6 83              7406 	mov	@r0,dph
   2B85 E5 81              7407 	mov	a,sp
   2B87 24 DA              7408 	add	a,#0xda
   2B89 F8                 7409 	mov	r0,a
   2B8A E6                 7410 	mov	a,@r0
   2B8B 24 FF              7411 	add	a,#0xFF
   2B8D FF                 7412 	mov	r7,a
   2B8E 08                 7413 	inc	r0
   2B8F E6                 7414 	mov	a,@r0
   2B90 34 FF              7415 	addc	a,#0xFF
   2B92 FE                 7416 	mov	r6,a
   2B93 E5 81              7417 	mov	a,sp
   2B95 24 E8              7418 	add	a,#0xe8
   2B97 F8                 7419 	mov	r0,a
   2B98 86 05              7420 	mov	ar5,@r0
   2B9A 08                 7421 	inc	r0
   2B9B 86 04              7422 	mov	ar4,@r0
   2B9D 08                 7423 	inc	r0
   2B9E 86 03              7424 	mov	ar3,@r0
   2BA0 E5 81              7425 	mov	a,sp
   2BA2 24 ED              7426 	add	a,#0xed
   2BA4 F8                 7427 	mov	r0,a
   2BA5 E4                 7428 	clr	a
   2BA6 F6                 7429 	mov	@r0,a
   2BA7 08                 7430 	inc	r0
   2BA8 F6                 7431 	mov	@r0,a
   2BA9                    7432 00145$:
   2BA9 E5 81              7433 	mov	a,sp
   2BAB 24 ED              7434 	add	a,#0xed
   2BAD F8                 7435 	mov	r0,a
   2BAE C3                 7436 	clr	c
   2BAF E6                 7437 	mov	a,@r0
   2BB0 9F                 7438 	subb	a,r7
   2BB1 08                 7439 	inc	r0
   2BB2 E6                 7440 	mov	a,@r0
   2BB3 64 80              7441 	xrl	a,#0x80
   2BB5 8E F0              7442 	mov	b,r6
   2BB7 63 F0 80           7443 	xrl	b,#0x80
   2BBA 95 F0              7444 	subb	a,b
   2BBC 50 1D              7445 	jnc	00205$
   2BBE 8D 82              7446 	mov	dpl,r5
   2BC0 8C 83              7447 	mov	dph,r4
   2BC2 8B F0              7448 	mov	b,r3
   2BC4 74 09              7449 	mov	a,#0x09
   2BC6 12s00r00           7450 	lcall	__gptrput
   2BC9 A3                 7451 	inc	dptr
   2BCA AD 82              7452 	mov	r5,dpl
   2BCC AC 83              7453 	mov	r4,dph
   2BCE E5 81              7454 	mov	a,sp
   2BD0 24 ED              7455 	add	a,#0xed
   2BD2 F8                 7456 	mov	r0,a
   2BD3 06                 7457 	inc	@r0
   2BD4 B6 00 02           7458 	cjne	@r0,#0x00,00251$
   2BD7 08                 7459 	inc	r0
   2BD8 06                 7460 	inc	@r0
   2BD9                    7461 00251$:
   2BD9 80 CE              7462 	sjmp	00145$
   2BDB                    7463 00205$:
   2BDB E5 81              7464 	mov	a,sp
   2BDD 24 E8              7465 	add	a,#0xe8
   2BDF F8                 7466 	mov	r0,a
   2BE0 A6 05              7467 	mov	@r0,ar5
   2BE2 08                 7468 	inc	r0
   2BE3 A6 04              7469 	mov	@r0,ar4
   2BE5 08                 7470 	inc	r0
   2BE6 A6 03              7471 	mov	@r0,ar3
   2BE8                    7472 00107$:
                           7473 ;	cJSON.c:442: *ptr++='}';*ptr++=0;
   2BE8 E5 81              7474 	mov	a,sp
   2BEA 24 E8              7475 	add	a,#0xe8
   2BEC F8                 7476 	mov	r0,a
   2BED 86 82              7477 	mov	dpl,@r0
   2BEF 08                 7478 	inc	r0
   2BF0 86 83              7479 	mov	dph,@r0
   2BF2 08                 7480 	inc	r0
   2BF3 86 F0              7481 	mov	b,@r0
   2BF5 74 7D              7482 	mov	a,#0x7D
   2BF7 12s00r00           7483 	lcall	__gptrput
   2BFA A3                 7484 	inc	dptr
   2BFB 18                 7485 	dec	r0
   2BFC 18                 7486 	dec	r0
   2BFD A6 82              7487 	mov	@r0,dpl
   2BFF 08                 7488 	inc	r0
   2C00 A6 83              7489 	mov	@r0,dph
   2C02 E5 81              7490 	mov	a,sp
   2C04 24 E8              7491 	add	a,#0xe8
   2C06 F8                 7492 	mov	r0,a
   2C07 86 82              7493 	mov	dpl,@r0
   2C09 08                 7494 	inc	r0
   2C0A 86 83              7495 	mov	dph,@r0
   2C0C 08                 7496 	inc	r0
   2C0D 86 F0              7497 	mov	b,@r0
   2C0F E4                 7498 	clr	a
   2C10 12s00r00           7499 	lcall	__gptrput
                           7500 ;	cJSON.c:443: return out;
   2C13 E5 81              7501 	mov	a,sp
   2C15 24 E5              7502 	add	a,#0xe5
   2C17 F8                 7503 	mov	r0,a
   2C18 86 82              7504 	mov	dpl,@r0
   2C1A 08                 7505 	inc	r0
   2C1B 86 83              7506 	mov	dph,@r0
   2C1D 08                 7507 	inc	r0
   2C1E 86 F0              7508 	mov	b,@r0
   2C20 02s33r81           7509 	ljmp	00165$
   2C23                    7510 00109$:
                           7511 ;	cJSON.c:446: entries=(char**)cJSON_malloc(numentries*sizeof(char*));
   2C23 C0 02              7512 	push	ar2
   2C25 C0 04              7513 	push	ar4
   2C27 90 00 03           7514 	mov	dptr,#0x0003
   2C2A 12s00r00           7515 	lcall	__mulint
   2C2D AB 82              7516 	mov	r3,dpl
   2C2F AC 83              7517 	mov	r4,dph
   2C31 15 81              7518 	dec	sp
   2C33 15 81              7519 	dec	sp
   2C35 8B 82              7520 	mov	dpl,r3
   2C37 8C 83              7521 	mov	dph,r4
   2C39 C0 04              7522 	push	ar4
   2C3B C0 03              7523 	push	ar3
   2C3D 78r00              7524 	mov	r0,#_malloc
   2C3F 79s00              7525 	mov	r1,#(_malloc >> 8)
   2C41 7As00              7526 	mov	r2,#(_malloc >> 16)
   2C43 12s00r00           7527 	lcall	__sdcc_banked_call
   2C46 AA 82              7528 	mov	r2,dpl
   2C48 AF 83              7529 	mov	r7,dph
   2C4A D0 03              7530 	pop	ar3
   2C4C D0 04              7531 	pop	ar4
   2C4E E5 81              7532 	mov	a,sp
   2C50 24 DF              7533 	add	a,#0xdf
   2C52 F8                 7534 	mov	r0,a
   2C53 A6 02              7535 	mov	@r0,ar2
   2C55 08                 7536 	inc	r0
   2C56 A6 07              7537 	mov	@r0,ar7
   2C58 08                 7538 	inc	r0
   2C59 76 00              7539 	mov	@r0,#0x00
                           7540 ;	cJSON.c:447: if (!entries) return 0;
   2C5B E5 81              7541 	mov	a,sp
   2C5D 24 DF              7542 	add	a,#0xdf
   2C5F F8                 7543 	mov	r0,a
   2C60 E6                 7544 	mov	a,@r0
   2C61 08                 7545 	inc	r0
   2C62 46                 7546 	orl	a,@r0
   2C63 70 08              7547 	jnz	00111$
   2C65 90 00 00           7548 	mov	dptr,#0x0000
   2C68 F5 F0              7549 	mov	b,a
   2C6A 02s33r81           7550 	ljmp	00165$
   2C6D                    7551 00111$:
                           7552 ;	cJSON.c:448: names=(char**)cJSON_malloc(numentries*sizeof(char*));
   2C6D 8B 82              7553 	mov	dpl,r3
   2C6F 8C 83              7554 	mov	dph,r4
   2C71 C0 04              7555 	push	ar4
   2C73 C0 03              7556 	push	ar3
   2C75 78r00              7557 	mov	r0,#_malloc
   2C77 79s00              7558 	mov	r1,#(_malloc >> 8)
   2C79 7As00              7559 	mov	r2,#(_malloc >> 16)
   2C7B 12s00r00           7560 	lcall	__sdcc_banked_call
   2C7E AA 82              7561 	mov	r2,dpl
   2C80 AF 83              7562 	mov	r7,dph
   2C82 D0 03              7563 	pop	ar3
   2C84 D0 04              7564 	pop	ar4
   2C86 E5 81              7565 	mov	a,sp
   2C88 24 E2              7566 	add	a,#0xe2
   2C8A F8                 7567 	mov	r0,a
   2C8B A6 02              7568 	mov	@r0,ar2
   2C8D 08                 7569 	inc	r0
   2C8E A6 07              7570 	mov	@r0,ar7
   2C90 08                 7571 	inc	r0
   2C91 76 00              7572 	mov	@r0,#0x00
                           7573 ;	cJSON.c:449: if (!names) {cJSON_free(entries);return 0;}
   2C93 E5 81              7574 	mov	a,sp
   2C95 24 E2              7575 	add	a,#0xe2
   2C97 F8                 7576 	mov	r0,a
   2C98 E6                 7577 	mov	a,@r0
   2C99 08                 7578 	inc	r0
   2C9A 46                 7579 	orl	a,@r0
   2C9B 70 08              7580 	jnz	00113$
   2C9D 90 00 00           7581 	mov	dptr,#0x0000
   2CA0 F5 F0              7582 	mov	b,a
   2CA2 02s33r81           7583 	ljmp	00165$
   2CA5                    7584 00113$:
                           7585 ;	cJSON.c:450: memset(entries,0,sizeof(char*)*numentries);
   2CA5 E5 81              7586 	mov	a,sp
   2CA7 24 DF              7587 	add	a,#0xdf
   2CA9 F8                 7588 	mov	r0,a
   2CAA 86 02              7589 	mov	ar2,@r0
   2CAC 08                 7590 	inc	r0
   2CAD 86 06              7591 	mov	ar6,@r0
   2CAF 08                 7592 	inc	r0
   2CB0 86 07              7593 	mov	ar7,@r0
   2CB2 C0 04              7594 	push	ar4
   2CB4 C0 03              7595 	push	ar3
   2CB6 C0 03              7596 	push	ar3
   2CB8 C0 04              7597 	push	ar4
   2CBA E4                 7598 	clr	a
   2CBB C0 E0              7599 	push	acc
   2CBD 8A 82              7600 	mov	dpl,r2
   2CBF 8E 83              7601 	mov	dph,r6
   2CC1 8F F0              7602 	mov	b,r7
   2CC3 78r00              7603 	mov	r0,#_memset
   2CC5 79s00              7604 	mov	r1,#(_memset >> 8)
   2CC7 7As00              7605 	mov	r2,#(_memset >> 16)
   2CC9 12s00r00           7606 	lcall	__sdcc_banked_call
   2CCC 15 81              7607 	dec	sp
   2CCE 15 81              7608 	dec	sp
   2CD0 15 81              7609 	dec	sp
   2CD2 D0 03              7610 	pop	ar3
   2CD4 D0 04              7611 	pop	ar4
                           7612 ;	cJSON.c:451: memset(names,0,sizeof(char*)*numentries);
   2CD6 E5 81              7613 	mov	a,sp
   2CD8 24 E2              7614 	add	a,#0xe2
   2CDA F8                 7615 	mov	r0,a
   2CDB 86 05              7616 	mov	ar5,@r0
   2CDD 08                 7617 	inc	r0
   2CDE 86 06              7618 	mov	ar6,@r0
   2CE0 08                 7619 	inc	r0
   2CE1 86 07              7620 	mov	ar7,@r0
   2CE3 C0 03              7621 	push	ar3
   2CE5 C0 04              7622 	push	ar4
   2CE7 E4                 7623 	clr	a
   2CE8 C0 E0              7624 	push	acc
   2CEA 8D 82              7625 	mov	dpl,r5
   2CEC 8E 83              7626 	mov	dph,r6
   2CEE 8F F0              7627 	mov	b,r7
   2CF0 78r00              7628 	mov	r0,#_memset
   2CF2 79s00              7629 	mov	r1,#(_memset >> 8)
   2CF4 7As00              7630 	mov	r2,#(_memset >> 16)
   2CF6 12s00r00           7631 	lcall	__sdcc_banked_call
   2CF9 15 81              7632 	dec	sp
   2CFB 15 81              7633 	dec	sp
   2CFD 15 81              7634 	dec	sp
                           7635 ;	cJSON.c:454: child=item->child;depth++;if (fmt) len+=depth;
   2CFF E5 81              7636 	mov	a,sp
   2D01 24 F8              7637 	add	a,#0xf8
   2D03 F8                 7638 	mov	r0,a
   2D04 86 82              7639 	mov	dpl,@r0
   2D06 08                 7640 	inc	r0
   2D07 86 83              7641 	mov	dph,@r0
   2D09 08                 7642 	inc	r0
   2D0A 86 F0              7643 	mov	b,@r0
   2D0C 12s00r00           7644 	lcall	__gptrget
   2D0F FD                 7645 	mov	r5,a
   2D10 A3                 7646 	inc	dptr
   2D11 12s00r00           7647 	lcall	__gptrget
   2D14 FE                 7648 	mov	r6,a
   2D15 A3                 7649 	inc	dptr
   2D16 12s00r00           7650 	lcall	__gptrget
   2D19 FF                 7651 	mov	r7,a
   2D1A E5 81              7652 	mov	a,sp
   2D1C 24 EF              7653 	add	a,#0xef
   2D1E F8                 7654 	mov	r0,a
   2D1F A6 05              7655 	mov	@r0,ar5
   2D21 08                 7656 	inc	r0
   2D22 A6 06              7657 	mov	@r0,ar6
   2D24 08                 7658 	inc	r0
   2D25 A6 07              7659 	mov	@r0,ar7
   2D27 E5 81              7660 	mov	a,sp
   2D29 24 DA              7661 	add	a,#0xda
   2D2B F8                 7662 	mov	r0,a
   2D2C 06                 7663 	inc	@r0
   2D2D B6 00 02           7664 	cjne	@r0,#0x00,00254$
   2D30 08                 7665 	inc	r0
   2D31 06                 7666 	inc	@r0
   2D32                    7667 00254$:
   2D32 E5 81              7668 	mov	a,sp
   2D34 24 D8              7669 	add	a,#0xd8
   2D36 F8                 7670 	mov	r0,a
   2D37 E6                 7671 	mov	a,@r0
   2D38 08                 7672 	inc	r0
   2D39 46                 7673 	orl	a,@r0
   2D3A 60 13              7674 	jz	00186$
   2D3C E5 81              7675 	mov	a,sp
   2D3E 24 DA              7676 	add	a,#0xda
   2D40 F8                 7677 	mov	r0,a
   2D41 E5 81              7678 	mov	a,sp
   2D43 24 EB              7679 	add	a,#0xeb
   2D45 F9                 7680 	mov	r1,a
   2D46 74 07              7681 	mov	a,#0x07
   2D48 26                 7682 	add	a,@r0
   2D49 F7                 7683 	mov	@r1,a
   2D4A E4                 7684 	clr	a
   2D4B 08                 7685 	inc	r0
   2D4C 36                 7686 	addc	a,@r0
   2D4D 09                 7687 	inc	r1
   2D4E F7                 7688 	mov	@r1,a
                           7689 ;	cJSON.c:455: while (child)
   2D4F                    7690 00186$:
   2D4F E5 81              7691 	mov	a,sp
   2D51 24 DA              7692 	add	a,#0xda
   2D53 F8                 7693 	mov	r0,a
   2D54 74 02              7694 	mov	a,#0x02
   2D56 26                 7695 	add	a,@r0
   2D57 FE                 7696 	mov	r6,a
   2D58 E4                 7697 	clr	a
   2D59 08                 7698 	inc	r0
   2D5A 36                 7699 	addc	a,@r0
   2D5B FF                 7700 	mov	r7,a
   2D5C E5 81              7701 	mov	a,sp
   2D5E 24 ED              7702 	add	a,#0xed
   2D60 F8                 7703 	mov	r0,a
   2D61 E4                 7704 	clr	a
   2D62 F6                 7705 	mov	@r0,a
   2D63 08                 7706 	inc	r0
   2D64 F6                 7707 	mov	@r0,a
   2D65 7A 00              7708 	mov	r2,#0x00
   2D67 7B 00              7709 	mov	r3,#0x00
   2D69                    7710 00120$:
   2D69 E5 81              7711 	mov	a,sp
   2D6B 24 EF              7712 	add	a,#0xef
   2D6D F8                 7713 	mov	r0,a
   2D6E E6                 7714 	mov	a,@r0
   2D6F 08                 7715 	inc	r0
   2D70 46                 7716 	orl	a,@r0
   2D71 70 03              7717 	jnz	00256$
   2D73 02s2FrAB           7718 	ljmp	00122$
   2D76                    7719 00256$:
                           7720 ;	cJSON.c:457: names[i]=str=print_string_ptr(child->string);
   2D76 C0 06              7721 	push	ar6
   2D78 C0 07              7722 	push	ar7
   2D7A E5 81              7723 	mov	a,sp
   2D7C 24 E0              7724 	add	a,#0xe0
   2D7E F8                 7725 	mov	r0,a
   2D7F E5 81              7726 	mov	a,sp
   2D81 24 F6              7727 	add	a,#0xf6
   2D83 F9                 7728 	mov	r1,a
   2D84 EA                 7729 	mov	a,r2
   2D85 26                 7730 	add	a,@r0
   2D86 F7                 7731 	mov	@r1,a
   2D87 EB                 7732 	mov	a,r3
   2D88 08                 7733 	inc	r0
   2D89 36                 7734 	addc	a,@r0
   2D8A 09                 7735 	inc	r1
   2D8B F7                 7736 	mov	@r1,a
   2D8C 08                 7737 	inc	r0
   2D8D 09                 7738 	inc	r1
   2D8E E6                 7739 	mov	a,@r0
   2D8F F7                 7740 	mov	@r1,a
   2D90 E5 81              7741 	mov	a,sp
   2D92 24 ED              7742 	add	a,#0xed
   2D94 F8                 7743 	mov	r0,a
   2D95 74 14              7744 	mov	a,#0x14
   2D97 26                 7745 	add	a,@r0
   2D98 FC                 7746 	mov	r4,a
   2D99 E4                 7747 	clr	a
   2D9A 08                 7748 	inc	r0
   2D9B 36                 7749 	addc	a,@r0
   2D9C FE                 7750 	mov	r6,a
   2D9D 08                 7751 	inc	r0
   2D9E 86 07              7752 	mov	ar7,@r0
   2DA0 8C 82              7753 	mov	dpl,r4
   2DA2 8E 83              7754 	mov	dph,r6
   2DA4 8F F0              7755 	mov	b,r7
   2DA6 12s00r00           7756 	lcall	__gptrget
   2DA9 FC                 7757 	mov	r4,a
   2DAA A3                 7758 	inc	dptr
   2DAB 12s00r00           7759 	lcall	__gptrget
   2DAE FE                 7760 	mov	r6,a
   2DAF A3                 7761 	inc	dptr
   2DB0 12s00r00           7762 	lcall	__gptrget
   2DB3 FF                 7763 	mov	r7,a
   2DB4 8C 82              7764 	mov	dpl,r4
   2DB6 8E 83              7765 	mov	dph,r6
   2DB8 8F F0              7766 	mov	b,r7
   2DBA C0 03              7767 	push	ar3
   2DBC C0 02              7768 	push	ar2
   2DBE 78rED              7769 	mov	r0,#_print_string_ptr
   2DC0 79s12              7770 	mov	r1,#(_print_string_ptr >> 8)
   2DC2 7As00              7771 	mov	r2,#(_print_string_ptr >> 16)
   2DC4 12s00r00           7772 	lcall	__sdcc_banked_call
   2DC7 AD 82              7773 	mov	r5,dpl
   2DC9 AE 83              7774 	mov	r6,dph
   2DCB AF F0              7775 	mov	r7,b
   2DCD D0 02              7776 	pop	ar2
   2DCF D0 03              7777 	pop	ar3
   2DD1 E5 81              7778 	mov	a,sp
   2DD3 24 F9              7779 	add	a,#0xf9
   2DD5 F8                 7780 	mov	r0,a
   2DD6 A6 05              7781 	mov	@r0,ar5
   2DD8 08                 7782 	inc	r0
   2DD9 A6 06              7783 	mov	@r0,ar6
   2DDB 08                 7784 	inc	r0
   2DDC A6 07              7785 	mov	@r0,ar7
   2DDE E5 81              7786 	mov	a,sp
   2DE0 24 F6              7787 	add	a,#0xf6
   2DE2 F8                 7788 	mov	r0,a
   2DE3 86 82              7789 	mov	dpl,@r0
   2DE5 08                 7790 	inc	r0
   2DE6 86 83              7791 	mov	dph,@r0
   2DE8 08                 7792 	inc	r0
   2DE9 86 F0              7793 	mov	b,@r0
   2DEB ED                 7794 	mov	a,r5
   2DEC 12s00r00           7795 	lcall	__gptrput
   2DEF A3                 7796 	inc	dptr
   2DF0 EE                 7797 	mov	a,r6
   2DF1 12s00r00           7798 	lcall	__gptrput
   2DF4 A3                 7799 	inc	dptr
   2DF5 EF                 7800 	mov	a,r7
   2DF6 12s00r00           7801 	lcall	__gptrput
                           7802 ;	cJSON.c:458: entries[i++]=ret=print_value(child,depth,fmt);
   2DF9 E5 81              7803 	mov	a,sp
   2DFB 24 EB              7804 	add	a,#0xeb
   2DFD F8                 7805 	mov	r0,a
   2DFE 86 06              7806 	mov	ar6,@r0
   2E00 08                 7807 	inc	r0
   2E01 86 07              7808 	mov	ar7,@r0
   2E03 74 03              7809 	mov	a,#0x03
   2E05 2A                 7810 	add	a,r2
   2E06 FA                 7811 	mov	r2,a
   2E07 E4                 7812 	clr	a
   2E08 3B                 7813 	addc	a,r3
   2E09 FB                 7814 	mov	r3,a
   2E0A E5 81              7815 	mov	a,sp
   2E0C 24 EB              7816 	add	a,#0xeb
   2E0E F8                 7817 	mov	r0,a
   2E0F 06                 7818 	inc	@r0
   2E10 B6 00 02           7819 	cjne	@r0,#0x00,00257$
   2E13 08                 7820 	inc	r0
   2E14 06                 7821 	inc	@r0
   2E15                    7822 00257$:
   2E15 C0 03              7823 	push	ar3
   2E17 C0 02              7824 	push	ar2
   2E19 C0 06              7825 	push	ar6
   2E1B C0 07              7826 	push	ar7
   2E1D 90 00 03           7827 	mov	dptr,#0x0003
   2E20 12s00r00           7828 	lcall	__mulint
   2E23 AE 82              7829 	mov	r6,dpl
   2E25 AF 83              7830 	mov	r7,dph
   2E27 15 81              7831 	dec	sp
   2E29 15 81              7832 	dec	sp
   2E2B D0 02              7833 	pop	ar2
   2E2D D0 03              7834 	pop	ar3
   2E2F E5 81              7835 	mov	a,sp
   2E31 24 DD              7836 	add	a,#0xdd
   2E33 F8                 7837 	mov	r0,a
   2E34 E5 81              7838 	mov	a,sp
   2E36 24 F6              7839 	add	a,#0xf6
   2E38 F9                 7840 	mov	r1,a
   2E39 EE                 7841 	mov	a,r6
   2E3A 26                 7842 	add	a,@r0
   2E3B F7                 7843 	mov	@r1,a
   2E3C EF                 7844 	mov	a,r7
   2E3D 08                 7845 	inc	r0
   2E3E 36                 7846 	addc	a,@r0
   2E3F 09                 7847 	inc	r1
   2E40 F7                 7848 	mov	@r1,a
   2E41 08                 7849 	inc	r0
   2E42 09                 7850 	inc	r1
   2E43 E6                 7851 	mov	a,@r0
   2E44 F7                 7852 	mov	@r1,a
   2E45 C0 03              7853 	push	ar3
   2E47 C0 02              7854 	push	ar2
   2E49 E5 81              7855 	mov	a,sp
   2E4B 24 D4              7856 	add	a,#0xd4
   2E4D F8                 7857 	mov	r0,a
   2E4E E6                 7858 	mov	a,@r0
   2E4F C0 E0              7859 	push	acc
   2E51 08                 7860 	inc	r0
   2E52 E6                 7861 	mov	a,@r0
   2E53 C0 E0              7862 	push	acc
   2E55 E5 81              7863 	mov	a,sp
   2E57 24 D4              7864 	add	a,#0xd4
   2E59 F8                 7865 	mov	r0,a
   2E5A E6                 7866 	mov	a,@r0
   2E5B C0 E0              7867 	push	acc
   2E5D 08                 7868 	inc	r0
   2E5E E6                 7869 	mov	a,@r0
   2E5F C0 E0              7870 	push	acc
   2E61 E5 81              7871 	mov	a,sp
   2E63 24 E7              7872 	add	a,#0xe7
   2E65 F8                 7873 	mov	r0,a
   2E66 86 82              7874 	mov	dpl,@r0
   2E68 08                 7875 	inc	r0
   2E69 86 83              7876 	mov	dph,@r0
   2E6B 08                 7877 	inc	r0
   2E6C 86 F0              7878 	mov	b,@r0
   2E6E 78r4A              7879 	mov	r0,#_print_value
   2E70 79s1B              7880 	mov	r1,#(_print_value >> 8)
   2E72 7As00              7881 	mov	r2,#(_print_value >> 16)
   2E74 12s00r00           7882 	lcall	__sdcc_banked_call
   2E77 AC 82              7883 	mov	r4,dpl
   2E79 AE 83              7884 	mov	r6,dph
   2E7B AF F0              7885 	mov	r7,b
   2E7D E5 81              7886 	mov	a,sp
   2E7F 24 FC              7887 	add	a,#0xfc
   2E81 F5 81              7888 	mov	sp,a
   2E83 D0 02              7889 	pop	ar2
   2E85 D0 03              7890 	pop	ar3
   2E87 E5 81              7891 	mov	a,sp
   2E89 24 FC              7892 	add	a,#0xfc
   2E8B F8                 7893 	mov	r0,a
   2E8C A6 04              7894 	mov	@r0,ar4
   2E8E 08                 7895 	inc	r0
   2E8F A6 06              7896 	mov	@r0,ar6
   2E91 08                 7897 	inc	r0
   2E92 A6 07              7898 	mov	@r0,ar7
   2E94 E5 81              7899 	mov	a,sp
   2E96 24 F6              7900 	add	a,#0xf6
   2E98 F8                 7901 	mov	r0,a
   2E99 86 82              7902 	mov	dpl,@r0
   2E9B 08                 7903 	inc	r0
   2E9C 86 83              7904 	mov	dph,@r0
   2E9E 08                 7905 	inc	r0
   2E9F 86 F0              7906 	mov	b,@r0
   2EA1 EC                 7907 	mov	a,r4
   2EA2 12s00r00           7908 	lcall	__gptrput
   2EA5 A3                 7909 	inc	dptr
   2EA6 EE                 7910 	mov	a,r6
   2EA7 12s00r00           7911 	lcall	__gptrput
   2EAA A3                 7912 	inc	dptr
   2EAB EF                 7913 	mov	a,r7
   2EAC 12s00r00           7914 	lcall	__gptrput
                           7915 ;	cJSON.c:459: if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
   2EAF D0 07              7916 	pop	ar7
   2EB1 D0 06              7917 	pop	ar6
   2EB3 E5 81              7918 	mov	a,sp
   2EB5 24 FB              7919 	add	a,#0xfb
   2EB7 F8                 7920 	mov	r0,a
   2EB8 E6                 7921 	mov	a,@r0
   2EB9 08                 7922 	inc	r0
   2EBA 46                 7923 	orl	a,@r0
   2EBB 70 03              7924 	jnz	00258$
   2EBD 02s2Fr7F           7925 	ljmp	00117$
   2EC0                    7926 00258$:
   2EC0 A8 81              7927 	mov	r0,sp
   2EC2 18                 7928 	dec	r0
   2EC3 18                 7929 	dec	r0
   2EC4 E6                 7930 	mov	a,@r0
   2EC5 08                 7931 	inc	r0
   2EC6 46                 7932 	orl	a,@r0
   2EC7 70 03              7933 	jnz	00259$
   2EC9 02s2Fr7F           7934 	ljmp	00117$
   2ECC                    7935 00259$:
   2ECC C0 06              7936 	push	ar6
   2ECE C0 07              7937 	push	ar7
   2ED0 E5 81              7938 	mov	a,sp
   2ED2 24 FC              7939 	add	a,#0xfc
   2ED4 F8                 7940 	mov	r0,a
   2ED5 86 82              7941 	mov	dpl,@r0
   2ED7 08                 7942 	inc	r0
   2ED8 86 83              7943 	mov	dph,@r0
   2EDA 08                 7944 	inc	r0
   2EDB 86 F0              7945 	mov	b,@r0
   2EDD C0 07              7946 	push	ar7
   2EDF C0 06              7947 	push	ar6
   2EE1 C0 03              7948 	push	ar3
   2EE3 C0 02              7949 	push	ar2
   2EE5 78r00              7950 	mov	r0,#_strlen
   2EE7 79s00              7951 	mov	r1,#(_strlen >> 8)
   2EE9 7As00              7952 	mov	r2,#(_strlen >> 16)
   2EEB 12s00r00           7953 	lcall	__sdcc_banked_call
   2EEE AC 82              7954 	mov	r4,dpl
   2EF0 AD 83              7955 	mov	r5,dph
   2EF2 D0 02              7956 	pop	ar2
   2EF4 D0 03              7957 	pop	ar3
   2EF6 D0 06              7958 	pop	ar6
   2EF8 D0 07              7959 	pop	ar7
   2EFA E5 81              7960 	mov	a,sp
   2EFC 24 F9              7961 	add	a,#0xf9
   2EFE F8                 7962 	mov	r0,a
   2EFF 86 82              7963 	mov	dpl,@r0
   2F01 08                 7964 	inc	r0
   2F02 86 83              7965 	mov	dph,@r0
   2F04 08                 7966 	inc	r0
   2F05 86 F0              7967 	mov	b,@r0
   2F07 C0 05              7968 	push	ar5
   2F09 C0 04              7969 	push	ar4
   2F0B C0 03              7970 	push	ar3
   2F0D C0 02              7971 	push	ar2
   2F0F 78r00              7972 	mov	r0,#_strlen
   2F11 79s00              7973 	mov	r1,#(_strlen >> 8)
   2F13 7As00              7974 	mov	r2,#(_strlen >> 16)
   2F15 12s00r00           7975 	lcall	__sdcc_banked_call
   2F18 AE 82              7976 	mov	r6,dpl
   2F1A AF 83              7977 	mov	r7,dph
   2F1C D0 02              7978 	pop	ar2
   2F1E D0 03              7979 	pop	ar3
   2F20 D0 04              7980 	pop	ar4
   2F22 D0 05              7981 	pop	ar5
   2F24 EE                 7982 	mov	a,r6
   2F25 2C                 7983 	add	a,r4
   2F26 FC                 7984 	mov	r4,a
   2F27 EF                 7985 	mov	a,r7
   2F28 3D                 7986 	addc	a,r5
   2F29 FD                 7987 	mov	r5,a
   2F2A E5 81              7988 	mov	a,sp
   2F2C 24 FC              7989 	add	a,#0xfc
   2F2E F8                 7990 	mov	r0,a
   2F2F 74 02              7991 	mov	a,#0x02
   2F31 2C                 7992 	add	a,r4
   2F32 F6                 7993 	mov	@r0,a
   2F33 E4                 7994 	clr	a
   2F34 3D                 7995 	addc	a,r5
   2F35 08                 7996 	inc	r0
   2F36 F6                 7997 	mov	@r0,a
   2F37 D0 07              7998 	pop	ar7
   2F39 D0 06              7999 	pop	ar6
   2F3B E5 81              8000 	mov	a,sp
   2F3D 24 D8              8001 	add	a,#0xd8
   2F3F F8                 8002 	mov	r0,a
   2F40 E6                 8003 	mov	a,@r0
   2F41 08                 8004 	inc	r0
   2F42 46                 8005 	orl	a,@r0
   2F43 60 06              8006 	jz	00169$
   2F45 8E 04              8007 	mov	ar4,r6
   2F47 8F 05              8008 	mov	ar5,r7
   2F49 80 04              8009 	sjmp	00170$
   2F4B                    8010 00169$:
   2F4B 7C 00              8011 	mov	r4,#0x00
   2F4D 7D 00              8012 	mov	r5,#0x00
   2F4F                    8013 00170$:
   2F4F C0 06              8014 	push	ar6
   2F51 C0 07              8015 	push	ar7
   2F53 E5 81              8016 	mov	a,sp
   2F55 24 FC              8017 	add	a,#0xfc
   2F57 F8                 8018 	mov	r0,a
   2F58 EC                 8019 	mov	a,r4
   2F59 26                 8020 	add	a,@r0
   2F5A FC                 8021 	mov	r4,a
   2F5B ED                 8022 	mov	a,r5
   2F5C 08                 8023 	inc	r0
   2F5D 36                 8024 	addc	a,@r0
   2F5E FD                 8025 	mov	r5,a
   2F5F E5 81              8026 	mov	a,sp
   2F61 24 E9              8027 	add	a,#0xe9
   2F63 F8                 8028 	mov	r0,a
   2F64 86 06              8029 	mov	ar6,@r0
   2F66 08                 8030 	inc	r0
   2F67 86 07              8031 	mov	ar7,@r0
   2F69 EC                 8032 	mov	a,r4
   2F6A 2E                 8033 	add	a,r6
   2F6B FC                 8034 	mov	r4,a
   2F6C ED                 8035 	mov	a,r5
   2F6D 3F                 8036 	addc	a,r7
   2F6E FD                 8037 	mov	r5,a
   2F6F E5 81              8038 	mov	a,sp
   2F71 24 E9              8039 	add	a,#0xe9
   2F73 F8                 8040 	mov	r0,a
   2F74 A6 04              8041 	mov	@r0,ar4
   2F76 08                 8042 	inc	r0
   2F77 A6 05              8043 	mov	@r0,ar5
   2F79 D0 07              8044 	pop	ar7
   2F7B D0 06              8045 	pop	ar6
   2F7D 80 0A              8046 	sjmp	00118$
   2F7F                    8047 00117$:
   2F7F E5 81              8048 	mov	a,sp
   2F81 24 F2              8049 	add	a,#0xf2
   2F83 F8                 8050 	mov	r0,a
   2F84 76 01              8051 	mov	@r0,#0x01
   2F86 08                 8052 	inc	r0
   2F87 76 00              8053 	mov	@r0,#0x00
   2F89                    8054 00118$:
                           8055 ;	cJSON.c:460: child=child->next;
   2F89 E5 81              8056 	mov	a,sp
   2F8B 24 EF              8057 	add	a,#0xef
   2F8D F8                 8058 	mov	r0,a
   2F8E 86 82              8059 	mov	dpl,@r0
   2F90 08                 8060 	inc	r0
   2F91 86 83              8061 	mov	dph,@r0
   2F93 08                 8062 	inc	r0
   2F94 86 F0              8063 	mov	b,@r0
   2F96 12s00r00           8064 	lcall	__gptrget
   2F99 18                 8065 	dec	r0
   2F9A 18                 8066 	dec	r0
   2F9B F6                 8067 	mov	@r0,a
   2F9C A3                 8068 	inc	dptr
   2F9D 12s00r00           8069 	lcall	__gptrget
   2FA0 08                 8070 	inc	r0
   2FA1 F6                 8071 	mov	@r0,a
   2FA2 A3                 8072 	inc	dptr
   2FA3 12s00r00           8073 	lcall	__gptrget
   2FA6 08                 8074 	inc	r0
   2FA7 F6                 8075 	mov	@r0,a
   2FA8 02s2Dr69           8076 	ljmp	00120$
   2FAB                    8077 00122$:
                           8078 ;	cJSON.c:464: if (!fail) out=(char*)cJSON_malloc(len);
   2FAB E5 81              8079 	mov	a,sp
   2FAD 24 F2              8080 	add	a,#0xf2
   2FAF F8                 8081 	mov	r0,a
   2FB0 E6                 8082 	mov	a,@r0
   2FB1 08                 8083 	inc	r0
   2FB2 46                 8084 	orl	a,@r0
   2FB3 70 28              8085 	jnz	00124$
   2FB5 E5 81              8086 	mov	a,sp
   2FB7 24 EB              8087 	add	a,#0xeb
   2FB9 F8                 8088 	mov	r0,a
   2FBA 86 06              8089 	mov	ar6,@r0
   2FBC 08                 8090 	inc	r0
   2FBD 86 07              8091 	mov	ar7,@r0
   2FBF 8E 82              8092 	mov	dpl,r6
   2FC1 8F 83              8093 	mov	dph,r7
   2FC3 78r00              8094 	mov	r0,#_malloc
   2FC5 79s00              8095 	mov	r1,#(_malloc >> 8)
   2FC7 7As00              8096 	mov	r2,#(_malloc >> 16)
   2FC9 12s00r00           8097 	lcall	__sdcc_banked_call
   2FCC AE 82              8098 	mov	r6,dpl
   2FCE AF 83              8099 	mov	r7,dph
   2FD0 E5 81              8100 	mov	a,sp
   2FD2 24 E5              8101 	add	a,#0xe5
   2FD4 F8                 8102 	mov	r0,a
   2FD5 A6 06              8103 	mov	@r0,ar6
   2FD7 08                 8104 	inc	r0
   2FD8 A6 07              8105 	mov	@r0,ar7
   2FDA 08                 8106 	inc	r0
   2FDB 76 00              8107 	mov	@r0,#0x00
   2FDD                    8108 00124$:
                           8109 ;	cJSON.c:465: if (!out) fail=1;
   2FDD E5 81              8110 	mov	a,sp
   2FDF 24 E5              8111 	add	a,#0xe5
   2FE1 F8                 8112 	mov	r0,a
   2FE2 E6                 8113 	mov	a,@r0
   2FE3 08                 8114 	inc	r0
   2FE4 46                 8115 	orl	a,@r0
   2FE5 70 0A              8116 	jnz	00126$
   2FE7 E5 81              8117 	mov	a,sp
   2FE9 24 F2              8118 	add	a,#0xf2
   2FEB F8                 8119 	mov	r0,a
   2FEC 76 01              8120 	mov	@r0,#0x01
   2FEE 08                 8121 	inc	r0
   2FEF 76 00              8122 	mov	@r0,#0x00
   2FF1                    8123 00126$:
                           8124 ;	cJSON.c:468: if (fail)
   2FF1 E5 81              8125 	mov	a,sp
   2FF3 24 F2              8126 	add	a,#0xf2
   2FF5 F8                 8127 	mov	r0,a
   2FF6 E6                 8128 	mov	a,@r0
   2FF7 08                 8129 	inc	r0
   2FF8 46                 8130 	orl	a,@r0
   2FF9 60 29              8131 	jz	00132$
                           8132 ;	cJSON.c:470: for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
   2FFB 7E 00              8133 	mov	r6,#0x00
   2FFD 7F 00              8134 	mov	r7,#0x00
   2FFF                    8135 00149$:
   2FFF E5 81              8136 	mov	a,sp
   3001 24 F4              8137 	add	a,#0xf4
   3003 F8                 8138 	mov	r0,a
   3004 C3                 8139 	clr	c
   3005 EE                 8140 	mov	a,r6
   3006 96                 8141 	subb	a,@r0
   3007 EF                 8142 	mov	a,r7
   3008 64 80              8143 	xrl	a,#0x80
   300A 08                 8144 	inc	r0
   300B 86 F0              8145 	mov	b,@r0
   300D 63 F0 80           8146 	xrl	b,#0x80
   3010 95 F0              8147 	subb	a,b
   3012 50 07              8148 	jnc	00152$
   3014 0E                 8149 	inc	r6
   3015 BE 00 E7           8150 	cjne	r6,#0x00,00149$
   3018 0F                 8151 	inc	r7
   3019 80 E4              8152 	sjmp	00149$
   301B                    8153 00152$:
                           8154 ;	cJSON.c:472: return 0;
   301B 90 00 00           8155 	mov	dptr,#0x0000
   301E 75 F0 00           8156 	mov	b,#0x00
   3021 02s33r81           8157 	ljmp	00165$
   3024                    8158 00132$:
                           8159 ;	cJSON.c:476: *out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
   3024 E5 81              8160 	mov	a,sp
   3026 24 E5              8161 	add	a,#0xe5
   3028 F8                 8162 	mov	r0,a
   3029 86 82              8163 	mov	dpl,@r0
   302B 08                 8164 	inc	r0
   302C 86 83              8165 	mov	dph,@r0
   302E 08                 8166 	inc	r0
   302F 86 F0              8167 	mov	b,@r0
   3031 74 7B              8168 	mov	a,#0x7B
   3033 12s00r00           8169 	lcall	__gptrput
   3036 E5 81              8170 	mov	a,sp
   3038 24 E5              8171 	add	a,#0xe5
   303A F8                 8172 	mov	r0,a
   303B E5 81              8173 	mov	a,sp
   303D 24 E8              8174 	add	a,#0xe8
   303F F9                 8175 	mov	r1,a
   3040 74 01              8176 	mov	a,#0x01
   3042 26                 8177 	add	a,@r0
   3043 F7                 8178 	mov	@r1,a
   3044 E4                 8179 	clr	a
   3045 08                 8180 	inc	r0
   3046 36                 8181 	addc	a,@r0
   3047 09                 8182 	inc	r1
   3048 F7                 8183 	mov	@r1,a
   3049 08                 8184 	inc	r0
   304A 09                 8185 	inc	r1
   304B E6                 8186 	mov	a,@r0
   304C F7                 8187 	mov	@r1,a
   304D E5 81              8188 	mov	a,sp
   304F 24 D8              8189 	add	a,#0xd8
   3051 F8                 8190 	mov	r0,a
   3052 E6                 8191 	mov	a,@r0
   3053 08                 8192 	inc	r0
   3054 46                 8193 	orl	a,@r0
   3055 60 12              8194 	jz	00134$
   3057 E5 81              8195 	mov	a,sp
   3059 24 E8              8196 	add	a,#0xe8
   305B F8                 8197 	mov	r0,a
   305C 86 82              8198 	mov	dpl,@r0
   305E 08                 8199 	inc	r0
   305F 86 83              8200 	mov	dph,@r0
   3061 08                 8201 	inc	r0
   3062 86 F0              8202 	mov	b,@r0
   3064 74 0A              8203 	mov	a,#0x0A
   3066 12s00r00           8204 	lcall	__gptrput
   3069                    8205 00134$:
   3069 E5 81              8206 	mov	a,sp
   306B 24 E8              8207 	add	a,#0xe8
   306D F8                 8208 	mov	r0,a
   306E 86 82              8209 	mov	dpl,@r0
   3070 08                 8210 	inc	r0
   3071 86 83              8211 	mov	dph,@r0
   3073 08                 8212 	inc	r0
   3074 86 F0              8213 	mov	b,@r0
   3076 E4                 8214 	clr	a
   3077 12s00r00           8215 	lcall	__gptrput
                           8216 ;	cJSON.c:477: for (i=0;i<numentries;i++)
   307A E5 81              8217 	mov	a,sp
   307C 24 F4              8218 	add	a,#0xf4
   307E F8                 8219 	mov	r0,a
   307F E5 81              8220 	mov	a,sp
   3081 24 F6              8221 	add	a,#0xf6
   3083 F9                 8222 	mov	r1,a
   3084 E6                 8223 	mov	a,@r0
   3085 24 FF              8224 	add	a,#0xFF
   3087 F7                 8225 	mov	@r1,a
   3088 08                 8226 	inc	r0
   3089 E6                 8227 	mov	a,@r0
   308A 34 FF              8228 	addc	a,#0xFF
   308C 09                 8229 	inc	r1
   308D F7                 8230 	mov	@r1,a
   308E E5 81              8231 	mov	a,sp
   3090 24 ED              8232 	add	a,#0xed
   3092 F8                 8233 	mov	r0,a
   3093 E4                 8234 	clr	a
   3094 F6                 8235 	mov	@r0,a
   3095 08                 8236 	inc	r0
   3096 F6                 8237 	mov	@r0,a
   3097 E5 81              8238 	mov	a,sp
   3099 24 F8              8239 	add	a,#0xf8
   309B F8                 8240 	mov	r0,a
   309C E4                 8241 	clr	a
   309D F6                 8242 	mov	@r0,a
   309E 08                 8243 	inc	r0
   309F F6                 8244 	mov	@r0,a
   30A0 A8 81              8245 	mov	r0,sp
   30A2 18                 8246 	dec	r0
   30A3 18                 8247 	dec	r0
   30A4 E4                 8248 	clr	a
   30A5 F6                 8249 	mov	@r0,a
   30A6 08                 8250 	inc	r0
   30A7 F6                 8251 	mov	@r0,a
   30A8                    8252 00157$:
   30A8 E5 81              8253 	mov	a,sp
   30AA 24 ED              8254 	add	a,#0xed
   30AC F8                 8255 	mov	r0,a
   30AD E5 81              8256 	mov	a,sp
   30AF 24 F4              8257 	add	a,#0xf4
   30B1 F9                 8258 	mov	r1,a
   30B2 C3                 8259 	clr	c
   30B3 E6                 8260 	mov	a,@r0
   30B4 97                 8261 	subb	a,@r1
   30B5 08                 8262 	inc	r0
   30B6 E6                 8263 	mov	a,@r0
   30B7 64 80              8264 	xrl	a,#0x80
   30B9 09                 8265 	inc	r1
   30BA 87 F0              8266 	mov	b,@r1
   30BC 63 F0 80           8267 	xrl	b,#0x80
   30BF 95 F0              8268 	subb	a,b
   30C1 40 03              8269 	jc	00267$
   30C3 02s32rE3           8270 	ljmp	00160$
   30C6                    8271 00267$:
                           8272 ;	cJSON.c:479: if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
   30C6 E5 81              8273 	mov	a,sp
   30C8 24 D8              8274 	add	a,#0xd8
   30CA F8                 8275 	mov	r0,a
   30CB E6                 8276 	mov	a,@r0
   30CC 08                 8277 	inc	r0
   30CD 46                 8278 	orl	a,@r0
   30CE 60 4A              8279 	jz	00136$
   30D0 E5 81              8280 	mov	a,sp
   30D2 24 E8              8281 	add	a,#0xe8
   30D4 F8                 8282 	mov	r0,a
   30D5 86 07              8283 	mov	ar7,@r0
   30D7 08                 8284 	inc	r0
   30D8 86 06              8285 	mov	ar6,@r0
   30DA 08                 8286 	inc	r0
   30DB 86 03              8287 	mov	ar3,@r0
   30DD 7C 00              8288 	mov	r4,#0x00
   30DF 7D 00              8289 	mov	r5,#0x00
   30E1                    8290 00153$:
   30E1 E5 81              8291 	mov	a,sp
   30E3 24 DA              8292 	add	a,#0xda
   30E5 F8                 8293 	mov	r0,a
   30E6 C3                 8294 	clr	c
   30E7 EC                 8295 	mov	a,r4
   30E8 96                 8296 	subb	a,@r0
   30E9 ED                 8297 	mov	a,r5
   30EA 64 80              8298 	xrl	a,#0x80
   30EC 08                 8299 	inc	r0
   30ED 86 F0              8300 	mov	b,@r0
   30EF 63 F0 80           8301 	xrl	b,#0x80
   30F2 95 F0              8302 	subb	a,b
   30F4 50 17              8303 	jnc	00208$
   30F6 8F 82              8304 	mov	dpl,r7
   30F8 8E 83              8305 	mov	dph,r6
   30FA 8B F0              8306 	mov	b,r3
   30FC 74 09              8307 	mov	a,#0x09
   30FE 12s00r00           8308 	lcall	__gptrput
   3101 A3                 8309 	inc	dptr
   3102 AF 82              8310 	mov	r7,dpl
   3104 AE 83              8311 	mov	r6,dph
   3106 0C                 8312 	inc	r4
   3107 BC 00 D7           8313 	cjne	r4,#0x00,00153$
   310A 0D                 8314 	inc	r5
   310B 80 D4              8315 	sjmp	00153$
   310D                    8316 00208$:
   310D E5 81              8317 	mov	a,sp
   310F 24 E8              8318 	add	a,#0xe8
   3111 F8                 8319 	mov	r0,a
   3112 A6 07              8320 	mov	@r0,ar7
   3114 08                 8321 	inc	r0
   3115 A6 06              8322 	mov	@r0,ar6
   3117 08                 8323 	inc	r0
   3118 A6 03              8324 	mov	@r0,ar3
   311A                    8325 00136$:
                           8326 ;	cJSON.c:480: strcpy(ptr,names[i]);ptr+=strlen(names[i]);
   311A E5 81              8327 	mov	a,sp
   311C 24 E2              8328 	add	a,#0xe2
   311E F8                 8329 	mov	r0,a
   311F E5 81              8330 	mov	a,sp
   3121 24 F8              8331 	add	a,#0xf8
   3123 F9                 8332 	mov	r1,a
   3124 E7                 8333 	mov	a,@r1
   3125 26                 8334 	add	a,@r0
   3126 FC                 8335 	mov	r4,a
   3127 09                 8336 	inc	r1
   3128 E7                 8337 	mov	a,@r1
   3129 08                 8338 	inc	r0
   312A 36                 8339 	addc	a,@r0
   312B FD                 8340 	mov	r5,a
   312C 08                 8341 	inc	r0
   312D 86 07              8342 	mov	ar7,@r0
   312F 8C 82              8343 	mov	dpl,r4
   3131 8D 83              8344 	mov	dph,r5
   3133 8F F0              8345 	mov	b,r7
   3135 12s00r00           8346 	lcall	__gptrget
   3138 FA                 8347 	mov	r2,a
   3139 A3                 8348 	inc	dptr
   313A 12s00r00           8349 	lcall	__gptrget
   313D FB                 8350 	mov	r3,a
   313E A3                 8351 	inc	dptr
   313F 12s00r00           8352 	lcall	__gptrget
   3142 FE                 8353 	mov	r6,a
   3143 C0 07              8354 	push	ar7
   3145 C0 05              8355 	push	ar5
   3147 C0 04              8356 	push	ar4
   3149 C0 02              8357 	push	ar2
   314B C0 03              8358 	push	ar3
   314D C0 06              8359 	push	ar6
   314F E5 81              8360 	mov	a,sp
   3151 24 E2              8361 	add	a,#0xe2
   3153 F8                 8362 	mov	r0,a
   3154 86 82              8363 	mov	dpl,@r0
   3156 08                 8364 	inc	r0
   3157 86 83              8365 	mov	dph,@r0
   3159 08                 8366 	inc	r0
   315A 86 F0              8367 	mov	b,@r0
   315C 78r00              8368 	mov	r0,#_strcpy
   315E 79s00              8369 	mov	r1,#(_strcpy >> 8)
   3160 7As00              8370 	mov	r2,#(_strcpy >> 16)
   3162 12s00r00           8371 	lcall	__sdcc_banked_call
   3165 15 81              8372 	dec	sp
   3167 15 81              8373 	dec	sp
   3169 15 81              8374 	dec	sp
   316B D0 04              8375 	pop	ar4
   316D D0 05              8376 	pop	ar5
   316F D0 07              8377 	pop	ar7
   3171 8C 82              8378 	mov	dpl,r4
   3173 8D 83              8379 	mov	dph,r5
   3175 8F F0              8380 	mov	b,r7
   3177 12s00r00           8381 	lcall	__gptrget
   317A FC                 8382 	mov	r4,a
   317B A3                 8383 	inc	dptr
   317C 12s00r00           8384 	lcall	__gptrget
   317F FD                 8385 	mov	r5,a
   3180 A3                 8386 	inc	dptr
   3181 12s00r00           8387 	lcall	__gptrget
   3184 FF                 8388 	mov	r7,a
   3185 8C 82              8389 	mov	dpl,r4
   3187 8D 83              8390 	mov	dph,r5
   3189 8F F0              8391 	mov	b,r7
   318B 78r00              8392 	mov	r0,#_strlen
   318D 79s00              8393 	mov	r1,#(_strlen >> 8)
   318F 7As00              8394 	mov	r2,#(_strlen >> 16)
   3191 12s00r00           8395 	lcall	__sdcc_banked_call
   3194 AE 82              8396 	mov	r6,dpl
   3196 AF 83              8397 	mov	r7,dph
   3198 E5 81              8398 	mov	a,sp
   319A 24 E8              8399 	add	a,#0xe8
   319C F8                 8400 	mov	r0,a
   319D EE                 8401 	mov	a,r6
   319E 26                 8402 	add	a,@r0
   319F F6                 8403 	mov	@r0,a
   31A0 EF                 8404 	mov	a,r7
   31A1 08                 8405 	inc	r0
   31A2 36                 8406 	addc	a,@r0
   31A3 F6                 8407 	mov	@r0,a
                           8408 ;	cJSON.c:481: *ptr++=':';if (fmt) *ptr++='\t';
   31A4 E5 81              8409 	mov	a,sp
   31A6 24 E8              8410 	add	a,#0xe8
   31A8 F8                 8411 	mov	r0,a
   31A9 86 82              8412 	mov	dpl,@r0
   31AB 08                 8413 	inc	r0
   31AC 86 83              8414 	mov	dph,@r0
   31AE 08                 8415 	inc	r0
   31AF 86 F0              8416 	mov	b,@r0
   31B1 74 3A              8417 	mov	a,#0x3A
   31B3 12s00r00           8418 	lcall	__gptrput
   31B6 A3                 8419 	inc	dptr
   31B7 18                 8420 	dec	r0
   31B8 18                 8421 	dec	r0
   31B9 A6 82              8422 	mov	@r0,dpl
   31BB 08                 8423 	inc	r0
   31BC A6 83              8424 	mov	@r0,dph
   31BE E5 81              8425 	mov	a,sp
   31C0 24 D8              8426 	add	a,#0xd8
   31C2 F8                 8427 	mov	r0,a
   31C3 E6                 8428 	mov	a,@r0
   31C4 08                 8429 	inc	r0
   31C5 46                 8430 	orl	a,@r0
   31C6 60 12              8431 	jz	00138$
   31C8 E5 81              8432 	mov	a,sp
   31CA 24 E8              8433 	add	a,#0xe8
   31CC F8                 8434 	mov	r0,a
   31CD 86 82              8435 	mov	dpl,@r0
   31CF 08                 8436 	inc	r0
   31D0 86 83              8437 	mov	dph,@r0
   31D2 08                 8438 	inc	r0
   31D3 86 F0              8439 	mov	b,@r0
   31D5 74 09              8440 	mov	a,#0x09
   31D7 12s00r00           8441 	lcall	__gptrput
   31DA                    8442 00138$:
                           8443 ;	cJSON.c:482: strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
   31DA E5 81              8444 	mov	a,sp
   31DC 24 DF              8445 	add	a,#0xdf
   31DE F8                 8446 	mov	r0,a
   31DF A9 81              8447 	mov	r1,sp
   31E1 19                 8448 	dec	r1
   31E2 19                 8449 	dec	r1
   31E3 E7                 8450 	mov	a,@r1
   31E4 26                 8451 	add	a,@r0
   31E5 FB                 8452 	mov	r3,a
   31E6 09                 8453 	inc	r1
   31E7 E7                 8454 	mov	a,@r1
   31E8 08                 8455 	inc	r0
   31E9 36                 8456 	addc	a,@r0
   31EA FC                 8457 	mov	r4,a
   31EB 08                 8458 	inc	r0
   31EC 86 05              8459 	mov	ar5,@r0
   31EE 8B 82              8460 	mov	dpl,r3
   31F0 8C 83              8461 	mov	dph,r4
   31F2 8D F0              8462 	mov	b,r5
   31F4 12s00r00           8463 	lcall	__gptrget
   31F7 FA                 8464 	mov	r2,a
   31F8 A3                 8465 	inc	dptr
   31F9 12s00r00           8466 	lcall	__gptrget
   31FC FE                 8467 	mov	r6,a
   31FD A3                 8468 	inc	dptr
   31FE 12s00r00           8469 	lcall	__gptrget
   3201 FF                 8470 	mov	r7,a
   3202 C0 05              8471 	push	ar5
   3204 C0 04              8472 	push	ar4
   3206 C0 03              8473 	push	ar3
   3208 C0 02              8474 	push	ar2
   320A C0 06              8475 	push	ar6
   320C C0 07              8476 	push	ar7
   320E E5 81              8477 	mov	a,sp
   3210 24 E2              8478 	add	a,#0xe2
   3212 F8                 8479 	mov	r0,a
   3213 86 82              8480 	mov	dpl,@r0
   3215 08                 8481 	inc	r0
   3216 86 83              8482 	mov	dph,@r0
   3218 08                 8483 	inc	r0
   3219 86 F0              8484 	mov	b,@r0
   321B 78r00              8485 	mov	r0,#_strcpy
   321D 79s00              8486 	mov	r1,#(_strcpy >> 8)
   321F 7As00              8487 	mov	r2,#(_strcpy >> 16)
   3221 12s00r00           8488 	lcall	__sdcc_banked_call
   3224 15 81              8489 	dec	sp
   3226 15 81              8490 	dec	sp
   3228 15 81              8491 	dec	sp
   322A D0 03              8492 	pop	ar3
   322C D0 04              8493 	pop	ar4
   322E D0 05              8494 	pop	ar5
   3230 8B 82              8495 	mov	dpl,r3
   3232 8C 83              8496 	mov	dph,r4
   3234 8D F0              8497 	mov	b,r5
   3236 12s00r00           8498 	lcall	__gptrget
   3239 FB                 8499 	mov	r3,a
   323A A3                 8500 	inc	dptr
   323B 12s00r00           8501 	lcall	__gptrget
   323E FC                 8502 	mov	r4,a
   323F A3                 8503 	inc	dptr
   3240 12s00r00           8504 	lcall	__gptrget
   3243 FD                 8505 	mov	r5,a
   3244 8B 82              8506 	mov	dpl,r3
   3246 8C 83              8507 	mov	dph,r4
   3248 8D F0              8508 	mov	b,r5
   324A 78r00              8509 	mov	r0,#_strlen
   324C 79s00              8510 	mov	r1,#(_strlen >> 8)
   324E 7As00              8511 	mov	r2,#(_strlen >> 16)
   3250 12s00r00           8512 	lcall	__sdcc_banked_call
   3253 AE 82              8513 	mov	r6,dpl
   3255 AF 83              8514 	mov	r7,dph
   3257 E5 81              8515 	mov	a,sp
   3259 24 E8              8516 	add	a,#0xe8
   325B F8                 8517 	mov	r0,a
   325C EE                 8518 	mov	a,r6
   325D 26                 8519 	add	a,@r0
   325E F6                 8520 	mov	@r0,a
   325F EF                 8521 	mov	a,r7
   3260 08                 8522 	inc	r0
   3261 36                 8523 	addc	a,@r0
   3262 F6                 8524 	mov	@r0,a
                           8525 ;	cJSON.c:483: if (i!=numentries-1) *ptr++=',';
   3263 E5 81              8526 	mov	a,sp
   3265 24 ED              8527 	add	a,#0xed
   3267 F8                 8528 	mov	r0,a
   3268 E5 81              8529 	mov	a,sp
   326A 24 F6              8530 	add	a,#0xf6
   326C F9                 8531 	mov	r1,a
   326D 86 F0              8532 	mov	b,@r0
   326F E7                 8533 	mov	a,@r1
   3270 B5 F0 0A           8534 	cjne	a,b,00272$
   3273 08                 8535 	inc	r0
   3274 86 F0              8536 	mov	b,@r0
   3276 09                 8537 	inc	r1
   3277 E7                 8538 	mov	a,@r1
   3278 B5 F0 02           8539 	cjne	a,b,00272$
   327B 80 12              8540 	sjmp	00140$
   327D                    8541 00272$:
   327D E5 81              8542 	mov	a,sp
   327F 24 E8              8543 	add	a,#0xe8
   3281 F8                 8544 	mov	r0,a
   3282 86 82              8545 	mov	dpl,@r0
   3284 08                 8546 	inc	r0
   3285 86 83              8547 	mov	dph,@r0
   3287 08                 8548 	inc	r0
   3288 86 F0              8549 	mov	b,@r0
   328A 74 2C              8550 	mov	a,#0x2C
   328C 12s00r00           8551 	lcall	__gptrput
   328F                    8552 00140$:
                           8553 ;	cJSON.c:484: if (fmt) *ptr++='\n';*ptr=0;
   328F E5 81              8554 	mov	a,sp
   3291 24 D8              8555 	add	a,#0xd8
   3293 F8                 8556 	mov	r0,a
   3294 E6                 8557 	mov	a,@r0
   3295 08                 8558 	inc	r0
   3296 46                 8559 	orl	a,@r0
   3297 60 12              8560 	jz	00142$
   3299 E5 81              8561 	mov	a,sp
   329B 24 E8              8562 	add	a,#0xe8
   329D F8                 8563 	mov	r0,a
   329E 86 82              8564 	mov	dpl,@r0
   32A0 08                 8565 	inc	r0
   32A1 86 83              8566 	mov	dph,@r0
   32A3 08                 8567 	inc	r0
   32A4 86 F0              8568 	mov	b,@r0
   32A6 74 0A              8569 	mov	a,#0x0A
   32A8 12s00r00           8570 	lcall	__gptrput
   32AB                    8571 00142$:
   32AB E5 81              8572 	mov	a,sp
   32AD 24 E8              8573 	add	a,#0xe8
   32AF F8                 8574 	mov	r0,a
   32B0 86 82              8575 	mov	dpl,@r0
   32B2 08                 8576 	inc	r0
   32B3 86 83              8577 	mov	dph,@r0
   32B5 08                 8578 	inc	r0
   32B6 86 F0              8579 	mov	b,@r0
   32B8 E4                 8580 	clr	a
   32B9 12s00r00           8581 	lcall	__gptrput
                           8582 ;	cJSON.c:477: for (i=0;i<numentries;i++)
   32BC E5 81              8583 	mov	a,sp
   32BE 24 F8              8584 	add	a,#0xf8
   32C0 F8                 8585 	mov	r0,a
   32C1 74 03              8586 	mov	a,#0x03
   32C3 26                 8587 	add	a,@r0
   32C4 F6                 8588 	mov	@r0,a
   32C5 E4                 8589 	clr	a
   32C6 08                 8590 	inc	r0
   32C7 36                 8591 	addc	a,@r0
   32C8 F6                 8592 	mov	@r0,a
   32C9 A8 81              8593 	mov	r0,sp
   32CB 18                 8594 	dec	r0
   32CC 18                 8595 	dec	r0
   32CD 74 03              8596 	mov	a,#0x03
   32CF 26                 8597 	add	a,@r0
   32D0 F6                 8598 	mov	@r0,a
   32D1 E4                 8599 	clr	a
   32D2 08                 8600 	inc	r0
   32D3 36                 8601 	addc	a,@r0
   32D4 F6                 8602 	mov	@r0,a
   32D5 E5 81              8603 	mov	a,sp
   32D7 24 ED              8604 	add	a,#0xed
   32D9 F8                 8605 	mov	r0,a
   32DA 06                 8606 	inc	@r0
   32DB B6 00 02           8607 	cjne	@r0,#0x00,00274$
   32DE 08                 8608 	inc	r0
   32DF 06                 8609 	inc	@r0
   32E0                    8610 00274$:
   32E0 02s30rA8           8611 	ljmp	00157$
   32E3                    8612 00160$:
                           8613 ;	cJSON.c:489: if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
   32E3 E5 81              8614 	mov	a,sp
   32E5 24 D8              8615 	add	a,#0xd8
   32E7 F8                 8616 	mov	r0,a
   32E8 E6                 8617 	mov	a,@r0
   32E9 08                 8618 	inc	r0
   32EA 46                 8619 	orl	a,@r0
   32EB 60 5C              8620 	jz	00144$
   32ED E5 81              8621 	mov	a,sp
   32EF 24 DA              8622 	add	a,#0xda
   32F1 F8                 8623 	mov	r0,a
   32F2 A9 81              8624 	mov	r1,sp
   32F4 19                 8625 	dec	r1
   32F5 19                 8626 	dec	r1
   32F6 E6                 8627 	mov	a,@r0
   32F7 24 FF              8628 	add	a,#0xFF
   32F9 F7                 8629 	mov	@r1,a
   32FA 08                 8630 	inc	r0
   32FB E6                 8631 	mov	a,@r0
   32FC 34 FF              8632 	addc	a,#0xFF
   32FE 09                 8633 	inc	r1
   32FF F7                 8634 	mov	@r1,a
   3300 E5 81              8635 	mov	a,sp
   3302 24 E8              8636 	add	a,#0xe8
   3304 F8                 8637 	mov	r0,a
   3305 86 03              8638 	mov	ar3,@r0
   3307 08                 8639 	inc	r0
   3308 86 04              8640 	mov	ar4,@r0
   330A 08                 8641 	inc	r0
   330B 86 05              8642 	mov	ar5,@r0
   330D 7A 00              8643 	mov	r2,#0x00
   330F 7F 00              8644 	mov	r7,#0x00
   3311                    8645 00161$:
   3311 A8 81              8646 	mov	r0,sp
   3313 18                 8647 	dec	r0
   3314 18                 8648 	dec	r0
   3315 C3                 8649 	clr	c
   3316 EA                 8650 	mov	a,r2
   3317 96                 8651 	subb	a,@r0
   3318 EF                 8652 	mov	a,r7
   3319 64 80              8653 	xrl	a,#0x80
   331B 08                 8654 	inc	r0
   331C 86 F0              8655 	mov	b,@r0
   331E 63 F0 80           8656 	xrl	b,#0x80
   3321 95 F0              8657 	subb	a,b
   3323 50 17              8658 	jnc	00209$
   3325 8B 82              8659 	mov	dpl,r3
   3327 8C 83              8660 	mov	dph,r4
   3329 8D F0              8661 	mov	b,r5
   332B 74 09              8662 	mov	a,#0x09
   332D 12s00r00           8663 	lcall	__gptrput
   3330 A3                 8664 	inc	dptr
   3331 AB 82              8665 	mov	r3,dpl
   3333 AC 83              8666 	mov	r4,dph
   3335 0A                 8667 	inc	r2
   3336 BA 00 D8           8668 	cjne	r2,#0x00,00161$
   3339 0F                 8669 	inc	r7
   333A 80 D5              8670 	sjmp	00161$
   333C                    8671 00209$:
   333C E5 81              8672 	mov	a,sp
   333E 24 E8              8673 	add	a,#0xe8
   3340 F8                 8674 	mov	r0,a
   3341 A6 03              8675 	mov	@r0,ar3
   3343 08                 8676 	inc	r0
   3344 A6 04              8677 	mov	@r0,ar4
   3346 08                 8678 	inc	r0
   3347 A6 05              8679 	mov	@r0,ar5
   3349                    8680 00144$:
                           8681 ;	cJSON.c:490: *ptr++='}';*ptr++=0;
   3349 E5 81              8682 	mov	a,sp
   334B 24 E8              8683 	add	a,#0xe8
   334D F8                 8684 	mov	r0,a
   334E 86 82              8685 	mov	dpl,@r0
   3350 08                 8686 	inc	r0
   3351 86 83              8687 	mov	dph,@r0
   3353 08                 8688 	inc	r0
   3354 86 F0              8689 	mov	b,@r0
   3356 74 7D              8690 	mov	a,#0x7D
   3358 12s00r00           8691 	lcall	__gptrput
   335B A3                 8692 	inc	dptr
   335C 18                 8693 	dec	r0
   335D 18                 8694 	dec	r0
   335E A6 82              8695 	mov	@r0,dpl
   3360 08                 8696 	inc	r0
   3361 A6 83              8697 	mov	@r0,dph
   3363 E5 81              8698 	mov	a,sp
   3365 24 E8              8699 	add	a,#0xe8
   3367 F8                 8700 	mov	r0,a
   3368 86 82              8701 	mov	dpl,@r0
   336A 08                 8702 	inc	r0
   336B 86 83              8703 	mov	dph,@r0
   336D 08                 8704 	inc	r0
   336E 86 F0              8705 	mov	b,@r0
   3370 E4                 8706 	clr	a
   3371 12s00r00           8707 	lcall	__gptrput
                           8708 ;	cJSON.c:491: return out;	
   3374 E5 81              8709 	mov	a,sp
   3376 24 E5              8710 	add	a,#0xe5
   3378 F8                 8711 	mov	r0,a
   3379 86 82              8712 	mov	dpl,@r0
   337B 08                 8713 	inc	r0
   337C 86 83              8714 	mov	dph,@r0
   337E 08                 8715 	inc	r0
   337F 86 F0              8716 	mov	b,@r0
   3381                    8717 00165$:
   3381 E5 81              8718 	mov	a,sp
   3383 24 DE              8719 	add	a,#0xDE
   3385 F5 81              8720 	mov	sp,a
   3387 02s00r00           8721 	ljmp	__sdcc_banked_ret
                           8722 ;------------------------------------------------------------
                           8723 ;Allocation info for local variables in function 'cJSON_GetArraySize'
                           8724 ;------------------------------------------------------------
                           8725 ;array                     Allocated to registers r5 r6 r7 
                           8726 ;c                         Allocated to registers r5 r6 r7 
                           8727 ;i                         Allocated to registers r3 r4 
                           8728 ;------------------------------------------------------------
                           8729 ;	cJSON.c:495: int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
                           8730 ;	-----------------------------------------
                           8731 ;	 function cJSON_GetArraySize
                           8732 ;	-----------------------------------------
   338A                    8733 _cJSON_GetArraySize:
   338A AD 82              8734 	mov	r5,dpl
   338C AE 83              8735 	mov	r6,dph
   338E AF F0              8736 	mov	r7,b
   3390 74 06              8737 	mov	a,#0x06
   3392 2D                 8738 	add	a,r5
   3393 FD                 8739 	mov	r5,a
   3394 E4                 8740 	clr	a
   3395 3E                 8741 	addc	a,r6
   3396 FE                 8742 	mov	r6,a
   3397 8D 82              8743 	mov	dpl,r5
   3399 8E 83              8744 	mov	dph,r6
   339B 8F F0              8745 	mov	b,r7
   339D 12s00r00           8746 	lcall	__gptrget
   33A0 FD                 8747 	mov	r5,a
   33A1 A3                 8748 	inc	dptr
   33A2 12s00r00           8749 	lcall	__gptrget
   33A5 FE                 8750 	mov	r6,a
   33A6 A3                 8751 	inc	dptr
   33A7 12s00r00           8752 	lcall	__gptrget
   33AA FF                 8753 	mov	r7,a
   33AB 7B 00              8754 	mov	r3,#0x00
   33AD 7C 00              8755 	mov	r4,#0x00
   33AF                    8756 00101$:
   33AF ED                 8757 	mov	a,r5
   33B0 4E                 8758 	orl	a,r6
   33B1 60 1B              8759 	jz	00103$
   33B3 0B                 8760 	inc	r3
   33B4 BB 00 01           8761 	cjne	r3,#0x00,00112$
   33B7 0C                 8762 	inc	r4
   33B8                    8763 00112$:
   33B8 8D 82              8764 	mov	dpl,r5
   33BA 8E 83              8765 	mov	dph,r6
   33BC 8F F0              8766 	mov	b,r7
   33BE 12s00r00           8767 	lcall	__gptrget
   33C1 FD                 8768 	mov	r5,a
   33C2 A3                 8769 	inc	dptr
   33C3 12s00r00           8770 	lcall	__gptrget
   33C6 FE                 8771 	mov	r6,a
   33C7 A3                 8772 	inc	dptr
   33C8 12s00r00           8773 	lcall	__gptrget
   33CB FF                 8774 	mov	r7,a
   33CC 80 E1              8775 	sjmp	00101$
   33CE                    8776 00103$:
   33CE 8B 82              8777 	mov	dpl,r3
   33D0 8C 83              8778 	mov	dph,r4
   33D2 02s00r00           8779 	ljmp	__sdcc_banked_ret
                           8780 ;------------------------------------------------------------
                           8781 ;Allocation info for local variables in function 'cJSON_GetArrayItem'
                           8782 ;------------------------------------------------------------
                           8783 ;item                      Allocated to stack - sp -4
                           8784 ;array                     Allocated to registers r5 r6 r7 
                           8785 ;c                         Allocated to registers r5 r6 r7 
                           8786 ;------------------------------------------------------------
                           8787 ;	cJSON.c:496: cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
                           8788 ;	-----------------------------------------
                           8789 ;	 function cJSON_GetArrayItem
                           8790 ;	-----------------------------------------
   33D5                    8791 _cJSON_GetArrayItem:
   33D5 AD 82              8792 	mov	r5,dpl
   33D7 AE 83              8793 	mov	r6,dph
   33D9 AF F0              8794 	mov	r7,b
   33DB 74 06              8795 	mov	a,#0x06
   33DD 2D                 8796 	add	a,r5
   33DE FD                 8797 	mov	r5,a
   33DF E4                 8798 	clr	a
   33E0 3E                 8799 	addc	a,r6
   33E1 FE                 8800 	mov	r6,a
   33E2 8D 82              8801 	mov	dpl,r5
   33E4 8E 83              8802 	mov	dph,r6
   33E6 8F F0              8803 	mov	b,r7
   33E8 12s00r00           8804 	lcall	__gptrget
   33EB FD                 8805 	mov	r5,a
   33EC A3                 8806 	inc	dptr
   33ED 12s00r00           8807 	lcall	__gptrget
   33F0 FE                 8808 	mov	r6,a
   33F1 A3                 8809 	inc	dptr
   33F2 12s00r00           8810 	lcall	__gptrget
   33F5 FF                 8811 	mov	r7,a
   33F6 E5 81              8812 	mov	a,sp
   33F8 24 FC              8813 	add	a,#0xfc
   33FA F8                 8814 	mov	r0,a
   33FB 86 03              8815 	mov	ar3,@r0
   33FD 08                 8816 	inc	r0
   33FE 86 04              8817 	mov	ar4,@r0
   3400                    8818 00102$:
   3400 ED                 8819 	mov	a,r5
   3401 4E                 8820 	orl	a,r6
   3402 60 2A              8821 	jz	00104$
   3404 C3                 8822 	clr	c
   3405 E4                 8823 	clr	a
   3406 9B                 8824 	subb	a,r3
   3407 E4                 8825 	clr	a
   3408 64 80              8826 	xrl	a,#0x80
   340A 8C F0              8827 	mov	b,r4
   340C 63 F0 80           8828 	xrl	b,#0x80
   340F 95 F0              8829 	subb	a,b
   3411 50 1B              8830 	jnc	00104$
   3413 1B                 8831 	dec	r3
   3414 BB FF 01           8832 	cjne	r3,#0xFF,00116$
   3417 1C                 8833 	dec	r4
   3418                    8834 00116$:
   3418 8D 82              8835 	mov	dpl,r5
   341A 8E 83              8836 	mov	dph,r6
   341C 8F F0              8837 	mov	b,r7
   341E 12s00r00           8838 	lcall	__gptrget
   3421 FD                 8839 	mov	r5,a
   3422 A3                 8840 	inc	dptr
   3423 12s00r00           8841 	lcall	__gptrget
   3426 FE                 8842 	mov	r6,a
   3427 A3                 8843 	inc	dptr
   3428 12s00r00           8844 	lcall	__gptrget
   342B FF                 8845 	mov	r7,a
   342C 80 D2              8846 	sjmp	00102$
   342E                    8847 00104$:
   342E 8D 82              8848 	mov	dpl,r5
   3430 8E 83              8849 	mov	dph,r6
   3432 8F F0              8850 	mov	b,r7
   3434 02s00r00           8851 	ljmp	__sdcc_banked_ret
                           8852 ;------------------------------------------------------------
                           8853 ;Allocation info for local variables in function 'cJSON_GetObjectItem'
                           8854 ;------------------------------------------------------------
                           8855 ;string                    Allocated to stack - sp -5
                           8856 ;object                    Allocated to registers r5 r6 r7 
                           8857 ;c                         Allocated to registers r5 r6 r7 
                           8858 ;------------------------------------------------------------
                           8859 ;	cJSON.c:497: cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
                           8860 ;	-----------------------------------------
                           8861 ;	 function cJSON_GetObjectItem
                           8862 ;	-----------------------------------------
   3437                    8863 _cJSON_GetObjectItem:
   3437 AD 82              8864 	mov	r5,dpl
   3439 AE 83              8865 	mov	r6,dph
   343B AF F0              8866 	mov	r7,b
   343D 74 06              8867 	mov	a,#0x06
   343F 2D                 8868 	add	a,r5
   3440 FD                 8869 	mov	r5,a
   3441 E4                 8870 	clr	a
   3442 3E                 8871 	addc	a,r6
   3443 FE                 8872 	mov	r6,a
   3444 8D 82              8873 	mov	dpl,r5
   3446 8E 83              8874 	mov	dph,r6
   3448 8F F0              8875 	mov	b,r7
   344A 12s00r00           8876 	lcall	__gptrget
   344D FD                 8877 	mov	r5,a
   344E A3                 8878 	inc	dptr
   344F 12s00r00           8879 	lcall	__gptrget
   3452 FE                 8880 	mov	r6,a
   3453 A3                 8881 	inc	dptr
   3454 12s00r00           8882 	lcall	__gptrget
   3457 FF                 8883 	mov	r7,a
   3458                    8884 00102$:
   3458 ED                 8885 	mov	a,r5
   3459 4E                 8886 	orl	a,r6
   345A 60 6C              8887 	jz	00104$
   345C 74 14              8888 	mov	a,#0x14
   345E 2D                 8889 	add	a,r5
   345F FA                 8890 	mov	r2,a
   3460 E4                 8891 	clr	a
   3461 3E                 8892 	addc	a,r6
   3462 FB                 8893 	mov	r3,a
   3463 8F 04              8894 	mov	ar4,r7
   3465 8A 82              8895 	mov	dpl,r2
   3467 8B 83              8896 	mov	dph,r3
   3469 8C F0              8897 	mov	b,r4
   346B 12s00r00           8898 	lcall	__gptrget
   346E FA                 8899 	mov	r2,a
   346F A3                 8900 	inc	dptr
   3470 12s00r00           8901 	lcall	__gptrget
   3473 FB                 8902 	mov	r3,a
   3474 A3                 8903 	inc	dptr
   3475 12s00r00           8904 	lcall	__gptrget
   3478 FC                 8905 	mov	r4,a
   3479 C0 07              8906 	push	ar7
   347B C0 06              8907 	push	ar6
   347D C0 05              8908 	push	ar5
   347F E5 81              8909 	mov	a,sp
   3481 24 F8              8910 	add	a,#0xf8
   3483 F8                 8911 	mov	r0,a
   3484 E6                 8912 	mov	a,@r0
   3485 C0 E0              8913 	push	acc
   3487 08                 8914 	inc	r0
   3488 E6                 8915 	mov	a,@r0
   3489 C0 E0              8916 	push	acc
   348B 08                 8917 	inc	r0
   348C E6                 8918 	mov	a,@r0
   348D C0 E0              8919 	push	acc
   348F 8A 82              8920 	mov	dpl,r2
   3491 8B 83              8921 	mov	dph,r3
   3493 8C F0              8922 	mov	b,r4
   3495 78r14              8923 	mov	r0,#_cJSON_strcasecmp
   3497 79s00              8924 	mov	r1,#(_cJSON_strcasecmp >> 8)
   3499 7As00              8925 	mov	r2,#(_cJSON_strcasecmp >> 16)
   349B 12s00r00           8926 	lcall	__sdcc_banked_call
   349E AB 82              8927 	mov	r3,dpl
   34A0 AC 83              8928 	mov	r4,dph
   34A2 15 81              8929 	dec	sp
   34A4 15 81              8930 	dec	sp
   34A6 15 81              8931 	dec	sp
   34A8 D0 05              8932 	pop	ar5
   34AA D0 06              8933 	pop	ar6
   34AC D0 07              8934 	pop	ar7
   34AE EB                 8935 	mov	a,r3
   34AF 4C                 8936 	orl	a,r4
   34B0 60 16              8937 	jz	00104$
   34B2 8D 82              8938 	mov	dpl,r5
   34B4 8E 83              8939 	mov	dph,r6
   34B6 8F F0              8940 	mov	b,r7
   34B8 12s00r00           8941 	lcall	__gptrget
   34BB FD                 8942 	mov	r5,a
   34BC A3                 8943 	inc	dptr
   34BD 12s00r00           8944 	lcall	__gptrget
   34C0 FE                 8945 	mov	r6,a
   34C1 A3                 8946 	inc	dptr
   34C2 12s00r00           8947 	lcall	__gptrget
   34C5 FF                 8948 	mov	r7,a
   34C6 80 90              8949 	sjmp	00102$
   34C8                    8950 00104$:
   34C8 8D 82              8951 	mov	dpl,r5
   34CA 8E 83              8952 	mov	dph,r6
   34CC 8F F0              8953 	mov	b,r7
   34CE 02s00r00           8954 	ljmp	__sdcc_banked_ret
                           8955 ;------------------------------------------------------------
                           8956 ;Allocation info for local variables in function 'suffix_object'
                           8957 ;------------------------------------------------------------
                           8958 ;item                      Allocated to stack - sp -5
                           8959 ;prev                      Allocated to registers r5 r6 r7 
                           8960 ;------------------------------------------------------------
                           8961 ;	cJSON.c:500: static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
                           8962 ;	-----------------------------------------
                           8963 ;	 function suffix_object
                           8964 ;	-----------------------------------------
   34D1                    8965 _suffix_object:
   34D1 AD 82              8966 	mov	r5,dpl
   34D3 AE 83              8967 	mov	r6,dph
   34D5 AF F0              8968 	mov	r7,b
   34D7 E5 81              8969 	mov	a,sp
   34D9 24 FB              8970 	add	a,#0xfb
   34DB F8                 8971 	mov	r0,a
   34DC E6                 8972 	mov	a,@r0
   34DD 12s00r00           8973 	lcall	__gptrput
   34E0 A3                 8974 	inc	dptr
   34E1 08                 8975 	inc	r0
   34E2 E6                 8976 	mov	a,@r0
   34E3 12s00r00           8977 	lcall	__gptrput
   34E6 A3                 8978 	inc	dptr
   34E7 08                 8979 	inc	r0
   34E8 E6                 8980 	mov	a,@r0
   34E9 12s00r00           8981 	lcall	__gptrput
   34EC E5 81              8982 	mov	a,sp
   34EE 24 FB              8983 	add	a,#0xfb
   34F0 F8                 8984 	mov	r0,a
   34F1 86 02              8985 	mov	ar2,@r0
   34F3 08                 8986 	inc	r0
   34F4 86 03              8987 	mov	ar3,@r0
   34F6 08                 8988 	inc	r0
   34F7 86 04              8989 	mov	ar4,@r0
   34F9 74 03              8990 	mov	a,#0x03
   34FB 2A                 8991 	add	a,r2
   34FC FA                 8992 	mov	r2,a
   34FD E4                 8993 	clr	a
   34FE 3B                 8994 	addc	a,r3
   34FF FB                 8995 	mov	r3,a
   3500 8A 82              8996 	mov	dpl,r2
   3502 8B 83              8997 	mov	dph,r3
   3504 8C F0              8998 	mov	b,r4
   3506 ED                 8999 	mov	a,r5
   3507 12s00r00           9000 	lcall	__gptrput
   350A A3                 9001 	inc	dptr
   350B EE                 9002 	mov	a,r6
   350C 12s00r00           9003 	lcall	__gptrput
   350F A3                 9004 	inc	dptr
   3510 EF                 9005 	mov	a,r7
   3511 12s00r00           9006 	lcall	__gptrput
   3514 02s00r00           9007 	ljmp	__sdcc_banked_ret
                           9008 ;------------------------------------------------------------
                           9009 ;Allocation info for local variables in function 'create_reference'
                           9010 ;------------------------------------------------------------
                           9011 ;item                      Allocated to registers r5 r6 r7 
                           9012 ;ref                       Allocated to stack - sp -2
                           9013 ;------------------------------------------------------------
                           9014 ;	cJSON.c:502: static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}
                           9015 ;	-----------------------------------------
                           9016 ;	 function create_reference
                           9017 ;	-----------------------------------------
   3517                    9018 _create_reference:
   3517 05 81              9019 	inc	sp
   3519 05 81              9020 	inc	sp
   351B 05 81              9021 	inc	sp
   351D AD 82              9022 	mov	r5,dpl
   351F AE 83              9023 	mov	r6,dph
   3521 AF F0              9024 	mov	r7,b
   3523 C0 07              9025 	push	ar7
   3525 C0 06              9026 	push	ar6
   3527 C0 05              9027 	push	ar5
   3529 78r3D              9028 	mov	r0,#_cJSON_New_Item
   352B 79s03              9029 	mov	r1,#(_cJSON_New_Item >> 8)
   352D 7As00              9030 	mov	r2,#(_cJSON_New_Item >> 16)
   352F 12s00r00           9031 	lcall	__sdcc_banked_call
   3532 AA 82              9032 	mov	r2,dpl
   3534 AB 83              9033 	mov	r3,dph
   3536 AC F0              9034 	mov	r4,b
   3538 D0 05              9035 	pop	ar5
   353A D0 06              9036 	pop	ar6
   353C D0 07              9037 	pop	ar7
   353E A8 81              9038 	mov	r0,sp
   3540 18                 9039 	dec	r0
   3541 18                 9040 	dec	r0
   3542 A6 02              9041 	mov	@r0,ar2
   3544 08                 9042 	inc	r0
   3545 A6 03              9043 	mov	@r0,ar3
   3547 08                 9044 	inc	r0
   3548 A6 04              9045 	mov	@r0,ar4
   354A A8 81              9046 	mov	r0,sp
   354C 18                 9047 	dec	r0
   354D 18                 9048 	dec	r0
   354E E6                 9049 	mov	a,@r0
   354F 08                 9050 	inc	r0
   3550 46                 9051 	orl	a,@r0
   3551 70 08              9052 	jnz	00102$
   3553 90 00 00           9053 	mov	dptr,#0x0000
   3556 F5 F0              9054 	mov	b,a
   3558 02s36r25           9055 	ljmp	00103$
   355B                    9056 00102$:
   355B A8 81              9057 	mov	r0,sp
   355D 18                 9058 	dec	r0
   355E 18                 9059 	dec	r0
   355F 86 02              9060 	mov	ar2,@r0
   3561 08                 9061 	inc	r0
   3562 86 03              9062 	mov	ar3,@r0
   3564 08                 9063 	inc	r0
   3565 86 04              9064 	mov	ar4,@r0
   3567 74 17              9065 	mov	a,#0x17
   3569 C0 E0              9066 	push	acc
   356B E4                 9067 	clr	a
   356C C0 E0              9068 	push	acc
   356E C0 05              9069 	push	ar5
   3570 C0 06              9070 	push	ar6
   3572 C0 07              9071 	push	ar7
   3574 8A 82              9072 	mov	dpl,r2
   3576 8B 83              9073 	mov	dph,r3
   3578 8C F0              9074 	mov	b,r4
   357A 78r00              9075 	mov	r0,#_memcpy
   357C 79s00              9076 	mov	r1,#(_memcpy >> 8)
   357E 7As00              9077 	mov	r2,#(_memcpy >> 16)
   3580 12s00r00           9078 	lcall	__sdcc_banked_call
   3583 E5 81              9079 	mov	a,sp
   3585 24 FB              9080 	add	a,#0xfb
   3587 F5 81              9081 	mov	sp,a
   3589 A8 81              9082 	mov	r0,sp
   358B 18                 9083 	dec	r0
   358C 18                 9084 	dec	r0
   358D 74 14              9085 	mov	a,#0x14
   358F 26                 9086 	add	a,@r0
   3590 FD                 9087 	mov	r5,a
   3591 E4                 9088 	clr	a
   3592 08                 9089 	inc	r0
   3593 36                 9090 	addc	a,@r0
   3594 FE                 9091 	mov	r6,a
   3595 08                 9092 	inc	r0
   3596 86 07              9093 	mov	ar7,@r0
   3598 8D 82              9094 	mov	dpl,r5
   359A 8E 83              9095 	mov	dph,r6
   359C 8F F0              9096 	mov	b,r7
   359E E4                 9097 	clr	a
   359F 12s00r00           9098 	lcall	__gptrput
   35A2 A3                 9099 	inc	dptr
   35A3 E4                 9100 	clr	a
   35A4 12s00r00           9101 	lcall	__gptrput
   35A7 A3                 9102 	inc	dptr
   35A8 E4                 9103 	clr	a
   35A9 12s00r00           9104 	lcall	__gptrput
   35AC A8 81              9105 	mov	r0,sp
   35AE 18                 9106 	dec	r0
   35AF 18                 9107 	dec	r0
   35B0 74 09              9108 	mov	a,#0x09
   35B2 26                 9109 	add	a,@r0
   35B3 FD                 9110 	mov	r5,a
   35B4 E4                 9111 	clr	a
   35B5 08                 9112 	inc	r0
   35B6 36                 9113 	addc	a,@r0
   35B7 FE                 9114 	mov	r6,a
   35B8 08                 9115 	inc	r0
   35B9 86 07              9116 	mov	ar7,@r0
   35BB 8D 82              9117 	mov	dpl,r5
   35BD 8E 83              9118 	mov	dph,r6
   35BF 8F F0              9119 	mov	b,r7
   35C1 12s00r00           9120 	lcall	__gptrget
   35C4 FB                 9121 	mov	r3,a
   35C5 A3                 9122 	inc	dptr
   35C6 12s00r00           9123 	lcall	__gptrget
   35C9 FC                 9124 	mov	r4,a
   35CA 43 04 01           9125 	orl	ar4,#0x01
   35CD 8D 82              9126 	mov	dpl,r5
   35CF 8E 83              9127 	mov	dph,r6
   35D1 8F F0              9128 	mov	b,r7
   35D3 EB                 9129 	mov	a,r3
   35D4 12s00r00           9130 	lcall	__gptrput
   35D7 A3                 9131 	inc	dptr
   35D8 EC                 9132 	mov	a,r4
   35D9 12s00r00           9133 	lcall	__gptrput
   35DC A8 81              9134 	mov	r0,sp
   35DE 18                 9135 	dec	r0
   35DF 18                 9136 	dec	r0
   35E0 74 03              9137 	mov	a,#0x03
   35E2 26                 9138 	add	a,@r0
   35E3 FD                 9139 	mov	r5,a
   35E4 E4                 9140 	clr	a
   35E5 08                 9141 	inc	r0
   35E6 36                 9142 	addc	a,@r0
   35E7 FE                 9143 	mov	r6,a
   35E8 08                 9144 	inc	r0
   35E9 86 07              9145 	mov	ar7,@r0
   35EB 8D 82              9146 	mov	dpl,r5
   35ED 8E 83              9147 	mov	dph,r6
   35EF 8F F0              9148 	mov	b,r7
   35F1 E4                 9149 	clr	a
   35F2 12s00r00           9150 	lcall	__gptrput
   35F5 A3                 9151 	inc	dptr
   35F6 E4                 9152 	clr	a
   35F7 12s00r00           9153 	lcall	__gptrput
   35FA A3                 9154 	inc	dptr
   35FB E4                 9155 	clr	a
   35FC 12s00r00           9156 	lcall	__gptrput
   35FF A8 81              9157 	mov	r0,sp
   3601 18                 9158 	dec	r0
   3602 18                 9159 	dec	r0
   3603 86 82              9160 	mov	dpl,@r0
   3605 08                 9161 	inc	r0
   3606 86 83              9162 	mov	dph,@r0
   3608 08                 9163 	inc	r0
   3609 86 F0              9164 	mov	b,@r0
   360B E4                 9165 	clr	a
   360C 12s00r00           9166 	lcall	__gptrput
   360F A3                 9167 	inc	dptr
   3610 E4                 9168 	clr	a
   3611 12s00r00           9169 	lcall	__gptrput
   3614 A3                 9170 	inc	dptr
   3615 E4                 9171 	clr	a
   3616 12s00r00           9172 	lcall	__gptrput
   3619 A8 81              9173 	mov	r0,sp
   361B 18                 9174 	dec	r0
   361C 18                 9175 	dec	r0
   361D 86 82              9176 	mov	dpl,@r0
   361F 08                 9177 	inc	r0
   3620 86 83              9178 	mov	dph,@r0
   3622 08                 9179 	inc	r0
   3623 86 F0              9180 	mov	b,@r0
   3625                    9181 00103$:
   3625 15 81              9182 	dec	sp
   3627 15 81              9183 	dec	sp
   3629 15 81              9184 	dec	sp
   362B 02s00r00           9185 	ljmp	__sdcc_banked_ret
                           9186 ;------------------------------------------------------------
                           9187 ;Allocation info for local variables in function 'cJSON_AddItemToArray'
                           9188 ;------------------------------------------------------------
                           9189 ;item                      Allocated to stack - sp -5
                           9190 ;array                     Allocated to registers r5 r6 r7 
                           9191 ;c                         Allocated to registers r2 r3 r4 
                           9192 ;------------------------------------------------------------
                           9193 ;	cJSON.c:505: void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
                           9194 ;	-----------------------------------------
                           9195 ;	 function cJSON_AddItemToArray
                           9196 ;	-----------------------------------------
   362E                    9197 _cJSON_AddItemToArray:
   362E AD 82              9198 	mov	r5,dpl
   3630 AE 83              9199 	mov	r6,dph
   3632 AF F0              9200 	mov	r7,b
   3634 74 06              9201 	mov	a,#0x06
   3636 2D                 9202 	add	a,r5
   3637 FD                 9203 	mov	r5,a
   3638 E4                 9204 	clr	a
   3639 3E                 9205 	addc	a,r6
   363A FE                 9206 	mov	r6,a
   363B 8D 82              9207 	mov	dpl,r5
   363D 8E 83              9208 	mov	dph,r6
   363F 8F F0              9209 	mov	b,r7
   3641 12s00r00           9210 	lcall	__gptrget
   3644 FA                 9211 	mov	r2,a
   3645 A3                 9212 	inc	dptr
   3646 12s00r00           9213 	lcall	__gptrget
   3649 FB                 9214 	mov	r3,a
   364A A3                 9215 	inc	dptr
   364B 12s00r00           9216 	lcall	__gptrget
   364E FC                 9217 	mov	r4,a
   364F E5 81              9218 	mov	a,sp
   3651 24 FB              9219 	add	a,#0xfb
   3653 F8                 9220 	mov	r0,a
   3654 E6                 9221 	mov	a,@r0
   3655 08                 9222 	inc	r0
   3656 46                 9223 	orl	a,@r0
   3657 70 02              9224 	jnz	00102$
   3659 80 6A              9225 	sjmp	00110$
   365B                    9226 00102$:
   365B EA                 9227 	mov	a,r2
   365C 4B                 9228 	orl	a,r3
   365D 70 1D              9229 	jnz	00104$
   365F 8D 82              9230 	mov	dpl,r5
   3661 8E 83              9231 	mov	dph,r6
   3663 8F F0              9232 	mov	b,r7
   3665 E5 81              9233 	mov	a,sp
   3667 24 FB              9234 	add	a,#0xfb
   3669 F8                 9235 	mov	r0,a
   366A E6                 9236 	mov	a,@r0
   366B 12s00r00           9237 	lcall	__gptrput
   366E A3                 9238 	inc	dptr
   366F 08                 9239 	inc	r0
   3670 E6                 9240 	mov	a,@r0
   3671 12s00r00           9241 	lcall	__gptrput
   3674 A3                 9242 	inc	dptr
   3675 08                 9243 	inc	r0
   3676 E6                 9244 	mov	a,@r0
   3677 12s00r00           9245 	lcall	__gptrput
   367A 80 49              9246 	sjmp	00110$
   367C                    9247 00104$:
   367C EA                 9248 	mov	a,r2
   367D 4B                 9249 	orl	a,r3
   367E 60 20              9250 	jz	00106$
   3680 8A 82              9251 	mov	dpl,r2
   3682 8B 83              9252 	mov	dph,r3
   3684 8C F0              9253 	mov	b,r4
   3686 12s00r00           9254 	lcall	__gptrget
   3689 FD                 9255 	mov	r5,a
   368A A3                 9256 	inc	dptr
   368B 12s00r00           9257 	lcall	__gptrget
   368E FE                 9258 	mov	r6,a
   368F A3                 9259 	inc	dptr
   3690 12s00r00           9260 	lcall	__gptrget
   3693 FF                 9261 	mov	r7,a
   3694 ED                 9262 	mov	a,r5
   3695 4E                 9263 	orl	a,r6
   3696 60 08              9264 	jz	00106$
   3698 8D 02              9265 	mov	ar2,r5
   369A 8E 03              9266 	mov	ar3,r6
   369C 8F 04              9267 	mov	ar4,r7
   369E 80 DC              9268 	sjmp	00104$
   36A0                    9269 00106$:
   36A0 E5 81              9270 	mov	a,sp
   36A2 24 FB              9271 	add	a,#0xfb
   36A4 F8                 9272 	mov	r0,a
   36A5 E6                 9273 	mov	a,@r0
   36A6 C0 E0              9274 	push	acc
   36A8 08                 9275 	inc	r0
   36A9 E6                 9276 	mov	a,@r0
   36AA C0 E0              9277 	push	acc
   36AC 08                 9278 	inc	r0
   36AD E6                 9279 	mov	a,@r0
   36AE C0 E0              9280 	push	acc
   36B0 8A 82              9281 	mov	dpl,r2
   36B2 8B 83              9282 	mov	dph,r3
   36B4 8C F0              9283 	mov	b,r4
   36B6 78rD1              9284 	mov	r0,#_suffix_object
   36B8 79s34              9285 	mov	r1,#(_suffix_object >> 8)
   36BA 7As00              9286 	mov	r2,#(_suffix_object >> 16)
   36BC 12s00r00           9287 	lcall	__sdcc_banked_call
   36BF 15 81              9288 	dec	sp
   36C1 15 81              9289 	dec	sp
   36C3 15 81              9290 	dec	sp
   36C5                    9291 00110$:
   36C5 02s00r00           9292 	ljmp	__sdcc_banked_ret
                           9293 ;------------------------------------------------------------
                           9294 ;Allocation info for local variables in function 'cJSON_AddItemToObject'
                           9295 ;------------------------------------------------------------
                           9296 ;string                    Allocated to stack - sp -11
                           9297 ;item                      Allocated to stack - sp -14
                           9298 ;object                    Allocated to stack - sp -5
                           9299 ;sloc0                     Allocated to stack - sp -2
                           9300 ;------------------------------------------------------------
                           9301 ;	cJSON.c:506: void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
                           9302 ;	-----------------------------------------
                           9303 ;	 function cJSON_AddItemToObject
                           9304 ;	-----------------------------------------
   36C8                    9305 _cJSON_AddItemToObject:
   36C8 C0 82              9306 	push	dpl
   36CA C0 83              9307 	push	dph
   36CC C0 F0              9308 	push	b
   36CE 05 81              9309 	inc	sp
   36D0 05 81              9310 	inc	sp
   36D2 05 81              9311 	inc	sp
   36D4 E5 81              9312 	mov	a,sp
   36D6 24 F2              9313 	add	a,#0xf2
   36D8 F8                 9314 	mov	r0,a
   36D9 E6                 9315 	mov	a,@r0
   36DA 08                 9316 	inc	r0
   36DB 46                 9317 	orl	a,@r0
   36DC 70 03              9318 	jnz	00102$
   36DE 02s37r61           9319 	ljmp	00105$
   36E1                    9320 00102$:
   36E1 E5 81              9321 	mov	a,sp
   36E3 24 F2              9322 	add	a,#0xf2
   36E5 F8                 9323 	mov	r0,a
   36E6 86 02              9324 	mov	ar2,@r0
   36E8 08                 9325 	inc	r0
   36E9 86 03              9326 	mov	ar3,@r0
   36EB 08                 9327 	inc	r0
   36EC 86 04              9328 	mov	ar4,@r0
   36EE A8 81              9329 	mov	r0,sp
   36F0 18                 9330 	dec	r0
   36F1 18                 9331 	dec	r0
   36F2 74 14              9332 	mov	a,#0x14
   36F4 2A                 9333 	add	a,r2
   36F5 F6                 9334 	mov	@r0,a
   36F6 E4                 9335 	clr	a
   36F7 3B                 9336 	addc	a,r3
   36F8 08                 9337 	inc	r0
   36F9 F6                 9338 	mov	@r0,a
   36FA 08                 9339 	inc	r0
   36FB A6 04              9340 	mov	@r0,ar4
   36FD E5 81              9341 	mov	a,sp
   36FF 24 F5              9342 	add	a,#0xf5
   3701 F8                 9343 	mov	r0,a
   3702 86 82              9344 	mov	dpl,@r0
   3704 08                 9345 	inc	r0
   3705 86 83              9346 	mov	dph,@r0
   3707 08                 9347 	inc	r0
   3708 86 F0              9348 	mov	b,@r0
   370A C0 04              9349 	push	ar4
   370C C0 03              9350 	push	ar3
   370E C0 02              9351 	push	ar2
   3710 78r5F              9352 	mov	r0,#_cJSON_strdup
   3712 79s02              9353 	mov	r1,#(_cJSON_strdup >> 8)
   3714 7As00              9354 	mov	r2,#(_cJSON_strdup >> 16)
   3716 12s00r00           9355 	lcall	__sdcc_banked_call
   3719 AD 82              9356 	mov	r5,dpl
   371B AE 83              9357 	mov	r6,dph
   371D AF F0              9358 	mov	r7,b
   371F D0 02              9359 	pop	ar2
   3721 D0 03              9360 	pop	ar3
   3723 D0 04              9361 	pop	ar4
   3725 A8 81              9362 	mov	r0,sp
   3727 18                 9363 	dec	r0
   3728 18                 9364 	dec	r0
   3729 86 82              9365 	mov	dpl,@r0
   372B 08                 9366 	inc	r0
   372C 86 83              9367 	mov	dph,@r0
   372E 08                 9368 	inc	r0
   372F 86 F0              9369 	mov	b,@r0
   3731 ED                 9370 	mov	a,r5
   3732 12s00r00           9371 	lcall	__gptrput
   3735 A3                 9372 	inc	dptr
   3736 EE                 9373 	mov	a,r6
   3737 12s00r00           9374 	lcall	__gptrput
   373A A3                 9375 	inc	dptr
   373B EF                 9376 	mov	a,r7
   373C 12s00r00           9377 	lcall	__gptrput
   373F C0 02              9378 	push	ar2
   3741 C0 03              9379 	push	ar3
   3743 C0 04              9380 	push	ar4
   3745 E5 81              9381 	mov	a,sp
   3747 24 F8              9382 	add	a,#0xf8
   3749 F8                 9383 	mov	r0,a
   374A 86 82              9384 	mov	dpl,@r0
   374C 08                 9385 	inc	r0
   374D 86 83              9386 	mov	dph,@r0
   374F 08                 9387 	inc	r0
   3750 86 F0              9388 	mov	b,@r0
   3752 78r2E              9389 	mov	r0,#_cJSON_AddItemToArray
   3754 79s36              9390 	mov	r1,#(_cJSON_AddItemToArray >> 8)
   3756 7As00              9391 	mov	r2,#(_cJSON_AddItemToArray >> 16)
   3758 12s00r00           9392 	lcall	__sdcc_banked_call
   375B 15 81              9393 	dec	sp
   375D 15 81              9394 	dec	sp
   375F 15 81              9395 	dec	sp
   3761                    9396 00105$:
   3761 E5 81              9397 	mov	a,sp
   3763 24 FA              9398 	add	a,#0xFA
   3765 F5 81              9399 	mov	sp,a
   3767 02s00r00           9400 	ljmp	__sdcc_banked_ret
                           9401 ;------------------------------------------------------------
                           9402 ;Allocation info for local variables in function 'cJSON_AddItemReferenceToArray'
                           9403 ;------------------------------------------------------------
                           9404 ;item                      Allocated to stack - sp -5
                           9405 ;array                     Allocated to registers r5 r6 r7 
                           9406 ;------------------------------------------------------------
                           9407 ;	cJSON.c:507: void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
                           9408 ;	-----------------------------------------
                           9409 ;	 function cJSON_AddItemReferenceToArray
                           9410 ;	-----------------------------------------
   376A                    9411 _cJSON_AddItemReferenceToArray:
   376A AD 82              9412 	mov	r5,dpl
   376C AE 83              9413 	mov	r6,dph
   376E AF F0              9414 	mov	r7,b
   3770 E5 81              9415 	mov	a,sp
   3772 24 FB              9416 	add	a,#0xfb
   3774 F8                 9417 	mov	r0,a
   3775 86 82              9418 	mov	dpl,@r0
   3777 08                 9419 	inc	r0
   3778 86 83              9420 	mov	dph,@r0
   377A 08                 9421 	inc	r0
   377B 86 F0              9422 	mov	b,@r0
   377D C0 07              9423 	push	ar7
   377F C0 06              9424 	push	ar6
   3781 C0 05              9425 	push	ar5
   3783 78r17              9426 	mov	r0,#_create_reference
   3785 79s35              9427 	mov	r1,#(_create_reference >> 8)
   3787 7As00              9428 	mov	r2,#(_create_reference >> 16)
   3789 12s00r00           9429 	lcall	__sdcc_banked_call
   378C AA 82              9430 	mov	r2,dpl
   378E AB 83              9431 	mov	r3,dph
   3790 AC F0              9432 	mov	r4,b
   3792 D0 05              9433 	pop	ar5
   3794 D0 06              9434 	pop	ar6
   3796 D0 07              9435 	pop	ar7
   3798 C0 02              9436 	push	ar2
   379A C0 03              9437 	push	ar3
   379C C0 04              9438 	push	ar4
   379E 8D 82              9439 	mov	dpl,r5
   37A0 8E 83              9440 	mov	dph,r6
   37A2 8F F0              9441 	mov	b,r7
   37A4 78r2E              9442 	mov	r0,#_cJSON_AddItemToArray
   37A6 79s36              9443 	mov	r1,#(_cJSON_AddItemToArray >> 8)
   37A8 7As00              9444 	mov	r2,#(_cJSON_AddItemToArray >> 16)
   37AA 12s00r00           9445 	lcall	__sdcc_banked_call
   37AD 15 81              9446 	dec	sp
   37AF 15 81              9447 	dec	sp
   37B1 15 81              9448 	dec	sp
   37B3 02s00r00           9449 	ljmp	__sdcc_banked_ret
                           9450 ;------------------------------------------------------------
                           9451 ;Allocation info for local variables in function 'cJSON_AddItemReferenceToObject'
                           9452 ;------------------------------------------------------------
                           9453 ;string                    Allocated to stack - sp -5
                           9454 ;item                      Allocated to stack - sp -8
                           9455 ;object                    Allocated to registers r5 r6 r7 
                           9456 ;------------------------------------------------------------
                           9457 ;	cJSON.c:508: void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
                           9458 ;	-----------------------------------------
                           9459 ;	 function cJSON_AddItemReferenceToObject
                           9460 ;	-----------------------------------------
   37B6                    9461 _cJSON_AddItemReferenceToObject:
   37B6 AD 82              9462 	mov	r5,dpl
   37B8 AE 83              9463 	mov	r6,dph
   37BA AF F0              9464 	mov	r7,b
   37BC E5 81              9465 	mov	a,sp
   37BE 24 F8              9466 	add	a,#0xf8
   37C0 F8                 9467 	mov	r0,a
   37C1 86 82              9468 	mov	dpl,@r0
   37C3 08                 9469 	inc	r0
   37C4 86 83              9470 	mov	dph,@r0
   37C6 08                 9471 	inc	r0
   37C7 86 F0              9472 	mov	b,@r0
   37C9 C0 07              9473 	push	ar7
   37CB C0 06              9474 	push	ar6
   37CD C0 05              9475 	push	ar5
   37CF 78r17              9476 	mov	r0,#_create_reference
   37D1 79s35              9477 	mov	r1,#(_create_reference >> 8)
   37D3 7As00              9478 	mov	r2,#(_create_reference >> 16)
   37D5 12s00r00           9479 	lcall	__sdcc_banked_call
   37D8 AA 82              9480 	mov	r2,dpl
   37DA AB 83              9481 	mov	r3,dph
   37DC AC F0              9482 	mov	r4,b
   37DE D0 05              9483 	pop	ar5
   37E0 D0 06              9484 	pop	ar6
   37E2 D0 07              9485 	pop	ar7
   37E4 C0 02              9486 	push	ar2
   37E6 C0 03              9487 	push	ar3
   37E8 C0 04              9488 	push	ar4
   37EA E5 81              9489 	mov	a,sp
   37EC 24 F8              9490 	add	a,#0xf8
   37EE F8                 9491 	mov	r0,a
   37EF E6                 9492 	mov	a,@r0
   37F0 C0 E0              9493 	push	acc
   37F2 08                 9494 	inc	r0
   37F3 E6                 9495 	mov	a,@r0
   37F4 C0 E0              9496 	push	acc
   37F6 08                 9497 	inc	r0
   37F7 E6                 9498 	mov	a,@r0
   37F8 C0 E0              9499 	push	acc
   37FA 8D 82              9500 	mov	dpl,r5
   37FC 8E 83              9501 	mov	dph,r6
   37FE 8F F0              9502 	mov	b,r7
   3800 78rC8              9503 	mov	r0,#_cJSON_AddItemToObject
   3802 79s36              9504 	mov	r1,#(_cJSON_AddItemToObject >> 8)
   3804 7As00              9505 	mov	r2,#(_cJSON_AddItemToObject >> 16)
   3806 12s00r00           9506 	lcall	__sdcc_banked_call
   3809 E5 81              9507 	mov	a,sp
   380B 24 FA              9508 	add	a,#0xfa
   380D F5 81              9509 	mov	sp,a
   380F 02s00r00           9510 	ljmp	__sdcc_banked_ret
                           9511 ;------------------------------------------------------------
                           9512 ;Allocation info for local variables in function 'cJSON_DetachItemFromArray'
                           9513 ;------------------------------------------------------------
                           9514 ;which                     Allocated to stack - sp -19
                           9515 ;array                     Allocated to registers r5 r6 r7 
                           9516 ;c                         Allocated to stack - sp -14
                           9517 ;sloc0                     Allocated to stack - sp -11
                           9518 ;sloc1                     Allocated to stack - sp -5
                           9519 ;sloc2                     Allocated to stack - sp -8
                           9520 ;sloc3                     Allocated to stack - sp -5
                           9521 ;sloc4                     Allocated to stack - sp -2
                           9522 ;------------------------------------------------------------
                           9523 ;	cJSON.c:510: cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;
                           9524 ;	-----------------------------------------
                           9525 ;	 function cJSON_DetachItemFromArray
                           9526 ;	-----------------------------------------
   3812                    9527 _cJSON_DetachItemFromArray:
   3812 E5 81              9528 	mov	a,sp
   3814 24 0F              9529 	add	a,#0x0F
   3816 F5 81              9530 	mov	sp,a
   3818 AD 82              9531 	mov	r5,dpl
   381A AE 83              9532 	mov	r6,dph
   381C AF F0              9533 	mov	r7,b
   381E A8 81              9534 	mov	r0,sp
   3820 18                 9535 	dec	r0
   3821 18                 9536 	dec	r0
   3822 74 06              9537 	mov	a,#0x06
   3824 2D                 9538 	add	a,r5
   3825 F6                 9539 	mov	@r0,a
   3826 E4                 9540 	clr	a
   3827 3E                 9541 	addc	a,r6
   3828 08                 9542 	inc	r0
   3829 F6                 9543 	mov	@r0,a
   382A 08                 9544 	inc	r0
   382B A6 07              9545 	mov	@r0,ar7
   382D A8 81              9546 	mov	r0,sp
   382F 18                 9547 	dec	r0
   3830 18                 9548 	dec	r0
   3831 86 82              9549 	mov	dpl,@r0
   3833 08                 9550 	inc	r0
   3834 86 83              9551 	mov	dph,@r0
   3836 08                 9552 	inc	r0
   3837 86 F0              9553 	mov	b,@r0
   3839 E5 81              9554 	mov	a,sp
   383B 24 F5              9555 	add	a,#0xf5
   383D F9                 9556 	mov	r1,a
   383E 12s00r00           9557 	lcall	__gptrget
   3841 F7                 9558 	mov	@r1,a
   3842 A3                 9559 	inc	dptr
   3843 12s00r00           9560 	lcall	__gptrget
   3846 09                 9561 	inc	r1
   3847 F7                 9562 	mov	@r1,a
   3848 A3                 9563 	inc	dptr
   3849 12s00r00           9564 	lcall	__gptrget
   384C 09                 9565 	inc	r1
   384D F7                 9566 	mov	@r1,a
   384E E5 81              9567 	mov	a,sp
   3850 24 F5              9568 	add	a,#0xf5
   3852 F8                 9569 	mov	r0,a
   3853 E5 81              9570 	mov	a,sp
   3855 24 F2              9571 	add	a,#0xf2
   3857 F9                 9572 	mov	r1,a
   3858 E6                 9573 	mov	a,@r0
   3859 F7                 9574 	mov	@r1,a
   385A 08                 9575 	inc	r0
   385B 09                 9576 	inc	r1
   385C E6                 9577 	mov	a,@r0
   385D F7                 9578 	mov	@r1,a
   385E 08                 9579 	inc	r0
   385F 09                 9580 	inc	r1
   3860 E6                 9581 	mov	a,@r0
   3861 F7                 9582 	mov	@r1,a
   3862 E5 81              9583 	mov	a,sp
   3864 24 ED              9584 	add	a,#0xed
   3866 F8                 9585 	mov	r0,a
   3867 86 07              9586 	mov	ar7,@r0
   3869 08                 9587 	inc	r0
   386A 86 06              9588 	mov	ar6,@r0
   386C                    9589 00102$:
   386C E5 81              9590 	mov	a,sp
   386E 24 F2              9591 	add	a,#0xf2
   3870 F8                 9592 	mov	r0,a
   3871 E6                 9593 	mov	a,@r0
   3872 08                 9594 	inc	r0
   3873 46                 9595 	orl	a,@r0
   3874 60 35              9596 	jz	00104$
   3876 C3                 9597 	clr	c
   3877 E4                 9598 	clr	a
   3878 9F                 9599 	subb	a,r7
   3879 E4                 9600 	clr	a
   387A 64 80              9601 	xrl	a,#0x80
   387C 8E F0              9602 	mov	b,r6
   387E 63 F0 80           9603 	xrl	b,#0x80
   3881 95 F0              9604 	subb	a,b
   3883 50 26              9605 	jnc	00104$
   3885 E5 81              9606 	mov	a,sp
   3887 24 F2              9607 	add	a,#0xf2
   3889 F8                 9608 	mov	r0,a
   388A 86 82              9609 	mov	dpl,@r0
   388C 08                 9610 	inc	r0
   388D 86 83              9611 	mov	dph,@r0
   388F 08                 9612 	inc	r0
   3890 86 F0              9613 	mov	b,@r0
   3892 12s00r00           9614 	lcall	__gptrget
   3895 18                 9615 	dec	r0
   3896 18                 9616 	dec	r0
   3897 F6                 9617 	mov	@r0,a
   3898 A3                 9618 	inc	dptr
   3899 12s00r00           9619 	lcall	__gptrget
   389C 08                 9620 	inc	r0
   389D F6                 9621 	mov	@r0,a
   389E A3                 9622 	inc	dptr
   389F 12s00r00           9623 	lcall	__gptrget
   38A2 08                 9624 	inc	r0
   38A3 F6                 9625 	mov	@r0,a
   38A4 1F                 9626 	dec	r7
   38A5 BF FF 01           9627 	cjne	r7,#0xFF,00132$
   38A8 1E                 9628 	dec	r6
   38A9                    9629 00132$:
   38A9 80 C1              9630 	sjmp	00102$
   38AB                    9631 00104$:
   38AB E5 81              9632 	mov	a,sp
   38AD 24 F2              9633 	add	a,#0xf2
   38AF F8                 9634 	mov	r0,a
   38B0 E6                 9635 	mov	a,@r0
   38B1 08                 9636 	inc	r0
   38B2 46                 9637 	orl	a,@r0
   38B3 70 08              9638 	jnz	00106$
   38B5 90 00 00           9639 	mov	dptr,#0x0000
   38B8 F5 F0              9640 	mov	b,a
   38BA 02s3Ar00           9641 	ljmp	00113$
   38BD                    9642 00106$:
                           9643 ;	cJSON.c:511: if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
   38BD E5 81              9644 	mov	a,sp
   38BF 24 F2              9645 	add	a,#0xf2
   38C1 F8                 9646 	mov	r0,a
   38C2 E5 81              9647 	mov	a,sp
   38C4 24 F8              9648 	add	a,#0xf8
   38C6 F9                 9649 	mov	r1,a
   38C7 74 03              9650 	mov	a,#0x03
   38C9 26                 9651 	add	a,@r0
   38CA F7                 9652 	mov	@r1,a
   38CB E4                 9653 	clr	a
   38CC 08                 9654 	inc	r0
   38CD 36                 9655 	addc	a,@r0
   38CE 09                 9656 	inc	r1
   38CF F7                 9657 	mov	@r1,a
   38D0 08                 9658 	inc	r0
   38D1 09                 9659 	inc	r1
   38D2 E6                 9660 	mov	a,@r0
   38D3 F7                 9661 	mov	@r1,a
   38D4 E5 81              9662 	mov	a,sp
   38D6 24 F8              9663 	add	a,#0xf8
   38D8 F8                 9664 	mov	r0,a
   38D9 86 82              9665 	mov	dpl,@r0
   38DB 08                 9666 	inc	r0
   38DC 86 83              9667 	mov	dph,@r0
   38DE 08                 9668 	inc	r0
   38DF 86 F0              9669 	mov	b,@r0
   38E1 E5 81              9670 	mov	a,sp
   38E3 24 FB              9671 	add	a,#0xfb
   38E5 F9                 9672 	mov	r1,a
   38E6 12s00r00           9673 	lcall	__gptrget
   38E9 F7                 9674 	mov	@r1,a
   38EA A3                 9675 	inc	dptr
   38EB 12s00r00           9676 	lcall	__gptrget
   38EE 09                 9677 	inc	r1
   38EF F7                 9678 	mov	@r1,a
   38F0 A3                 9679 	inc	dptr
   38F1 12s00r00           9680 	lcall	__gptrget
   38F4 09                 9681 	inc	r1
   38F5 F7                 9682 	mov	@r1,a
   38F6 E5 81              9683 	mov	a,sp
   38F8 24 FB              9684 	add	a,#0xfb
   38FA F8                 9685 	mov	r0,a
   38FB E6                 9686 	mov	a,@r0
   38FC 08                 9687 	inc	r0
   38FD 46                 9688 	orl	a,@r0
   38FE 60 36              9689 	jz	00108$
   3900 E5 81              9690 	mov	a,sp
   3902 24 F2              9691 	add	a,#0xf2
   3904 F8                 9692 	mov	r0,a
   3905 86 82              9693 	mov	dpl,@r0
   3907 08                 9694 	inc	r0
   3908 86 83              9695 	mov	dph,@r0
   390A 08                 9696 	inc	r0
   390B 86 F0              9697 	mov	b,@r0
   390D 12s00r00           9698 	lcall	__gptrget
   3910 FA                 9699 	mov	r2,a
   3911 A3                 9700 	inc	dptr
   3912 12s00r00           9701 	lcall	__gptrget
   3915 FB                 9702 	mov	r3,a
   3916 A3                 9703 	inc	dptr
   3917 12s00r00           9704 	lcall	__gptrget
   391A FC                 9705 	mov	r4,a
   391B E5 81              9706 	mov	a,sp
   391D 24 FB              9707 	add	a,#0xfb
   391F F8                 9708 	mov	r0,a
   3920 86 82              9709 	mov	dpl,@r0
   3922 08                 9710 	inc	r0
   3923 86 83              9711 	mov	dph,@r0
   3925 08                 9712 	inc	r0
   3926 86 F0              9713 	mov	b,@r0
   3928 EA                 9714 	mov	a,r2
   3929 12s00r00           9715 	lcall	__gptrput
   392C A3                 9716 	inc	dptr
   392D EB                 9717 	mov	a,r3
   392E 12s00r00           9718 	lcall	__gptrput
   3931 A3                 9719 	inc	dptr
   3932 EC                 9720 	mov	a,r4
   3933 12s00r00           9721 	lcall	__gptrput
   3936                    9722 00108$:
   3936 E5 81              9723 	mov	a,sp
   3938 24 F2              9724 	add	a,#0xf2
   393A F8                 9725 	mov	r0,a
   393B 86 82              9726 	mov	dpl,@r0
   393D 08                 9727 	inc	r0
   393E 86 83              9728 	mov	dph,@r0
   3940 08                 9729 	inc	r0
   3941 86 F0              9730 	mov	b,@r0
   3943 12s00r00           9731 	lcall	__gptrget
   3946 FA                 9732 	mov	r2,a
   3947 A3                 9733 	inc	dptr
   3948 12s00r00           9734 	lcall	__gptrget
   394B FB                 9735 	mov	r3,a
   394C A3                 9736 	inc	dptr
   394D 12s00r00           9737 	lcall	__gptrget
   3950 FC                 9738 	mov	r4,a
   3951 EA                 9739 	mov	a,r2
   3952 4B                 9740 	orl	a,r3
   3953 60 24              9741 	jz	00110$
   3955 74 03              9742 	mov	a,#0x03
   3957 2A                 9743 	add	a,r2
   3958 FD                 9744 	mov	r5,a
   3959 E4                 9745 	clr	a
   395A 3B                 9746 	addc	a,r3
   395B FE                 9747 	mov	r6,a
   395C 8C 07              9748 	mov	ar7,r4
   395E 8D 82              9749 	mov	dpl,r5
   3960 8E 83              9750 	mov	dph,r6
   3962 8F F0              9751 	mov	b,r7
   3964 E5 81              9752 	mov	a,sp
   3966 24 FB              9753 	add	a,#0xfb
   3968 F8                 9754 	mov	r0,a
   3969 E6                 9755 	mov	a,@r0
   396A 12s00r00           9756 	lcall	__gptrput
   396D A3                 9757 	inc	dptr
   396E 08                 9758 	inc	r0
   396F E6                 9759 	mov	a,@r0
   3970 12s00r00           9760 	lcall	__gptrput
   3973 A3                 9761 	inc	dptr
   3974 08                 9762 	inc	r0
   3975 E6                 9763 	mov	a,@r0
   3976 12s00r00           9764 	lcall	__gptrput
   3979                    9765 00110$:
   3979 E5 81              9766 	mov	a,sp
   397B 24 F2              9767 	add	a,#0xf2
   397D F8                 9768 	mov	r0,a
   397E E5 81              9769 	mov	a,sp
   3980 24 F5              9770 	add	a,#0xf5
   3982 F9                 9771 	mov	r1,a
   3983 E7                 9772 	mov	a,@r1
   3984 C0 E0              9773 	push	acc
   3986 09                 9774 	inc	r1
   3987 E7                 9775 	mov	a,@r1
   3988 C0 E0              9776 	push	acc
   398A 09                 9777 	inc	r1
   398B E7                 9778 	mov	a,@r1
   398C C0 E0              9779 	push	acc
   398E 86 82              9780 	mov	dpl,@r0
   3990 08                 9781 	inc	r0
   3991 86 83              9782 	mov	dph,@r0
   3993 08                 9783 	inc	r0
   3994 86 F0              9784 	mov	b,@r0
   3996 12s00r00           9785 	lcall	___gptr_cmp
   3999 15 81              9786 	dec	sp
   399B 15 81              9787 	dec	sp
   399D 15 81              9788 	dec	sp
   399F 60 02              9789 	jz	00137$
   39A1 80 1A              9790 	sjmp	00112$
   39A3                    9791 00137$:
   39A3 A8 81              9792 	mov	r0,sp
   39A5 18                 9793 	dec	r0
   39A6 18                 9794 	dec	r0
   39A7 86 82              9795 	mov	dpl,@r0
   39A9 08                 9796 	inc	r0
   39AA 86 83              9797 	mov	dph,@r0
   39AC 08                 9798 	inc	r0
   39AD 86 F0              9799 	mov	b,@r0
   39AF EA                 9800 	mov	a,r2
   39B0 12s00r00           9801 	lcall	__gptrput
   39B3 A3                 9802 	inc	dptr
   39B4 EB                 9803 	mov	a,r3
   39B5 12s00r00           9804 	lcall	__gptrput
   39B8 A3                 9805 	inc	dptr
   39B9 EC                 9806 	mov	a,r4
   39BA 12s00r00           9807 	lcall	__gptrput
   39BD                    9808 00112$:
   39BD E5 81              9809 	mov	a,sp
   39BF 24 F2              9810 	add	a,#0xf2
   39C1 F8                 9811 	mov	r0,a
   39C2 86 82              9812 	mov	dpl,@r0
   39C4 08                 9813 	inc	r0
   39C5 86 83              9814 	mov	dph,@r0
   39C7 08                 9815 	inc	r0
   39C8 86 F0              9816 	mov	b,@r0
   39CA E4                 9817 	clr	a
   39CB 12s00r00           9818 	lcall	__gptrput
   39CE A3                 9819 	inc	dptr
   39CF E4                 9820 	clr	a
   39D0 12s00r00           9821 	lcall	__gptrput
   39D3 A3                 9822 	inc	dptr
   39D4 E4                 9823 	clr	a
   39D5 12s00r00           9824 	lcall	__gptrput
   39D8 E5 81              9825 	mov	a,sp
   39DA 24 F8              9826 	add	a,#0xf8
   39DC F8                 9827 	mov	r0,a
   39DD 86 82              9828 	mov	dpl,@r0
   39DF 08                 9829 	inc	r0
   39E0 86 83              9830 	mov	dph,@r0
   39E2 08                 9831 	inc	r0
   39E3 86 F0              9832 	mov	b,@r0
   39E5 E4                 9833 	clr	a
   39E6 12s00r00           9834 	lcall	__gptrput
   39E9 A3                 9835 	inc	dptr
   39EA E4                 9836 	clr	a
   39EB 12s00r00           9837 	lcall	__gptrput
   39EE A3                 9838 	inc	dptr
   39EF E4                 9839 	clr	a
   39F0 12s00r00           9840 	lcall	__gptrput
   39F3 E5 81              9841 	mov	a,sp
   39F5 24 F2              9842 	add	a,#0xf2
   39F7 F8                 9843 	mov	r0,a
   39F8 86 82              9844 	mov	dpl,@r0
   39FA 08                 9845 	inc	r0
   39FB 86 83              9846 	mov	dph,@r0
   39FD 08                 9847 	inc	r0
   39FE 86 F0              9848 	mov	b,@r0
   3A00                    9849 00113$:
   3A00 C8                 9850 	xch	a,r0
   3A01 E5 81              9851 	mov	a,sp
   3A03 24 F1              9852 	add	a,#0xF1
   3A05 F5 81              9853 	mov	sp,a
   3A07 C8                 9854 	xch	a,r0
   3A08 02s00r00           9855 	ljmp	__sdcc_banked_ret
                           9856 ;------------------------------------------------------------
                           9857 ;Allocation info for local variables in function 'cJSON_DeleteItemFromArray'
                           9858 ;------------------------------------------------------------
                           9859 ;which                     Allocated to stack - sp -4
                           9860 ;array                     Allocated to registers r5 r6 r7 
                           9861 ;------------------------------------------------------------
                           9862 ;	cJSON.c:512: void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
                           9863 ;	-----------------------------------------
                           9864 ;	 function cJSON_DeleteItemFromArray
                           9865 ;	-----------------------------------------
   3A0B                    9866 _cJSON_DeleteItemFromArray:
   3A0B AD 82              9867 	mov	r5,dpl
   3A0D AE 83              9868 	mov	r6,dph
   3A0F AF F0              9869 	mov	r7,b
   3A11 E5 81              9870 	mov	a,sp
   3A13 24 FC              9871 	add	a,#0xfc
   3A15 F8                 9872 	mov	r0,a
   3A16 E6                 9873 	mov	a,@r0
   3A17 C0 E0              9874 	push	acc
   3A19 08                 9875 	inc	r0
   3A1A E6                 9876 	mov	a,@r0
   3A1B C0 E0              9877 	push	acc
   3A1D 8D 82              9878 	mov	dpl,r5
   3A1F 8E 83              9879 	mov	dph,r6
   3A21 8F F0              9880 	mov	b,r7
   3A23 78r12              9881 	mov	r0,#_cJSON_DetachItemFromArray
   3A25 79s38              9882 	mov	r1,#(_cJSON_DetachItemFromArray >> 8)
   3A27 7As00              9883 	mov	r2,#(_cJSON_DetachItemFromArray >> 16)
   3A29 12s00r00           9884 	lcall	__sdcc_banked_call
   3A2C AD 82              9885 	mov	r5,dpl
   3A2E AE 83              9886 	mov	r6,dph
   3A30 AF F0              9887 	mov	r7,b
   3A32 15 81              9888 	dec	sp
   3A34 15 81              9889 	dec	sp
   3A36 8D 82              9890 	mov	dpl,r5
   3A38 8E 83              9891 	mov	dph,r6
   3A3A 8F F0              9892 	mov	b,r7
   3A3C 78r8D              9893 	mov	r0,#_cJSON_Delete
   3A3E 79s03              9894 	mov	r1,#(_cJSON_Delete >> 8)
   3A40 7As00              9895 	mov	r2,#(_cJSON_Delete >> 16)
   3A42 12s00r00           9896 	lcall	__sdcc_banked_call
   3A45 02s00r00           9897 	ljmp	__sdcc_banked_ret
                           9898 ;------------------------------------------------------------
                           9899 ;Allocation info for local variables in function 'cJSON_DetachItemFromObject'
                           9900 ;------------------------------------------------------------
                           9901 ;string                    Allocated to stack - sp -8
                           9902 ;object                    Allocated to stack - sp -2
                           9903 ;i                         Allocated to registers r6 r7 
                           9904 ;c                         Allocated to registers r2 r3 r4 
                           9905 ;------------------------------------------------------------
                           9906 ;	cJSON.c:513: cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
                           9907 ;	-----------------------------------------
                           9908 ;	 function cJSON_DetachItemFromObject
                           9909 ;	-----------------------------------------
   3A48                    9910 _cJSON_DetachItemFromObject:
   3A48 C0 82              9911 	push	dpl
   3A4A C0 83              9912 	push	dph
   3A4C C0 F0              9913 	push	b
   3A4E A8 81              9914 	mov	r0,sp
   3A50 18                 9915 	dec	r0
   3A51 18                 9916 	dec	r0
   3A52 74 06              9917 	mov	a,#0x06
   3A54 26                 9918 	add	a,@r0
   3A55 FA                 9919 	mov	r2,a
   3A56 E4                 9920 	clr	a
   3A57 08                 9921 	inc	r0
   3A58 36                 9922 	addc	a,@r0
   3A59 FB                 9923 	mov	r3,a
   3A5A 08                 9924 	inc	r0
   3A5B 86 04              9925 	mov	ar4,@r0
   3A5D 8A 82              9926 	mov	dpl,r2
   3A5F 8B 83              9927 	mov	dph,r3
   3A61 8C F0              9928 	mov	b,r4
   3A63 12s00r00           9929 	lcall	__gptrget
   3A66 FA                 9930 	mov	r2,a
   3A67 A3                 9931 	inc	dptr
   3A68 12s00r00           9932 	lcall	__gptrget
   3A6B FB                 9933 	mov	r3,a
   3A6C A3                 9934 	inc	dptr
   3A6D 12s00r00           9935 	lcall	__gptrget
   3A70 FC                 9936 	mov	r4,a
   3A71 7E 00              9937 	mov	r6,#0x00
   3A73 7F 00              9938 	mov	r7,#0x00
   3A75                    9939 00102$:
   3A75 EA                 9940 	mov	a,r2
   3A76 4B                 9941 	orl	a,r3
   3A77 60 7A              9942 	jz	00104$
   3A79 C0 06              9943 	push	ar6
   3A7B C0 07              9944 	push	ar7
   3A7D 74 14              9945 	mov	a,#0x14
   3A7F 2A                 9946 	add	a,r2
   3A80 FD                 9947 	mov	r5,a
   3A81 E4                 9948 	clr	a
   3A82 3B                 9949 	addc	a,r3
   3A83 FE                 9950 	mov	r6,a
   3A84 8C 07              9951 	mov	ar7,r4
   3A86 8D 82              9952 	mov	dpl,r5
   3A88 8E 83              9953 	mov	dph,r6
   3A8A 8F F0              9954 	mov	b,r7
   3A8C 12s00r00           9955 	lcall	__gptrget
   3A8F FD                 9956 	mov	r5,a
   3A90 A3                 9957 	inc	dptr
   3A91 12s00r00           9958 	lcall	__gptrget
   3A94 FE                 9959 	mov	r6,a
   3A95 A3                 9960 	inc	dptr
   3A96 12s00r00           9961 	lcall	__gptrget
   3A99 FF                 9962 	mov	r7,a
   3A9A C0 04              9963 	push	ar4
   3A9C C0 03              9964 	push	ar3
   3A9E C0 02              9965 	push	ar2
   3AA0 E5 81              9966 	mov	a,sp
   3AA2 24 F3              9967 	add	a,#0xf3
   3AA4 F8                 9968 	mov	r0,a
   3AA5 E6                 9969 	mov	a,@r0
   3AA6 C0 E0              9970 	push	acc
   3AA8 08                 9971 	inc	r0
   3AA9 E6                 9972 	mov	a,@r0
   3AAA C0 E0              9973 	push	acc
   3AAC 08                 9974 	inc	r0
   3AAD E6                 9975 	mov	a,@r0
   3AAE C0 E0              9976 	push	acc
   3AB0 8D 82              9977 	mov	dpl,r5
   3AB2 8E 83              9978 	mov	dph,r6
   3AB4 8F F0              9979 	mov	b,r7
   3AB6 78r14              9980 	mov	r0,#_cJSON_strcasecmp
   3AB8 79s00              9981 	mov	r1,#(_cJSON_strcasecmp >> 8)
   3ABA 7As00              9982 	mov	r2,#(_cJSON_strcasecmp >> 16)
   3ABC 12s00r00           9983 	lcall	__sdcc_banked_call
   3ABF AE 82              9984 	mov	r6,dpl
   3AC1 AF 83              9985 	mov	r7,dph
   3AC3 15 81              9986 	dec	sp
   3AC5 15 81              9987 	dec	sp
   3AC7 15 81              9988 	dec	sp
   3AC9 D0 02              9989 	pop	ar2
   3ACB D0 03              9990 	pop	ar3
   3ACD D0 04              9991 	pop	ar4
   3ACF EE                 9992 	mov	a,r6
   3AD0 4F                 9993 	orl	a,r7
   3AD1 D0 07              9994 	pop	ar7
   3AD3 D0 06              9995 	pop	ar6
   3AD5 60 1C              9996 	jz	00104$
   3AD7 0E                 9997 	inc	r6
   3AD8 BE 00 01           9998 	cjne	r6,#0x00,00120$
   3ADB 0F                 9999 	inc	r7
   3ADC                   10000 00120$:
   3ADC 8A 82             10001 	mov	dpl,r2
   3ADE 8B 83             10002 	mov	dph,r3
   3AE0 8C F0             10003 	mov	b,r4
   3AE2 12s00r00          10004 	lcall	__gptrget
   3AE5 FA                10005 	mov	r2,a
   3AE6 A3                10006 	inc	dptr
   3AE7 12s00r00          10007 	lcall	__gptrget
   3AEA FB                10008 	mov	r3,a
   3AEB A3                10009 	inc	dptr
   3AEC 12s00r00          10010 	lcall	__gptrget
   3AEF FC                10011 	mov	r4,a
   3AF0 02s3Ar75          10012 	ljmp	00102$
   3AF3                   10013 00104$:
   3AF3 EA                10014 	mov	a,r2
   3AF4 4B                10015 	orl	a,r3
   3AF5 60 2C             10016 	jz	00106$
   3AF7 C0 06             10017 	push	ar6
   3AF9 C0 07             10018 	push	ar7
   3AFB E5 81             10019 	mov	a,sp
   3AFD 24 FC             10020 	add	a,#0xfc
   3AFF F8                10021 	mov	r0,a
   3B00 86 82             10022 	mov	dpl,@r0
   3B02 08                10023 	inc	r0
   3B03 86 83             10024 	mov	dph,@r0
   3B05 08                10025 	inc	r0
   3B06 86 F0             10026 	mov	b,@r0
   3B08 78r12             10027 	mov	r0,#_cJSON_DetachItemFromArray
   3B0A 79s38             10028 	mov	r1,#(_cJSON_DetachItemFromArray >> 8)
   3B0C 7As00             10029 	mov	r2,#(_cJSON_DetachItemFromArray >> 16)
   3B0E 12s00r00          10030 	lcall	__sdcc_banked_call
   3B11 AD 82             10031 	mov	r5,dpl
   3B13 AE 83             10032 	mov	r6,dph
   3B15 AF F0             10033 	mov	r7,b
   3B17 15 81             10034 	dec	sp
   3B19 15 81             10035 	dec	sp
   3B1B 8D 82             10036 	mov	dpl,r5
   3B1D 8E 83             10037 	mov	dph,r6
   3B1F 8F F0             10038 	mov	b,r7
   3B21 80 06             10039 	sjmp	00107$
   3B23                   10040 00106$:
   3B23 90 00 00          10041 	mov	dptr,#0x0000
   3B26 75 F0 00          10042 	mov	b,#0x00
   3B29                   10043 00107$:
   3B29 15 81             10044 	dec	sp
   3B2B 15 81             10045 	dec	sp
   3B2D 15 81             10046 	dec	sp
   3B2F 02s00r00          10047 	ljmp	__sdcc_banked_ret
                          10048 ;------------------------------------------------------------
                          10049 ;Allocation info for local variables in function 'cJSON_DeleteItemFromObject'
                          10050 ;------------------------------------------------------------
                          10051 ;string                    Allocated to stack - sp -5
                          10052 ;object                    Allocated to registers r5 r6 r7 
                          10053 ;------------------------------------------------------------
                          10054 ;	cJSON.c:514: void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
                          10055 ;	-----------------------------------------
                          10056 ;	 function cJSON_DeleteItemFromObject
                          10057 ;	-----------------------------------------
   3B32                   10058 _cJSON_DeleteItemFromObject:
   3B32 AD 82             10059 	mov	r5,dpl
   3B34 AE 83             10060 	mov	r6,dph
   3B36 AF F0             10061 	mov	r7,b
   3B38 E5 81             10062 	mov	a,sp
   3B3A 24 FB             10063 	add	a,#0xfb
   3B3C F8                10064 	mov	r0,a
   3B3D E6                10065 	mov	a,@r0
   3B3E C0 E0             10066 	push	acc
   3B40 08                10067 	inc	r0
   3B41 E6                10068 	mov	a,@r0
   3B42 C0 E0             10069 	push	acc
   3B44 08                10070 	inc	r0
   3B45 E6                10071 	mov	a,@r0
   3B46 C0 E0             10072 	push	acc
   3B48 8D 82             10073 	mov	dpl,r5
   3B4A 8E 83             10074 	mov	dph,r6
   3B4C 8F F0             10075 	mov	b,r7
   3B4E 78r48             10076 	mov	r0,#_cJSON_DetachItemFromObject
   3B50 79s3A             10077 	mov	r1,#(_cJSON_DetachItemFromObject >> 8)
   3B52 7As00             10078 	mov	r2,#(_cJSON_DetachItemFromObject >> 16)
   3B54 12s00r00          10079 	lcall	__sdcc_banked_call
   3B57 AD 82             10080 	mov	r5,dpl
   3B59 AE 83             10081 	mov	r6,dph
   3B5B AF F0             10082 	mov	r7,b
   3B5D 15 81             10083 	dec	sp
   3B5F 15 81             10084 	dec	sp
   3B61 15 81             10085 	dec	sp
   3B63 8D 82             10086 	mov	dpl,r5
   3B65 8E 83             10087 	mov	dph,r6
   3B67 8F F0             10088 	mov	b,r7
   3B69 78r8D             10089 	mov	r0,#_cJSON_Delete
   3B6B 79s03             10090 	mov	r1,#(_cJSON_Delete >> 8)
   3B6D 7As00             10091 	mov	r2,#(_cJSON_Delete >> 16)
   3B6F 12s00r00          10092 	lcall	__sdcc_banked_call
   3B72 02s00r00          10093 	ljmp	__sdcc_banked_ret
                          10094 ;------------------------------------------------------------
                          10095 ;Allocation info for local variables in function 'cJSON_ReplaceItemInArray'
                          10096 ;------------------------------------------------------------
                          10097 ;which                     Allocated to stack - sp -22
                          10098 ;newitem                   Allocated to stack - sp -25
                          10099 ;array                     Allocated to registers r5 r6 r7 
                          10100 ;c                         Allocated to stack - sp -17
                          10101 ;sloc0                     Allocated to stack - sp -14
                          10102 ;sloc1                     Allocated to stack - sp -8
                          10103 ;sloc2                     Allocated to stack - sp -11
                          10104 ;sloc3                     Allocated to stack - sp -8
                          10105 ;sloc4                     Allocated to stack - sp -5
                          10106 ;sloc5                     Allocated to stack - sp -2
                          10107 ;------------------------------------------------------------
                          10108 ;	cJSON.c:517: void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;
                          10109 ;	-----------------------------------------
                          10110 ;	 function cJSON_ReplaceItemInArray
                          10111 ;	-----------------------------------------
   3B75                   10112 _cJSON_ReplaceItemInArray:
   3B75 E5 81             10113 	mov	a,sp
   3B77 24 12             10114 	add	a,#0x12
   3B79 F5 81             10115 	mov	sp,a
   3B7B AD 82             10116 	mov	r5,dpl
   3B7D AE 83             10117 	mov	r6,dph
   3B7F AF F0             10118 	mov	r7,b
   3B81 74 06             10119 	mov	a,#0x06
   3B83 2D                10120 	add	a,r5
   3B84 FD                10121 	mov	r5,a
   3B85 E4                10122 	clr	a
   3B86 3E                10123 	addc	a,r6
   3B87 FE                10124 	mov	r6,a
   3B88 8D 82             10125 	mov	dpl,r5
   3B8A 8E 83             10126 	mov	dph,r6
   3B8C 8F F0             10127 	mov	b,r7
   3B8E E5 81             10128 	mov	a,sp
   3B90 24 F2             10129 	add	a,#0xf2
   3B92 F8                10130 	mov	r0,a
   3B93 12s00r00          10131 	lcall	__gptrget
   3B96 F6                10132 	mov	@r0,a
   3B97 A3                10133 	inc	dptr
   3B98 12s00r00          10134 	lcall	__gptrget
   3B9B 08                10135 	inc	r0
   3B9C F6                10136 	mov	@r0,a
   3B9D A3                10137 	inc	dptr
   3B9E 12s00r00          10138 	lcall	__gptrget
   3BA1 08                10139 	inc	r0
   3BA2 F6                10140 	mov	@r0,a
   3BA3 E5 81             10141 	mov	a,sp
   3BA5 24 F2             10142 	add	a,#0xf2
   3BA7 F8                10143 	mov	r0,a
   3BA8 E5 81             10144 	mov	a,sp
   3BAA 24 EF             10145 	add	a,#0xef
   3BAC F9                10146 	mov	r1,a
   3BAD E6                10147 	mov	a,@r0
   3BAE F7                10148 	mov	@r1,a
   3BAF 08                10149 	inc	r0
   3BB0 09                10150 	inc	r1
   3BB1 E6                10151 	mov	a,@r0
   3BB2 F7                10152 	mov	@r1,a
   3BB3 08                10153 	inc	r0
   3BB4 09                10154 	inc	r1
   3BB5 E6                10155 	mov	a,@r0
   3BB6 F7                10156 	mov	@r1,a
   3BB7 E5 81             10157 	mov	a,sp
   3BB9 24 EA             10158 	add	a,#0xea
   3BBB F8                10159 	mov	r0,a
   3BBC 86 04             10160 	mov	ar4,@r0
   3BBE 08                10161 	inc	r0
   3BBF 86 03             10162 	mov	ar3,@r0
   3BC1                   10163 00102$:
   3BC1 E5 81             10164 	mov	a,sp
   3BC3 24 EF             10165 	add	a,#0xef
   3BC5 F8                10166 	mov	r0,a
   3BC6 E6                10167 	mov	a,@r0
   3BC7 08                10168 	inc	r0
   3BC8 46                10169 	orl	a,@r0
   3BC9 60 35             10170 	jz	00104$
   3BCB C3                10171 	clr	c
   3BCC E4                10172 	clr	a
   3BCD 9C                10173 	subb	a,r4
   3BCE E4                10174 	clr	a
   3BCF 64 80             10175 	xrl	a,#0x80
   3BD1 8B F0             10176 	mov	b,r3
   3BD3 63 F0 80          10177 	xrl	b,#0x80
   3BD6 95 F0             10178 	subb	a,b
   3BD8 50 26             10179 	jnc	00104$
   3BDA E5 81             10180 	mov	a,sp
   3BDC 24 EF             10181 	add	a,#0xef
   3BDE F8                10182 	mov	r0,a
   3BDF 86 82             10183 	mov	dpl,@r0
   3BE1 08                10184 	inc	r0
   3BE2 86 83             10185 	mov	dph,@r0
   3BE4 08                10186 	inc	r0
   3BE5 86 F0             10187 	mov	b,@r0
   3BE7 12s00r00          10188 	lcall	__gptrget
   3BEA 18                10189 	dec	r0
   3BEB 18                10190 	dec	r0
   3BEC F6                10191 	mov	@r0,a
   3BED A3                10192 	inc	dptr
   3BEE 12s00r00          10193 	lcall	__gptrget
   3BF1 08                10194 	inc	r0
   3BF2 F6                10195 	mov	@r0,a
   3BF3 A3                10196 	inc	dptr
   3BF4 12s00r00          10197 	lcall	__gptrget
   3BF7 08                10198 	inc	r0
   3BF8 F6                10199 	mov	@r0,a
   3BF9 1C                10200 	dec	r4
   3BFA BC FF 01          10201 	cjne	r4,#0xFF,00129$
   3BFD 1B                10202 	dec	r3
   3BFE                   10203 00129$:
   3BFE 80 C1             10204 	sjmp	00102$
   3C00                   10205 00104$:
   3C00 E5 81             10206 	mov	a,sp
   3C02 24 EF             10207 	add	a,#0xef
   3C04 F8                10208 	mov	r0,a
   3C05 E6                10209 	mov	a,@r0
   3C06 08                10210 	inc	r0
   3C07 46                10211 	orl	a,@r0
   3C08 70 03             10212 	jnz	00106$
   3C0A 02s3DrE0          10213 	ljmp	00112$
   3C0D                   10214 00106$:
                          10215 ;	cJSON.c:518: newitem->next=c->next;newitem->prev=c->prev;if (newitem->next) newitem->next->prev=newitem;
   3C0D C0 05             10216 	push	ar5
   3C0F C0 06             10217 	push	ar6
   3C11 C0 07             10218 	push	ar7
   3C13 E5 81             10219 	mov	a,sp
   3C15 24 E4             10220 	add	a,#0xe4
   3C17 F8                10221 	mov	r0,a
   3C18 E5 81             10222 	mov	a,sp
   3C1A 24 F2             10223 	add	a,#0xf2
   3C1C F9                10224 	mov	r1,a
   3C1D E6                10225 	mov	a,@r0
   3C1E F7                10226 	mov	@r1,a
   3C1F 08                10227 	inc	r0
   3C20 09                10228 	inc	r1
   3C21 E6                10229 	mov	a,@r0
   3C22 F7                10230 	mov	@r1,a
   3C23 08                10231 	inc	r0
   3C24 09                10232 	inc	r1
   3C25 E6                10233 	mov	a,@r0
   3C26 F7                10234 	mov	@r1,a
   3C27 E5 81             10235 	mov	a,sp
   3C29 24 EC             10236 	add	a,#0xec
   3C2B F8                10237 	mov	r0,a
   3C2C 86 82             10238 	mov	dpl,@r0
   3C2E 08                10239 	inc	r0
   3C2F 86 83             10240 	mov	dph,@r0
   3C31 08                10241 	inc	r0
   3C32 86 F0             10242 	mov	b,@r0
   3C34 12s00r00          10243 	lcall	__gptrget
   3C37 FA                10244 	mov	r2,a
   3C38 A3                10245 	inc	dptr
   3C39 12s00r00          10246 	lcall	__gptrget
   3C3C FB                10247 	mov	r3,a
   3C3D A3                10248 	inc	dptr
   3C3E 12s00r00          10249 	lcall	__gptrget
   3C41 FC                10250 	mov	r4,a
   3C42 E5 81             10251 	mov	a,sp
   3C44 24 F2             10252 	add	a,#0xf2
   3C46 F8                10253 	mov	r0,a
   3C47 86 82             10254 	mov	dpl,@r0
   3C49 08                10255 	inc	r0
   3C4A 86 83             10256 	mov	dph,@r0
   3C4C 08                10257 	inc	r0
   3C4D 86 F0             10258 	mov	b,@r0
   3C4F EA                10259 	mov	a,r2
   3C50 12s00r00          10260 	lcall	__gptrput
   3C53 A3                10261 	inc	dptr
   3C54 EB                10262 	mov	a,r3
   3C55 12s00r00          10263 	lcall	__gptrput
   3C58 A3                10264 	inc	dptr
   3C59 EC                10265 	mov	a,r4
   3C5A 12s00r00          10266 	lcall	__gptrput
   3C5D E5 81             10267 	mov	a,sp
   3C5F 24 F2             10268 	add	a,#0xf2
   3C61 F8                10269 	mov	r0,a
   3C62 E5 81             10270 	mov	a,sp
   3C64 24 F5             10271 	add	a,#0xf5
   3C66 F9                10272 	mov	r1,a
   3C67 74 03             10273 	mov	a,#0x03
   3C69 26                10274 	add	a,@r0
   3C6A F7                10275 	mov	@r1,a
   3C6B E4                10276 	clr	a
   3C6C 08                10277 	inc	r0
   3C6D 36                10278 	addc	a,@r0
   3C6E 09                10279 	inc	r1
   3C6F F7                10280 	mov	@r1,a
   3C70 08                10281 	inc	r0
   3C71 09                10282 	inc	r1
   3C72 E6                10283 	mov	a,@r0
   3C73 F7                10284 	mov	@r1,a
   3C74 E5 81             10285 	mov	a,sp
   3C76 24 EC             10286 	add	a,#0xec
   3C78 F8                10287 	mov	r0,a
   3C79 E5 81             10288 	mov	a,sp
   3C7B 24 F8             10289 	add	a,#0xf8
   3C7D F9                10290 	mov	r1,a
   3C7E 74 03             10291 	mov	a,#0x03
   3C80 26                10292 	add	a,@r0
   3C81 F7                10293 	mov	@r1,a
   3C82 E4                10294 	clr	a
   3C83 08                10295 	inc	r0
   3C84 36                10296 	addc	a,@r0
   3C85 09                10297 	inc	r1
   3C86 F7                10298 	mov	@r1,a
   3C87 08                10299 	inc	r0
   3C88 09                10300 	inc	r1
   3C89 E6                10301 	mov	a,@r0
   3C8A F7                10302 	mov	@r1,a
   3C8B E5 81             10303 	mov	a,sp
   3C8D 24 F8             10304 	add	a,#0xf8
   3C8F F8                10305 	mov	r0,a
   3C90 86 82             10306 	mov	dpl,@r0
   3C92 08                10307 	inc	r0
   3C93 86 83             10308 	mov	dph,@r0
   3C95 08                10309 	inc	r0
   3C96 86 F0             10310 	mov	b,@r0
   3C98 12s00r00          10311 	lcall	__gptrget
   3C9B FD                10312 	mov	r5,a
   3C9C A3                10313 	inc	dptr
   3C9D 12s00r00          10314 	lcall	__gptrget
   3CA0 FE                10315 	mov	r6,a
   3CA1 A3                10316 	inc	dptr
   3CA2 12s00r00          10317 	lcall	__gptrget
   3CA5 FF                10318 	mov	r7,a
   3CA6 E5 81             10319 	mov	a,sp
   3CA8 24 F5             10320 	add	a,#0xf5
   3CAA F8                10321 	mov	r0,a
   3CAB 86 82             10322 	mov	dpl,@r0
   3CAD 08                10323 	inc	r0
   3CAE 86 83             10324 	mov	dph,@r0
   3CB0 08                10325 	inc	r0
   3CB1 86 F0             10326 	mov	b,@r0
   3CB3 ED                10327 	mov	a,r5
   3CB4 12s00r00          10328 	lcall	__gptrput
   3CB7 A3                10329 	inc	dptr
   3CB8 EE                10330 	mov	a,r6
   3CB9 12s00r00          10331 	lcall	__gptrput
   3CBC A3                10332 	inc	dptr
   3CBD EF                10333 	mov	a,r7
   3CBE 12s00r00          10334 	lcall	__gptrput
   3CC1 E5 81             10335 	mov	a,sp
   3CC3 24 F2             10336 	add	a,#0xf2
   3CC5 F8                10337 	mov	r0,a
   3CC6 86 82             10338 	mov	dpl,@r0
   3CC8 08                10339 	inc	r0
   3CC9 86 83             10340 	mov	dph,@r0
   3CCB 08                10341 	inc	r0
   3CCC 86 F0             10342 	mov	b,@r0
   3CCE E5 81             10343 	mov	a,sp
   3CD0 24 FB             10344 	add	a,#0xfb
   3CD2 F9                10345 	mov	r1,a
   3CD3 12s00r00          10346 	lcall	__gptrget
   3CD6 F7                10347 	mov	@r1,a
   3CD7 A3                10348 	inc	dptr
   3CD8 12s00r00          10349 	lcall	__gptrget
   3CDB 09                10350 	inc	r1
   3CDC F7                10351 	mov	@r1,a
   3CDD A3                10352 	inc	dptr
   3CDE 12s00r00          10353 	lcall	__gptrget
   3CE1 09                10354 	inc	r1
   3CE2 F7                10355 	mov	@r1,a
   3CE3 D0 07             10356 	pop	ar7
   3CE5 D0 06             10357 	pop	ar6
   3CE7 D0 05             10358 	pop	ar5
   3CE9 EA                10359 	mov	a,r2
   3CEA 4B                10360 	orl	a,r3
   3CEB 60 2A             10361 	jz	00108$
   3CED A8 81             10362 	mov	r0,sp
   3CEF 18                10363 	dec	r0
   3CF0 18                10364 	dec	r0
   3CF1 74 03             10365 	mov	a,#0x03
   3CF3 26                10366 	add	a,@r0
   3CF4 FA                10367 	mov	r2,a
   3CF5 E4                10368 	clr	a
   3CF6 08                10369 	inc	r0
   3CF7 36                10370 	addc	a,@r0
   3CF8 FB                10371 	mov	r3,a
   3CF9 08                10372 	inc	r0
   3CFA 86 04             10373 	mov	ar4,@r0
   3CFC 8A 82             10374 	mov	dpl,r2
   3CFE 8B 83             10375 	mov	dph,r3
   3D00 8C F0             10376 	mov	b,r4
   3D02 E5 81             10377 	mov	a,sp
   3D04 24 F5             10378 	add	a,#0xf5
   3D06 F8                10379 	mov	r0,a
   3D07 E6                10380 	mov	a,@r0
   3D08 12s00r00          10381 	lcall	__gptrput
   3D0B A3                10382 	inc	dptr
   3D0C 08                10383 	inc	r0
   3D0D E6                10384 	mov	a,@r0
   3D0E 12s00r00          10385 	lcall	__gptrput
   3D11 A3                10386 	inc	dptr
   3D12 08                10387 	inc	r0
   3D13 E6                10388 	mov	a,@r0
   3D14 12s00r00          10389 	lcall	__gptrput
   3D17                   10390 00108$:
                          10391 ;	cJSON.c:519: if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
   3D17 E5 81             10392 	mov	a,sp
   3D19 24 EF             10393 	add	a,#0xef
   3D1B F8                10394 	mov	r0,a
   3D1C E5 81             10395 	mov	a,sp
   3D1E 24 F2             10396 	add	a,#0xf2
   3D20 F9                10397 	mov	r1,a
   3D21 E7                10398 	mov	a,@r1
   3D22 C0 E0             10399 	push	acc
   3D24 09                10400 	inc	r1
   3D25 E7                10401 	mov	a,@r1
   3D26 C0 E0             10402 	push	acc
   3D28 09                10403 	inc	r1
   3D29 E7                10404 	mov	a,@r1
   3D2A C0 E0             10405 	push	acc
   3D2C 86 82             10406 	mov	dpl,@r0
   3D2E 08                10407 	inc	r0
   3D2F 86 83             10408 	mov	dph,@r0
   3D31 08                10409 	inc	r0
   3D32 86 F0             10410 	mov	b,@r0
   3D34 12s00r00          10411 	lcall	___gptr_cmp
   3D37 15 81             10412 	dec	sp
   3D39 15 81             10413 	dec	sp
   3D3B 15 81             10414 	dec	sp
   3D3D 60 02             10415 	jz	00133$
   3D3F 80 1D             10416 	sjmp	00110$
   3D41                   10417 00133$:
   3D41 8D 82             10418 	mov	dpl,r5
   3D43 8E 83             10419 	mov	dph,r6
   3D45 8F F0             10420 	mov	b,r7
   3D47 E5 81             10421 	mov	a,sp
   3D49 24 F5             10422 	add	a,#0xf5
   3D4B F8                10423 	mov	r0,a
   3D4C E6                10424 	mov	a,@r0
   3D4D 12s00r00          10425 	lcall	__gptrput
   3D50 A3                10426 	inc	dptr
   3D51 08                10427 	inc	r0
   3D52 E6                10428 	mov	a,@r0
   3D53 12s00r00          10429 	lcall	__gptrput
   3D56 A3                10430 	inc	dptr
   3D57 08                10431 	inc	r0
   3D58 E6                10432 	mov	a,@r0
   3D59 12s00r00          10433 	lcall	__gptrput
   3D5C 80 36             10434 	sjmp	00111$
   3D5E                   10435 00110$:
   3D5E E5 81             10436 	mov	a,sp
   3D60 24 F8             10437 	add	a,#0xf8
   3D62 F8                10438 	mov	r0,a
   3D63 86 82             10439 	mov	dpl,@r0
   3D65 08                10440 	inc	r0
   3D66 86 83             10441 	mov	dph,@r0
   3D68 08                10442 	inc	r0
   3D69 86 F0             10443 	mov	b,@r0
   3D6B 12s00r00          10444 	lcall	__gptrget
   3D6E FD                10445 	mov	r5,a
   3D6F A3                10446 	inc	dptr
   3D70 12s00r00          10447 	lcall	__gptrget
   3D73 FE                10448 	mov	r6,a
   3D74 A3                10449 	inc	dptr
   3D75 12s00r00          10450 	lcall	__gptrget
   3D78 FF                10451 	mov	r7,a
   3D79 8D 82             10452 	mov	dpl,r5
   3D7B 8E 83             10453 	mov	dph,r6
   3D7D 8F F0             10454 	mov	b,r7
   3D7F E5 81             10455 	mov	a,sp
   3D81 24 F5             10456 	add	a,#0xf5
   3D83 F8                10457 	mov	r0,a
   3D84 E6                10458 	mov	a,@r0
   3D85 12s00r00          10459 	lcall	__gptrput
   3D88 A3                10460 	inc	dptr
   3D89 08                10461 	inc	r0
   3D8A E6                10462 	mov	a,@r0
   3D8B 12s00r00          10463 	lcall	__gptrput
   3D8E A3                10464 	inc	dptr
   3D8F 08                10465 	inc	r0
   3D90 E6                10466 	mov	a,@r0
   3D91 12s00r00          10467 	lcall	__gptrput
   3D94                   10468 00111$:
   3D94 E5 81             10469 	mov	a,sp
   3D96 24 FB             10470 	add	a,#0xfb
   3D98 F8                10471 	mov	r0,a
   3D99 86 82             10472 	mov	dpl,@r0
   3D9B 08                10473 	inc	r0
   3D9C 86 83             10474 	mov	dph,@r0
   3D9E 08                10475 	inc	r0
   3D9F 86 F0             10476 	mov	b,@r0
   3DA1 E4                10477 	clr	a
   3DA2 12s00r00          10478 	lcall	__gptrput
   3DA5 A3                10479 	inc	dptr
   3DA6 E4                10480 	clr	a
   3DA7 12s00r00          10481 	lcall	__gptrput
   3DAA A3                10482 	inc	dptr
   3DAB E4                10483 	clr	a
   3DAC 12s00r00          10484 	lcall	__gptrput
   3DAF E5 81             10485 	mov	a,sp
   3DB1 24 EF             10486 	add	a,#0xef
   3DB3 F8                10487 	mov	r0,a
   3DB4 86 82             10488 	mov	dpl,@r0
   3DB6 08                10489 	inc	r0
   3DB7 86 83             10490 	mov	dph,@r0
   3DB9 08                10491 	inc	r0
   3DBA 86 F0             10492 	mov	b,@r0
   3DBC E4                10493 	clr	a
   3DBD 12s00r00          10494 	lcall	__gptrput
   3DC0 A3                10495 	inc	dptr
   3DC1 E4                10496 	clr	a
   3DC2 12s00r00          10497 	lcall	__gptrput
   3DC5 A3                10498 	inc	dptr
   3DC6 E4                10499 	clr	a
   3DC7 12s00r00          10500 	lcall	__gptrput
   3DCA E5 81             10501 	mov	a,sp
   3DCC 24 EF             10502 	add	a,#0xef
   3DCE F8                10503 	mov	r0,a
   3DCF 86 82             10504 	mov	dpl,@r0
   3DD1 08                10505 	inc	r0
   3DD2 86 83             10506 	mov	dph,@r0
   3DD4 08                10507 	inc	r0
   3DD5 86 F0             10508 	mov	b,@r0
   3DD7 78r8D             10509 	mov	r0,#_cJSON_Delete
   3DD9 79s03             10510 	mov	r1,#(_cJSON_Delete >> 8)
   3DDB 7As00             10511 	mov	r2,#(_cJSON_Delete >> 16)
   3DDD 12s00r00          10512 	lcall	__sdcc_banked_call
   3DE0                   10513 00112$:
   3DE0 E5 81             10514 	mov	a,sp
   3DE2 24 EE             10515 	add	a,#0xEE
   3DE4 F5 81             10516 	mov	sp,a
   3DE6 02s00r00          10517 	ljmp	__sdcc_banked_ret
                          10518 ;------------------------------------------------------------
                          10519 ;Allocation info for local variables in function 'cJSON_ReplaceItemInObject'
                          10520 ;------------------------------------------------------------
                          10521 ;string                    Allocated to stack - sp -13
                          10522 ;newitem                   Allocated to stack - sp -16
                          10523 ;object                    Allocated to stack - sp -7
                          10524 ;i                         Allocated to stack - sp -4
                          10525 ;c                         Allocated to registers r2 r3 r4 
                          10526 ;sloc0                     Allocated to stack - sp -2
                          10527 ;------------------------------------------------------------
                          10528 ;	cJSON.c:520: void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
                          10529 ;	-----------------------------------------
                          10530 ;	 function cJSON_ReplaceItemInObject
                          10531 ;	-----------------------------------------
   3DE9                   10532 _cJSON_ReplaceItemInObject:
   3DE9 C0 82             10533 	push	dpl
   3DEB C0 83             10534 	push	dph
   3DED C0 F0             10535 	push	b
   3DEF E5 81             10536 	mov	a,sp
   3DF1 24 05             10537 	add	a,#0x05
   3DF3 F5 81             10538 	mov	sp,a
   3DF5 24 F9             10539 	add	a,#0xf9
   3DF7 F8                10540 	mov	r0,a
   3DF8 74 06             10541 	mov	a,#0x06
   3DFA 26                10542 	add	a,@r0
   3DFB FA                10543 	mov	r2,a
   3DFC E4                10544 	clr	a
   3DFD 08                10545 	inc	r0
   3DFE 36                10546 	addc	a,@r0
   3DFF FB                10547 	mov	r3,a
   3E00 08                10548 	inc	r0
   3E01 86 04             10549 	mov	ar4,@r0
   3E03 8A 82             10550 	mov	dpl,r2
   3E05 8B 83             10551 	mov	dph,r3
   3E07 8C F0             10552 	mov	b,r4
   3E09 12s00r00          10553 	lcall	__gptrget
   3E0C FA                10554 	mov	r2,a
   3E0D A3                10555 	inc	dptr
   3E0E 12s00r00          10556 	lcall	__gptrget
   3E11 FB                10557 	mov	r3,a
   3E12 A3                10558 	inc	dptr
   3E13 12s00r00          10559 	lcall	__gptrget
   3E16 FC                10560 	mov	r4,a
   3E17 E5 81             10561 	mov	a,sp
   3E19 24 FC             10562 	add	a,#0xfc
   3E1B F8                10563 	mov	r0,a
   3E1C E4                10564 	clr	a
   3E1D F6                10565 	mov	@r0,a
   3E1E 08                10566 	inc	r0
   3E1F F6                10567 	mov	@r0,a
   3E20                   10568 00102$:
   3E20 EA                10569 	mov	a,r2
   3E21 4B                10570 	orl	a,r3
   3E22 60 77             10571 	jz	00104$
   3E24 74 14             10572 	mov	a,#0x14
   3E26 2A                10573 	add	a,r2
   3E27 FD                10574 	mov	r5,a
   3E28 E4                10575 	clr	a
   3E29 3B                10576 	addc	a,r3
   3E2A FE                10577 	mov	r6,a
   3E2B 8C 07             10578 	mov	ar7,r4
   3E2D 8D 82             10579 	mov	dpl,r5
   3E2F 8E 83             10580 	mov	dph,r6
   3E31 8F F0             10581 	mov	b,r7
   3E33 12s00r00          10582 	lcall	__gptrget
   3E36 FD                10583 	mov	r5,a
   3E37 A3                10584 	inc	dptr
   3E38 12s00r00          10585 	lcall	__gptrget
   3E3B FE                10586 	mov	r6,a
   3E3C A3                10587 	inc	dptr
   3E3D 12s00r00          10588 	lcall	__gptrget
   3E40 FF                10589 	mov	r7,a
   3E41 C0 04             10590 	push	ar4
   3E43 C0 03             10591 	push	ar3
   3E45 C0 02             10592 	push	ar2
   3E47 E5 81             10593 	mov	a,sp
   3E49 24 F0             10594 	add	a,#0xf0
   3E4B F8                10595 	mov	r0,a
   3E4C E6                10596 	mov	a,@r0
   3E4D C0 E0             10597 	push	acc
   3E4F 08                10598 	inc	r0
   3E50 E6                10599 	mov	a,@r0
   3E51 C0 E0             10600 	push	acc
   3E53 08                10601 	inc	r0
   3E54 E6                10602 	mov	a,@r0
   3E55 C0 E0             10603 	push	acc
   3E57 8D 82             10604 	mov	dpl,r5
   3E59 8E 83             10605 	mov	dph,r6
   3E5B 8F F0             10606 	mov	b,r7
   3E5D 78r14             10607 	mov	r0,#_cJSON_strcasecmp
   3E5F 79s00             10608 	mov	r1,#(_cJSON_strcasecmp >> 8)
   3E61 7As00             10609 	mov	r2,#(_cJSON_strcasecmp >> 16)
   3E63 12s00r00          10610 	lcall	__sdcc_banked_call
   3E66 AE 82             10611 	mov	r6,dpl
   3E68 AF 83             10612 	mov	r7,dph
   3E6A 15 81             10613 	dec	sp
   3E6C 15 81             10614 	dec	sp
   3E6E 15 81             10615 	dec	sp
   3E70 D0 02             10616 	pop	ar2
   3E72 D0 03             10617 	pop	ar3
   3E74 D0 04             10618 	pop	ar4
   3E76 EE                10619 	mov	a,r6
   3E77 4F                10620 	orl	a,r7
   3E78 60 21             10621 	jz	00104$
   3E7A E5 81             10622 	mov	a,sp
   3E7C 24 FC             10623 	add	a,#0xfc
   3E7E F8                10624 	mov	r0,a
   3E7F 06                10625 	inc	@r0
   3E80 B6 00 02          10626 	cjne	@r0,#0x00,00120$
   3E83 08                10627 	inc	r0
   3E84 06                10628 	inc	@r0
   3E85                   10629 00120$:
   3E85 8A 82             10630 	mov	dpl,r2
   3E87 8B 83             10631 	mov	dph,r3
   3E89 8C F0             10632 	mov	b,r4
   3E8B 12s00r00          10633 	lcall	__gptrget
   3E8E FA                10634 	mov	r2,a
   3E8F A3                10635 	inc	dptr
   3E90 12s00r00          10636 	lcall	__gptrget
   3E93 FB                10637 	mov	r3,a
   3E94 A3                10638 	inc	dptr
   3E95 12s00r00          10639 	lcall	__gptrget
   3E98 FC                10640 	mov	r4,a
   3E99 80 85             10641 	sjmp	00102$
   3E9B                   10642 00104$:
   3E9B EA                10643 	mov	a,r2
   3E9C 4B                10644 	orl	a,r3
   3E9D 70 03             10645 	jnz	00121$
   3E9F 02s3Fr2E          10646 	ljmp	00107$
   3EA2                   10647 00121$:
   3EA2 E5 81             10648 	mov	a,sp
   3EA4 24 F0             10649 	add	a,#0xf0
   3EA6 F8                10650 	mov	r0,a
   3EA7 86 03             10651 	mov	ar3,@r0
   3EA9 08                10652 	inc	r0
   3EAA 86 04             10653 	mov	ar4,@r0
   3EAC 08                10654 	inc	r0
   3EAD 86 05             10655 	mov	ar5,@r0
   3EAF A8 81             10656 	mov	r0,sp
   3EB1 18                10657 	dec	r0
   3EB2 18                10658 	dec	r0
   3EB3 74 14             10659 	mov	a,#0x14
   3EB5 2B                10660 	add	a,r3
   3EB6 F6                10661 	mov	@r0,a
   3EB7 E4                10662 	clr	a
   3EB8 3C                10663 	addc	a,r4
   3EB9 08                10664 	inc	r0
   3EBA F6                10665 	mov	@r0,a
   3EBB 08                10666 	inc	r0
   3EBC A6 05             10667 	mov	@r0,ar5
   3EBE E5 81             10668 	mov	a,sp
   3EC0 24 F3             10669 	add	a,#0xf3
   3EC2 F8                10670 	mov	r0,a
   3EC3 86 82             10671 	mov	dpl,@r0
   3EC5 08                10672 	inc	r0
   3EC6 86 83             10673 	mov	dph,@r0
   3EC8 08                10674 	inc	r0
   3EC9 86 F0             10675 	mov	b,@r0
   3ECB C0 05             10676 	push	ar5
   3ECD C0 04             10677 	push	ar4
   3ECF C0 03             10678 	push	ar3
   3ED1 78r5F             10679 	mov	r0,#_cJSON_strdup
   3ED3 79s02             10680 	mov	r1,#(_cJSON_strdup >> 8)
   3ED5 7As00             10681 	mov	r2,#(_cJSON_strdup >> 16)
   3ED7 12s00r00          10682 	lcall	__sdcc_banked_call
   3EDA AA 82             10683 	mov	r2,dpl
   3EDC AE 83             10684 	mov	r6,dph
   3EDE AF F0             10685 	mov	r7,b
   3EE0 D0 03             10686 	pop	ar3
   3EE2 D0 04             10687 	pop	ar4
   3EE4 D0 05             10688 	pop	ar5
   3EE6 A8 81             10689 	mov	r0,sp
   3EE8 18                10690 	dec	r0
   3EE9 18                10691 	dec	r0
   3EEA 86 82             10692 	mov	dpl,@r0
   3EEC 08                10693 	inc	r0
   3EED 86 83             10694 	mov	dph,@r0
   3EEF 08                10695 	inc	r0
   3EF0 86 F0             10696 	mov	b,@r0
   3EF2 EA                10697 	mov	a,r2
   3EF3 12s00r00          10698 	lcall	__gptrput
   3EF6 A3                10699 	inc	dptr
   3EF7 EE                10700 	mov	a,r6
   3EF8 12s00r00          10701 	lcall	__gptrput
   3EFB A3                10702 	inc	dptr
   3EFC EF                10703 	mov	a,r7
   3EFD 12s00r00          10704 	lcall	__gptrput
   3F00 C0 03             10705 	push	ar3
   3F02 C0 04             10706 	push	ar4
   3F04 C0 05             10707 	push	ar5
   3F06 E5 81             10708 	mov	a,sp
   3F08 24 F9             10709 	add	a,#0xf9
   3F0A F8                10710 	mov	r0,a
   3F0B E6                10711 	mov	a,@r0
   3F0C C0 E0             10712 	push	acc
   3F0E 08                10713 	inc	r0
   3F0F E6                10714 	mov	a,@r0
   3F10 C0 E0             10715 	push	acc
   3F12 E5 81             10716 	mov	a,sp
   3F14 24 F4             10717 	add	a,#0xf4
   3F16 F8                10718 	mov	r0,a
   3F17 86 82             10719 	mov	dpl,@r0
   3F19 08                10720 	inc	r0
   3F1A 86 83             10721 	mov	dph,@r0
   3F1C 08                10722 	inc	r0
   3F1D 86 F0             10723 	mov	b,@r0
   3F1F 78r75             10724 	mov	r0,#_cJSON_ReplaceItemInArray
   3F21 79s3B             10725 	mov	r1,#(_cJSON_ReplaceItemInArray >> 8)
   3F23 7As00             10726 	mov	r2,#(_cJSON_ReplaceItemInArray >> 16)
   3F25 12s00r00          10727 	lcall	__sdcc_banked_call
   3F28 E5 81             10728 	mov	a,sp
   3F2A 24 FB             10729 	add	a,#0xfb
   3F2C F5 81             10730 	mov	sp,a
   3F2E                   10731 00107$:
   3F2E E5 81             10732 	mov	a,sp
   3F30 24 F8             10733 	add	a,#0xF8
   3F32 F5 81             10734 	mov	sp,a
   3F34 02s00r00          10735 	ljmp	__sdcc_banked_ret
                          10736 ;------------------------------------------------------------
                          10737 ;Allocation info for local variables in function 'cJSON_CreateNull'
                          10738 ;------------------------------------------------------------
                          10739 ;item                      Allocated to registers r5 r6 r7 
                          10740 ;------------------------------------------------------------
                          10741 ;	cJSON.c:523: cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
                          10742 ;	-----------------------------------------
                          10743 ;	 function cJSON_CreateNull
                          10744 ;	-----------------------------------------
   3F37                   10745 _cJSON_CreateNull:
   3F37 78r3D             10746 	mov	r0,#_cJSON_New_Item
   3F39 79s03             10747 	mov	r1,#(_cJSON_New_Item >> 8)
   3F3B 7As00             10748 	mov	r2,#(_cJSON_New_Item >> 16)
   3F3D 12s00r00          10749 	lcall	__sdcc_banked_call
   3F40 AD 82             10750 	mov	r5,dpl
   3F42 AE 83             10751 	mov	r6,dph
   3F44 AF F0             10752 	mov	r7,b
   3F46 ED                10753 	mov	a,r5
   3F47 4E                10754 	orl	a,r6
   3F48 60 19             10755 	jz	00102$
   3F4A 74 09             10756 	mov	a,#0x09
   3F4C 2D                10757 	add	a,r5
   3F4D FA                10758 	mov	r2,a
   3F4E E4                10759 	clr	a
   3F4F 3E                10760 	addc	a,r6
   3F50 FB                10761 	mov	r3,a
   3F51 8F 04             10762 	mov	ar4,r7
   3F53 8A 82             10763 	mov	dpl,r2
   3F55 8B 83             10764 	mov	dph,r3
   3F57 8C F0             10765 	mov	b,r4
   3F59 74 02             10766 	mov	a,#0x02
   3F5B 12s00r00          10767 	lcall	__gptrput
   3F5E A3                10768 	inc	dptr
   3F5F E4                10769 	clr	a
   3F60 12s00r00          10770 	lcall	__gptrput
   3F63                   10771 00102$:
   3F63 8D 82             10772 	mov	dpl,r5
   3F65 8E 83             10773 	mov	dph,r6
   3F67 8F F0             10774 	mov	b,r7
   3F69 02s00r00          10775 	ljmp	__sdcc_banked_ret
                          10776 ;------------------------------------------------------------
                          10777 ;Allocation info for local variables in function 'cJSON_CreateTrue'
                          10778 ;------------------------------------------------------------
                          10779 ;item                      Allocated to registers r5 r6 r7 
                          10780 ;------------------------------------------------------------
                          10781 ;	cJSON.c:524: cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
                          10782 ;	-----------------------------------------
                          10783 ;	 function cJSON_CreateTrue
                          10784 ;	-----------------------------------------
   3F6C                   10785 _cJSON_CreateTrue:
   3F6C 78r3D             10786 	mov	r0,#_cJSON_New_Item
   3F6E 79s03             10787 	mov	r1,#(_cJSON_New_Item >> 8)
   3F70 7As00             10788 	mov	r2,#(_cJSON_New_Item >> 16)
   3F72 12s00r00          10789 	lcall	__sdcc_banked_call
   3F75 AD 82             10790 	mov	r5,dpl
   3F77 AE 83             10791 	mov	r6,dph
   3F79 AF F0             10792 	mov	r7,b
   3F7B ED                10793 	mov	a,r5
   3F7C 4E                10794 	orl	a,r6
   3F7D 60 19             10795 	jz	00102$
   3F7F 74 09             10796 	mov	a,#0x09
   3F81 2D                10797 	add	a,r5
   3F82 FA                10798 	mov	r2,a
   3F83 E4                10799 	clr	a
   3F84 3E                10800 	addc	a,r6
   3F85 FB                10801 	mov	r3,a
   3F86 8F 04             10802 	mov	ar4,r7
   3F88 8A 82             10803 	mov	dpl,r2
   3F8A 8B 83             10804 	mov	dph,r3
   3F8C 8C F0             10805 	mov	b,r4
   3F8E 74 01             10806 	mov	a,#0x01
   3F90 12s00r00          10807 	lcall	__gptrput
   3F93 A3                10808 	inc	dptr
   3F94 E4                10809 	clr	a
   3F95 12s00r00          10810 	lcall	__gptrput
   3F98                   10811 00102$:
   3F98 8D 82             10812 	mov	dpl,r5
   3F9A 8E 83             10813 	mov	dph,r6
   3F9C 8F F0             10814 	mov	b,r7
   3F9E 02s00r00          10815 	ljmp	__sdcc_banked_ret
                          10816 ;------------------------------------------------------------
                          10817 ;Allocation info for local variables in function 'cJSON_CreateFalse'
                          10818 ;------------------------------------------------------------
                          10819 ;item                      Allocated to registers r5 r6 r7 
                          10820 ;------------------------------------------------------------
                          10821 ;	cJSON.c:525: cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
                          10822 ;	-----------------------------------------
                          10823 ;	 function cJSON_CreateFalse
                          10824 ;	-----------------------------------------
   3FA1                   10825 _cJSON_CreateFalse:
   3FA1 78r3D             10826 	mov	r0,#_cJSON_New_Item
   3FA3 79s03             10827 	mov	r1,#(_cJSON_New_Item >> 8)
   3FA5 7As00             10828 	mov	r2,#(_cJSON_New_Item >> 16)
   3FA7 12s00r00          10829 	lcall	__sdcc_banked_call
   3FAA AD 82             10830 	mov	r5,dpl
   3FAC AE 83             10831 	mov	r6,dph
   3FAE AF F0             10832 	mov	r7,b
   3FB0 ED                10833 	mov	a,r5
   3FB1 4E                10834 	orl	a,r6
   3FB2 60 18             10835 	jz	00102$
   3FB4 74 09             10836 	mov	a,#0x09
   3FB6 2D                10837 	add	a,r5
   3FB7 FA                10838 	mov	r2,a
   3FB8 E4                10839 	clr	a
   3FB9 3E                10840 	addc	a,r6
   3FBA FB                10841 	mov	r3,a
   3FBB 8F 04             10842 	mov	ar4,r7
   3FBD 8A 82             10843 	mov	dpl,r2
   3FBF 8B 83             10844 	mov	dph,r3
   3FC1 8C F0             10845 	mov	b,r4
   3FC3 E4                10846 	clr	a
   3FC4 12s00r00          10847 	lcall	__gptrput
   3FC7 A3                10848 	inc	dptr
   3FC8 E4                10849 	clr	a
   3FC9 12s00r00          10850 	lcall	__gptrput
   3FCC                   10851 00102$:
   3FCC 8D 82             10852 	mov	dpl,r5
   3FCE 8E 83             10853 	mov	dph,r6
   3FD0 8F F0             10854 	mov	b,r7
   3FD2 02s00r00          10855 	ljmp	__sdcc_banked_ret
                          10856 ;------------------------------------------------------------
                          10857 ;Allocation info for local variables in function 'cJSON_CreateBool'
                          10858 ;------------------------------------------------------------
                          10859 ;b                         Allocated to stack - sp -4
                          10860 ;item                      Allocated to stack - sp -2
                          10861 ;sloc0                     Allocated to stack - sp +1
                          10862 ;------------------------------------------------------------
                          10863 ;	cJSON.c:526: cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
                          10864 ;	-----------------------------------------
                          10865 ;	 function cJSON_CreateBool
                          10866 ;	-----------------------------------------
   3FD5                   10867 _cJSON_CreateBool:
   3FD5 C0 82             10868 	push	dpl
   3FD7 C0 83             10869 	push	dph
   3FD9 05 81             10870 	inc	sp
   3FDB 05 81             10871 	inc	sp
   3FDD 05 81             10872 	inc	sp
   3FDF 78r3D             10873 	mov	r0,#_cJSON_New_Item
   3FE1 79s03             10874 	mov	r1,#(_cJSON_New_Item >> 8)
   3FE3 7As00             10875 	mov	r2,#(_cJSON_New_Item >> 16)
   3FE5 12s00r00          10876 	lcall	__sdcc_banked_call
   3FE8 AB 82             10877 	mov	r3,dpl
   3FEA AC 83             10878 	mov	r4,dph
   3FEC AD F0             10879 	mov	r5,b
   3FEE A8 81             10880 	mov	r0,sp
   3FF0 18                10881 	dec	r0
   3FF1 18                10882 	dec	r0
   3FF2 A6 03             10883 	mov	@r0,ar3
   3FF4 08                10884 	inc	r0
   3FF5 A6 04             10885 	mov	@r0,ar4
   3FF7 08                10886 	inc	r0
   3FF8 A6 05             10887 	mov	@r0,ar5
   3FFA A8 81             10888 	mov	r0,sp
   3FFC 18                10889 	dec	r0
   3FFD 18                10890 	dec	r0
   3FFE E6                10891 	mov	a,@r0
   3FFF 08                10892 	inc	r0
   4000 46                10893 	orl	a,@r0
   4001 60 32             10894 	jz	00102$
   4003 A8 81             10895 	mov	r0,sp
   4005 18                10896 	dec	r0
   4006 18                10897 	dec	r0
   4007 74 09             10898 	mov	a,#0x09
   4009 26                10899 	add	a,@r0
   400A FA                10900 	mov	r2,a
   400B E4                10901 	clr	a
   400C 08                10902 	inc	r0
   400D 36                10903 	addc	a,@r0
   400E FE                10904 	mov	r6,a
   400F 08                10905 	inc	r0
   4010 86 07             10906 	mov	ar7,@r0
   4012 E5 81             10907 	mov	a,sp
   4014 24 FC             10908 	add	a,#0xfc
   4016 F8                10909 	mov	r0,a
   4017 E6                10910 	mov	a,@r0
   4018 08                10911 	inc	r0
   4019 46                10912 	orl	a,@r0
   401A 60 04             10913 	jz	00105$
   401C 7D 01             10914 	mov	r5,#0x01
   401E 80 02             10915 	sjmp	00106$
   4020                   10916 00105$:
   4020 7D 00             10917 	mov	r5,#0x00
   4022                   10918 00106$:
   4022 8D 04             10919 	mov	ar4,r5
   4024 7D 00             10920 	mov	r5,#0x00
   4026 8A 82             10921 	mov	dpl,r2
   4028 8E 83             10922 	mov	dph,r6
   402A 8F F0             10923 	mov	b,r7
   402C EC                10924 	mov	a,r4
   402D 12s00r00          10925 	lcall	__gptrput
   4030 A3                10926 	inc	dptr
   4031 ED                10927 	mov	a,r5
   4032 12s00r00          10928 	lcall	__gptrput
   4035                   10929 00102$:
   4035 A8 81             10930 	mov	r0,sp
   4037 18                10931 	dec	r0
   4038 18                10932 	dec	r0
   4039 86 82             10933 	mov	dpl,@r0
   403B 08                10934 	inc	r0
   403C 86 83             10935 	mov	dph,@r0
   403E 08                10936 	inc	r0
   403F 86 F0             10937 	mov	b,@r0
   4041 C8                10938 	xch	a,r0
   4042 E5 81             10939 	mov	a,sp
   4044 24 FB             10940 	add	a,#0xFB
   4046 F5 81             10941 	mov	sp,a
   4048 C8                10942 	xch	a,r0
   4049 02s00r00          10943 	ljmp	__sdcc_banked_ret
                          10944 ;------------------------------------------------------------
                          10945 ;Allocation info for local variables in function 'cJSON_CreateNumber'
                          10946 ;------------------------------------------------------------
                          10947 ;num                       Allocated to stack - sp -6
                          10948 ;item                      Allocated to stack - sp -2
                          10949 ;------------------------------------------------------------
                          10950 ;	cJSON.c:527: cJSON *cJSON_CreateNumber(float num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuefloat=num;item->valueint=(int)num;}return item;}
                          10951 ;	-----------------------------------------
                          10952 ;	 function cJSON_CreateNumber
                          10953 ;	-----------------------------------------
   404C                   10954 _cJSON_CreateNumber:
   404C C0 82             10955 	push	dpl
   404E C0 83             10956 	push	dph
   4050 C0 F0             10957 	push	b
   4052 C0 E0             10958 	push	acc
   4054 05 81             10959 	inc	sp
   4056 05 81             10960 	inc	sp
   4058 05 81             10961 	inc	sp
   405A 78r3D             10962 	mov	r0,#_cJSON_New_Item
   405C 79s03             10963 	mov	r1,#(_cJSON_New_Item >> 8)
   405E 7As00             10964 	mov	r2,#(_cJSON_New_Item >> 16)
   4060 12s00r00          10965 	lcall	__sdcc_banked_call
   4063 AF 82             10966 	mov	r7,dpl
   4065 AE 83             10967 	mov	r6,dph
   4067 AD F0             10968 	mov	r5,b
   4069 A8 81             10969 	mov	r0,sp
   406B 18                10970 	dec	r0
   406C 18                10971 	dec	r0
   406D A6 07             10972 	mov	@r0,ar7
   406F 08                10973 	inc	r0
   4070 A6 06             10974 	mov	@r0,ar6
   4072 08                10975 	inc	r0
   4073 A6 05             10976 	mov	@r0,ar5
   4075 A8 81             10977 	mov	r0,sp
   4077 18                10978 	dec	r0
   4078 18                10979 	dec	r0
   4079 E6                10980 	mov	a,@r0
   407A 08                10981 	inc	r0
   407B 46                10982 	orl	a,@r0
   407C 70 03             10983 	jnz	00107$
   407E 02s41r10          10984 	ljmp	00102$
   4081                   10985 00107$:
   4081 A8 81             10986 	mov	r0,sp
   4083 18                10987 	dec	r0
   4084 18                10988 	dec	r0
   4085 74 09             10989 	mov	a,#0x09
   4087 26                10990 	add	a,@r0
   4088 FC                10991 	mov	r4,a
   4089 E4                10992 	clr	a
   408A 08                10993 	inc	r0
   408B 36                10994 	addc	a,@r0
   408C FD                10995 	mov	r5,a
   408D 08                10996 	inc	r0
   408E 86 06             10997 	mov	ar6,@r0
   4090 8C 82             10998 	mov	dpl,r4
   4092 8D 83             10999 	mov	dph,r5
   4094 8E F0             11000 	mov	b,r6
   4096 74 03             11001 	mov	a,#0x03
   4098 12s00r00          11002 	lcall	__gptrput
   409B A3                11003 	inc	dptr
   409C E4                11004 	clr	a
   409D 12s00r00          11005 	lcall	__gptrput
   40A0 A8 81             11006 	mov	r0,sp
   40A2 18                11007 	dec	r0
   40A3 18                11008 	dec	r0
   40A4 74 10             11009 	mov	a,#0x10
   40A6 26                11010 	add	a,@r0
   40A7 FC                11011 	mov	r4,a
   40A8 E4                11012 	clr	a
   40A9 08                11013 	inc	r0
   40AA 36                11014 	addc	a,@r0
   40AB FD                11015 	mov	r5,a
   40AC 08                11016 	inc	r0
   40AD 86 06             11017 	mov	ar6,@r0
   40AF 8C 82             11018 	mov	dpl,r4
   40B1 8D 83             11019 	mov	dph,r5
   40B3 8E F0             11020 	mov	b,r6
   40B5 E5 81             11021 	mov	a,sp
   40B7 24 FA             11022 	add	a,#0xfa
   40B9 F8                11023 	mov	r0,a
   40BA E6                11024 	mov	a,@r0
   40BB 12s00r00          11025 	lcall	__gptrput
   40BE A3                11026 	inc	dptr
   40BF 08                11027 	inc	r0
   40C0 E6                11028 	mov	a,@r0
   40C1 12s00r00          11029 	lcall	__gptrput
   40C4 A3                11030 	inc	dptr
   40C5 08                11031 	inc	r0
   40C6 E6                11032 	mov	a,@r0
   40C7 12s00r00          11033 	lcall	__gptrput
   40CA A3                11034 	inc	dptr
   40CB 08                11035 	inc	r0
   40CC E6                11036 	mov	a,@r0
   40CD 12s00r00          11037 	lcall	__gptrput
   40D0 A8 81             11038 	mov	r0,sp
   40D2 18                11039 	dec	r0
   40D3 18                11040 	dec	r0
   40D4 74 0E             11041 	mov	a,#0x0E
   40D6 26                11042 	add	a,@r0
   40D7 FC                11043 	mov	r4,a
   40D8 E4                11044 	clr	a
   40D9 08                11045 	inc	r0
   40DA 36                11046 	addc	a,@r0
   40DB FD                11047 	mov	r5,a
   40DC 08                11048 	inc	r0
   40DD 86 06             11049 	mov	ar6,@r0
   40DF E5 81             11050 	mov	a,sp
   40E1 24 FA             11051 	add	a,#0xfa
   40E3 F8                11052 	mov	r0,a
   40E4 86 82             11053 	mov	dpl,@r0
   40E6 08                11054 	inc	r0
   40E7 86 83             11055 	mov	dph,@r0
   40E9 08                11056 	inc	r0
   40EA 86 F0             11057 	mov	b,@r0
   40EC 08                11058 	inc	r0
   40ED E6                11059 	mov	a,@r0
   40EE C0 06             11060 	push	ar6
   40F0 C0 05             11061 	push	ar5
   40F2 C0 04             11062 	push	ar4
   40F4 12s00r00          11063 	lcall	___fs2sint
   40F7 AB 82             11064 	mov	r3,dpl
   40F9 AF 83             11065 	mov	r7,dph
   40FB D0 04             11066 	pop	ar4
   40FD D0 05             11067 	pop	ar5
   40FF D0 06             11068 	pop	ar6
   4101 8C 82             11069 	mov	dpl,r4
   4103 8D 83             11070 	mov	dph,r5
   4105 8E F0             11071 	mov	b,r6
   4107 EB                11072 	mov	a,r3
   4108 12s00r00          11073 	lcall	__gptrput
   410B A3                11074 	inc	dptr
   410C EF                11075 	mov	a,r7
   410D 12s00r00          11076 	lcall	__gptrput
   4110                   11077 00102$:
   4110 A8 81             11078 	mov	r0,sp
   4112 18                11079 	dec	r0
   4113 18                11080 	dec	r0
   4114 86 82             11081 	mov	dpl,@r0
   4116 08                11082 	inc	r0
   4117 86 83             11083 	mov	dph,@r0
   4119 08                11084 	inc	r0
   411A 86 F0             11085 	mov	b,@r0
   411C C8                11086 	xch	a,r0
   411D E5 81             11087 	mov	a,sp
   411F 24 F9             11088 	add	a,#0xF9
   4121 F5 81             11089 	mov	sp,a
   4123 C8                11090 	xch	a,r0
   4124 02s00r00          11091 	ljmp	__sdcc_banked_ret
                          11092 ;------------------------------------------------------------
                          11093 ;Allocation info for local variables in function 'cJSON_CreateString'
                          11094 ;------------------------------------------------------------
                          11095 ;string                    Allocated to stack - sp -5
                          11096 ;item                      Allocated to stack - sp -2
                          11097 ;------------------------------------------------------------
                          11098 ;	cJSON.c:528: cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
                          11099 ;	-----------------------------------------
                          11100 ;	 function cJSON_CreateString
                          11101 ;	-----------------------------------------
   4127                   11102 _cJSON_CreateString:
   4127 C0 82             11103 	push	dpl
   4129 C0 83             11104 	push	dph
   412B C0 F0             11105 	push	b
   412D 05 81             11106 	inc	sp
   412F 05 81             11107 	inc	sp
   4131 05 81             11108 	inc	sp
   4133 78r3D             11109 	mov	r0,#_cJSON_New_Item
   4135 79s03             11110 	mov	r1,#(_cJSON_New_Item >> 8)
   4137 7As00             11111 	mov	r2,#(_cJSON_New_Item >> 16)
   4139 12s00r00          11112 	lcall	__sdcc_banked_call
   413C AA 82             11113 	mov	r2,dpl
   413E AB 83             11114 	mov	r3,dph
   4140 AC F0             11115 	mov	r4,b
   4142 A8 81             11116 	mov	r0,sp
   4144 18                11117 	dec	r0
   4145 18                11118 	dec	r0
   4146 A6 02             11119 	mov	@r0,ar2
   4148 08                11120 	inc	r0
   4149 A6 03             11121 	mov	@r0,ar3
   414B 08                11122 	inc	r0
   414C A6 04             11123 	mov	@r0,ar4
   414E A8 81             11124 	mov	r0,sp
   4150 18                11125 	dec	r0
   4151 18                11126 	dec	r0
   4152 E6                11127 	mov	a,@r0
   4153 08                11128 	inc	r0
   4154 46                11129 	orl	a,@r0
   4155 60 6A             11130 	jz	00102$
   4157 A8 81             11131 	mov	r0,sp
   4159 18                11132 	dec	r0
   415A 18                11133 	dec	r0
   415B 74 09             11134 	mov	a,#0x09
   415D 26                11135 	add	a,@r0
   415E FD                11136 	mov	r5,a
   415F E4                11137 	clr	a
   4160 08                11138 	inc	r0
   4161 36                11139 	addc	a,@r0
   4162 FE                11140 	mov	r6,a
   4163 08                11141 	inc	r0
   4164 86 07             11142 	mov	ar7,@r0
   4166 8D 82             11143 	mov	dpl,r5
   4168 8E 83             11144 	mov	dph,r6
   416A 8F F0             11145 	mov	b,r7
   416C 74 04             11146 	mov	a,#0x04
   416E 12s00r00          11147 	lcall	__gptrput
   4171 A3                11148 	inc	dptr
   4172 E4                11149 	clr	a
   4173 12s00r00          11150 	lcall	__gptrput
   4176 A8 81             11151 	mov	r0,sp
   4178 18                11152 	dec	r0
   4179 18                11153 	dec	r0
   417A 74 0B             11154 	mov	a,#0x0B
   417C 26                11155 	add	a,@r0
   417D FD                11156 	mov	r5,a
   417E E4                11157 	clr	a
   417F 08                11158 	inc	r0
   4180 36                11159 	addc	a,@r0
   4181 FE                11160 	mov	r6,a
   4182 08                11161 	inc	r0
   4183 86 07             11162 	mov	ar7,@r0
   4185 E5 81             11163 	mov	a,sp
   4187 24 FB             11164 	add	a,#0xfb
   4189 F8                11165 	mov	r0,a
   418A 86 82             11166 	mov	dpl,@r0
   418C 08                11167 	inc	r0
   418D 86 83             11168 	mov	dph,@r0
   418F 08                11169 	inc	r0
   4190 86 F0             11170 	mov	b,@r0
   4192 C0 07             11171 	push	ar7
   4194 C0 06             11172 	push	ar6
   4196 C0 05             11173 	push	ar5
   4198 78r5F             11174 	mov	r0,#_cJSON_strdup
   419A 79s02             11175 	mov	r1,#(_cJSON_strdup >> 8)
   419C 7As00             11176 	mov	r2,#(_cJSON_strdup >> 16)
   419E 12s00r00          11177 	lcall	__sdcc_banked_call
   41A1 AA 82             11178 	mov	r2,dpl
   41A3 AB 83             11179 	mov	r3,dph
   41A5 AC F0             11180 	mov	r4,b
   41A7 D0 05             11181 	pop	ar5
   41A9 D0 06             11182 	pop	ar6
   41AB D0 07             11183 	pop	ar7
   41AD 8D 82             11184 	mov	dpl,r5
   41AF 8E 83             11185 	mov	dph,r6
   41B1 8F F0             11186 	mov	b,r7
   41B3 EA                11187 	mov	a,r2
   41B4 12s00r00          11188 	lcall	__gptrput
   41B7 A3                11189 	inc	dptr
   41B8 EB                11190 	mov	a,r3
   41B9 12s00r00          11191 	lcall	__gptrput
   41BC A3                11192 	inc	dptr
   41BD EC                11193 	mov	a,r4
   41BE 12s00r00          11194 	lcall	__gptrput
   41C1                   11195 00102$:
   41C1 A8 81             11196 	mov	r0,sp
   41C3 18                11197 	dec	r0
   41C4 18                11198 	dec	r0
   41C5 86 82             11199 	mov	dpl,@r0
   41C7 08                11200 	inc	r0
   41C8 86 83             11201 	mov	dph,@r0
   41CA 08                11202 	inc	r0
   41CB 86 F0             11203 	mov	b,@r0
   41CD C8                11204 	xch	a,r0
   41CE E5 81             11205 	mov	a,sp
   41D0 24 FA             11206 	add	a,#0xFA
   41D2 F5 81             11207 	mov	sp,a
   41D4 C8                11208 	xch	a,r0
   41D5 02s00r00          11209 	ljmp	__sdcc_banked_ret
                          11210 ;------------------------------------------------------------
                          11211 ;Allocation info for local variables in function 'cJSON_CreateArray'
                          11212 ;------------------------------------------------------------
                          11213 ;item                      Allocated to registers r5 r6 r7 
                          11214 ;------------------------------------------------------------
                          11215 ;	cJSON.c:529: cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
                          11216 ;	-----------------------------------------
                          11217 ;	 function cJSON_CreateArray
                          11218 ;	-----------------------------------------
   41D8                   11219 _cJSON_CreateArray:
   41D8 78r3D             11220 	mov	r0,#_cJSON_New_Item
   41DA 79s03             11221 	mov	r1,#(_cJSON_New_Item >> 8)
   41DC 7As00             11222 	mov	r2,#(_cJSON_New_Item >> 16)
   41DE 12s00r00          11223 	lcall	__sdcc_banked_call
   41E1 AD 82             11224 	mov	r5,dpl
   41E3 AE 83             11225 	mov	r6,dph
   41E5 AF F0             11226 	mov	r7,b
   41E7 ED                11227 	mov	a,r5
   41E8 4E                11228 	orl	a,r6
   41E9 60 19             11229 	jz	00102$
   41EB 74 09             11230 	mov	a,#0x09
   41ED 2D                11231 	add	a,r5
   41EE FA                11232 	mov	r2,a
   41EF E4                11233 	clr	a
   41F0 3E                11234 	addc	a,r6
   41F1 FB                11235 	mov	r3,a
   41F2 8F 04             11236 	mov	ar4,r7
   41F4 8A 82             11237 	mov	dpl,r2
   41F6 8B 83             11238 	mov	dph,r3
   41F8 8C F0             11239 	mov	b,r4
   41FA 74 05             11240 	mov	a,#0x05
   41FC 12s00r00          11241 	lcall	__gptrput
   41FF A3                11242 	inc	dptr
   4200 E4                11243 	clr	a
   4201 12s00r00          11244 	lcall	__gptrput
   4204                   11245 00102$:
   4204 8D 82             11246 	mov	dpl,r5
   4206 8E 83             11247 	mov	dph,r6
   4208 8F F0             11248 	mov	b,r7
   420A 02s00r00          11249 	ljmp	__sdcc_banked_ret
                          11250 ;------------------------------------------------------------
                          11251 ;Allocation info for local variables in function 'cJSON_CreateObject'
                          11252 ;------------------------------------------------------------
                          11253 ;item                      Allocated to registers r5 r6 r7 
                          11254 ;------------------------------------------------------------
                          11255 ;	cJSON.c:530: cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
                          11256 ;	-----------------------------------------
                          11257 ;	 function cJSON_CreateObject
                          11258 ;	-----------------------------------------
   420D                   11259 _cJSON_CreateObject:
   420D 78r3D             11260 	mov	r0,#_cJSON_New_Item
   420F 79s03             11261 	mov	r1,#(_cJSON_New_Item >> 8)
   4211 7As00             11262 	mov	r2,#(_cJSON_New_Item >> 16)
   4213 12s00r00          11263 	lcall	__sdcc_banked_call
   4216 AD 82             11264 	mov	r5,dpl
   4218 AE 83             11265 	mov	r6,dph
   421A AF F0             11266 	mov	r7,b
   421C ED                11267 	mov	a,r5
   421D 4E                11268 	orl	a,r6
   421E 60 19             11269 	jz	00102$
   4220 74 09             11270 	mov	a,#0x09
   4222 2D                11271 	add	a,r5
   4223 FA                11272 	mov	r2,a
   4224 E4                11273 	clr	a
   4225 3E                11274 	addc	a,r6
   4226 FB                11275 	mov	r3,a
   4227 8F 04             11276 	mov	ar4,r7
   4229 8A 82             11277 	mov	dpl,r2
   422B 8B 83             11278 	mov	dph,r3
   422D 8C F0             11279 	mov	b,r4
   422F 74 06             11280 	mov	a,#0x06
   4231 12s00r00          11281 	lcall	__gptrput
   4234 A3                11282 	inc	dptr
   4235 E4                11283 	clr	a
   4236 12s00r00          11284 	lcall	__gptrput
   4239                   11285 00102$:
   4239 8D 82             11286 	mov	dpl,r5
   423B 8E 83             11287 	mov	dph,r6
   423D 8F F0             11288 	mov	b,r7
   423F 02s00r00          11289 	ljmp	__sdcc_banked_ret
                          11290 ;------------------------------------------------------------
                          11291 ;Allocation info for local variables in function 'cJSON_CreateIntArray'
                          11292 ;------------------------------------------------------------
                          11293 ;count                     Allocated to stack - sp -13
                          11294 ;numbers                   Allocated to stack - sp -8
                          11295 ;i                         Allocated to registers r6 r7 
                          11296 ;n                         Allocated to stack - sp -5
                          11297 ;p                         Allocated to stack - sp -2
                          11298 ;a                         Allocated to registers r2 r3 r4 
                          11299 ;------------------------------------------------------------
                          11300 ;	cJSON.c:533: cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          11301 ;	-----------------------------------------
                          11302 ;	 function cJSON_CreateIntArray
                          11303 ;	-----------------------------------------
   4242                   11304 _cJSON_CreateIntArray:
   4242 C0 82             11305 	push	dpl
   4244 C0 83             11306 	push	dph
   4246 C0 F0             11307 	push	b
   4248 E5 81             11308 	mov	a,sp
   424A 24 06             11309 	add	a,#0x06
   424C F5 81             11310 	mov	sp,a
   424E A8 81             11311 	mov	r0,sp
   4250 18                11312 	dec	r0
   4251 18                11313 	dec	r0
   4252 E4                11314 	clr	a
   4253 F6                11315 	mov	@r0,a
   4254 08                11316 	inc	r0
   4255 F6                11317 	mov	@r0,a
   4256 08                11318 	inc	r0
   4257 76 00             11319 	mov	@r0,#0x00
   4259 78rD8             11320 	mov	r0,#_cJSON_CreateArray
   425B 79s41             11321 	mov	r1,#(_cJSON_CreateArray >> 8)
   425D 7As00             11322 	mov	r2,#(_cJSON_CreateArray >> 16)
   425F 12s00r00          11323 	lcall	__sdcc_banked_call
   4262 AF 82             11324 	mov	r7,dpl
   4264 AE 83             11325 	mov	r6,dph
   4266 AD F0             11326 	mov	r5,b
   4268 8F 02             11327 	mov	ar2,r7
   426A 8E 03             11328 	mov	ar3,r6
   426C 8D 04             11329 	mov	ar4,r5
   426E 7E 00             11330 	mov	r6,#0x00
   4270 7F 00             11331 	mov	r7,#0x00
   4272                   11332 00105$:
   4272 EA                11333 	mov	a,r2
   4273 4B                11334 	orl	a,r3
   4274 70 03             11335 	jnz	00120$
   4276 02s43r82          11336 	ljmp	00108$
   4279                   11337 00120$:
   4279 E5 81             11338 	mov	a,sp
   427B 24 F3             11339 	add	a,#0xf3
   427D F8                11340 	mov	r0,a
   427E C3                11341 	clr	c
   427F EE                11342 	mov	a,r6
   4280 96                11343 	subb	a,@r0
   4281 EF                11344 	mov	a,r7
   4282 64 80             11345 	xrl	a,#0x80
   4284 08                11346 	inc	r0
   4285 86 F0             11347 	mov	b,@r0
   4287 63 F0 80          11348 	xrl	b,#0x80
   428A 95 F0             11349 	subb	a,b
   428C 40 03             11350 	jc	00121$
   428E 02s43r82          11351 	ljmp	00108$
   4291                   11352 00121$:
   4291 C0 02             11353 	push	ar2
   4293 C0 03             11354 	push	ar3
   4295 C0 04             11355 	push	ar4
   4297 8E 04             11356 	mov	ar4,r6
   4299 EF                11357 	mov	a,r7
   429A CC                11358 	xch	a,r4
   429B 25 E0             11359 	add	a,acc
   429D CC                11360 	xch	a,r4
   429E 33                11361 	rlc	a
   429F FD                11362 	mov	r5,a
   42A0 E5 81             11363 	mov	a,sp
   42A2 24 F5             11364 	add	a,#0xf5
   42A4 F8                11365 	mov	r0,a
   42A5 EC                11366 	mov	a,r4
   42A6 26                11367 	add	a,@r0
   42A7 FC                11368 	mov	r4,a
   42A8 ED                11369 	mov	a,r5
   42A9 08                11370 	inc	r0
   42AA 36                11371 	addc	a,@r0
   42AB FD                11372 	mov	r5,a
   42AC 08                11373 	inc	r0
   42AD 86 03             11374 	mov	ar3,@r0
   42AF 8C 82             11375 	mov	dpl,r4
   42B1 8D 83             11376 	mov	dph,r5
   42B3 8B F0             11377 	mov	b,r3
   42B5 12s00r00          11378 	lcall	__gptrget
   42B8 FC                11379 	mov	r4,a
   42B9 A3                11380 	inc	dptr
   42BA 12s00r00          11381 	lcall	__gptrget
   42BD FD                11382 	mov	r5,a
   42BE 8C 82             11383 	mov	dpl,r4
   42C0 8D 83             11384 	mov	dph,r5
   42C2 C0 07             11385 	push	ar7
   42C4 C0 06             11386 	push	ar6
   42C6 12s00r00          11387 	lcall	___sint2fs
   42C9 AA 82             11388 	mov	r2,dpl
   42CB C0 02             11389 	push	ar2
   42CD 78r4C             11390 	mov	r0,#_cJSON_CreateNumber
   42CF 79s40             11391 	mov	r1,#(_cJSON_CreateNumber >> 8)
   42D1 7As00             11392 	mov	r2,#(_cJSON_CreateNumber >> 16)
   42D3 12s00r00          11393 	lcall	__sdcc_banked_call
   42D6 AB 82             11394 	mov	r3,dpl
   42D8 AC 83             11395 	mov	r4,dph
   42DA AD F0             11396 	mov	r5,b
   42DC D0 02             11397 	pop	ar2
   42DE D0 06             11398 	pop	ar6
   42E0 D0 07             11399 	pop	ar7
   42E2 E5 81             11400 	mov	a,sp
   42E4 24 F8             11401 	add	a,#0xf8
   42E6 F8                11402 	mov	r0,a
   42E7 A6 03             11403 	mov	@r0,ar3
   42E9 08                11404 	inc	r0
   42EA A6 04             11405 	mov	@r0,ar4
   42EC 08                11406 	inc	r0
   42ED A6 05             11407 	mov	@r0,ar5
   42EF D0 04             11408 	pop	ar4
   42F1 D0 03             11409 	pop	ar3
   42F3 D0 02             11410 	pop	ar2
   42F5 EE                11411 	mov	a,r6
   42F6 4F                11412 	orl	a,r7
   42F7 70 2E             11413 	jnz	00102$
   42F9 C0 06             11414 	push	ar6
   42FB C0 07             11415 	push	ar7
   42FD 74 06             11416 	mov	a,#0x06
   42FF 2A                11417 	add	a,r2
   4300 FD                11418 	mov	r5,a
   4301 E4                11419 	clr	a
   4302 3B                11420 	addc	a,r3
   4303 FE                11421 	mov	r6,a
   4304 8C 07             11422 	mov	ar7,r4
   4306 8D 82             11423 	mov	dpl,r5
   4308 8E 83             11424 	mov	dph,r6
   430A 8F F0             11425 	mov	b,r7
   430C E5 81             11426 	mov	a,sp
   430E 24 F9             11427 	add	a,#0xf9
   4310 F8                11428 	mov	r0,a
   4311 E6                11429 	mov	a,@r0
   4312 12s00r00          11430 	lcall	__gptrput
   4315 A3                11431 	inc	dptr
   4316 08                11432 	inc	r0
   4317 E6                11433 	mov	a,@r0
   4318 12s00r00          11434 	lcall	__gptrput
   431B A3                11435 	inc	dptr
   431C 08                11436 	inc	r0
   431D E6                11437 	mov	a,@r0
   431E 12s00r00          11438 	lcall	__gptrput
   4321 D0 07             11439 	pop	ar7
   4323 D0 06             11440 	pop	ar6
   4325 80 40             11441 	sjmp	00103$
   4327                   11442 00102$:
   4327 C0 07             11443 	push	ar7
   4329 C0 06             11444 	push	ar6
   432B C0 04             11445 	push	ar4
   432D C0 03             11446 	push	ar3
   432F C0 02             11447 	push	ar2
   4331 E5 81             11448 	mov	a,sp
   4333 24 F6             11449 	add	a,#0xf6
   4335 F8                11450 	mov	r0,a
   4336 E6                11451 	mov	a,@r0
   4337 C0 E0             11452 	push	acc
   4339 08                11453 	inc	r0
   433A E6                11454 	mov	a,@r0
   433B C0 E0             11455 	push	acc
   433D 08                11456 	inc	r0
   433E E6                11457 	mov	a,@r0
   433F C0 E0             11458 	push	acc
   4341 E5 81             11459 	mov	a,sp
   4343 24 F6             11460 	add	a,#0xf6
   4345 F8                11461 	mov	r0,a
   4346 86 82             11462 	mov	dpl,@r0
   4348 08                11463 	inc	r0
   4349 86 83             11464 	mov	dph,@r0
   434B 08                11465 	inc	r0
   434C 86 F0             11466 	mov	b,@r0
   434E 78rD1             11467 	mov	r0,#_suffix_object
   4350 79s34             11468 	mov	r1,#(_suffix_object >> 8)
   4352 7As00             11469 	mov	r2,#(_suffix_object >> 16)
   4354 12s00r00          11470 	lcall	__sdcc_banked_call
   4357 15 81             11471 	dec	sp
   4359 15 81             11472 	dec	sp
   435B 15 81             11473 	dec	sp
   435D D0 02             11474 	pop	ar2
   435F D0 03             11475 	pop	ar3
   4361 D0 04             11476 	pop	ar4
   4363 D0 06             11477 	pop	ar6
   4365 D0 07             11478 	pop	ar7
   4367                   11479 00103$:
   4367 E5 81             11480 	mov	a,sp
   4369 24 FB             11481 	add	a,#0xfb
   436B F8                11482 	mov	r0,a
   436C A9 81             11483 	mov	r1,sp
   436E 19                11484 	dec	r1
   436F 19                11485 	dec	r1
   4370 E6                11486 	mov	a,@r0
   4371 F7                11487 	mov	@r1,a
   4372 08                11488 	inc	r0
   4373 09                11489 	inc	r1
   4374 E6                11490 	mov	a,@r0
   4375 F7                11491 	mov	@r1,a
   4376 08                11492 	inc	r0
   4377 09                11493 	inc	r1
   4378 E6                11494 	mov	a,@r0
   4379 F7                11495 	mov	@r1,a
   437A 0E                11496 	inc	r6
   437B BE 00 01          11497 	cjne	r6,#0x00,00123$
   437E 0F                11498 	inc	r7
   437F                   11499 00123$:
   437F 02s42r72          11500 	ljmp	00105$
   4382                   11501 00108$:
   4382 8A 82             11502 	mov	dpl,r2
   4384 8B 83             11503 	mov	dph,r3
   4386 8C F0             11504 	mov	b,r4
   4388 C8                11505 	xch	a,r0
   4389 E5 81             11506 	mov	a,sp
   438B 24 F7             11507 	add	a,#0xF7
   438D F5 81             11508 	mov	sp,a
   438F C8                11509 	xch	a,r0
   4390 02s00r00          11510 	ljmp	__sdcc_banked_ret
                          11511 ;------------------------------------------------------------
                          11512 ;Allocation info for local variables in function 'cJSON_CreateFloatArray'
                          11513 ;------------------------------------------------------------
                          11514 ;count                     Allocated to stack - sp -13
                          11515 ;numbers                   Allocated to stack - sp -8
                          11516 ;i                         Allocated to registers r6 r7 
                          11517 ;n                         Allocated to stack - sp -5
                          11518 ;p                         Allocated to stack - sp -2
                          11519 ;a                         Allocated to registers r2 r3 r4 
                          11520 ;------------------------------------------------------------
                          11521 ;	cJSON.c:534: cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          11522 ;	-----------------------------------------
                          11523 ;	 function cJSON_CreateFloatArray
                          11524 ;	-----------------------------------------
   4393                   11525 _cJSON_CreateFloatArray:
   4393 C0 82             11526 	push	dpl
   4395 C0 83             11527 	push	dph
   4397 C0 F0             11528 	push	b
   4399 E5 81             11529 	mov	a,sp
   439B 24 06             11530 	add	a,#0x06
   439D F5 81             11531 	mov	sp,a
   439F A8 81             11532 	mov	r0,sp
   43A1 18                11533 	dec	r0
   43A2 18                11534 	dec	r0
   43A3 E4                11535 	clr	a
   43A4 F6                11536 	mov	@r0,a
   43A5 08                11537 	inc	r0
   43A6 F6                11538 	mov	@r0,a
   43A7 08                11539 	inc	r0
   43A8 76 00             11540 	mov	@r0,#0x00
   43AA 78rD8             11541 	mov	r0,#_cJSON_CreateArray
   43AC 79s41             11542 	mov	r1,#(_cJSON_CreateArray >> 8)
   43AE 7As00             11543 	mov	r2,#(_cJSON_CreateArray >> 16)
   43B0 12s00r00          11544 	lcall	__sdcc_banked_call
   43B3 AF 82             11545 	mov	r7,dpl
   43B5 AE 83             11546 	mov	r6,dph
   43B7 AD F0             11547 	mov	r5,b
   43B9 8F 02             11548 	mov	ar2,r7
   43BB 8E 03             11549 	mov	ar3,r6
   43BD 8D 04             11550 	mov	ar4,r5
   43BF 7E 00             11551 	mov	r6,#0x00
   43C1 7F 00             11552 	mov	r7,#0x00
   43C3                   11553 00105$:
   43C3 EA                11554 	mov	a,r2
   43C4 4B                11555 	orl	a,r3
   43C5 70 03             11556 	jnz	00120$
   43C7 02s44rDF          11557 	ljmp	00108$
   43CA                   11558 00120$:
   43CA E5 81             11559 	mov	a,sp
   43CC 24 F3             11560 	add	a,#0xf3
   43CE F8                11561 	mov	r0,a
   43CF C3                11562 	clr	c
   43D0 EE                11563 	mov	a,r6
   43D1 96                11564 	subb	a,@r0
   43D2 EF                11565 	mov	a,r7
   43D3 64 80             11566 	xrl	a,#0x80
   43D5 08                11567 	inc	r0
   43D6 86 F0             11568 	mov	b,@r0
   43D8 63 F0 80          11569 	xrl	b,#0x80
   43DB 95 F0             11570 	subb	a,b
   43DD 40 03             11571 	jc	00121$
   43DF 02s44rDF          11572 	ljmp	00108$
   43E2                   11573 00121$:
   43E2 C0 02             11574 	push	ar2
   43E4 C0 03             11575 	push	ar3
   43E6 C0 04             11576 	push	ar4
   43E8 8E 04             11577 	mov	ar4,r6
   43EA EF                11578 	mov	a,r7
   43EB CC                11579 	xch	a,r4
   43EC 25 E0             11580 	add	a,acc
   43EE CC                11581 	xch	a,r4
   43EF 33                11582 	rlc	a
   43F0 CC                11583 	xch	a,r4
   43F1 25 E0             11584 	add	a,acc
   43F3 CC                11585 	xch	a,r4
   43F4 33                11586 	rlc	a
   43F5 FD                11587 	mov	r5,a
   43F6 E5 81             11588 	mov	a,sp
   43F8 24 F5             11589 	add	a,#0xf5
   43FA F8                11590 	mov	r0,a
   43FB EC                11591 	mov	a,r4
   43FC 26                11592 	add	a,@r0
   43FD FC                11593 	mov	r4,a
   43FE ED                11594 	mov	a,r5
   43FF 08                11595 	inc	r0
   4400 36                11596 	addc	a,@r0
   4401 FD                11597 	mov	r5,a
   4402 08                11598 	inc	r0
   4403 86 03             11599 	mov	ar3,@r0
   4405 8C 82             11600 	mov	dpl,r4
   4407 8D 83             11601 	mov	dph,r5
   4409 8B F0             11602 	mov	b,r3
   440B 12s00r00          11603 	lcall	__gptrget
   440E FC                11604 	mov	r4,a
   440F A3                11605 	inc	dptr
   4410 12s00r00          11606 	lcall	__gptrget
   4413 FD                11607 	mov	r5,a
   4414 A3                11608 	inc	dptr
   4415 12s00r00          11609 	lcall	__gptrget
   4418 FB                11610 	mov	r3,a
   4419 A3                11611 	inc	dptr
   441A 12s00r00          11612 	lcall	__gptrget
   441D FA                11613 	mov	r2,a
   441E 8C 82             11614 	mov	dpl,r4
   4420 8D 83             11615 	mov	dph,r5
   4422 8B F0             11616 	mov	b,r3
   4424 C0 07             11617 	push	ar7
   4426 C0 06             11618 	push	ar6
   4428 C0 02             11619 	push	ar2
   442A 78r4C             11620 	mov	r0,#_cJSON_CreateNumber
   442C 79s40             11621 	mov	r1,#(_cJSON_CreateNumber >> 8)
   442E 7As00             11622 	mov	r2,#(_cJSON_CreateNumber >> 16)
   4430 12s00r00          11623 	lcall	__sdcc_banked_call
   4433 AB 82             11624 	mov	r3,dpl
   4435 AC 83             11625 	mov	r4,dph
   4437 AD F0             11626 	mov	r5,b
   4439 D0 02             11627 	pop	ar2
   443B D0 06             11628 	pop	ar6
   443D D0 07             11629 	pop	ar7
   443F E5 81             11630 	mov	a,sp
   4441 24 F8             11631 	add	a,#0xf8
   4443 F8                11632 	mov	r0,a
   4444 A6 03             11633 	mov	@r0,ar3
   4446 08                11634 	inc	r0
   4447 A6 04             11635 	mov	@r0,ar4
   4449 08                11636 	inc	r0
   444A A6 05             11637 	mov	@r0,ar5
   444C D0 04             11638 	pop	ar4
   444E D0 03             11639 	pop	ar3
   4450 D0 02             11640 	pop	ar2
   4452 EE                11641 	mov	a,r6
   4453 4F                11642 	orl	a,r7
   4454 70 2E             11643 	jnz	00102$
   4456 C0 06             11644 	push	ar6
   4458 C0 07             11645 	push	ar7
   445A 74 06             11646 	mov	a,#0x06
   445C 2A                11647 	add	a,r2
   445D FD                11648 	mov	r5,a
   445E E4                11649 	clr	a
   445F 3B                11650 	addc	a,r3
   4460 FE                11651 	mov	r6,a
   4461 8C 07             11652 	mov	ar7,r4
   4463 8D 82             11653 	mov	dpl,r5
   4465 8E 83             11654 	mov	dph,r6
   4467 8F F0             11655 	mov	b,r7
   4469 E5 81             11656 	mov	a,sp
   446B 24 F9             11657 	add	a,#0xf9
   446D F8                11658 	mov	r0,a
   446E E6                11659 	mov	a,@r0
   446F 12s00r00          11660 	lcall	__gptrput
   4472 A3                11661 	inc	dptr
   4473 08                11662 	inc	r0
   4474 E6                11663 	mov	a,@r0
   4475 12s00r00          11664 	lcall	__gptrput
   4478 A3                11665 	inc	dptr
   4479 08                11666 	inc	r0
   447A E6                11667 	mov	a,@r0
   447B 12s00r00          11668 	lcall	__gptrput
   447E D0 07             11669 	pop	ar7
   4480 D0 06             11670 	pop	ar6
   4482 80 40             11671 	sjmp	00103$
   4484                   11672 00102$:
   4484 C0 07             11673 	push	ar7
   4486 C0 06             11674 	push	ar6
   4488 C0 04             11675 	push	ar4
   448A C0 03             11676 	push	ar3
   448C C0 02             11677 	push	ar2
   448E E5 81             11678 	mov	a,sp
   4490 24 F6             11679 	add	a,#0xf6
   4492 F8                11680 	mov	r0,a
   4493 E6                11681 	mov	a,@r0
   4494 C0 E0             11682 	push	acc
   4496 08                11683 	inc	r0
   4497 E6                11684 	mov	a,@r0
   4498 C0 E0             11685 	push	acc
   449A 08                11686 	inc	r0
   449B E6                11687 	mov	a,@r0
   449C C0 E0             11688 	push	acc
   449E E5 81             11689 	mov	a,sp
   44A0 24 F6             11690 	add	a,#0xf6
   44A2 F8                11691 	mov	r0,a
   44A3 86 82             11692 	mov	dpl,@r0
   44A5 08                11693 	inc	r0
   44A6 86 83             11694 	mov	dph,@r0
   44A8 08                11695 	inc	r0
   44A9 86 F0             11696 	mov	b,@r0
   44AB 78rD1             11697 	mov	r0,#_suffix_object
   44AD 79s34             11698 	mov	r1,#(_suffix_object >> 8)
   44AF 7As00             11699 	mov	r2,#(_suffix_object >> 16)
   44B1 12s00r00          11700 	lcall	__sdcc_banked_call
   44B4 15 81             11701 	dec	sp
   44B6 15 81             11702 	dec	sp
   44B8 15 81             11703 	dec	sp
   44BA D0 02             11704 	pop	ar2
   44BC D0 03             11705 	pop	ar3
   44BE D0 04             11706 	pop	ar4
   44C0 D0 06             11707 	pop	ar6
   44C2 D0 07             11708 	pop	ar7
   44C4                   11709 00103$:
   44C4 E5 81             11710 	mov	a,sp
   44C6 24 FB             11711 	add	a,#0xfb
   44C8 F8                11712 	mov	r0,a
   44C9 A9 81             11713 	mov	r1,sp
   44CB 19                11714 	dec	r1
   44CC 19                11715 	dec	r1
   44CD E6                11716 	mov	a,@r0
   44CE F7                11717 	mov	@r1,a
   44CF 08                11718 	inc	r0
   44D0 09                11719 	inc	r1
   44D1 E6                11720 	mov	a,@r0
   44D2 F7                11721 	mov	@r1,a
   44D3 08                11722 	inc	r0
   44D4 09                11723 	inc	r1
   44D5 E6                11724 	mov	a,@r0
   44D6 F7                11725 	mov	@r1,a
   44D7 0E                11726 	inc	r6
   44D8 BE 00 01          11727 	cjne	r6,#0x00,00123$
   44DB 0F                11728 	inc	r7
   44DC                   11729 00123$:
   44DC 02s43rC3          11730 	ljmp	00105$
   44DF                   11731 00108$:
   44DF 8A 82             11732 	mov	dpl,r2
   44E1 8B 83             11733 	mov	dph,r3
   44E3 8C F0             11734 	mov	b,r4
   44E5 C8                11735 	xch	a,r0
   44E6 E5 81             11736 	mov	a,sp
   44E8 24 F7             11737 	add	a,#0xF7
   44EA F5 81             11738 	mov	sp,a
   44EC C8                11739 	xch	a,r0
   44ED 02s00r00          11740 	ljmp	__sdcc_banked_ret
                          11741 ;------------------------------------------------------------
                          11742 ;Allocation info for local variables in function 'cJSON_CreateDoubleArray'
                          11743 ;------------------------------------------------------------
                          11744 ;count                     Allocated to stack - sp -13
                          11745 ;numbers                   Allocated to stack - sp -8
                          11746 ;i                         Allocated to registers r6 r7 
                          11747 ;n                         Allocated to stack - sp -5
                          11748 ;p                         Allocated to stack - sp -2
                          11749 ;a                         Allocated to registers r2 r3 r4 
                          11750 ;------------------------------------------------------------
                          11751 ;	cJSON.c:535: cJSON *cJSON_CreateDoubleArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          11752 ;	-----------------------------------------
                          11753 ;	 function cJSON_CreateDoubleArray
                          11754 ;	-----------------------------------------
   44F0                   11755 _cJSON_CreateDoubleArray:
   44F0 C0 82             11756 	push	dpl
   44F2 C0 83             11757 	push	dph
   44F4 C0 F0             11758 	push	b
   44F6 E5 81             11759 	mov	a,sp
   44F8 24 06             11760 	add	a,#0x06
   44FA F5 81             11761 	mov	sp,a
   44FC A8 81             11762 	mov	r0,sp
   44FE 18                11763 	dec	r0
   44FF 18                11764 	dec	r0
   4500 E4                11765 	clr	a
   4501 F6                11766 	mov	@r0,a
   4502 08                11767 	inc	r0
   4503 F6                11768 	mov	@r0,a
   4504 08                11769 	inc	r0
   4505 76 00             11770 	mov	@r0,#0x00
   4507 78rD8             11771 	mov	r0,#_cJSON_CreateArray
   4509 79s41             11772 	mov	r1,#(_cJSON_CreateArray >> 8)
   450B 7As00             11773 	mov	r2,#(_cJSON_CreateArray >> 16)
   450D 12s00r00          11774 	lcall	__sdcc_banked_call
   4510 AF 82             11775 	mov	r7,dpl
   4512 AE 83             11776 	mov	r6,dph
   4514 AD F0             11777 	mov	r5,b
   4516 8F 02             11778 	mov	ar2,r7
   4518 8E 03             11779 	mov	ar3,r6
   451A 8D 04             11780 	mov	ar4,r5
   451C 7E 00             11781 	mov	r6,#0x00
   451E 7F 00             11782 	mov	r7,#0x00
   4520                   11783 00105$:
   4520 EA                11784 	mov	a,r2
   4521 4B                11785 	orl	a,r3
   4522 70 03             11786 	jnz	00120$
   4524 02s46r3C          11787 	ljmp	00108$
   4527                   11788 00120$:
   4527 E5 81             11789 	mov	a,sp
   4529 24 F3             11790 	add	a,#0xf3
   452B F8                11791 	mov	r0,a
   452C C3                11792 	clr	c
   452D EE                11793 	mov	a,r6
   452E 96                11794 	subb	a,@r0
   452F EF                11795 	mov	a,r7
   4530 64 80             11796 	xrl	a,#0x80
   4532 08                11797 	inc	r0
   4533 86 F0             11798 	mov	b,@r0
   4535 63 F0 80          11799 	xrl	b,#0x80
   4538 95 F0             11800 	subb	a,b
   453A 40 03             11801 	jc	00121$
   453C 02s46r3C          11802 	ljmp	00108$
   453F                   11803 00121$:
   453F C0 02             11804 	push	ar2
   4541 C0 03             11805 	push	ar3
   4543 C0 04             11806 	push	ar4
   4545 8E 04             11807 	mov	ar4,r6
   4547 EF                11808 	mov	a,r7
   4548 CC                11809 	xch	a,r4
   4549 25 E0             11810 	add	a,acc
   454B CC                11811 	xch	a,r4
   454C 33                11812 	rlc	a
   454D CC                11813 	xch	a,r4
   454E 25 E0             11814 	add	a,acc
   4550 CC                11815 	xch	a,r4
   4551 33                11816 	rlc	a
   4552 FD                11817 	mov	r5,a
   4553 E5 81             11818 	mov	a,sp
   4555 24 F5             11819 	add	a,#0xf5
   4557 F8                11820 	mov	r0,a
   4558 EC                11821 	mov	a,r4
   4559 26                11822 	add	a,@r0
   455A FC                11823 	mov	r4,a
   455B ED                11824 	mov	a,r5
   455C 08                11825 	inc	r0
   455D 36                11826 	addc	a,@r0
   455E FD                11827 	mov	r5,a
   455F 08                11828 	inc	r0
   4560 86 03             11829 	mov	ar3,@r0
   4562 8C 82             11830 	mov	dpl,r4
   4564 8D 83             11831 	mov	dph,r5
   4566 8B F0             11832 	mov	b,r3
   4568 12s00r00          11833 	lcall	__gptrget
   456B FC                11834 	mov	r4,a
   456C A3                11835 	inc	dptr
   456D 12s00r00          11836 	lcall	__gptrget
   4570 FD                11837 	mov	r5,a
   4571 A3                11838 	inc	dptr
   4572 12s00r00          11839 	lcall	__gptrget
   4575 FB                11840 	mov	r3,a
   4576 A3                11841 	inc	dptr
   4577 12s00r00          11842 	lcall	__gptrget
   457A FA                11843 	mov	r2,a
   457B 8C 82             11844 	mov	dpl,r4
   457D 8D 83             11845 	mov	dph,r5
   457F 8B F0             11846 	mov	b,r3
   4581 C0 07             11847 	push	ar7
   4583 C0 06             11848 	push	ar6
   4585 C0 02             11849 	push	ar2
   4587 78r4C             11850 	mov	r0,#_cJSON_CreateNumber
   4589 79s40             11851 	mov	r1,#(_cJSON_CreateNumber >> 8)
   458B 7As00             11852 	mov	r2,#(_cJSON_CreateNumber >> 16)
   458D 12s00r00          11853 	lcall	__sdcc_banked_call
   4590 AB 82             11854 	mov	r3,dpl
   4592 AC 83             11855 	mov	r4,dph
   4594 AD F0             11856 	mov	r5,b
   4596 D0 02             11857 	pop	ar2
   4598 D0 06             11858 	pop	ar6
   459A D0 07             11859 	pop	ar7
   459C E5 81             11860 	mov	a,sp
   459E 24 F8             11861 	add	a,#0xf8
   45A0 F8                11862 	mov	r0,a
   45A1 A6 03             11863 	mov	@r0,ar3
   45A3 08                11864 	inc	r0
   45A4 A6 04             11865 	mov	@r0,ar4
   45A6 08                11866 	inc	r0
   45A7 A6 05             11867 	mov	@r0,ar5
   45A9 D0 04             11868 	pop	ar4
   45AB D0 03             11869 	pop	ar3
   45AD D0 02             11870 	pop	ar2
   45AF EE                11871 	mov	a,r6
   45B0 4F                11872 	orl	a,r7
   45B1 70 2E             11873 	jnz	00102$
   45B3 C0 06             11874 	push	ar6
   45B5 C0 07             11875 	push	ar7
   45B7 74 06             11876 	mov	a,#0x06
   45B9 2A                11877 	add	a,r2
   45BA FD                11878 	mov	r5,a
   45BB E4                11879 	clr	a
   45BC 3B                11880 	addc	a,r3
   45BD FE                11881 	mov	r6,a
   45BE 8C 07             11882 	mov	ar7,r4
   45C0 8D 82             11883 	mov	dpl,r5
   45C2 8E 83             11884 	mov	dph,r6
   45C4 8F F0             11885 	mov	b,r7
   45C6 E5 81             11886 	mov	a,sp
   45C8 24 F9             11887 	add	a,#0xf9
   45CA F8                11888 	mov	r0,a
   45CB E6                11889 	mov	a,@r0
   45CC 12s00r00          11890 	lcall	__gptrput
   45CF A3                11891 	inc	dptr
   45D0 08                11892 	inc	r0
   45D1 E6                11893 	mov	a,@r0
   45D2 12s00r00          11894 	lcall	__gptrput
   45D5 A3                11895 	inc	dptr
   45D6 08                11896 	inc	r0
   45D7 E6                11897 	mov	a,@r0
   45D8 12s00r00          11898 	lcall	__gptrput
   45DB D0 07             11899 	pop	ar7
   45DD D0 06             11900 	pop	ar6
   45DF 80 40             11901 	sjmp	00103$
   45E1                   11902 00102$:
   45E1 C0 07             11903 	push	ar7
   45E3 C0 06             11904 	push	ar6
   45E5 C0 04             11905 	push	ar4
   45E7 C0 03             11906 	push	ar3
   45E9 C0 02             11907 	push	ar2
   45EB E5 81             11908 	mov	a,sp
   45ED 24 F6             11909 	add	a,#0xf6
   45EF F8                11910 	mov	r0,a
   45F0 E6                11911 	mov	a,@r0
   45F1 C0 E0             11912 	push	acc
   45F3 08                11913 	inc	r0
   45F4 E6                11914 	mov	a,@r0
   45F5 C0 E0             11915 	push	acc
   45F7 08                11916 	inc	r0
   45F8 E6                11917 	mov	a,@r0
   45F9 C0 E0             11918 	push	acc
   45FB E5 81             11919 	mov	a,sp
   45FD 24 F6             11920 	add	a,#0xf6
   45FF F8                11921 	mov	r0,a
   4600 86 82             11922 	mov	dpl,@r0
   4602 08                11923 	inc	r0
   4603 86 83             11924 	mov	dph,@r0
   4605 08                11925 	inc	r0
   4606 86 F0             11926 	mov	b,@r0
   4608 78rD1             11927 	mov	r0,#_suffix_object
   460A 79s34             11928 	mov	r1,#(_suffix_object >> 8)
   460C 7As00             11929 	mov	r2,#(_suffix_object >> 16)
   460E 12s00r00          11930 	lcall	__sdcc_banked_call
   4611 15 81             11931 	dec	sp
   4613 15 81             11932 	dec	sp
   4615 15 81             11933 	dec	sp
   4617 D0 02             11934 	pop	ar2
   4619 D0 03             11935 	pop	ar3
   461B D0 04             11936 	pop	ar4
   461D D0 06             11937 	pop	ar6
   461F D0 07             11938 	pop	ar7
   4621                   11939 00103$:
   4621 E5 81             11940 	mov	a,sp
   4623 24 FB             11941 	add	a,#0xfb
   4625 F8                11942 	mov	r0,a
   4626 A9 81             11943 	mov	r1,sp
   4628 19                11944 	dec	r1
   4629 19                11945 	dec	r1
   462A E6                11946 	mov	a,@r0
   462B F7                11947 	mov	@r1,a
   462C 08                11948 	inc	r0
   462D 09                11949 	inc	r1
   462E E6                11950 	mov	a,@r0
   462F F7                11951 	mov	@r1,a
   4630 08                11952 	inc	r0
   4631 09                11953 	inc	r1
   4632 E6                11954 	mov	a,@r0
   4633 F7                11955 	mov	@r1,a
   4634 0E                11956 	inc	r6
   4635 BE 00 01          11957 	cjne	r6,#0x00,00123$
   4638 0F                11958 	inc	r7
   4639                   11959 00123$:
   4639 02s45r20          11960 	ljmp	00105$
   463C                   11961 00108$:
   463C 8A 82             11962 	mov	dpl,r2
   463E 8B 83             11963 	mov	dph,r3
   4640 8C F0             11964 	mov	b,r4
   4642 C8                11965 	xch	a,r0
   4643 E5 81             11966 	mov	a,sp
   4645 24 F7             11967 	add	a,#0xF7
   4647 F5 81             11968 	mov	sp,a
   4649 C8                11969 	xch	a,r0
   464A 02s00r00          11970 	ljmp	__sdcc_banked_ret
                          11971 ;------------------------------------------------------------
                          11972 ;Allocation info for local variables in function 'cJSON_CreateStringArray'
                          11973 ;------------------------------------------------------------
                          11974 ;count                     Allocated to stack - sp -15
                          11975 ;strings                   Allocated to stack - sp -10
                          11976 ;i                         Allocated to stack - sp -7
                          11977 ;n                         Allocated to registers r3 r6 r7 
                          11978 ;p                         Allocated to stack - sp -5
                          11979 ;a                         Allocated to stack - sp -2
                          11980 ;------------------------------------------------------------
                          11981 ;	cJSON.c:536: cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          11982 ;	-----------------------------------------
                          11983 ;	 function cJSON_CreateStringArray
                          11984 ;	-----------------------------------------
   464D                   11985 _cJSON_CreateStringArray:
   464D C0 82             11986 	push	dpl
   464F C0 83             11987 	push	dph
   4651 C0 F0             11988 	push	b
   4653 E5 81             11989 	mov	a,sp
   4655 24 08             11990 	add	a,#0x08
   4657 F5 81             11991 	mov	sp,a
   4659 24 FB             11992 	add	a,#0xfb
   465B F8                11993 	mov	r0,a
   465C E4                11994 	clr	a
   465D F6                11995 	mov	@r0,a
   465E 08                11996 	inc	r0
   465F F6                11997 	mov	@r0,a
   4660 08                11998 	inc	r0
   4661 76 00             11999 	mov	@r0,#0x00
   4663 78rD8             12000 	mov	r0,#_cJSON_CreateArray
   4665 79s41             12001 	mov	r1,#(_cJSON_CreateArray >> 8)
   4667 7As00             12002 	mov	r2,#(_cJSON_CreateArray >> 16)
   4669 12s00r00          12003 	lcall	__sdcc_banked_call
   466C AF 82             12004 	mov	r7,dpl
   466E AE 83             12005 	mov	r6,dph
   4670 AD F0             12006 	mov	r5,b
   4672 A8 81             12007 	mov	r0,sp
   4674 18                12008 	dec	r0
   4675 18                12009 	dec	r0
   4676 A6 07             12010 	mov	@r0,ar7
   4678 08                12011 	inc	r0
   4679 A6 06             12012 	mov	@r0,ar6
   467B 08                12013 	inc	r0
   467C A6 05             12014 	mov	@r0,ar5
   467E E5 81             12015 	mov	a,sp
   4680 24 F9             12016 	add	a,#0xf9
   4682 F8                12017 	mov	r0,a
   4683 E4                12018 	clr	a
   4684 F6                12019 	mov	@r0,a
   4685 08                12020 	inc	r0
   4686 F6                12021 	mov	@r0,a
   4687 7C 00             12022 	mov	r4,#0x00
   4689 7D 00             12023 	mov	r5,#0x00
   468B                   12024 00105$:
   468B A8 81             12025 	mov	r0,sp
   468D 18                12026 	dec	r0
   468E 18                12027 	dec	r0
   468F E6                12028 	mov	a,@r0
   4690 08                12029 	inc	r0
   4691 46                12030 	orl	a,@r0
   4692 70 03             12031 	jnz	00120$
   4694 02s47r85          12032 	ljmp	00108$
   4697                   12033 00120$:
   4697 E5 81             12034 	mov	a,sp
   4699 24 F9             12035 	add	a,#0xf9
   469B F8                12036 	mov	r0,a
   469C E5 81             12037 	mov	a,sp
   469E 24 F1             12038 	add	a,#0xf1
   46A0 F9                12039 	mov	r1,a
   46A1 C3                12040 	clr	c
   46A2 E6                12041 	mov	a,@r0
   46A3 97                12042 	subb	a,@r1
   46A4 08                12043 	inc	r0
   46A5 E6                12044 	mov	a,@r0
   46A6 64 80             12045 	xrl	a,#0x80
   46A8 09                12046 	inc	r1
   46A9 87 F0             12047 	mov	b,@r1
   46AB 63 F0 80          12048 	xrl	b,#0x80
   46AE 95 F0             12049 	subb	a,b
   46B0 40 03             12050 	jc	00121$
   46B2 02s47r85          12051 	ljmp	00108$
   46B5                   12052 00121$:
   46B5 E5 81             12053 	mov	a,sp
   46B7 24 F6             12054 	add	a,#0xf6
   46B9 F8                12055 	mov	r0,a
   46BA EC                12056 	mov	a,r4
   46BB 26                12057 	add	a,@r0
   46BC FA                12058 	mov	r2,a
   46BD ED                12059 	mov	a,r5
   46BE 08                12060 	inc	r0
   46BF 36                12061 	addc	a,@r0
   46C0 FB                12062 	mov	r3,a
   46C1 08                12063 	inc	r0
   46C2 86 07             12064 	mov	ar7,@r0
   46C4 8A 82             12065 	mov	dpl,r2
   46C6 8B 83             12066 	mov	dph,r3
   46C8 8F F0             12067 	mov	b,r7
   46CA 12s00r00          12068 	lcall	__gptrget
   46CD FA                12069 	mov	r2,a
   46CE A3                12070 	inc	dptr
   46CF 12s00r00          12071 	lcall	__gptrget
   46D2 FB                12072 	mov	r3,a
   46D3 A3                12073 	inc	dptr
   46D4 12s00r00          12074 	lcall	__gptrget
   46D7 FF                12075 	mov	r7,a
   46D8 8A 82             12076 	mov	dpl,r2
   46DA 8B 83             12077 	mov	dph,r3
   46DC 8F F0             12078 	mov	b,r7
   46DE C0 05             12079 	push	ar5
   46E0 C0 04             12080 	push	ar4
   46E2 78r27             12081 	mov	r0,#_cJSON_CreateString
   46E4 79s41             12082 	mov	r1,#(_cJSON_CreateString >> 8)
   46E6 7As00             12083 	mov	r2,#(_cJSON_CreateString >> 16)
   46E8 12s00r00          12084 	lcall	__sdcc_banked_call
   46EB AB 82             12085 	mov	r3,dpl
   46ED AE 83             12086 	mov	r6,dph
   46EF AF F0             12087 	mov	r7,b
   46F1 D0 04             12088 	pop	ar4
   46F3 D0 05             12089 	pop	ar5
   46F5 E5 81             12090 	mov	a,sp
   46F7 24 F9             12091 	add	a,#0xf9
   46F9 F8                12092 	mov	r0,a
   46FA E6                12093 	mov	a,@r0
   46FB 08                12094 	inc	r0
   46FC 46                12095 	orl	a,@r0
   46FD 70 2E             12096 	jnz	00102$
   46FF C0 04             12097 	push	ar4
   4701 C0 05             12098 	push	ar5
   4703 E5 81             12099 	mov	a,sp
   4705 24 FC             12100 	add	a,#0xfc
   4707 F8                12101 	mov	r0,a
   4708 74 06             12102 	mov	a,#0x06
   470A 26                12103 	add	a,@r0
   470B FA                12104 	mov	r2,a
   470C E4                12105 	clr	a
   470D 08                12106 	inc	r0
   470E 36                12107 	addc	a,@r0
   470F FC                12108 	mov	r4,a
   4710 08                12109 	inc	r0
   4711 86 05             12110 	mov	ar5,@r0
   4713 8A 82             12111 	mov	dpl,r2
   4715 8C 83             12112 	mov	dph,r4
   4717 8D F0             12113 	mov	b,r5
   4719 EB                12114 	mov	a,r3
   471A 12s00r00          12115 	lcall	__gptrput
   471D A3                12116 	inc	dptr
   471E EE                12117 	mov	a,r6
   471F 12s00r00          12118 	lcall	__gptrput
   4722 A3                12119 	inc	dptr
   4723 EF                12120 	mov	a,r7
   4724 12s00r00          12121 	lcall	__gptrput
   4727 D0 05             12122 	pop	ar5
   4729 D0 04             12123 	pop	ar4
   472B 80 36             12124 	sjmp	00103$
   472D                   12125 00102$:
   472D C0 07             12126 	push	ar7
   472F C0 06             12127 	push	ar6
   4731 C0 05             12128 	push	ar5
   4733 C0 04             12129 	push	ar4
   4735 C0 03             12130 	push	ar3
   4737 C0 03             12131 	push	ar3
   4739 C0 06             12132 	push	ar6
   473B C0 07             12133 	push	ar7
   473D E5 81             12134 	mov	a,sp
   473F 24 F3             12135 	add	a,#0xf3
   4741 F8                12136 	mov	r0,a
   4742 86 82             12137 	mov	dpl,@r0
   4744 08                12138 	inc	r0
   4745 86 83             12139 	mov	dph,@r0
   4747 08                12140 	inc	r0
   4748 86 F0             12141 	mov	b,@r0
   474A 78rD1             12142 	mov	r0,#_suffix_object
   474C 79s34             12143 	mov	r1,#(_suffix_object >> 8)
   474E 7As00             12144 	mov	r2,#(_suffix_object >> 16)
   4750 12s00r00          12145 	lcall	__sdcc_banked_call
   4753 15 81             12146 	dec	sp
   4755 15 81             12147 	dec	sp
   4757 15 81             12148 	dec	sp
   4759 D0 03             12149 	pop	ar3
   475B D0 04             12150 	pop	ar4
   475D D0 05             12151 	pop	ar5
   475F D0 06             12152 	pop	ar6
   4761 D0 07             12153 	pop	ar7
   4763                   12154 00103$:
   4763 E5 81             12155 	mov	a,sp
   4765 24 FB             12156 	add	a,#0xfb
   4767 F8                12157 	mov	r0,a
   4768 A6 03             12158 	mov	@r0,ar3
   476A 08                12159 	inc	r0
   476B A6 06             12160 	mov	@r0,ar6
   476D 08                12161 	inc	r0
   476E A6 07             12162 	mov	@r0,ar7
   4770 74 03             12163 	mov	a,#0x03
   4772 2C                12164 	add	a,r4
   4773 FC                12165 	mov	r4,a
   4774 E4                12166 	clr	a
   4775 3D                12167 	addc	a,r5
   4776 FD                12168 	mov	r5,a
   4777 E5 81             12169 	mov	a,sp
   4779 24 F9             12170 	add	a,#0xf9
   477B F8                12171 	mov	r0,a
   477C 06                12172 	inc	@r0
   477D B6 00 02          12173 	cjne	@r0,#0x00,00123$
   4780 08                12174 	inc	r0
   4781 06                12175 	inc	@r0
   4782                   12176 00123$:
   4782 02s46r8B          12177 	ljmp	00105$
   4785                   12178 00108$:
   4785 A8 81             12179 	mov	r0,sp
   4787 18                12180 	dec	r0
   4788 18                12181 	dec	r0
   4789 86 82             12182 	mov	dpl,@r0
   478B 08                12183 	inc	r0
   478C 86 83             12184 	mov	dph,@r0
   478E 08                12185 	inc	r0
   478F 86 F0             12186 	mov	b,@r0
   4791 C8                12187 	xch	a,r0
   4792 E5 81             12188 	mov	a,sp
   4794 24 F5             12189 	add	a,#0xF5
   4796 F5 81             12190 	mov	sp,a
   4798 C8                12191 	xch	a,r0
   4799 02s00r00          12192 	ljmp	__sdcc_banked_ret
                          12193 ;------------------------------------------------------------
                          12194 ;Allocation info for local variables in function 'cJSON_Duplicate'
                          12195 ;------------------------------------------------------------
                          12196 ;recurse                   Allocated to stack - sp -16
                          12197 ;item                      Allocated to stack - sp -11
                          12198 ;newitem                   Allocated to stack - sp -8
                          12199 ;cptr                      Allocated to registers r5 r6 r7 
                          12200 ;nptr                      Allocated to stack - sp -5
                          12201 ;newchild                  Allocated to registers r2 r3 r4 
                          12202 ;sloc0                     Allocated to stack - sp -2
                          12203 ;------------------------------------------------------------
                          12204 ;	cJSON.c:539: cJSON *cJSON_Duplicate(cJSON *item,int recurse)
                          12205 ;	-----------------------------------------
                          12206 ;	 function cJSON_Duplicate
                          12207 ;	-----------------------------------------
   479C                   12208 _cJSON_Duplicate:
   479C C0 82             12209 	push	dpl
   479E C0 83             12210 	push	dph
   47A0 C0 F0             12211 	push	b
   47A2 E5 81             12212 	mov	a,sp
   47A4 24 09             12213 	add	a,#0x09
                          12214 ;	cJSON.c:541: cJSON *newitem,*cptr,*nptr=0,*newchild;
   47A6 F5 81             12215 	mov	sp,a
   47A8 24 FB             12216 	add	a,#0xfb
   47AA F8                12217 	mov	r0,a
   47AB E4                12218 	clr	a
   47AC F6                12219 	mov	@r0,a
   47AD 08                12220 	inc	r0
   47AE F6                12221 	mov	@r0,a
   47AF 08                12222 	inc	r0
   47B0 76 00             12223 	mov	@r0,#0x00
                          12224 ;	cJSON.c:543: if (!item) return 0;
   47B2 E5 81             12225 	mov	a,sp
   47B4 24 F5             12226 	add	a,#0xf5
   47B6 F8                12227 	mov	r0,a
   47B7 E6                12228 	mov	a,@r0
   47B8 08                12229 	inc	r0
   47B9 46                12230 	orl	a,@r0
   47BA 70 08             12231 	jnz	00102$
   47BC 90 00 00          12232 	mov	dptr,#0x0000
   47BF F5 F0             12233 	mov	b,a
   47C1 02s4Br48          12234 	ljmp	00123$
   47C4                   12235 00102$:
                          12236 ;	cJSON.c:545: newitem=cJSON_New_Item();
   47C4 78r3D             12237 	mov	r0,#_cJSON_New_Item
   47C6 79s03             12238 	mov	r1,#(_cJSON_New_Item >> 8)
   47C8 7As00             12239 	mov	r2,#(_cJSON_New_Item >> 16)
   47CA 12s00r00          12240 	lcall	__sdcc_banked_call
   47CD AF 82             12241 	mov	r7,dpl
   47CF AE 83             12242 	mov	r6,dph
   47D1 AD F0             12243 	mov	r5,b
   47D3 E5 81             12244 	mov	a,sp
   47D5 24 F8             12245 	add	a,#0xf8
   47D7 F8                12246 	mov	r0,a
   47D8 A6 07             12247 	mov	@r0,ar7
   47DA 08                12248 	inc	r0
   47DB A6 06             12249 	mov	@r0,ar6
   47DD 08                12250 	inc	r0
   47DE A6 05             12251 	mov	@r0,ar5
                          12252 ;	cJSON.c:546: if (!newitem) return 0;
   47E0 E5 81             12253 	mov	a,sp
   47E2 24 F8             12254 	add	a,#0xf8
   47E4 F8                12255 	mov	r0,a
   47E5 E6                12256 	mov	a,@r0
   47E6 08                12257 	inc	r0
   47E7 46                12258 	orl	a,@r0
   47E8 70 08             12259 	jnz	00104$
   47EA 90 00 00          12260 	mov	dptr,#0x0000
   47ED F5 F0             12261 	mov	b,a
   47EF 02s4Br48          12262 	ljmp	00123$
   47F2                   12263 00104$:
                          12264 ;	cJSON.c:548: newitem->type=item->type&(~cJSON_IsReference),newitem->valueint=item->valueint,newitem->valuefloat=item->valuefloat;
   47F2 E5 81             12265 	mov	a,sp
   47F4 24 F8             12266 	add	a,#0xf8
   47F6 F8                12267 	mov	r0,a
   47F7 74 09             12268 	mov	a,#0x09
   47F9 26                12269 	add	a,@r0
   47FA FA                12270 	mov	r2,a
   47FB E4                12271 	clr	a
   47FC 08                12272 	inc	r0
   47FD 36                12273 	addc	a,@r0
   47FE FB                12274 	mov	r3,a
   47FF 08                12275 	inc	r0
   4800 86 04             12276 	mov	ar4,@r0
   4802 E5 81             12277 	mov	a,sp
   4804 24 F5             12278 	add	a,#0xf5
   4806 F8                12279 	mov	r0,a
   4807 74 09             12280 	mov	a,#0x09
   4809 26                12281 	add	a,@r0
   480A FD                12282 	mov	r5,a
   480B E4                12283 	clr	a
   480C 08                12284 	inc	r0
   480D 36                12285 	addc	a,@r0
   480E FE                12286 	mov	r6,a
   480F 08                12287 	inc	r0
   4810 86 07             12288 	mov	ar7,@r0
   4812 8D 82             12289 	mov	dpl,r5
   4814 8E 83             12290 	mov	dph,r6
   4816 8F F0             12291 	mov	b,r7
   4818 12s00r00          12292 	lcall	__gptrget
   481B FD                12293 	mov	r5,a
   481C A3                12294 	inc	dptr
   481D 12s00r00          12295 	lcall	__gptrget
   4820 FE                12296 	mov	r6,a
   4821 53 06 FE          12297 	anl	ar6,#0xFE
   4824 8A 82             12298 	mov	dpl,r2
   4826 8B 83             12299 	mov	dph,r3
   4828 8C F0             12300 	mov	b,r4
   482A ED                12301 	mov	a,r5
   482B 12s00r00          12302 	lcall	__gptrput
   482E A3                12303 	inc	dptr
   482F EE                12304 	mov	a,r6
   4830 12s00r00          12305 	lcall	__gptrput
   4833 E5 81             12306 	mov	a,sp
   4835 24 F8             12307 	add	a,#0xf8
   4837 F8                12308 	mov	r0,a
   4838 74 0E             12309 	mov	a,#0x0E
   483A 26                12310 	add	a,@r0
   483B FD                12311 	mov	r5,a
   483C E4                12312 	clr	a
   483D 08                12313 	inc	r0
   483E 36                12314 	addc	a,@r0
   483F FE                12315 	mov	r6,a
   4840 08                12316 	inc	r0
   4841 86 07             12317 	mov	ar7,@r0
   4843 E5 81             12318 	mov	a,sp
   4845 24 F5             12319 	add	a,#0xf5
   4847 F8                12320 	mov	r0,a
   4848 74 0E             12321 	mov	a,#0x0E
   484A 26                12322 	add	a,@r0
   484B FA                12323 	mov	r2,a
   484C E4                12324 	clr	a
   484D 08                12325 	inc	r0
   484E 36                12326 	addc	a,@r0
   484F FB                12327 	mov	r3,a
   4850 08                12328 	inc	r0
   4851 86 04             12329 	mov	ar4,@r0
   4853 8A 82             12330 	mov	dpl,r2
   4855 8B 83             12331 	mov	dph,r3
   4857 8C F0             12332 	mov	b,r4
   4859 12s00r00          12333 	lcall	__gptrget
   485C FA                12334 	mov	r2,a
   485D A3                12335 	inc	dptr
   485E 12s00r00          12336 	lcall	__gptrget
   4861 FB                12337 	mov	r3,a
   4862 8D 82             12338 	mov	dpl,r5
   4864 8E 83             12339 	mov	dph,r6
   4866 8F F0             12340 	mov	b,r7
   4868 EA                12341 	mov	a,r2
   4869 12s00r00          12342 	lcall	__gptrput
   486C A3                12343 	inc	dptr
   486D EB                12344 	mov	a,r3
   486E 12s00r00          12345 	lcall	__gptrput
   4871 E5 81             12346 	mov	a,sp
   4873 24 F8             12347 	add	a,#0xf8
   4875 F8                12348 	mov	r0,a
   4876 A9 81             12349 	mov	r1,sp
   4878 19                12350 	dec	r1
   4879 19                12351 	dec	r1
   487A 74 10             12352 	mov	a,#0x10
   487C 26                12353 	add	a,@r0
   487D F7                12354 	mov	@r1,a
   487E E4                12355 	clr	a
   487F 08                12356 	inc	r0
   4880 36                12357 	addc	a,@r0
   4881 09                12358 	inc	r1
   4882 F7                12359 	mov	@r1,a
   4883 08                12360 	inc	r0
   4884 09                12361 	inc	r1
   4885 E6                12362 	mov	a,@r0
   4886 F7                12363 	mov	@r1,a
   4887 E5 81             12364 	mov	a,sp
   4889 24 F5             12365 	add	a,#0xf5
   488B F8                12366 	mov	r0,a
   488C 74 10             12367 	mov	a,#0x10
   488E 26                12368 	add	a,@r0
   488F FA                12369 	mov	r2,a
   4890 E4                12370 	clr	a
   4891 08                12371 	inc	r0
   4892 36                12372 	addc	a,@r0
   4893 FB                12373 	mov	r3,a
   4894 08                12374 	inc	r0
   4895 86 04             12375 	mov	ar4,@r0
   4897 8A 82             12376 	mov	dpl,r2
   4899 8B 83             12377 	mov	dph,r3
   489B 8C F0             12378 	mov	b,r4
   489D 12s00r00          12379 	lcall	__gptrget
   48A0 FA                12380 	mov	r2,a
   48A1 A3                12381 	inc	dptr
   48A2 12s00r00          12382 	lcall	__gptrget
   48A5 FB                12383 	mov	r3,a
   48A6 A3                12384 	inc	dptr
   48A7 12s00r00          12385 	lcall	__gptrget
   48AA FC                12386 	mov	r4,a
   48AB A3                12387 	inc	dptr
   48AC 12s00r00          12388 	lcall	__gptrget
   48AF FF                12389 	mov	r7,a
   48B0 A8 81             12390 	mov	r0,sp
   48B2 18                12391 	dec	r0
   48B3 18                12392 	dec	r0
   48B4 86 82             12393 	mov	dpl,@r0
   48B6 08                12394 	inc	r0
   48B7 86 83             12395 	mov	dph,@r0
   48B9 08                12396 	inc	r0
   48BA 86 F0             12397 	mov	b,@r0
   48BC EA                12398 	mov	a,r2
   48BD 12s00r00          12399 	lcall	__gptrput
   48C0 A3                12400 	inc	dptr
   48C1 EB                12401 	mov	a,r3
   48C2 12s00r00          12402 	lcall	__gptrput
   48C5 A3                12403 	inc	dptr
   48C6 EC                12404 	mov	a,r4
   48C7 12s00r00          12405 	lcall	__gptrput
   48CA A3                12406 	inc	dptr
   48CB EF                12407 	mov	a,r7
   48CC 12s00r00          12408 	lcall	__gptrput
                          12409 ;	cJSON.c:549: if (item->valuestring)	{newitem->valuestring=cJSON_strdup(item->valuestring);	if (!newitem->valuestring)	{cJSON_Delete(newitem);return 0;}}
   48CF E5 81             12410 	mov	a,sp
   48D1 24 F5             12411 	add	a,#0xf5
   48D3 F8                12412 	mov	r0,a
   48D4 74 0B             12413 	mov	a,#0x0B
   48D6 26                12414 	add	a,@r0
   48D7 FD                12415 	mov	r5,a
   48D8 E4                12416 	clr	a
   48D9 08                12417 	inc	r0
   48DA 36                12418 	addc	a,@r0
   48DB FE                12419 	mov	r6,a
   48DC 08                12420 	inc	r0
   48DD 86 07             12421 	mov	ar7,@r0
   48DF 8D 82             12422 	mov	dpl,r5
   48E1 8E 83             12423 	mov	dph,r6
   48E3 8F F0             12424 	mov	b,r7
   48E5 12s00r00          12425 	lcall	__gptrget
   48E8 FC                12426 	mov	r4,a
   48E9 A3                12427 	inc	dptr
   48EA 12s00r00          12428 	lcall	__gptrget
   48ED FB                12429 	mov	r3,a
   48EE A3                12430 	inc	dptr
   48EF 12s00r00          12431 	lcall	__gptrget
   48F2 FA                12432 	mov	r2,a
   48F3 EC                12433 	mov	a,r4
   48F4 4B                12434 	orl	a,r3
   48F5 60 68             12435 	jz	00108$
   48F7 E5 81             12436 	mov	a,sp
   48F9 24 F8             12437 	add	a,#0xf8
   48FB F8                12438 	mov	r0,a
   48FC 74 0B             12439 	mov	a,#0x0B
   48FE 26                12440 	add	a,@r0
   48FF FD                12441 	mov	r5,a
   4900 E4                12442 	clr	a
   4901 08                12443 	inc	r0
   4902 36                12444 	addc	a,@r0
   4903 FE                12445 	mov	r6,a
   4904 08                12446 	inc	r0
   4905 86 07             12447 	mov	ar7,@r0
   4907 8C 82             12448 	mov	dpl,r4
   4909 8B 83             12449 	mov	dph,r3
   490B 8A F0             12450 	mov	b,r2
   490D C0 07             12451 	push	ar7
   490F C0 06             12452 	push	ar6
   4911 C0 05             12453 	push	ar5
   4913 78r5F             12454 	mov	r0,#_cJSON_strdup
   4915 79s02             12455 	mov	r1,#(_cJSON_strdup >> 8)
   4917 7As00             12456 	mov	r2,#(_cJSON_strdup >> 16)
   4919 12s00r00          12457 	lcall	__sdcc_banked_call
   491C AA 82             12458 	mov	r2,dpl
   491E AB 83             12459 	mov	r3,dph
   4920 AC F0             12460 	mov	r4,b
   4922 D0 05             12461 	pop	ar5
   4924 D0 06             12462 	pop	ar6
   4926 D0 07             12463 	pop	ar7
   4928 8D 82             12464 	mov	dpl,r5
   492A 8E 83             12465 	mov	dph,r6
   492C 8F F0             12466 	mov	b,r7
   492E EA                12467 	mov	a,r2
   492F 12s00r00          12468 	lcall	__gptrput
   4932 A3                12469 	inc	dptr
   4933 EB                12470 	mov	a,r3
   4934 12s00r00          12471 	lcall	__gptrput
   4937 A3                12472 	inc	dptr
   4938 EC                12473 	mov	a,r4
   4939 12s00r00          12474 	lcall	__gptrput
   493C EA                12475 	mov	a,r2
   493D 4B                12476 	orl	a,r3
   493E 70 1F             12477 	jnz	00108$
   4940 E5 81             12478 	mov	a,sp
   4942 24 F8             12479 	add	a,#0xf8
   4944 F8                12480 	mov	r0,a
   4945 86 82             12481 	mov	dpl,@r0
   4947 08                12482 	inc	r0
   4948 86 83             12483 	mov	dph,@r0
   494A 08                12484 	inc	r0
   494B 86 F0             12485 	mov	b,@r0
   494D 78r8D             12486 	mov	r0,#_cJSON_Delete
   494F 79s03             12487 	mov	r1,#(_cJSON_Delete >> 8)
   4951 7As00             12488 	mov	r2,#(_cJSON_Delete >> 16)
   4953 12s00r00          12489 	lcall	__sdcc_banked_call
   4956 90 00 00          12490 	mov	dptr,#0x0000
   4959 75 F0 00          12491 	mov	b,#0x00
   495C 02s4Br48          12492 	ljmp	00123$
   495F                   12493 00108$:
                          12494 ;	cJSON.c:550: if (item->string)		{newitem->string=cJSON_strdup(item->string);			if (!newitem->string)		{cJSON_Delete(newitem);return 0;}}
   495F E5 81             12495 	mov	a,sp
   4961 24 F5             12496 	add	a,#0xf5
   4963 F8                12497 	mov	r0,a
   4964 74 14             12498 	mov	a,#0x14
   4966 26                12499 	add	a,@r0
   4967 FD                12500 	mov	r5,a
   4968 E4                12501 	clr	a
   4969 08                12502 	inc	r0
   496A 36                12503 	addc	a,@r0
   496B FE                12504 	mov	r6,a
   496C 08                12505 	inc	r0
   496D 86 07             12506 	mov	ar7,@r0
   496F 8D 82             12507 	mov	dpl,r5
   4971 8E 83             12508 	mov	dph,r6
   4973 8F F0             12509 	mov	b,r7
   4975 12s00r00          12510 	lcall	__gptrget
   4978 FD                12511 	mov	r5,a
   4979 A3                12512 	inc	dptr
   497A 12s00r00          12513 	lcall	__gptrget
   497D FE                12514 	mov	r6,a
   497E A3                12515 	inc	dptr
   497F 12s00r00          12516 	lcall	__gptrget
   4982 FF                12517 	mov	r7,a
   4983 ED                12518 	mov	a,r5
   4984 4E                12519 	orl	a,r6
   4985 60 68             12520 	jz	00112$
   4987 E5 81             12521 	mov	a,sp
   4989 24 F8             12522 	add	a,#0xf8
   498B F8                12523 	mov	r0,a
   498C 74 14             12524 	mov	a,#0x14
   498E 26                12525 	add	a,@r0
   498F FA                12526 	mov	r2,a
   4990 E4                12527 	clr	a
   4991 08                12528 	inc	r0
   4992 36                12529 	addc	a,@r0
   4993 FB                12530 	mov	r3,a
   4994 08                12531 	inc	r0
   4995 86 04             12532 	mov	ar4,@r0
   4997 8D 82             12533 	mov	dpl,r5
   4999 8E 83             12534 	mov	dph,r6
   499B 8F F0             12535 	mov	b,r7
   499D C0 04             12536 	push	ar4
   499F C0 03             12537 	push	ar3
   49A1 C0 02             12538 	push	ar2
   49A3 78r5F             12539 	mov	r0,#_cJSON_strdup
   49A5 79s02             12540 	mov	r1,#(_cJSON_strdup >> 8)
   49A7 7As00             12541 	mov	r2,#(_cJSON_strdup >> 16)
   49A9 12s00r00          12542 	lcall	__sdcc_banked_call
   49AC AD 82             12543 	mov	r5,dpl
   49AE AE 83             12544 	mov	r6,dph
   49B0 AF F0             12545 	mov	r7,b
   49B2 D0 02             12546 	pop	ar2
   49B4 D0 03             12547 	pop	ar3
   49B6 D0 04             12548 	pop	ar4
   49B8 8A 82             12549 	mov	dpl,r2
   49BA 8B 83             12550 	mov	dph,r3
   49BC 8C F0             12551 	mov	b,r4
   49BE ED                12552 	mov	a,r5
   49BF 12s00r00          12553 	lcall	__gptrput
   49C2 A3                12554 	inc	dptr
   49C3 EE                12555 	mov	a,r6
   49C4 12s00r00          12556 	lcall	__gptrput
   49C7 A3                12557 	inc	dptr
   49C8 EF                12558 	mov	a,r7
   49C9 12s00r00          12559 	lcall	__gptrput
   49CC ED                12560 	mov	a,r5
   49CD 4E                12561 	orl	a,r6
   49CE 70 1F             12562 	jnz	00112$
   49D0 E5 81             12563 	mov	a,sp
   49D2 24 F8             12564 	add	a,#0xf8
   49D4 F8                12565 	mov	r0,a
   49D5 86 82             12566 	mov	dpl,@r0
   49D7 08                12567 	inc	r0
   49D8 86 83             12568 	mov	dph,@r0
   49DA 08                12569 	inc	r0
   49DB 86 F0             12570 	mov	b,@r0
   49DD 78r8D             12571 	mov	r0,#_cJSON_Delete
   49DF 79s03             12572 	mov	r1,#(_cJSON_Delete >> 8)
   49E1 7As00             12573 	mov	r2,#(_cJSON_Delete >> 16)
   49E3 12s00r00          12574 	lcall	__sdcc_banked_call
   49E6 90 00 00          12575 	mov	dptr,#0x0000
   49E9 75 F0 00          12576 	mov	b,#0x00
   49EC 02s4Br48          12577 	ljmp	00123$
   49EF                   12578 00112$:
                          12579 ;	cJSON.c:552: if (!recurse) return newitem;
   49EF E5 81             12580 	mov	a,sp
   49F1 24 F0             12581 	add	a,#0xf0
   49F3 F8                12582 	mov	r0,a
   49F4 E6                12583 	mov	a,@r0
   49F5 08                12584 	inc	r0
   49F6 46                12585 	orl	a,@r0
   49F7 70 10             12586 	jnz	00114$
   49F9 E5 81             12587 	mov	a,sp
   49FB 24 F8             12588 	add	a,#0xf8
   49FD F8                12589 	mov	r0,a
   49FE 86 82             12590 	mov	dpl,@r0
   4A00 08                12591 	inc	r0
   4A01 86 83             12592 	mov	dph,@r0
   4A03 08                12593 	inc	r0
   4A04 86 F0             12594 	mov	b,@r0
   4A06 02s4Br48          12595 	ljmp	00123$
   4A09                   12596 00114$:
                          12597 ;	cJSON.c:554: cptr=item->child;
   4A09 E5 81             12598 	mov	a,sp
   4A0B 24 F5             12599 	add	a,#0xf5
   4A0D F8                12600 	mov	r0,a
   4A0E 74 06             12601 	mov	a,#0x06
   4A10 26                12602 	add	a,@r0
   4A11 FD                12603 	mov	r5,a
   4A12 E4                12604 	clr	a
   4A13 08                12605 	inc	r0
   4A14 36                12606 	addc	a,@r0
   4A15 FE                12607 	mov	r6,a
   4A16 08                12608 	inc	r0
   4A17 86 07             12609 	mov	ar7,@r0
   4A19 8D 82             12610 	mov	dpl,r5
   4A1B 8E 83             12611 	mov	dph,r6
   4A1D 8F F0             12612 	mov	b,r7
   4A1F 12s00r00          12613 	lcall	__gptrget
   4A22 FD                12614 	mov	r5,a
   4A23 A3                12615 	inc	dptr
   4A24 12s00r00          12616 	lcall	__gptrget
   4A27 FE                12617 	mov	r6,a
   4A28 A3                12618 	inc	dptr
   4A29 12s00r00          12619 	lcall	__gptrget
   4A2C FF                12620 	mov	r7,a
                          12621 ;	cJSON.c:555: while (cptr)
   4A2D                   12622 00120$:
   4A2D ED                12623 	mov	a,r5
   4A2E 4E                12624 	orl	a,r6
   4A2F 70 03             12625 	jnz	00154$
   4A31 02s4Br3B          12626 	ljmp	00122$
   4A34                   12627 00154$:
                          12628 ;	cJSON.c:557: newchild=cJSON_Duplicate(cptr,1);		/* Duplicate (with recurse) each item in the ->next chain */
   4A34 C0 07             12629 	push	ar7
   4A36 C0 06             12630 	push	ar6
   4A38 C0 05             12631 	push	ar5
   4A3A 74 01             12632 	mov	a,#0x01
   4A3C C0 E0             12633 	push	acc
   4A3E E4                12634 	clr	a
   4A3F C0 E0             12635 	push	acc
   4A41 8D 82             12636 	mov	dpl,r5
   4A43 8E 83             12637 	mov	dph,r6
   4A45 8F F0             12638 	mov	b,r7
   4A47 78r9C             12639 	mov	r0,#_cJSON_Duplicate
   4A49 79s47             12640 	mov	r1,#(_cJSON_Duplicate >> 8)
   4A4B 7As00             12641 	mov	r2,#(_cJSON_Duplicate >> 16)
   4A4D 12s00r00          12642 	lcall	__sdcc_banked_call
   4A50 AA 82             12643 	mov	r2,dpl
   4A52 AB 83             12644 	mov	r3,dph
   4A54 AC F0             12645 	mov	r4,b
   4A56 15 81             12646 	dec	sp
   4A58 15 81             12647 	dec	sp
   4A5A D0 05             12648 	pop	ar5
   4A5C D0 06             12649 	pop	ar6
   4A5E D0 07             12650 	pop	ar7
                          12651 ;	cJSON.c:558: if (!newchild) {cJSON_Delete(newitem);return 0;}
   4A60 EA                12652 	mov	a,r2
   4A61 4B                12653 	orl	a,r3
   4A62 70 1F             12654 	jnz	00116$
   4A64 E5 81             12655 	mov	a,sp
   4A66 24 F8             12656 	add	a,#0xf8
   4A68 F8                12657 	mov	r0,a
   4A69 86 82             12658 	mov	dpl,@r0
   4A6B 08                12659 	inc	r0
   4A6C 86 83             12660 	mov	dph,@r0
   4A6E 08                12661 	inc	r0
   4A6F 86 F0             12662 	mov	b,@r0
   4A71 78r8D             12663 	mov	r0,#_cJSON_Delete
   4A73 79s03             12664 	mov	r1,#(_cJSON_Delete >> 8)
   4A75 7As00             12665 	mov	r2,#(_cJSON_Delete >> 16)
   4A77 12s00r00          12666 	lcall	__sdcc_banked_call
   4A7A 90 00 00          12667 	mov	dptr,#0x0000
   4A7D 75 F0 00          12668 	mov	b,#0x00
   4A80 02s4Br48          12669 	ljmp	00123$
   4A83                   12670 00116$:
                          12671 ;	cJSON.c:559: if (nptr)	{nptr->next=newchild,newchild->prev=nptr;nptr=newchild;}	/* If newitem->child already set, then crosswire ->prev and ->next and move on */
   4A83 E5 81             12672 	mov	a,sp
   4A85 24 FB             12673 	add	a,#0xfb
   4A87 F8                12674 	mov	r0,a
   4A88 E6                12675 	mov	a,@r0
   4A89 08                12676 	inc	r0
   4A8A 46                12677 	orl	a,@r0
   4A8B 60 5A             12678 	jz	00118$
   4A8D C0 05             12679 	push	ar5
   4A8F C0 06             12680 	push	ar6
   4A91 C0 07             12681 	push	ar7
   4A93 E5 81             12682 	mov	a,sp
   4A95 24 F8             12683 	add	a,#0xf8
   4A97 F8                12684 	mov	r0,a
   4A98 86 82             12685 	mov	dpl,@r0
   4A9A 08                12686 	inc	r0
   4A9B 86 83             12687 	mov	dph,@r0
   4A9D 08                12688 	inc	r0
   4A9E 86 F0             12689 	mov	b,@r0
   4AA0 EA                12690 	mov	a,r2
   4AA1 12s00r00          12691 	lcall	__gptrput
   4AA4 A3                12692 	inc	dptr
   4AA5 EB                12693 	mov	a,r3
   4AA6 12s00r00          12694 	lcall	__gptrput
   4AA9 A3                12695 	inc	dptr
   4AAA EC                12696 	mov	a,r4
   4AAB 12s00r00          12697 	lcall	__gptrput
   4AAE 74 03             12698 	mov	a,#0x03
   4AB0 2A                12699 	add	a,r2
   4AB1 FD                12700 	mov	r5,a
   4AB2 E4                12701 	clr	a
   4AB3 3B                12702 	addc	a,r3
   4AB4 FE                12703 	mov	r6,a
   4AB5 8C 07             12704 	mov	ar7,r4
   4AB7 8D 82             12705 	mov	dpl,r5
   4AB9 8E 83             12706 	mov	dph,r6
   4ABB 8F F0             12707 	mov	b,r7
   4ABD E5 81             12708 	mov	a,sp
   4ABF 24 F8             12709 	add	a,#0xf8
   4AC1 F8                12710 	mov	r0,a
   4AC2 E6                12711 	mov	a,@r0
   4AC3 12s00r00          12712 	lcall	__gptrput
   4AC6 A3                12713 	inc	dptr
   4AC7 08                12714 	inc	r0
   4AC8 E6                12715 	mov	a,@r0
   4AC9 12s00r00          12716 	lcall	__gptrput
   4ACC A3                12717 	inc	dptr
   4ACD 08                12718 	inc	r0
   4ACE E6                12719 	mov	a,@r0
   4ACF 12s00r00          12720 	lcall	__gptrput
   4AD2 E5 81             12721 	mov	a,sp
   4AD4 24 F8             12722 	add	a,#0xf8
   4AD6 F8                12723 	mov	r0,a
   4AD7 A6 02             12724 	mov	@r0,ar2
   4AD9 08                12725 	inc	r0
   4ADA A6 03             12726 	mov	@r0,ar3
   4ADC 08                12727 	inc	r0
   4ADD A6 04             12728 	mov	@r0,ar4
   4ADF D0 07             12729 	pop	ar7
   4AE1 D0 06             12730 	pop	ar6
   4AE3 D0 05             12731 	pop	ar5
   4AE5 80 3D             12732 	sjmp	00119$
   4AE7                   12733 00118$:
                          12734 ;	cJSON.c:560: else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
   4AE7 C0 05             12735 	push	ar5
   4AE9 C0 06             12736 	push	ar6
   4AEB C0 07             12737 	push	ar7
   4AED E5 81             12738 	mov	a,sp
   4AEF 24 F5             12739 	add	a,#0xf5
   4AF1 F8                12740 	mov	r0,a
   4AF2 74 06             12741 	mov	a,#0x06
   4AF4 26                12742 	add	a,@r0
   4AF5 FD                12743 	mov	r5,a
   4AF6 E4                12744 	clr	a
   4AF7 08                12745 	inc	r0
   4AF8 36                12746 	addc	a,@r0
   4AF9 FE                12747 	mov	r6,a
   4AFA 08                12748 	inc	r0
   4AFB 86 07             12749 	mov	ar7,@r0
   4AFD 8D 82             12750 	mov	dpl,r5
   4AFF 8E 83             12751 	mov	dph,r6
   4B01 8F F0             12752 	mov	b,r7
   4B03 EA                12753 	mov	a,r2
   4B04 12s00r00          12754 	lcall	__gptrput
   4B07 A3                12755 	inc	dptr
   4B08 EB                12756 	mov	a,r3
   4B09 12s00r00          12757 	lcall	__gptrput
   4B0C A3                12758 	inc	dptr
   4B0D EC                12759 	mov	a,r4
   4B0E 12s00r00          12760 	lcall	__gptrput
   4B11 E5 81             12761 	mov	a,sp
   4B13 24 F8             12762 	add	a,#0xf8
   4B15 F8                12763 	mov	r0,a
   4B16 A6 02             12764 	mov	@r0,ar2
   4B18 08                12765 	inc	r0
   4B19 A6 03             12766 	mov	@r0,ar3
   4B1B 08                12767 	inc	r0
   4B1C A6 04             12768 	mov	@r0,ar4
                          12769 ;	cJSON.c:563: return newitem;
   4B1E D0 07             12770 	pop	ar7
   4B20 D0 06             12771 	pop	ar6
   4B22 D0 05             12772 	pop	ar5
                          12773 ;	cJSON.c:560: else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
   4B24                   12774 00119$:
                          12775 ;	cJSON.c:561: cptr=cptr->next;
   4B24 8D 82             12776 	mov	dpl,r5
   4B26 8E 83             12777 	mov	dph,r6
   4B28 8F F0             12778 	mov	b,r7
   4B2A 12s00r00          12779 	lcall	__gptrget
   4B2D FD                12780 	mov	r5,a
   4B2E A3                12781 	inc	dptr
   4B2F 12s00r00          12782 	lcall	__gptrget
   4B32 FE                12783 	mov	r6,a
   4B33 A3                12784 	inc	dptr
   4B34 12s00r00          12785 	lcall	__gptrget
   4B37 FF                12786 	mov	r7,a
   4B38 02s4Ar2D          12787 	ljmp	00120$
   4B3B                   12788 00122$:
                          12789 ;	cJSON.c:563: return newitem;
   4B3B E5 81             12790 	mov	a,sp
   4B3D 24 F8             12791 	add	a,#0xf8
   4B3F F8                12792 	mov	r0,a
   4B40 86 82             12793 	mov	dpl,@r0
   4B42 08                12794 	inc	r0
   4B43 86 83             12795 	mov	dph,@r0
   4B45 08                12796 	inc	r0
   4B46 86 F0             12797 	mov	b,@r0
   4B48                   12798 00123$:
   4B48 C8                12799 	xch	a,r0
   4B49 E5 81             12800 	mov	a,sp
   4B4B 24 F4             12801 	add	a,#0xF4
   4B4D F5 81             12802 	mov	sp,a
   4B4F C8                12803 	xch	a,r0
   4B50 02s00r00          12804 	ljmp	__sdcc_banked_ret
                          12805 ;------------------------------------------------------------
                          12806 ;Allocation info for local variables in function 'cJSON_Minify'
                          12807 ;------------------------------------------------------------
                          12808 ;json                      Allocated to registers r5 r6 r7 
                          12809 ;into                      Allocated to stack - sp -6
                          12810 ;sloc0                     Allocated to stack - sp -3
                          12811 ;sloc1                     Allocated to stack - sp -2
                          12812 ;------------------------------------------------------------
                          12813 ;	cJSON.c:566: void cJSON_Minify(char *json)
                          12814 ;	-----------------------------------------
                          12815 ;	 function cJSON_Minify
                          12816 ;	-----------------------------------------
   4B53                   12817 _cJSON_Minify:
   4B53 E5 81             12818 	mov	a,sp
   4B55 24 07             12819 	add	a,#0x07
   4B57 F5 81             12820 	mov	sp,a
   4B59 AD 82             12821 	mov	r5,dpl
   4B5B AE 83             12822 	mov	r6,dph
   4B5D AF F0             12823 	mov	r7,b
                          12824 ;	cJSON.c:568: char *into=json;
   4B5F E5 81             12825 	mov	a,sp
   4B61 24 FA             12826 	add	a,#0xfa
   4B63 F8                12827 	mov	r0,a
   4B64 A6 05             12828 	mov	@r0,ar5
   4B66 08                12829 	inc	r0
   4B67 A6 06             12830 	mov	@r0,ar6
   4B69 08                12831 	inc	r0
   4B6A A6 07             12832 	mov	@r0,ar7
                          12833 ;	cJSON.c:569: while (*json)
   4B6C                   12834 00139$:
   4B6C 8D 82             12835 	mov	dpl,r5
   4B6E 8E 83             12836 	mov	dph,r6
   4B70 8F F0             12837 	mov	b,r7
   4B72 12s00r00          12838 	lcall	__gptrget
   4B75 FC                12839 	mov	r4,a
   4B76 70 03             12840 	jnz	00185$
   4B78 02s4Dr41          12841 	ljmp	00141$
   4B7B                   12842 00185$:
                          12843 ;	cJSON.c:571: if (*json==' ') json++;
   4B7B BC 20 07          12844 	cjne	r4,#0x20,00137$
   4B7E 0D                12845 	inc	r5
   4B7F BD 00 EA          12846 	cjne	r5,#0x00,00139$
   4B82 0E                12847 	inc	r6
   4B83 80 E7             12848 	sjmp	00139$
   4B85                   12849 00137$:
                          12850 ;	cJSON.c:572: else if (*json=='\t') json++;	/* Whitespace characters. */
   4B85 BC 09 07          12851 	cjne	r4,#0x09,00134$
   4B88 0D                12852 	inc	r5
   4B89 BD 00 E0          12853 	cjne	r5,#0x00,00139$
   4B8C 0E                12854 	inc	r6
   4B8D 80 DD             12855 	sjmp	00139$
   4B8F                   12856 00134$:
                          12857 ;	cJSON.c:573: else if (*json=='\r') json++;
   4B8F BC 0D 07          12858 	cjne	r4,#0x0D,00131$
   4B92 0D                12859 	inc	r5
   4B93 BD 00 D6          12860 	cjne	r5,#0x00,00139$
   4B96 0E                12861 	inc	r6
   4B97 80 D3             12862 	sjmp	00139$
   4B99                   12863 00131$:
                          12864 ;	cJSON.c:574: else if (*json=='\n') json++;
   4B99 BC 0A 07          12865 	cjne	r4,#0x0A,00128$
   4B9C 0D                12866 	inc	r5
   4B9D BD 00 CC          12867 	cjne	r5,#0x00,00139$
   4BA0 0E                12868 	inc	r6
   4BA1 80 C9             12869 	sjmp	00139$
   4BA3                   12870 00128$:
                          12871 ;	cJSON.c:575: else if (*json=='/' && json[1]=='/')  while (*json && *json!='\n') json++;	/* float-slash comments, to end of line. */
   4BA3 BC 2F 4E          12872 	cjne	r4,#0x2F,00124$
   4BA6 74 01             12873 	mov	a,#0x01
   4BA8 2D                12874 	add	a,r5
   4BA9 FA                12875 	mov	r2,a
   4BAA E4                12876 	clr	a
   4BAB 3E                12877 	addc	a,r6
   4BAC FB                12878 	mov	r3,a
   4BAD 8F 04             12879 	mov	ar4,r7
   4BAF 8A 82             12880 	mov	dpl,r2
   4BB1 8B 83             12881 	mov	dph,r3
   4BB3 8C F0             12882 	mov	b,r4
   4BB5 12s00r00          12883 	lcall	__gptrget
   4BB8 FA                12884 	mov	r2,a
   4BB9 BA 2F 38          12885 	cjne	r2,#0x2F,00124$
   4BBC 8D 02             12886 	mov	ar2,r5
   4BBE 8E 03             12887 	mov	ar3,r6
   4BC0 8F 04             12888 	mov	ar4,r7
   4BC2                   12889 00102$:
   4BC2 8A 82             12890 	mov	dpl,r2
   4BC4 8B 83             12891 	mov	dph,r3
   4BC6 8C F0             12892 	mov	b,r4
   4BC8 E5 81             12893 	mov	a,sp
   4BCA 24 FD             12894 	add	a,#0xfd
   4BCC F8                12895 	mov	r0,a
   4BCD 12s00r00          12896 	lcall	__gptrget
   4BD0 F6                12897 	mov	@r0,a
   4BD1 E5 81             12898 	mov	a,sp
   4BD3 24 FD             12899 	add	a,#0xfd
   4BD5 F8                12900 	mov	r0,a
   4BD6 E6                12901 	mov	a,@r0
   4BD7 70 03             12902 	jnz	00202$
   4BD9 02s4Br6C          12903 	ljmp	00139$
   4BDC                   12904 00202$:
   4BDC E5 81             12905 	mov	a,sp
   4BDE 24 FD             12906 	add	a,#0xfd
   4BE0 F8                12907 	mov	r0,a
   4BE1 B6 0A 03          12908 	cjne	@r0,#0x0A,00203$
   4BE4 02s4Br6C          12909 	ljmp	00139$
   4BE7                   12910 00203$:
   4BE7 0A                12911 	inc	r2
   4BE8 BA 00 01          12912 	cjne	r2,#0x00,00204$
   4BEB 0B                12913 	inc	r3
   4BEC                   12914 00204$:
   4BEC 8A 05             12915 	mov	ar5,r2
   4BEE 8B 06             12916 	mov	ar6,r3
   4BF0 8C 07             12917 	mov	ar7,r4
   4BF2 80 CE             12918 	sjmp	00102$
   4BF4                   12919 00124$:
                          12920 ;	cJSON.c:576: else if (*json=='/' && json[1]=='*') {while (*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}	/* multiline comments. */
   4BF4 8D 82             12921 	mov	dpl,r5
   4BF6 8E 83             12922 	mov	dph,r6
   4BF8 8F F0             12923 	mov	b,r7
   4BFA 12s00r00          12924 	lcall	__gptrget
   4BFD FC                12925 	mov	r4,a
   4BFE BC 2F 02          12926 	cjne	r4,#0x2F,00205$
   4C01 80 03             12927 	sjmp	00206$
   4C03                   12928 00205$:
   4C03 02s4Cr79          12929 	ljmp	00120$
   4C06                   12930 00206$:
   4C06 74 01             12931 	mov	a,#0x01
   4C08 2D                12932 	add	a,r5
   4C09 FA                12933 	mov	r2,a
   4C0A E4                12934 	clr	a
   4C0B 3E                12935 	addc	a,r6
   4C0C FB                12936 	mov	r3,a
   4C0D 8F 04             12937 	mov	ar4,r7
   4C0F 8A 82             12938 	mov	dpl,r2
   4C11 8B 83             12939 	mov	dph,r3
   4C13 8C F0             12940 	mov	b,r4
   4C15 12s00r00          12941 	lcall	__gptrget
   4C18 FA                12942 	mov	r2,a
   4C19 BA 2A 5D          12943 	cjne	r2,#0x2A,00120$
   4C1C A8 81             12944 	mov	r0,sp
   4C1E 18                12945 	dec	r0
   4C1F 18                12946 	dec	r0
   4C20 A6 05             12947 	mov	@r0,ar5
   4C22 08                12948 	inc	r0
   4C23 A6 06             12949 	mov	@r0,ar6
   4C25 08                12950 	inc	r0
   4C26 A6 07             12951 	mov	@r0,ar7
   4C28                   12952 00107$:
   4C28 A8 81             12953 	mov	r0,sp
   4C2A 18                12954 	dec	r0
   4C2B 18                12955 	dec	r0
   4C2C 86 82             12956 	mov	dpl,@r0
   4C2E 08                12957 	inc	r0
   4C2F 86 83             12958 	mov	dph,@r0
   4C31 08                12959 	inc	r0
   4C32 86 F0             12960 	mov	b,@r0
   4C34 12s00r00          12961 	lcall	__gptrget
   4C37 FF                12962 	mov	r7,a
   4C38 60 2D             12963 	jz	00109$
   4C3A BF 2A 1E          12964 	cjne	r7,#0x2A,00108$
   4C3D A8 81             12965 	mov	r0,sp
   4C3F 18                12966 	dec	r0
   4C40 18                12967 	dec	r0
   4C41 74 01             12968 	mov	a,#0x01
   4C43 26                12969 	add	a,@r0
   4C44 FA                12970 	mov	r2,a
   4C45 E4                12971 	clr	a
   4C46 08                12972 	inc	r0
   4C47 36                12973 	addc	a,@r0
   4C48 FB                12974 	mov	r3,a
   4C49 08                12975 	inc	r0
   4C4A 86 04             12976 	mov	ar4,@r0
   4C4C 8A 82             12977 	mov	dpl,r2
   4C4E 8B 83             12978 	mov	dph,r3
   4C50 8C F0             12979 	mov	b,r4
   4C52 12s00r00          12980 	lcall	__gptrget
   4C55 FA                12981 	mov	r2,a
   4C56 BA 2F 02          12982 	cjne	r2,#0x2F,00212$
   4C59 80 0C             12983 	sjmp	00109$
   4C5B                   12984 00212$:
   4C5B                   12985 00108$:
   4C5B A8 81             12986 	mov	r0,sp
   4C5D 18                12987 	dec	r0
   4C5E 18                12988 	dec	r0
   4C5F 06                12989 	inc	@r0
   4C60 B6 00 02          12990 	cjne	@r0,#0x00,00213$
   4C63 08                12991 	inc	r0
   4C64 06                12992 	inc	@r0
   4C65                   12993 00213$:
   4C65 80 C1             12994 	sjmp	00107$
   4C67                   12995 00109$:
   4C67 A8 81             12996 	mov	r0,sp
   4C69 18                12997 	dec	r0
   4C6A 18                12998 	dec	r0
   4C6B 74 02             12999 	mov	a,#0x02
   4C6D 26                13000 	add	a,@r0
   4C6E FD                13001 	mov	r5,a
   4C6F E4                13002 	clr	a
   4C70 08                13003 	inc	r0
   4C71 36                13004 	addc	a,@r0
   4C72 FE                13005 	mov	r6,a
   4C73 08                13006 	inc	r0
   4C74 86 07             13007 	mov	ar7,@r0
   4C76 02s4Br6C          13008 	ljmp	00139$
   4C79                   13009 00120$:
                          13010 ;	cJSON.c:577: else if (*json=='\"'){*into++=*json++;while (*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;} /* string literals, which are \" sensitive. */
   4C79 8D 82             13011 	mov	dpl,r5
   4C7B 8E 83             13012 	mov	dph,r6
   4C7D 8F F0             13013 	mov	b,r7
   4C7F 12s00r00          13014 	lcall	__gptrget
   4C82 FC                13015 	mov	r4,a
   4C83 BC 22 02          13016 	cjne	r4,#0x22,00214$
   4C86 80 03             13017 	sjmp	00215$
   4C88                   13018 00214$:
   4C88 02s4Dr20          13019 	ljmp	00117$
   4C8B                   13020 00215$:
   4C8B 0D                13021 	inc	r5
   4C8C BD 00 01          13022 	cjne	r5,#0x00,00216$
   4C8F 0E                13023 	inc	r6
   4C90                   13024 00216$:
   4C90 E5 81             13025 	mov	a,sp
   4C92 24 FA             13026 	add	a,#0xfa
   4C94 F8                13027 	mov	r0,a
   4C95 86 82             13028 	mov	dpl,@r0
   4C97 08                13029 	inc	r0
   4C98 86 83             13030 	mov	dph,@r0
   4C9A 08                13031 	inc	r0
   4C9B 86 F0             13032 	mov	b,@r0
   4C9D EC                13033 	mov	a,r4
   4C9E 12s00r00          13034 	lcall	__gptrput
   4CA1                   13035 00113$:
   4CA1 8D 82             13036 	mov	dpl,r5
   4CA3 8E 83             13037 	mov	dph,r6
   4CA5 8F F0             13038 	mov	b,r7
   4CA7 12s00r00          13039 	lcall	__gptrget
   4CAA FB                13040 	mov	r3,a
   4CAB 60 48             13041 	jz	00115$
   4CAD BB 22 02          13042 	cjne	r3,#0x22,00218$
   4CB0 80 43             13043 	sjmp	00115$
   4CB2                   13044 00218$:
   4CB2 BB 5C 16          13045 	cjne	r3,#0x5C,00111$
   4CB5 0D                13046 	inc	r5
   4CB6 BD 00 01          13047 	cjne	r5,#0x00,00221$
   4CB9 0E                13048 	inc	r6
   4CBA                   13049 00221$:
   4CBA E5 81             13050 	mov	a,sp
   4CBC 24 FA             13051 	add	a,#0xfa
   4CBE F8                13052 	mov	r0,a
   4CBF 86 82             13053 	mov	dpl,@r0
   4CC1 08                13054 	inc	r0
   4CC2 86 83             13055 	mov	dph,@r0
   4CC4 08                13056 	inc	r0
   4CC5 86 F0             13057 	mov	b,@r0
   4CC7 EB                13058 	mov	a,r3
   4CC8 12s00r00          13059 	lcall	__gptrput
   4CCB                   13060 00111$:
   4CCB 8D 82             13061 	mov	dpl,r5
   4CCD 8E 83             13062 	mov	dph,r6
   4CCF 8F F0             13063 	mov	b,r7
   4CD1 12s00r00          13064 	lcall	__gptrget
   4CD4 FB                13065 	mov	r3,a
   4CD5 A3                13066 	inc	dptr
   4CD6 AD 82             13067 	mov	r5,dpl
   4CD8 AE 83             13068 	mov	r6,dph
   4CDA E5 81             13069 	mov	a,sp
   4CDC 24 FA             13070 	add	a,#0xfa
   4CDE F8                13071 	mov	r0,a
   4CDF 86 82             13072 	mov	dpl,@r0
   4CE1 08                13073 	inc	r0
   4CE2 86 83             13074 	mov	dph,@r0
   4CE4 08                13075 	inc	r0
   4CE5 86 F0             13076 	mov	b,@r0
   4CE7 EB                13077 	mov	a,r3
   4CE8 12s00r00          13078 	lcall	__gptrput
   4CEB A3                13079 	inc	dptr
   4CEC 18                13080 	dec	r0
   4CED 18                13081 	dec	r0
   4CEE A6 82             13082 	mov	@r0,dpl
   4CF0 08                13083 	inc	r0
   4CF1 A6 83             13084 	mov	@r0,dph
   4CF3 80 AC             13085 	sjmp	00113$
   4CF5                   13086 00115$:
   4CF5 8D 82             13087 	mov	dpl,r5
   4CF7 8E 83             13088 	mov	dph,r6
   4CF9 8F F0             13089 	mov	b,r7
   4CFB 12s00r00          13090 	lcall	__gptrget
   4CFE FB                13091 	mov	r3,a
   4CFF A3                13092 	inc	dptr
   4D00 AD 82             13093 	mov	r5,dpl
   4D02 AE 83             13094 	mov	r6,dph
   4D04 E5 81             13095 	mov	a,sp
   4D06 24 FA             13096 	add	a,#0xfa
   4D08 F8                13097 	mov	r0,a
   4D09 86 82             13098 	mov	dpl,@r0
   4D0B 08                13099 	inc	r0
   4D0C 86 83             13100 	mov	dph,@r0
   4D0E 08                13101 	inc	r0
   4D0F 86 F0             13102 	mov	b,@r0
   4D11 EB                13103 	mov	a,r3
   4D12 12s00r00          13104 	lcall	__gptrput
   4D15 A3                13105 	inc	dptr
   4D16 18                13106 	dec	r0
   4D17 18                13107 	dec	r0
   4D18 A6 82             13108 	mov	@r0,dpl
   4D1A 08                13109 	inc	r0
   4D1B A6 83             13110 	mov	@r0,dph
   4D1D 02s4Br6C          13111 	ljmp	00139$
   4D20                   13112 00117$:
                          13113 ;	cJSON.c:578: else *into++=*json++;			/* All other characters. */
   4D20 0D                13114 	inc	r5
   4D21 BD 00 01          13115 	cjne	r5,#0x00,00222$
   4D24 0E                13116 	inc	r6
   4D25                   13117 00222$:
   4D25 E5 81             13118 	mov	a,sp
   4D27 24 FA             13119 	add	a,#0xfa
   4D29 F8                13120 	mov	r0,a
   4D2A 86 82             13121 	mov	dpl,@r0
   4D2C 08                13122 	inc	r0
   4D2D 86 83             13123 	mov	dph,@r0
   4D2F 08                13124 	inc	r0
   4D30 86 F0             13125 	mov	b,@r0
   4D32 EC                13126 	mov	a,r4
   4D33 12s00r00          13127 	lcall	__gptrput
   4D36 A3                13128 	inc	dptr
   4D37 18                13129 	dec	r0
   4D38 18                13130 	dec	r0
   4D39 A6 82             13131 	mov	@r0,dpl
   4D3B 08                13132 	inc	r0
   4D3C A6 83             13133 	mov	@r0,dph
   4D3E 02s4Br6C          13134 	ljmp	00139$
   4D41                   13135 00141$:
                          13136 ;	cJSON.c:580: *into=0;	/* and null-terminate. */
   4D41 E5 81             13137 	mov	a,sp
   4D43 24 FA             13138 	add	a,#0xfa
   4D45 F8                13139 	mov	r0,a
   4D46 86 82             13140 	mov	dpl,@r0
   4D48 08                13141 	inc	r0
   4D49 86 83             13142 	mov	dph,@r0
   4D4B 08                13143 	inc	r0
   4D4C 86 F0             13144 	mov	b,@r0
   4D4E E4                13145 	clr	a
   4D4F 12s00r00          13146 	lcall	__gptrput
   4D52 E5 81             13147 	mov	a,sp
   4D54 24 F9             13148 	add	a,#0xF9
   4D56 F5 81             13149 	mov	sp,a
   4D58 02s00r00          13150 	ljmp	__sdcc_banked_ret
                          13151 	.area CSEG    (CODE)
                          13152 	.area CONST   (CODE)
   0000                   13153 __str_0:
   0000 25 64             13154 	.ascii "%d"
   0002 00                13155 	.db 0x00
   0003                   13156 __str_1:
   0003 25 66             13157 	.ascii "%f"
   0005 00                13158 	.db 0x00
   0006                   13159 _firstByteMark:
   0006 00                13160 	.db #0x00	; 0
   0007 00                13161 	.db #0x00	; 0
   0008 C0                13162 	.db #0xC0	; 192
   0009 E0                13163 	.db #0xE0	; 224
   000A F0                13164 	.db #0xF0	; 240
   000B F8                13165 	.db #0xF8	; 248
   000C FC                13166 	.db #0xFC	; 252
   000D                   13167 __str_2:
   000D 00                13168 	.db 0x00
   000E                   13169 __str_3:
   000E 22                13170 	.db 0x22
   000F 5C                13171 	.db 0x5C
   0010 08                13172 	.db 0x08
   0011 0C                13173 	.db 0x0C
   0012 0A                13174 	.db 0x0A
   0013 0D                13175 	.db 0x0D
   0014 09                13176 	.db 0x09
   0015 00                13177 	.db 0x00
   0016                   13178 __str_4:
   0016 75 25 30 34 78    13179 	.ascii "u%04x"
   001B 00                13180 	.db 0x00
   001C                   13181 __str_5:
   001C 6E 75 6C 6C       13182 	.ascii "null"
   0020 00                13183 	.db 0x00
   0021                   13184 __str_6:
   0021 66 61 6C 73 65    13185 	.ascii "false"
   0026 00                13186 	.db 0x00
   0027                   13187 __str_7:
   0027 74 72 75 65       13188 	.ascii "true"
   002B 00                13189 	.db 0x00
   002C                   13190 __str_8:
   002C 5B 5D             13191 	.ascii "[]"
   002E 00                13192 	.db 0x00
                          13193 	.area XINIT   (CODE)
                          13194 	.area CABS    (ABS,CODE)
