                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Oct 29 2014) (Linux)
                              4 ; This file was generated Wed Dec  9 12:52:27 2015
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-huge
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _autostart_processes
                             13 	.globl _device_fs_init
                             14 	.globl _crypto_init
                             15 	.globl _create_security_data_msg
                             16 	.globl _create_security_client_hello_msg
                             17 	.globl _decrypt_data_by_master_key
                             18 	.globl _get_network_shared_key
                             19 	.globl _set_network_shared_key
                             20 	.globl _decrypt_data_by_network_shared_key
                             21 	.globl _create_new_device_msg
                             22 	.globl _device_find_object
                             23 	.globl _object_remove_subscriber
                             24 	.globl _object_add_subscriber
                             25 	.globl _object_instance_find_resource
                             26 	.globl _set_resource_value
                             27 	.globl _get_resource_value
                             28 	.globl _subscriber_value_compare_type_init
                             29 	.globl _subscriber_report_type_init
                             30 	.globl _subscriber_alloc
                             31 	.globl _subscribers_mem_pool_init
                             32 	.globl _uip_debug_ipaddr_print
                             33 	.globl _create_device
                             34 	.globl _cJSON_GetArrayItem
                             35 	.globl _cJSON_GetArraySize
                             36 	.globl _cJSON_Parse
                             37 	.globl _sprintf
                             38 	.globl _printf
                             39 	.globl _uip_udp_packet_sendto
                             40 	.globl _uip_ds6_set_addr_iid
                             41 	.globl _uip_ds6_get_global
                             42 	.globl _uip_ds6_addr_add
                             43 	.globl _udp_new
                             44 	.globl _etimer_expired
                             45 	.globl _etimer_restart
                             46 	.globl _etimer_set
                             47 	.globl _process_post
                             48 	.globl _strlen
                             49 	.globl _memcmp
                             50 	.globl _strcpy
                             51 	.globl _memcpy
                             52 	.globl _ACTIVE
                             53 	.globl _TX_BYTE
                             54 	.globl _RX_BYTE
                             55 	.globl _ERR
                             56 	.globl _FE
                             57 	.globl _SLAVE
                             58 	.globl _RE
                             59 	.globl _MODE
                             60 	.globl _T3OVFIF
                             61 	.globl _T3CH0IF
                             62 	.globl _T3CH1IF
                             63 	.globl _T4OVFIF
                             64 	.globl _T4CH0IF
                             65 	.globl _T4CH1IF
                             66 	.globl _OVFIM
                             67 	.globl _B_0
                             68 	.globl _B_1
                             69 	.globl _B_2
                             70 	.globl _B_3
                             71 	.globl _B_4
                             72 	.globl _B_5
                             73 	.globl _B_6
                             74 	.globl _B_7
                             75 	.globl _P2IF
                             76 	.globl _UTX0IF
                             77 	.globl _UTX1IF
                             78 	.globl _P1IF
                             79 	.globl _WDTIF
                             80 	.globl _ACC_0
                             81 	.globl _ACC_1
                             82 	.globl _ACC_2
                             83 	.globl _ACC_3
                             84 	.globl _ACC_4
                             85 	.globl _ACC_5
                             86 	.globl _ACC_6
                             87 	.globl _ACC_7
                             88 	.globl _P
                             89 	.globl _F1
                             90 	.globl _OV
                             91 	.globl _RS0
                             92 	.globl _RS1
                             93 	.globl _F0
                             94 	.globl _AC
                             95 	.globl _CY
                             96 	.globl _DMAIF
                             97 	.globl _T1IF
                             98 	.globl _T2IF
                             99 	.globl _T3IF
                            100 	.globl _T4IF
                            101 	.globl _P0IF
                            102 	.globl _STIF
                            103 	.globl _DMAIE
                            104 	.globl _T1IE
                            105 	.globl _T2IE
                            106 	.globl _T3IE
                            107 	.globl _T4IE
                            108 	.globl _P0IE
                            109 	.globl _RFERRIE
                            110 	.globl _ADCIE
                            111 	.globl _URX0IE
                            112 	.globl _URX1IE
                            113 	.globl _ENCIE
                            114 	.globl _STIE
                            115 	.globl _EA
                            116 	.globl _P2_0
                            117 	.globl _P2_1
                            118 	.globl _P2_2
                            119 	.globl _P2_3
                            120 	.globl _P2_4
                            121 	.globl _P2_5
                            122 	.globl _P2_6
                            123 	.globl _P2_7
                            124 	.globl _ENCIF_0
                            125 	.globl _ENCIF_1
                            126 	.globl _P1_0
                            127 	.globl _P1_1
                            128 	.globl _P1_2
                            129 	.globl _P1_3
                            130 	.globl _P1_4
                            131 	.globl _P1_5
                            132 	.globl _P1_6
                            133 	.globl _P1_7
                            134 	.globl _IT0
                            135 	.globl _RFERRIF
                            136 	.globl _IT1
                            137 	.globl _URX0IF
                            138 	.globl _ADCIF
                            139 	.globl _URX1IF
                            140 	.globl _P0_0
                            141 	.globl _P0_1
                            142 	.globl _P0_2
                            143 	.globl _P0_3
                            144 	.globl _P0_4
                            145 	.globl _P0_5
                            146 	.globl _P0_6
                            147 	.globl _P0_7
                            148 	.globl _WDCTL
                            149 	.globl _U1GCR
                            150 	.globl _U1UCR
                            151 	.globl _U1BAUD
                            152 	.globl _U1DBUF
                            153 	.globl _U1CSR
                            154 	.globl _U0GCR
                            155 	.globl _U0UCR
                            156 	.globl _U0BAUD
                            157 	.globl _U0DBUF
                            158 	.globl _U0CSR
                            159 	.globl _TIMIF
                            160 	.globl _T4CC1
                            161 	.globl _T4CCTL1
                            162 	.globl _T4CC0
                            163 	.globl _T4CCTL0
                            164 	.globl _T4CTL
                            165 	.globl _T4CNT
                            166 	.globl _T3CC1
                            167 	.globl _T3CCTL1
                            168 	.globl _T3CC0
                            169 	.globl _T3CCTL0
                            170 	.globl _T3CTL
                            171 	.globl _T3CNT
                            172 	.globl _T2MSEL
                            173 	.globl _T2IRQM
                            174 	.globl _T2MOVF2
                            175 	.globl _T2MOVF1
                            176 	.globl _T2MOVF0
                            177 	.globl _T2M1
                            178 	.globl _T2M0
                            179 	.globl _T2IRQF
                            180 	.globl _T2EVTCFG
                            181 	.globl _T2CTRL
                            182 	.globl _T1STAT
                            183 	.globl _T1CCTL2
                            184 	.globl _T1CCTL1
                            185 	.globl _T1CCTL0
                            186 	.globl _T1CTL
                            187 	.globl _T1CNTH
                            188 	.globl _T1CNTL
                            189 	.globl _T1CC2H
                            190 	.globl _T1CC2L
                            191 	.globl _T1CC1H
                            192 	.globl _T1CC1L
                            193 	.globl _T1CC0H
                            194 	.globl _T1CC0L
                            195 	.globl _CLKCONSTA
                            196 	.globl _CLKCONCMD
                            197 	.globl _SLEEPSTA
                            198 	.globl _SLEEPCMD
                            199 	.globl _STLOAD
                            200 	.globl _ST2
                            201 	.globl _ST1
                            202 	.globl _ST0
                            203 	.globl _RFERRF
                            204 	.globl _RFIRQF0
                            205 	.globl _RFST
                            206 	.globl _RFD
                            207 	.globl _RFIRQF1
                            208 	.globl _PSBANK
                            209 	.globl _FMAP
                            210 	.globl _MEMCTR
                            211 	.globl __XPAGE
                            212 	.globl _MPAGE
                            213 	.globl _PMUX
                            214 	.globl _P2DIR
                            215 	.globl _P1DIR
                            216 	.globl _P0DIR
                            217 	.globl _P2INP
                            218 	.globl _P1INP
                            219 	.globl _P2SEL
                            220 	.globl _P1SEL
                            221 	.globl _P0SEL
                            222 	.globl _APCFG
                            223 	.globl _PERCFG
                            224 	.globl _P0INP
                            225 	.globl _P2IEN
                            226 	.globl _P1IEN
                            227 	.globl _P0IEN
                            228 	.globl _PICTL
                            229 	.globl _P2IFG
                            230 	.globl _P1IFG
                            231 	.globl _P0IFG
                            232 	.globl _DMAREQ
                            233 	.globl _DMAARM
                            234 	.globl _DMA0CFGH
                            235 	.globl _DMA0CFGL
                            236 	.globl _DMA1CFGH
                            237 	.globl _DMA1CFGL
                            238 	.globl _DMAIRQ
                            239 	.globl _ENCCS
                            240 	.globl _ENCDO
                            241 	.globl _ENCDI
                            242 	.globl _RNDH
                            243 	.globl _RNDL
                            244 	.globl _ADCH
                            245 	.globl _ADCL
                            246 	.globl _ADCCON3
                            247 	.globl _ADCCON2
                            248 	.globl _ADCCON1
                            249 	.globl _B
                            250 	.globl _IRCON2
                            251 	.globl _ACC
                            252 	.globl _PSW
                            253 	.globl _IRCON
                            254 	.globl _IP1
                            255 	.globl _IEN1
                            256 	.globl _IP0
                            257 	.globl _IEN0
                            258 	.globl _P2
                            259 	.globl _S1CON
                            260 	.globl _IEN2
                            261 	.globl _S0CON
                            262 	.globl _DPS
                            263 	.globl _P1
                            264 	.globl _TCON
                            265 	.globl _PCON
                            266 	.globl _DPH1
                            267 	.globl _DPL1
                            268 	.globl _DPH0
                            269 	.globl _DPL0
                            270 	.globl _SP
                            271 	.globl _P0
                            272 	.globl _coconut_sensor_process
                            273 	.globl _get_global_addr_success
                            274 	.globl _reg_success
                            275 	.globl _auth_success
                            276 	.globl _output_buf
                            277 	.globl _X_IEEE_ADDR
                            278 	.globl _X_INFOPAGE
                            279 	.globl _X_P2DIR
                            280 	.globl _X_P1DIR
                            281 	.globl _X_P0DIR
                            282 	.globl _X_U1GCR
                            283 	.globl _X_U1UCR
                            284 	.globl _X_U1BAUD
                            285 	.globl _X_U1DBUF
                            286 	.globl _X_U1CSR
                            287 	.globl _X_P2INP
                            288 	.globl _X_P1INP
                            289 	.globl _X_P2SEL
                            290 	.globl _X_P1SEL
                            291 	.globl _X_P0SEL
                            292 	.globl _X_APCFG
                            293 	.globl _X_PERCFG
                            294 	.globl _X_T4CC1
                            295 	.globl _X_T4CCTL1
                            296 	.globl _X_T4CC0
                            297 	.globl _X_T4CCTL0
                            298 	.globl _X_T4CTL
                            299 	.globl _X_T4CNT
                            300 	.globl _X_RFIRQF0
                            301 	.globl _X_T1CCTL2
                            302 	.globl _X_T1CCTL1
                            303 	.globl _X_T1CCTL0
                            304 	.globl _X_T1CTL
                            305 	.globl _X_T1CNTH
                            306 	.globl _X_T1CNTL
                            307 	.globl _X_RFST
                            308 	.globl _X_T1CC2H
                            309 	.globl _X_T1CC2L
                            310 	.globl _X_T1CC1H
                            311 	.globl _X_T1CC1L
                            312 	.globl _X_T1CC0H
                            313 	.globl _X_T1CC0L
                            314 	.globl _X_RFD
                            315 	.globl _X_TIMIF
                            316 	.globl _X_DMAREQ
                            317 	.globl _X_DMAARM
                            318 	.globl _X_DMA0CFGH
                            319 	.globl _X_DMA0CFGL
                            320 	.globl _X_DMA1CFGH
                            321 	.globl _X_DMA1CFGL
                            322 	.globl _X_DMAIRQ
                            323 	.globl _X_T3CC1
                            324 	.globl _X_T3CCTL1
                            325 	.globl _X_T3CC0
                            326 	.globl _X_T3CCTL0
                            327 	.globl _X_T3CTL
                            328 	.globl _X_T3CNT
                            329 	.globl _X_WDCTL
                            330 	.globl _X_MEMCTR
                            331 	.globl _X_CLKCONCMD
                            332 	.globl _X_U0GCR
                            333 	.globl _X_U0UCR
                            334 	.globl _X_T2MSEL
                            335 	.globl _X_U0BAUD
                            336 	.globl _X_U0DBUF
                            337 	.globl _X_RFERRF
                            338 	.globl _X_SLEEPCMD
                            339 	.globl _X_RNDH
                            340 	.globl _X_RNDL
                            341 	.globl _X_ADCH
                            342 	.globl _X_ADCL
                            343 	.globl _X_ADCCON3
                            344 	.globl _X_ADCCON2
                            345 	.globl _X_ADCCON1
                            346 	.globl _X_ENCCS
                            347 	.globl _X_ENCDO
                            348 	.globl _X_ENCDI
                            349 	.globl _X_T1STAT
                            350 	.globl _X_PMUX
                            351 	.globl _X_STLOAD
                            352 	.globl _X_P2IEN
                            353 	.globl _X_P0IEN
                            354 	.globl _X_T2IRQM
                            355 	.globl _X_T2MOVF2
                            356 	.globl _X_T2MOVF1
                            357 	.globl _X_T2MOVF0
                            358 	.globl _X_T2M1
                            359 	.globl _X_T2M0
                            360 	.globl _X_T2IRQF
                            361 	.globl _X_P2
                            362 	.globl _X_PSBANK
                            363 	.globl _X_FMAP
                            364 	.globl _X_CLKCONSTA
                            365 	.globl _X_SLEEPSTA
                            366 	.globl _X_T2EVTCFG
                            367 	.globl _X_ST2
                            368 	.globl _X_ST1
                            369 	.globl _X_ST0
                            370 	.globl _X_T2CTRL
                            371 	.globl _X__XPAGE
                            372 	.globl _X_MPAGE
                            373 	.globl _X_RFIRQF1
                            374 	.globl _X_P1
                            375 	.globl _X_P0INP
                            376 	.globl _X_P1IEN
                            377 	.globl _X_PICTL
                            378 	.globl _X_P2IFG
                            379 	.globl _X_P1IFG
                            380 	.globl _X_P0IFG
                            381 	.globl _X_U0CSR
                            382 	.globl _X_P0
                            383 	.globl _USBF5
                            384 	.globl _USBF4
                            385 	.globl _USBF3
                            386 	.globl _USBF2
                            387 	.globl _USBF1
                            388 	.globl _USBF0
                            389 	.globl _USBCNTH
                            390 	.globl _USBCNTL
                            391 	.globl _USBCNT0
                            392 	.globl _USBCSOH
                            393 	.globl _USBCSOL
                            394 	.globl _USBMAXO
                            395 	.globl _USBCSIH
                            396 	.globl _USBCSIL
                            397 	.globl _USBCS0
                            398 	.globl _USBMAXI
                            399 	.globl _USBCTRL
                            400 	.globl _USBINDEX
                            401 	.globl _USBFRMH
                            402 	.globl _USBFRML
                            403 	.globl _USBCIE
                            404 	.globl _USBOIE
                            405 	.globl _USBIIE
                            406 	.globl _USBCIF
                            407 	.globl _USBOIF
                            408 	.globl _USBIIF
                            409 	.globl _USBPOW
                            410 	.globl _USBADDR
                            411 	.globl _CSPT
                            412 	.globl _CSPZ
                            413 	.globl _CSPY
                            414 	.globl _CSPX
                            415 	.globl _CSPSTAT
                            416 	.globl _CSPCTRL
                            417 	.globl _CSPPROG23
                            418 	.globl _CSPPROG22
                            419 	.globl _CSPPROG21
                            420 	.globl _CSPPROG20
                            421 	.globl _CSPPROG19
                            422 	.globl _CSPPROG18
                            423 	.globl _CSPPROG17
                            424 	.globl _CSPPROG16
                            425 	.globl _CSPPROG15
                            426 	.globl _CSPPROG14
                            427 	.globl _CSPPROG13
                            428 	.globl _CSPPROG12
                            429 	.globl _CSPPROG11
                            430 	.globl _CSPPROG10
                            431 	.globl _CSPPROG9
                            432 	.globl _CSPPROG8
                            433 	.globl _CSPPROG7
                            434 	.globl _CSPPROG6
                            435 	.globl _CSPPROG5
                            436 	.globl _CSPPROG4
                            437 	.globl _CSPPROG3
                            438 	.globl _CSPPROG2
                            439 	.globl _CSPPROG1
                            440 	.globl _CSPPROG0
                            441 	.globl _RFC_OBS_CTRL2
                            442 	.globl _RFC_OBS_CTRL1
                            443 	.globl _RFC_OBS_CTRL0
                            444 	.globl _TXFILTCFG
                            445 	.globl _PTEST1
                            446 	.globl _PTEST0
                            447 	.globl _ATEST
                            448 	.globl _DACTEST2
                            449 	.globl _DACTEST1
                            450 	.globl _DACTEST0
                            451 	.globl _MDMTEST1
                            452 	.globl _MDMTEST0
                            453 	.globl _ADCTEST2
                            454 	.globl _ADCTEST1
                            455 	.globl _ADCTEST0
                            456 	.globl _AGCCTRL3
                            457 	.globl _AGCCTRL2
                            458 	.globl _AGCCTRL1
                            459 	.globl _AGCCTRL0
                            460 	.globl _FSCAL3
                            461 	.globl _FSCAL2
                            462 	.globl _FSCAL1
                            463 	.globl _FSCAL0
                            464 	.globl _FSCTRL
                            465 	.globl _RXCTRL
                            466 	.globl _FREQEST
                            467 	.globl _MDMCTRL1
                            468 	.globl _MDMCTRL0
                            469 	.globl _RFRND
                            470 	.globl _RFERRM
                            471 	.globl _RFIRQM1
                            472 	.globl _RFIRQM0
                            473 	.globl _TXLAST_PTR
                            474 	.globl _TXFIRST_PTR
                            475 	.globl _RXP1_PTR
                            476 	.globl _RXLAST_PTR
                            477 	.globl _RXFIRST_PTR
                            478 	.globl _TXFIFOCNT
                            479 	.globl _RXFIFOCNT
                            480 	.globl _RXFIRST
                            481 	.globl _RSSISTAT
                            482 	.globl _RSSI
                            483 	.globl _CCACTRL1
                            484 	.globl _CCACTRL0
                            485 	.globl _FSMCTRL
                            486 	.globl _FIFOPCTRL
                            487 	.globl _FSMSTAT1
                            488 	.globl _FSMSTAT0
                            489 	.globl _TXCTRL
                            490 	.globl _TXPOWER
                            491 	.globl _FREQCTRL
                            492 	.globl _FREQTUNE
                            493 	.globl _RXMASKCLR
                            494 	.globl _RXMASKSET
                            495 	.globl _RXENABLE
                            496 	.globl _FRMCTRL1
                            497 	.globl _FRMCTRL0
                            498 	.globl _SRCEXTEN2
                            499 	.globl _SRCEXTEN1
                            500 	.globl _SRCEXTEN0
                            501 	.globl _SRCSHORTEN2
                            502 	.globl _SRCSHORTEN1
                            503 	.globl _SRCSHORTEN0
                            504 	.globl _SRCMATCH
                            505 	.globl _FRMFILT1
                            506 	.globl _FRMFILT0
                            507 	.globl _SHORT_ADDR1
                            508 	.globl _SHORT_ADDR0
                            509 	.globl _PAN_ID1
                            510 	.globl _PAN_ID0
                            511 	.globl _EXT_ADDR7
                            512 	.globl _EXT_ADDR6
                            513 	.globl _EXT_ADDR5
                            514 	.globl _EXT_ADDR4
                            515 	.globl _EXT_ADDR3
                            516 	.globl _EXT_ADDR2
                            517 	.globl _EXT_ADDR1
                            518 	.globl _EXT_ADDR0
                            519 	.globl _SRCSHORTPENDEN2
                            520 	.globl _SRCSHORTPENDEN1
                            521 	.globl _SRCSHORTPENDEN0
                            522 	.globl _SRCEXTPENDEN2
                            523 	.globl _SRCEXTPENDEN1
                            524 	.globl _SRCEXTPENDEN0
                            525 	.globl _SRCRESINDEX
                            526 	.globl _SRCRESMASK2
                            527 	.globl _SRCRESMASK1
                            528 	.globl _SRCRESMASK0
                            529 	.globl _SRC_ADDR_TABLE
                            530 	.globl _TXFIFO
                            531 	.globl _RXFIFO
                            532 	.globl _RFCORE_RAM
                            533 	.globl _CMPCTL
                            534 	.globl _OPAMPS
                            535 	.globl _OPAMPC
                            536 	.globl _STCV2
                            537 	.globl _STCV1
                            538 	.globl _STCV0
                            539 	.globl _STCS
                            540 	.globl _STCC
                            541 	.globl _T1CC4H
                            542 	.globl _T1CC4L
                            543 	.globl _T1CC3H
                            544 	.globl _T1CC3L
                            545 	.globl _XX_T1CC2H
                            546 	.globl _XX_T1CC2L
                            547 	.globl _XX_T1CC1H
                            548 	.globl _XX_T1CC1L
                            549 	.globl _XX_T1CC0H
                            550 	.globl _XX_T1CC0L
                            551 	.globl _T1CCTL4
                            552 	.globl _T1CCTL3
                            553 	.globl _XX_T1CCTL2
                            554 	.globl _XX_T1CCTL1
                            555 	.globl _XX_T1CCTL0
                            556 	.globl _CLD
                            557 	.globl _IRCTL
                            558 	.globl _CHIPINFO1
                            559 	.globl _CHIPINFO0
                            560 	.globl _FWDATA
                            561 	.globl _FADDRH
                            562 	.globl _FADDRL
                            563 	.globl _FCTL
                            564 	.globl _IVCTRL
                            565 	.globl _BATTMON
                            566 	.globl _SRCRC
                            567 	.globl _DBGDATA
                            568 	.globl _TESTREG0
                            569 	.globl _CHIPID
                            570 	.globl _CHVER
                            571 	.globl _OBSSEL5
                            572 	.globl _OBSSEL4
                            573 	.globl _OBSSEL3
                            574 	.globl _OBSSEL2
                            575 	.globl _OBSSEL1
                            576 	.globl _OBSSEL0
                            577 	.globl _I2CIO
                            578 	.globl _I2CWC
                            579 	.globl _I2CADDR
                            580 	.globl _I2CDATA
                            581 	.globl _I2CSTAT
                            582 	.globl _I2CCFG
                            583 	.globl _OPAMPMC
                            584 	.globl _MONMUX
                            585 	.globl _send_msg
                            586 	.globl _send_msg_to_gateway
                            587 ;--------------------------------------------------------
                            588 ; special function registers
                            589 ;--------------------------------------------------------
                            590 	.area RSEG    (ABS,DATA)
   0000                     591 	.org 0x0000
                    0080    592 _P0	=	0x0080
                    0081    593 _SP	=	0x0081
                    0082    594 _DPL0	=	0x0082
                    0083    595 _DPH0	=	0x0083
                    0084    596 _DPL1	=	0x0084
                    0085    597 _DPH1	=	0x0085
                    0087    598 _PCON	=	0x0087
                    0088    599 _TCON	=	0x0088
                    0090    600 _P1	=	0x0090
                    0092    601 _DPS	=	0x0092
                    0098    602 _S0CON	=	0x0098
                    009A    603 _IEN2	=	0x009a
                    009B    604 _S1CON	=	0x009b
                    00A0    605 _P2	=	0x00a0
                    00A8    606 _IEN0	=	0x00a8
                    00A9    607 _IP0	=	0x00a9
                    00B8    608 _IEN1	=	0x00b8
                    00B9    609 _IP1	=	0x00b9
                    00C0    610 _IRCON	=	0x00c0
                    00D0    611 _PSW	=	0x00d0
                    00E0    612 _ACC	=	0x00e0
                    00E8    613 _IRCON2	=	0x00e8
                    00F0    614 _B	=	0x00f0
                    00B4    615 _ADCCON1	=	0x00b4
                    00B5    616 _ADCCON2	=	0x00b5
                    00B6    617 _ADCCON3	=	0x00b6
                    00BA    618 _ADCL	=	0x00ba
                    00BB    619 _ADCH	=	0x00bb
                    00BC    620 _RNDL	=	0x00bc
                    00BD    621 _RNDH	=	0x00bd
                    00B1    622 _ENCDI	=	0x00b1
                    00B2    623 _ENCDO	=	0x00b2
                    00B3    624 _ENCCS	=	0x00b3
                    00D1    625 _DMAIRQ	=	0x00d1
                    00D2    626 _DMA1CFGL	=	0x00d2
                    00D3    627 _DMA1CFGH	=	0x00d3
                    00D4    628 _DMA0CFGL	=	0x00d4
                    00D5    629 _DMA0CFGH	=	0x00d5
                    00D6    630 _DMAARM	=	0x00d6
                    00D7    631 _DMAREQ	=	0x00d7
                    0089    632 _P0IFG	=	0x0089
                    008A    633 _P1IFG	=	0x008a
                    008B    634 _P2IFG	=	0x008b
                    008C    635 _PICTL	=	0x008c
                    00AB    636 _P0IEN	=	0x00ab
                    008D    637 _P1IEN	=	0x008d
                    00AC    638 _P2IEN	=	0x00ac
                    008F    639 _P0INP	=	0x008f
                    00F1    640 _PERCFG	=	0x00f1
                    00F2    641 _APCFG	=	0x00f2
                    00F3    642 _P0SEL	=	0x00f3
                    00F4    643 _P1SEL	=	0x00f4
                    00F5    644 _P2SEL	=	0x00f5
                    00F6    645 _P1INP	=	0x00f6
                    00F7    646 _P2INP	=	0x00f7
                    00FD    647 _P0DIR	=	0x00fd
                    00FE    648 _P1DIR	=	0x00fe
                    00FF    649 _P2DIR	=	0x00ff
                    00AE    650 _PMUX	=	0x00ae
                    0093    651 _MPAGE	=	0x0093
                    0093    652 __XPAGE	=	0x0093
                    00C7    653 _MEMCTR	=	0x00c7
                    009F    654 _FMAP	=	0x009f
                    009F    655 _PSBANK	=	0x009f
                    0091    656 _RFIRQF1	=	0x0091
                    00D9    657 _RFD	=	0x00d9
                    00E1    658 _RFST	=	0x00e1
                    00E9    659 _RFIRQF0	=	0x00e9
                    00BF    660 _RFERRF	=	0x00bf
                    0095    661 _ST0	=	0x0095
                    0096    662 _ST1	=	0x0096
                    0097    663 _ST2	=	0x0097
                    00AD    664 _STLOAD	=	0x00ad
                    00BE    665 _SLEEPCMD	=	0x00be
                    009D    666 _SLEEPSTA	=	0x009d
                    00C6    667 _CLKCONCMD	=	0x00c6
                    009E    668 _CLKCONSTA	=	0x009e
                    00DA    669 _T1CC0L	=	0x00da
                    00DB    670 _T1CC0H	=	0x00db
                    00DC    671 _T1CC1L	=	0x00dc
                    00DD    672 _T1CC1H	=	0x00dd
                    00DE    673 _T1CC2L	=	0x00de
                    00DF    674 _T1CC2H	=	0x00df
                    00E2    675 _T1CNTL	=	0x00e2
                    00E3    676 _T1CNTH	=	0x00e3
                    00E4    677 _T1CTL	=	0x00e4
                    00E5    678 _T1CCTL0	=	0x00e5
                    00E6    679 _T1CCTL1	=	0x00e6
                    00E7    680 _T1CCTL2	=	0x00e7
                    00AF    681 _T1STAT	=	0x00af
                    0094    682 _T2CTRL	=	0x0094
                    009C    683 _T2EVTCFG	=	0x009c
                    00A1    684 _T2IRQF	=	0x00a1
                    00A2    685 _T2M0	=	0x00a2
                    00A3    686 _T2M1	=	0x00a3
                    00A4    687 _T2MOVF0	=	0x00a4
                    00A5    688 _T2MOVF1	=	0x00a5
                    00A6    689 _T2MOVF2	=	0x00a6
                    00A7    690 _T2IRQM	=	0x00a7
                    00C3    691 _T2MSEL	=	0x00c3
                    00CA    692 _T3CNT	=	0x00ca
                    00CB    693 _T3CTL	=	0x00cb
                    00CC    694 _T3CCTL0	=	0x00cc
                    00CD    695 _T3CC0	=	0x00cd
                    00CE    696 _T3CCTL1	=	0x00ce
                    00CF    697 _T3CC1	=	0x00cf
                    00EA    698 _T4CNT	=	0x00ea
                    00EB    699 _T4CTL	=	0x00eb
                    00EC    700 _T4CCTL0	=	0x00ec
                    00ED    701 _T4CC0	=	0x00ed
                    00EE    702 _T4CCTL1	=	0x00ee
                    00EF    703 _T4CC1	=	0x00ef
                    00D8    704 _TIMIF	=	0x00d8
                    0086    705 _U0CSR	=	0x0086
                    00C1    706 _U0DBUF	=	0x00c1
                    00C2    707 _U0BAUD	=	0x00c2
                    00C4    708 _U0UCR	=	0x00c4
                    00C5    709 _U0GCR	=	0x00c5
                    00F8    710 _U1CSR	=	0x00f8
                    00F9    711 _U1DBUF	=	0x00f9
                    00FA    712 _U1BAUD	=	0x00fa
                    00FB    713 _U1UCR	=	0x00fb
                    00FC    714 _U1GCR	=	0x00fc
                    00C9    715 _WDCTL	=	0x00c9
                            716 ;--------------------------------------------------------
                            717 ; special function bits
                            718 ;--------------------------------------------------------
                            719 	.area RSEG    (ABS,DATA)
   0000                     720 	.org 0x0000
                    0087    721 _P0_7	=	0x0087
                    0086    722 _P0_6	=	0x0086
                    0085    723 _P0_5	=	0x0085
                    0084    724 _P0_4	=	0x0084
                    0083    725 _P0_3	=	0x0083
                    0082    726 _P0_2	=	0x0082
                    0081    727 _P0_1	=	0x0081
                    0080    728 _P0_0	=	0x0080
                    008F    729 _URX1IF	=	0x008f
                    008D    730 _ADCIF	=	0x008d
                    008B    731 _URX0IF	=	0x008b
                    008A    732 _IT1	=	0x008a
                    0089    733 _RFERRIF	=	0x0089
                    0088    734 _IT0	=	0x0088
                    0097    735 _P1_7	=	0x0097
                    0096    736 _P1_6	=	0x0096
                    0095    737 _P1_5	=	0x0095
                    0094    738 _P1_4	=	0x0094
                    0093    739 _P1_3	=	0x0093
                    0092    740 _P1_2	=	0x0092
                    0091    741 _P1_1	=	0x0091
                    0090    742 _P1_0	=	0x0090
                    0099    743 _ENCIF_1	=	0x0099
                    0098    744 _ENCIF_0	=	0x0098
                    00A7    745 _P2_7	=	0x00a7
                    00A6    746 _P2_6	=	0x00a6
                    00A5    747 _P2_5	=	0x00a5
                    00A4    748 _P2_4	=	0x00a4
                    00A3    749 _P2_3	=	0x00a3
                    00A2    750 _P2_2	=	0x00a2
                    00A1    751 _P2_1	=	0x00a1
                    00A0    752 _P2_0	=	0x00a0
                    00AF    753 _EA	=	0x00af
                    00AD    754 _STIE	=	0x00ad
                    00AC    755 _ENCIE	=	0x00ac
                    00AB    756 _URX1IE	=	0x00ab
                    00AA    757 _URX0IE	=	0x00aa
                    00A9    758 _ADCIE	=	0x00a9
                    00A8    759 _RFERRIE	=	0x00a8
                    00BD    760 _P0IE	=	0x00bd
                    00BC    761 _T4IE	=	0x00bc
                    00BB    762 _T3IE	=	0x00bb
                    00BA    763 _T2IE	=	0x00ba
                    00B9    764 _T1IE	=	0x00b9
                    00B8    765 _DMAIE	=	0x00b8
                    00C7    766 _STIF	=	0x00c7
                    00C5    767 _P0IF	=	0x00c5
                    00C4    768 _T4IF	=	0x00c4
                    00C3    769 _T3IF	=	0x00c3
                    00C2    770 _T2IF	=	0x00c2
                    00C1    771 _T1IF	=	0x00c1
                    00C0    772 _DMAIF	=	0x00c0
                    00D7    773 _CY	=	0x00d7
                    00D6    774 _AC	=	0x00d6
                    00D5    775 _F0	=	0x00d5
                    00D4    776 _RS1	=	0x00d4
                    00D3    777 _RS0	=	0x00d3
                    00D2    778 _OV	=	0x00d2
                    00D1    779 _F1	=	0x00d1
                    00D0    780 _P	=	0x00d0
                    00E7    781 _ACC_7	=	0x00e7
                    00E6    782 _ACC_6	=	0x00e6
                    00E5    783 _ACC_5	=	0x00e5
                    00E4    784 _ACC_4	=	0x00e4
                    00E3    785 _ACC_3	=	0x00e3
                    00E2    786 _ACC_2	=	0x00e2
                    00E1    787 _ACC_1	=	0x00e1
                    00E0    788 _ACC_0	=	0x00e0
                    00EC    789 _WDTIF	=	0x00ec
                    00EB    790 _P1IF	=	0x00eb
                    00EA    791 _UTX1IF	=	0x00ea
                    00E9    792 _UTX0IF	=	0x00e9
                    00E8    793 _P2IF	=	0x00e8
                    00F7    794 _B_7	=	0x00f7
                    00F6    795 _B_6	=	0x00f6
                    00F5    796 _B_5	=	0x00f5
                    00F4    797 _B_4	=	0x00f4
                    00F3    798 _B_3	=	0x00f3
                    00F2    799 _B_2	=	0x00f2
                    00F1    800 _B_1	=	0x00f1
                    00F0    801 _B_0	=	0x00f0
                    00DE    802 _OVFIM	=	0x00de
                    00DD    803 _T4CH1IF	=	0x00dd
                    00DC    804 _T4CH0IF	=	0x00dc
                    00DB    805 _T4OVFIF	=	0x00db
                    00DA    806 _T3CH1IF	=	0x00da
                    00D9    807 _T3CH0IF	=	0x00d9
                    00D8    808 _T3OVFIF	=	0x00d8
                    00FF    809 _MODE	=	0x00ff
                    00FE    810 _RE	=	0x00fe
                    00FD    811 _SLAVE	=	0x00fd
                    00FC    812 _FE	=	0x00fc
                    00FB    813 _ERR	=	0x00fb
                    00FA    814 _RX_BYTE	=	0x00fa
                    00F9    815 _TX_BYTE	=	0x00f9
                    00F8    816 _ACTIVE	=	0x00f8
                            817 ;--------------------------------------------------------
                            818 ; overlayable register banks
                            819 ;--------------------------------------------------------
                            820 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     821 	.ds 8
                            822 ;--------------------------------------------------------
                            823 ; internal ram data
                            824 ;--------------------------------------------------------
                            825 	.area DSEG    (DATA)
                            826 ;--------------------------------------------------------
                            827 ; overlayable items in internal ram 
                            828 ;--------------------------------------------------------
                            829 	.area OSEG    (OVR,DATA)
                            830 ;--------------------------------------------------------
                            831 ; indirectly addressable internal ram data
                            832 ;--------------------------------------------------------
                            833 	.area ISEG    (DATA)
                            834 ;--------------------------------------------------------
                            835 ; absolute internal ram data
                            836 ;--------------------------------------------------------
                            837 	.area IABS    (ABS,DATA)
                            838 	.area IABS    (ABS,DATA)
                            839 ;--------------------------------------------------------
                            840 ; bit data
                            841 ;--------------------------------------------------------
                            842 	.area BSEG    (BIT)
                            843 ;--------------------------------------------------------
                            844 ; paged external ram data
                            845 ;--------------------------------------------------------
                            846 	.area PSEG    (PAG,XDATA)
                            847 ;--------------------------------------------------------
                            848 ; external ram data
                            849 ;--------------------------------------------------------
                            850 	.area XSEG    (XDATA)
                    61A6    851 _MONMUX	=	0x61a6
                    61A6    852 _OPAMPMC	=	0x61a6
                    6230    853 _I2CCFG	=	0x6230
                    6231    854 _I2CSTAT	=	0x6231
                    6232    855 _I2CDATA	=	0x6232
                    6233    856 _I2CADDR	=	0x6233
                    6234    857 _I2CWC	=	0x6234
                    6235    858 _I2CIO	=	0x6235
                    6243    859 _OBSSEL0	=	0x6243
                    6244    860 _OBSSEL1	=	0x6244
                    6245    861 _OBSSEL2	=	0x6245
                    6246    862 _OBSSEL3	=	0x6246
                    6247    863 _OBSSEL4	=	0x6247
                    6248    864 _OBSSEL5	=	0x6248
                    6249    865 _CHVER	=	0x6249
                    624A    866 _CHIPID	=	0x624a
                    624B    867 _TESTREG0	=	0x624b
                    6260    868 _DBGDATA	=	0x6260
                    6262    869 _SRCRC	=	0x6262
                    6264    870 _BATTMON	=	0x6264
                    6265    871 _IVCTRL	=	0x6265
                    6270    872 _FCTL	=	0x6270
                    6271    873 _FADDRL	=	0x6271
                    6272    874 _FADDRH	=	0x6272
                    6273    875 _FWDATA	=	0x6273
                    6276    876 _CHIPINFO0	=	0x6276
                    6277    877 _CHIPINFO1	=	0x6277
                    6281    878 _IRCTL	=	0x6281
                    6290    879 _CLD	=	0x6290
                    62A0    880 _XX_T1CCTL0	=	0x62a0
                    62A1    881 _XX_T1CCTL1	=	0x62a1
                    62A2    882 _XX_T1CCTL2	=	0x62a2
                    62A3    883 _T1CCTL3	=	0x62a3
                    62A4    884 _T1CCTL4	=	0x62a4
                    62A6    885 _XX_T1CC0L	=	0x62a6
                    62A7    886 _XX_T1CC0H	=	0x62a7
                    62A8    887 _XX_T1CC1L	=	0x62a8
                    62A9    888 _XX_T1CC1H	=	0x62a9
                    62AA    889 _XX_T1CC2L	=	0x62aa
                    62AB    890 _XX_T1CC2H	=	0x62ab
                    62AC    891 _T1CC3L	=	0x62ac
                    62AD    892 _T1CC3H	=	0x62ad
                    62AE    893 _T1CC4L	=	0x62ae
                    62AF    894 _T1CC4H	=	0x62af
                    62B0    895 _STCC	=	0x62b0
                    62B1    896 _STCS	=	0x62b1
                    62B2    897 _STCV0	=	0x62b2
                    62B3    898 _STCV1	=	0x62b3
                    62B4    899 _STCV2	=	0x62b4
                    62C0    900 _OPAMPC	=	0x62c0
                    62C1    901 _OPAMPS	=	0x62c1
                    62D0    902 _CMPCTL	=	0x62d0
                    6000    903 _RFCORE_RAM	=	0x6000
                    6000    904 _RXFIFO	=	0x6000
                    6080    905 _TXFIFO	=	0x6080
                    6100    906 _SRC_ADDR_TABLE	=	0x6100
                    6160    907 _SRCRESMASK0	=	0x6160
                    6161    908 _SRCRESMASK1	=	0x6161
                    6162    909 _SRCRESMASK2	=	0x6162
                    6163    910 _SRCRESINDEX	=	0x6163
                    6164    911 _SRCEXTPENDEN0	=	0x6164
                    6165    912 _SRCEXTPENDEN1	=	0x6165
                    6166    913 _SRCEXTPENDEN2	=	0x6166
                    6167    914 _SRCSHORTPENDEN0	=	0x6167
                    6168    915 _SRCSHORTPENDEN1	=	0x6168
                    6169    916 _SRCSHORTPENDEN2	=	0x6169
                    616A    917 _EXT_ADDR0	=	0x616a
                    616B    918 _EXT_ADDR1	=	0x616b
                    616C    919 _EXT_ADDR2	=	0x616c
                    616D    920 _EXT_ADDR3	=	0x616d
                    616E    921 _EXT_ADDR4	=	0x616e
                    616F    922 _EXT_ADDR5	=	0x616f
                    6170    923 _EXT_ADDR6	=	0x6170
                    6171    924 _EXT_ADDR7	=	0x6171
                    6172    925 _PAN_ID0	=	0x6172
                    6173    926 _PAN_ID1	=	0x6173
                    6174    927 _SHORT_ADDR0	=	0x6174
                    6175    928 _SHORT_ADDR1	=	0x6175
                    6180    929 _FRMFILT0	=	0x6180
                    6181    930 _FRMFILT1	=	0x6181
                    6182    931 _SRCMATCH	=	0x6182
                    6183    932 _SRCSHORTEN0	=	0x6183
                    6184    933 _SRCSHORTEN1	=	0x6184
                    6185    934 _SRCSHORTEN2	=	0x6185
                    6186    935 _SRCEXTEN0	=	0x6186
                    6187    936 _SRCEXTEN1	=	0x6187
                    6188    937 _SRCEXTEN2	=	0x6188
                    6189    938 _FRMCTRL0	=	0x6189
                    618A    939 _FRMCTRL1	=	0x618a
                    618B    940 _RXENABLE	=	0x618b
                    618C    941 _RXMASKSET	=	0x618c
                    618D    942 _RXMASKCLR	=	0x618d
                    618E    943 _FREQTUNE	=	0x618e
                    618F    944 _FREQCTRL	=	0x618f
                    6190    945 _TXPOWER	=	0x6190
                    6191    946 _TXCTRL	=	0x6191
                    6192    947 _FSMSTAT0	=	0x6192
                    6193    948 _FSMSTAT1	=	0x6193
                    6194    949 _FIFOPCTRL	=	0x6194
                    6195    950 _FSMCTRL	=	0x6195
                    6196    951 _CCACTRL0	=	0x6196
                    6197    952 _CCACTRL1	=	0x6197
                    6198    953 _RSSI	=	0x6198
                    6199    954 _RSSISTAT	=	0x6199
                    619A    955 _RXFIRST	=	0x619a
                    619B    956 _RXFIFOCNT	=	0x619b
                    619C    957 _TXFIFOCNT	=	0x619c
                    619D    958 _RXFIRST_PTR	=	0x619d
                    619E    959 _RXLAST_PTR	=	0x619e
                    619F    960 _RXP1_PTR	=	0x619f
                    61A1    961 _TXFIRST_PTR	=	0x61a1
                    61A2    962 _TXLAST_PTR	=	0x61a2
                    61A3    963 _RFIRQM0	=	0x61a3
                    61A4    964 _RFIRQM1	=	0x61a4
                    61A5    965 _RFERRM	=	0x61a5
                    61A7    966 _RFRND	=	0x61a7
                    61A8    967 _MDMCTRL0	=	0x61a8
                    61A9    968 _MDMCTRL1	=	0x61a9
                    61AA    969 _FREQEST	=	0x61aa
                    61AB    970 _RXCTRL	=	0x61ab
                    61AC    971 _FSCTRL	=	0x61ac
                    61AD    972 _FSCAL0	=	0x61ad
                    61AE    973 _FSCAL1	=	0x61ae
                    61AF    974 _FSCAL2	=	0x61af
                    61B0    975 _FSCAL3	=	0x61b0
                    61B1    976 _AGCCTRL0	=	0x61b1
                    61B2    977 _AGCCTRL1	=	0x61b2
                    61B3    978 _AGCCTRL2	=	0x61b3
                    61B4    979 _AGCCTRL3	=	0x61b4
                    61B5    980 _ADCTEST0	=	0x61b5
                    61B6    981 _ADCTEST1	=	0x61b6
                    61B7    982 _ADCTEST2	=	0x61b7
                    61B8    983 _MDMTEST0	=	0x61b8
                    61B9    984 _MDMTEST1	=	0x61b9
                    61BA    985 _DACTEST0	=	0x61ba
                    61BB    986 _DACTEST1	=	0x61bb
                    61BC    987 _DACTEST2	=	0x61bc
                    61BD    988 _ATEST	=	0x61bd
                    61BE    989 _PTEST0	=	0x61be
                    61BF    990 _PTEST1	=	0x61bf
                    61FA    991 _TXFILTCFG	=	0x61fa
                    61EB    992 _RFC_OBS_CTRL0	=	0x61eb
                    61EC    993 _RFC_OBS_CTRL1	=	0x61ec
                    61ED    994 _RFC_OBS_CTRL2	=	0x61ed
                    61C0    995 _CSPPROG0	=	0x61c0
                    61C1    996 _CSPPROG1	=	0x61c1
                    61C2    997 _CSPPROG2	=	0x61c2
                    61C3    998 _CSPPROG3	=	0x61c3
                    61C4    999 _CSPPROG4	=	0x61c4
                    61C5   1000 _CSPPROG5	=	0x61c5
                    61C6   1001 _CSPPROG6	=	0x61c6
                    61C7   1002 _CSPPROG7	=	0x61c7
                    61C8   1003 _CSPPROG8	=	0x61c8
                    61C9   1004 _CSPPROG9	=	0x61c9
                    61CA   1005 _CSPPROG10	=	0x61ca
                    61CB   1006 _CSPPROG11	=	0x61cb
                    61CC   1007 _CSPPROG12	=	0x61cc
                    61CD   1008 _CSPPROG13	=	0x61cd
                    61CE   1009 _CSPPROG14	=	0x61ce
                    61CF   1010 _CSPPROG15	=	0x61cf
                    61D0   1011 _CSPPROG16	=	0x61d0
                    61D1   1012 _CSPPROG17	=	0x61d1
                    61D2   1013 _CSPPROG18	=	0x61d2
                    61D3   1014 _CSPPROG19	=	0x61d3
                    61D4   1015 _CSPPROG20	=	0x61d4
                    61D5   1016 _CSPPROG21	=	0x61d5
                    61D6   1017 _CSPPROG22	=	0x61d6
                    61D7   1018 _CSPPROG23	=	0x61d7
                    61E0   1019 _CSPCTRL	=	0x61e0
                    61E1   1020 _CSPSTAT	=	0x61e1
                    61E2   1021 _CSPX	=	0x61e2
                    61E3   1022 _CSPY	=	0x61e3
                    61E4   1023 _CSPZ	=	0x61e4
                    61E5   1024 _CSPT	=	0x61e5
                    6200   1025 _USBADDR	=	0x6200
                    6201   1026 _USBPOW	=	0x6201
                    6202   1027 _USBIIF	=	0x6202
                    6204   1028 _USBOIF	=	0x6204
                    6206   1029 _USBCIF	=	0x6206
                    6207   1030 _USBIIE	=	0x6207
                    6209   1031 _USBOIE	=	0x6209
                    620B   1032 _USBCIE	=	0x620b
                    620C   1033 _USBFRML	=	0x620c
                    620D   1034 _USBFRMH	=	0x620d
                    620E   1035 _USBINDEX	=	0x620e
                    620F   1036 _USBCTRL	=	0x620f
                    6210   1037 _USBMAXI	=	0x6210
                    6211   1038 _USBCS0	=	0x6211
                    6211   1039 _USBCSIL	=	0x6211
                    6212   1040 _USBCSIH	=	0x6212
                    6213   1041 _USBMAXO	=	0x6213
                    6214   1042 _USBCSOL	=	0x6214
                    6215   1043 _USBCSOH	=	0x6215
                    6216   1044 _USBCNT0	=	0x6216
                    6216   1045 _USBCNTL	=	0x6216
                    6217   1046 _USBCNTH	=	0x6217
                    6220   1047 _USBF0	=	0x6220
                    6222   1048 _USBF1	=	0x6222
                    6224   1049 _USBF2	=	0x6224
                    6226   1050 _USBF3	=	0x6226
                    6228   1051 _USBF4	=	0x6228
                    622A   1052 _USBF5	=	0x622a
                    7080   1053 _X_P0	=	0x7080
                    7086   1054 _X_U0CSR	=	0x7086
                    7089   1055 _X_P0IFG	=	0x7089
                    708A   1056 _X_P1IFG	=	0x708a
                    708B   1057 _X_P2IFG	=	0x708b
                    708C   1058 _X_PICTL	=	0x708c
                    708D   1059 _X_P1IEN	=	0x708d
                    708F   1060 _X_P0INP	=	0x708f
                    7090   1061 _X_P1	=	0x7090
                    7091   1062 _X_RFIRQF1	=	0x7091
                    7093   1063 _X_MPAGE	=	0x7093
                    7093   1064 _X__XPAGE	=	0x7093
                    7094   1065 _X_T2CTRL	=	0x7094
                    7095   1066 _X_ST0	=	0x7095
                    7096   1067 _X_ST1	=	0x7096
                    7097   1068 _X_ST2	=	0x7097
                    709C   1069 _X_T2EVTCFG	=	0x709c
                    709D   1070 _X_SLEEPSTA	=	0x709d
                    709E   1071 _X_CLKCONSTA	=	0x709e
                    709F   1072 _X_FMAP	=	0x709f
                    709F   1073 _X_PSBANK	=	0x709f
                    70A0   1074 _X_P2	=	0x70a0
                    70A1   1075 _X_T2IRQF	=	0x70a1
                    70A2   1076 _X_T2M0	=	0x70a2
                    70A3   1077 _X_T2M1	=	0x70a3
                    70A4   1078 _X_T2MOVF0	=	0x70a4
                    70A5   1079 _X_T2MOVF1	=	0x70a5
                    70A6   1080 _X_T2MOVF2	=	0x70a6
                    70A7   1081 _X_T2IRQM	=	0x70a7
                    70AB   1082 _X_P0IEN	=	0x70ab
                    70AC   1083 _X_P2IEN	=	0x70ac
                    70AD   1084 _X_STLOAD	=	0x70ad
                    70AE   1085 _X_PMUX	=	0x70ae
                    70AF   1086 _X_T1STAT	=	0x70af
                    70B1   1087 _X_ENCDI	=	0x70b1
                    70B2   1088 _X_ENCDO	=	0x70b2
                    70B3   1089 _X_ENCCS	=	0x70b3
                    70B4   1090 _X_ADCCON1	=	0x70b4
                    70B5   1091 _X_ADCCON2	=	0x70b5
                    70B6   1092 _X_ADCCON3	=	0x70b6
                    70BA   1093 _X_ADCL	=	0x70ba
                    70BB   1094 _X_ADCH	=	0x70bb
                    70BC   1095 _X_RNDL	=	0x70bc
                    70BD   1096 _X_RNDH	=	0x70bd
                    70BE   1097 _X_SLEEPCMD	=	0x70be
                    70BF   1098 _X_RFERRF	=	0x70bf
                    70C1   1099 _X_U0DBUF	=	0x70c1
                    70C2   1100 _X_U0BAUD	=	0x70c2
                    70C3   1101 _X_T2MSEL	=	0x70c3
                    70C4   1102 _X_U0UCR	=	0x70c4
                    70C5   1103 _X_U0GCR	=	0x70c5
                    70C6   1104 _X_CLKCONCMD	=	0x70c6
                    70C7   1105 _X_MEMCTR	=	0x70c7
                    70C9   1106 _X_WDCTL	=	0x70c9
                    70CA   1107 _X_T3CNT	=	0x70ca
                    70CB   1108 _X_T3CTL	=	0x70cb
                    70CC   1109 _X_T3CCTL0	=	0x70cc
                    70CD   1110 _X_T3CC0	=	0x70cd
                    70CE   1111 _X_T3CCTL1	=	0x70ce
                    70CF   1112 _X_T3CC1	=	0x70cf
                    70D1   1113 _X_DMAIRQ	=	0x70d1
                    70D2   1114 _X_DMA1CFGL	=	0x70d2
                    70D3   1115 _X_DMA1CFGH	=	0x70d3
                    70D4   1116 _X_DMA0CFGL	=	0x70d4
                    70D5   1117 _X_DMA0CFGH	=	0x70d5
                    70D6   1118 _X_DMAARM	=	0x70d6
                    70D7   1119 _X_DMAREQ	=	0x70d7
                    70D8   1120 _X_TIMIF	=	0x70d8
                    70D9   1121 _X_RFD	=	0x70d9
                    70DA   1122 _X_T1CC0L	=	0x70da
                    70DB   1123 _X_T1CC0H	=	0x70db
                    70DC   1124 _X_T1CC1L	=	0x70dc
                    70DD   1125 _X_T1CC1H	=	0x70dd
                    70DE   1126 _X_T1CC2L	=	0x70de
                    70DF   1127 _X_T1CC2H	=	0x70df
                    70E1   1128 _X_RFST	=	0x70e1
                    70E2   1129 _X_T1CNTL	=	0x70e2
                    70E3   1130 _X_T1CNTH	=	0x70e3
                    70E4   1131 _X_T1CTL	=	0x70e4
                    70E5   1132 _X_T1CCTL0	=	0x70e5
                    70E6   1133 _X_T1CCTL1	=	0x70e6
                    70E7   1134 _X_T1CCTL2	=	0x70e7
                    70E9   1135 _X_RFIRQF0	=	0x70e9
                    70EA   1136 _X_T4CNT	=	0x70ea
                    70EB   1137 _X_T4CTL	=	0x70eb
                    70EC   1138 _X_T4CCTL0	=	0x70ec
                    70ED   1139 _X_T4CC0	=	0x70ed
                    70EE   1140 _X_T4CCTL1	=	0x70ee
                    70EF   1141 _X_T4CC1	=	0x70ef
                    70F1   1142 _X_PERCFG	=	0x70f1
                    70F2   1143 _X_APCFG	=	0x70f2
                    70F3   1144 _X_P0SEL	=	0x70f3
                    70F4   1145 _X_P1SEL	=	0x70f4
                    70F5   1146 _X_P2SEL	=	0x70f5
                    70F6   1147 _X_P1INP	=	0x70f6
                    70F7   1148 _X_P2INP	=	0x70f7
                    70F8   1149 _X_U1CSR	=	0x70f8
                    70F9   1150 _X_U1DBUF	=	0x70f9
                    70FA   1151 _X_U1BAUD	=	0x70fa
                    70FB   1152 _X_U1UCR	=	0x70fb
                    70FC   1153 _X_U1GCR	=	0x70fc
                    70FD   1154 _X_P0DIR	=	0x70fd
                    70FE   1155 _X_P1DIR	=	0x70fe
                    70FF   1156 _X_P2DIR	=	0x70ff
                    7800   1157 _X_INFOPAGE	=	0x7800
                    780C   1158 _X_IEEE_ADDR	=	0x780c
   0000                    1159 _output_buf::
   0000                    1160 	.ds 290
   0122                    1161 _client_conn:
   0122                    1162 	.ds 3
   0125                    1163 _server_ipaddr:
   0125                    1164 	.ds 16
   0135                    1165 _process_thread_coconut_sensor_process_et_1_1:
   0135                    1166 	.ds 10
                           1167 ;--------------------------------------------------------
                           1168 ; absolute external ram data
                           1169 ;--------------------------------------------------------
                           1170 	.area XABS    (ABS,XDATA)
                           1171 ;--------------------------------------------------------
                           1172 ; external initialized ram data
                           1173 ;--------------------------------------------------------
                           1174 	.area XISEG   (XDATA)
   0000                    1175 _auth_success::
   0000                    1176 	.ds 1
   0001                    1177 _reg_success::
   0001                    1178 	.ds 1
   0002                    1179 _get_global_addr_success::
   0002                    1180 	.ds 1
   0003                    1181 _coconut_sensor_process::
   0003                    1182 	.ds 10
                           1183 	.area HOME    (CODE)
                           1184 	.area GSINIT0 (CODE)
                           1185 	.area GSINIT1 (CODE)
                           1186 	.area GSINIT2 (CODE)
                           1187 	.area GSINIT3 (CODE)
                           1188 	.area GSINIT4 (CODE)
                           1189 	.area GSINIT5 (CODE)
                           1190 	.area GSINIT  (CODE)
                           1191 	.area GSFINAL (CODE)
                           1192 	.area CSEG    (CODE)
                           1193 ;--------------------------------------------------------
                           1194 ; global & static initialisations
                           1195 ;--------------------------------------------------------
                           1196 	.area HOME    (CODE)
                           1197 	.area GSINIT  (CODE)
                           1198 	.area GSFINAL (CODE)
                           1199 	.area GSINIT  (CODE)
                           1200 ;--------------------------------------------------------
                           1201 ; Home
                           1202 ;--------------------------------------------------------
                           1203 	.area HOME    (CODE)
                           1204 	.area HOME    (CODE)
                           1205 ;--------------------------------------------------------
                           1206 ; code
                           1207 ;--------------------------------------------------------
                           1208 	.area BANK1   (CODE)
                           1209 ;------------------------------------------------------------
                           1210 ;Allocation info for local variables in function 'debug_print_msg'
                           1211 ;------------------------------------------------------------
                           1212 ;len                       Allocated to stack - sp -7
                           1213 ;msg                       Allocated to stack - sp -2
                           1214 ;i                         Allocated to registers r3 r4 
                           1215 ;------------------------------------------------------------
                           1216 ;	main.c:45: static void debug_print_msg(uint8_t *msg, uint16_t len)
                           1217 ;	-----------------------------------------
                           1218 ;	 function debug_print_msg
                           1219 ;	-----------------------------------------
   0000                    1220 _debug_print_msg:
                    0007   1221 	ar7 = 0x07
                    0006   1222 	ar6 = 0x06
                    0005   1223 	ar5 = 0x05
                    0004   1224 	ar4 = 0x04
                    0003   1225 	ar3 = 0x03
                    0002   1226 	ar2 = 0x02
                    0001   1227 	ar1 = 0x01
                    0000   1228 	ar0 = 0x00
   0000 C0 82              1229 	push	dpl
   0002 C0 83              1230 	push	dph
   0004 C0 F0              1231 	push	b
                           1232 ;	main.c:49: PRINTF("Message len:%d, content:", len);
   0006 E5 81              1233 	mov	a,sp
   0008 24 F9              1234 	add	a,#0xf9
   000A F8                 1235 	mov	r0,a
   000B E6                 1236 	mov	a,@r0
   000C C0 E0              1237 	push	acc
   000E 08                 1238 	inc	r0
   000F E6                 1239 	mov	a,@r0
   0010 C0 E0              1240 	push	acc
   0012 74r06              1241 	mov	a,#__str_0
   0014 C0 E0              1242 	push	acc
   0016 74s00              1243 	mov	a,#(__str_0 >> 8)
   0018 C0 E0              1244 	push	acc
   001A 74 80              1245 	mov	a,#0x80
   001C C0 E0              1246 	push	acc
   001E 78r00              1247 	mov	r0,#_printf
   0020 79s00              1248 	mov	r1,#(_printf >> 8)
   0022 7As00              1249 	mov	r2,#(_printf >> 16)
   0024 12s00r00           1250 	lcall	__sdcc_banked_call
   0027 E5 81              1251 	mov	a,sp
   0029 24 FB              1252 	add	a,#0xfb
   002B F5 81              1253 	mov	sp,a
                           1254 ;	main.c:50: for(i = 0; i < len; i++) {
   002D 7B 00              1255 	mov	r3,#0x00
   002F 7C 00              1256 	mov	r4,#0x00
   0031                    1257 00101$:
   0031 E5 81              1258 	mov	a,sp
   0033 24 F9              1259 	add	a,#0xf9
   0035 F8                 1260 	mov	r0,a
   0036 C3                 1261 	clr	c
   0037 EB                 1262 	mov	a,r3
   0038 96                 1263 	subb	a,@r0
   0039 EC                 1264 	mov	a,r4
   003A 08                 1265 	inc	r0
   003B 96                 1266 	subb	a,@r0
   003C 50 48              1267 	jnc	00104$
                           1268 ;	main.c:51: PRINTF("%x ", msg[i]);
   003E A8 81              1269 	mov	r0,sp
   0040 18                 1270 	dec	r0
   0041 18                 1271 	dec	r0
   0042 EB                 1272 	mov	a,r3
   0043 26                 1273 	add	a,@r0
   0044 FA                 1274 	mov	r2,a
   0045 EC                 1275 	mov	a,r4
   0046 08                 1276 	inc	r0
   0047 36                 1277 	addc	a,@r0
   0048 FE                 1278 	mov	r6,a
   0049 08                 1279 	inc	r0
   004A 86 07              1280 	mov	ar7,@r0
   004C 8A 82              1281 	mov	dpl,r2
   004E 8E 83              1282 	mov	dph,r6
   0050 8F F0              1283 	mov	b,r7
   0052 12s00r00           1284 	lcall	__gptrget
   0055 FA                 1285 	mov	r2,a
   0056 7F 00              1286 	mov	r7,#0x00
   0058 C0 04              1287 	push	ar4
   005A C0 03              1288 	push	ar3
   005C C0 02              1289 	push	ar2
   005E C0 07              1290 	push	ar7
   0060 74r1F              1291 	mov	a,#__str_1
   0062 C0 E0              1292 	push	acc
   0064 74s00              1293 	mov	a,#(__str_1 >> 8)
   0066 C0 E0              1294 	push	acc
   0068 74 80              1295 	mov	a,#0x80
   006A C0 E0              1296 	push	acc
   006C 78r00              1297 	mov	r0,#_printf
   006E 79s00              1298 	mov	r1,#(_printf >> 8)
   0070 7As00              1299 	mov	r2,#(_printf >> 16)
   0072 12s00r00           1300 	lcall	__sdcc_banked_call
   0075 E5 81              1301 	mov	a,sp
   0077 24 FB              1302 	add	a,#0xfb
   0079 F5 81              1303 	mov	sp,a
   007B D0 03              1304 	pop	ar3
   007D D0 04              1305 	pop	ar4
                           1306 ;	main.c:50: for(i = 0; i < len; i++) {
   007F 0B                 1307 	inc	r3
   0080 BB 00 AE           1308 	cjne	r3,#0x00,00101$
   0083 0C                 1309 	inc	r4
   0084 80 AB              1310 	sjmp	00101$
   0086                    1311 00104$:
                           1312 ;	main.c:53: PRINTF("\n");
   0086 74r23              1313 	mov	a,#__str_2
   0088 C0 E0              1314 	push	acc
   008A 74s00              1315 	mov	a,#(__str_2 >> 8)
   008C C0 E0              1316 	push	acc
   008E 74 80              1317 	mov	a,#0x80
   0090 C0 E0              1318 	push	acc
   0092 78r00              1319 	mov	r0,#_printf
   0094 79s00              1320 	mov	r1,#(_printf >> 8)
   0096 7As00              1321 	mov	r2,#(_printf >> 16)
   0098 12s00r00           1322 	lcall	__sdcc_banked_call
   009B 15 81              1323 	dec	sp
   009D 15 81              1324 	dec	sp
   009F 15 81              1325 	dec	sp
   00A1 15 81              1326 	dec	sp
   00A3 15 81              1327 	dec	sp
   00A5 15 81              1328 	dec	sp
   00A7 02s00r00           1329 	ljmp	__sdcc_banked_ret
                           1330 ;------------------------------------------------------------
                           1331 ;Allocation info for local variables in function 'send_msg'
                           1332 ;------------------------------------------------------------
                           1333 ;len                       Allocated to stack - sp -6
                           1334 ;peer_ipaddr               Allocated to stack - sp -9
                           1335 ;data                      Allocated to registers r5 r6 r7 
                           1336 ;sloc0                     Allocated to stack - sp -1
                           1337 ;------------------------------------------------------------
                           1338 ;	main.c:56: void send_msg(uint8_t *data, uint16_t len, uip_ipaddr_t *peer_ipaddr)
                           1339 ;	-----------------------------------------
                           1340 ;	 function send_msg
                           1341 ;	-----------------------------------------
   00AA                    1342 _send_msg:
   00AA 05 81              1343 	inc	sp
   00AC 05 81              1344 	inc	sp
   00AE AD 82              1345 	mov	r5,dpl
   00B0 AE 83              1346 	mov	r6,dph
   00B2 AF F0              1347 	mov	r7,b
                           1348 ;	main.c:59: uip_udp_packet_sendto(client_conn, data, len,
   00B4 E5 81              1349 	mov	a,sp
   00B6 24 FA              1350 	add	a,#0xfa
   00B8 F8                 1351 	mov	r0,a
   00B9 A9 81              1352 	mov	r1,sp
   00BB 19                 1353 	dec	r1
   00BC E6                 1354 	mov	a,@r0
   00BD F7                 1355 	mov	@r1,a
   00BE 08                 1356 	inc	r0
   00BF 09                 1357 	inc	r1
   00C0 E6                 1358 	mov	a,@r0
   00C1 F7                 1359 	mov	@r1,a
   00C2 90s01r22           1360 	mov	dptr,#_client_conn
   00C5 E0                 1361 	movx	a,@dptr
   00C6 FA                 1362 	mov	r2,a
   00C7 A3                 1363 	inc	dptr
   00C8 E0                 1364 	movx	a,@dptr
   00C9 FB                 1365 	mov	r3,a
   00CA A3                 1366 	inc	dptr
   00CB E0                 1367 	movx	a,@dptr
   00CC FC                 1368 	mov	r4,a
   00CD 74 16              1369 	mov	a,#0x16
   00CF C0 E0              1370 	push	acc
   00D1 74 2E              1371 	mov	a,#0x2E
   00D3 C0 E0              1372 	push	acc
   00D5 E5 81              1373 	mov	a,sp
   00D7 24 F5              1374 	add	a,#0xf5
   00D9 F8                 1375 	mov	r0,a
   00DA E6                 1376 	mov	a,@r0
   00DB C0 E0              1377 	push	acc
   00DD 08                 1378 	inc	r0
   00DE E6                 1379 	mov	a,@r0
   00DF C0 E0              1380 	push	acc
   00E1 08                 1381 	inc	r0
   00E2 E6                 1382 	mov	a,@r0
   00E3 C0 E0              1383 	push	acc
   00E5 E5 81              1384 	mov	a,sp
   00E7 24 FA              1385 	add	a,#0xfa
   00E9 F8                 1386 	mov	r0,a
   00EA E6                 1387 	mov	a,@r0
   00EB C0 E0              1388 	push	acc
   00ED 08                 1389 	inc	r0
   00EE E6                 1390 	mov	a,@r0
   00EF C0 E0              1391 	push	acc
   00F1 C0 05              1392 	push	ar5
   00F3 C0 06              1393 	push	ar6
   00F5 C0 07              1394 	push	ar7
   00F7 8A 82              1395 	mov	dpl,r2
   00F9 8B 83              1396 	mov	dph,r3
   00FB 8C F0              1397 	mov	b,r4
   00FD 78r00              1398 	mov	r0,#_uip_udp_packet_sendto
   00FF 79s00              1399 	mov	r1,#(_uip_udp_packet_sendto >> 8)
   0101 7As00              1400 	mov	r2,#(_uip_udp_packet_sendto >> 16)
   0103 12s00r00           1401 	lcall	__sdcc_banked_call
   0106 E5 81              1402 	mov	a,sp
   0108 24 F6              1403 	add	a,#0xf6
   010A F5 81              1404 	mov	sp,a
                           1405 ;	main.c:63: return;
   010C 15 81              1406 	dec	sp
   010E 15 81              1407 	dec	sp
   0110 02s00r00           1408 	ljmp	__sdcc_banked_ret
                           1409 ;------------------------------------------------------------
                           1410 ;Allocation info for local variables in function 'send_msg_to_gateway'
                           1411 ;------------------------------------------------------------
                           1412 ;len                       Allocated to stack - sp -6
                           1413 ;data                      Allocated to registers r5 r6 r7 
                           1414 ;sloc0                     Allocated to stack - sp -1
                           1415 ;------------------------------------------------------------
                           1416 ;	main.c:66: void send_msg_to_gateway(uint8_t *data, uint16_t len)
                           1417 ;	-----------------------------------------
                           1418 ;	 function send_msg_to_gateway
                           1419 ;	-----------------------------------------
   0113                    1420 _send_msg_to_gateway:
   0113 05 81              1421 	inc	sp
   0115 05 81              1422 	inc	sp
   0117 AD 82              1423 	mov	r5,dpl
   0119 AE 83              1424 	mov	r6,dph
   011B AF F0              1425 	mov	r7,b
                           1426 ;	main.c:70: &server_ipaddr, UIP_HTONS(COCONUT_UDP_SERVER_PORT));
                           1427 ;	main.c:69: uip_udp_packet_sendto(client_conn, data, len,
   011D E5 81              1428 	mov	a,sp
   011F 24 FA              1429 	add	a,#0xfa
   0121 F8                 1430 	mov	r0,a
   0122 A9 81              1431 	mov	r1,sp
   0124 19                 1432 	dec	r1
   0125 E6                 1433 	mov	a,@r0
   0126 F7                 1434 	mov	@r1,a
   0127 08                 1435 	inc	r0
   0128 09                 1436 	inc	r1
   0129 E6                 1437 	mov	a,@r0
   012A F7                 1438 	mov	@r1,a
   012B 90s01r22           1439 	mov	dptr,#_client_conn
   012E E0                 1440 	movx	a,@dptr
   012F FA                 1441 	mov	r2,a
   0130 A3                 1442 	inc	dptr
   0131 E0                 1443 	movx	a,@dptr
   0132 FB                 1444 	mov	r3,a
   0133 A3                 1445 	inc	dptr
   0134 E0                 1446 	movx	a,@dptr
   0135 FC                 1447 	mov	r4,a
   0136 74 16              1448 	mov	a,#0x16
   0138 C0 E0              1449 	push	acc
   013A 74 2E              1450 	mov	a,#0x2E
   013C C0 E0              1451 	push	acc
   013E 74r25              1452 	mov	a,#_server_ipaddr
   0140 C0 E0              1453 	push	acc
   0142 74s01              1454 	mov	a,#(_server_ipaddr >> 8)
   0144 C0 E0              1455 	push	acc
   0146 E4                 1456 	clr	a
   0147 C0 E0              1457 	push	acc
   0149 E5 81              1458 	mov	a,sp
   014B 24 FA              1459 	add	a,#0xfa
   014D F8                 1460 	mov	r0,a
   014E E6                 1461 	mov	a,@r0
   014F C0 E0              1462 	push	acc
   0151 08                 1463 	inc	r0
   0152 E6                 1464 	mov	a,@r0
   0153 C0 E0              1465 	push	acc
   0155 C0 05              1466 	push	ar5
   0157 C0 06              1467 	push	ar6
   0159 C0 07              1468 	push	ar7
   015B 8A 82              1469 	mov	dpl,r2
   015D 8B 83              1470 	mov	dph,r3
   015F 8C F0              1471 	mov	b,r4
   0161 78r00              1472 	mov	r0,#_uip_udp_packet_sendto
   0163 79s00              1473 	mov	r1,#(_uip_udp_packet_sendto >> 8)
   0165 7As00              1474 	mov	r2,#(_uip_udp_packet_sendto >> 16)
   0167 12s00r00           1475 	lcall	__sdcc_banked_call
   016A E5 81              1476 	mov	a,sp
   016C 24 F6              1477 	add	a,#0xf6
   016E F5 81              1478 	mov	sp,a
                           1479 ;	main.c:73: return;
   0170 15 81              1480 	dec	sp
   0172 15 81              1481 	dec	sp
   0174 02s00r00           1482 	ljmp	__sdcc_banked_ret
                           1483 ;------------------------------------------------------------
                           1484 ;Allocation info for local variables in function 'discover_request_handler'
                           1485 ;------------------------------------------------------------
                           1486 ;len                       Allocated to registers r6 r7 
                           1487 ;------------------------------------------------------------
                           1488 ;	main.c:78: discover_request_handler()
                           1489 ;	-----------------------------------------
                           1490 ;	 function discover_request_handler
                           1491 ;	-----------------------------------------
   0177                    1492 _discover_request_handler:
                           1493 ;	main.c:82: len = create_new_device_msg(output_buf, MAX_PAYLOAD_LEN, TYPE_RESPONSE);
   0177 74 01              1494 	mov	a,#0x01
   0179 C0 E0              1495 	push	acc
   017B 74 22              1496 	mov	a,#0x22
   017D C0 E0              1497 	push	acc
   017F 74 01              1498 	mov	a,#0x01
   0181 C0 E0              1499 	push	acc
   0183 90s00r00           1500 	mov	dptr,#_output_buf
   0186 75 F0 00           1501 	mov	b,#0x00
   0189 78r00              1502 	mov	r0,#_create_new_device_msg
   018B 79s00              1503 	mov	r1,#(_create_new_device_msg >> 8)
   018D 7As00              1504 	mov	r2,#(_create_new_device_msg >> 16)
   018F 12s00r00           1505 	lcall	__sdcc_banked_call
   0192 AE 82              1506 	mov	r6,dpl
   0194 AF 83              1507 	mov	r7,dph
   0196 15 81              1508 	dec	sp
   0198 15 81              1509 	dec	sp
   019A 15 81              1510 	dec	sp
                           1511 ;	main.c:83: if (len > 0) {
   019C EE                 1512 	mov	a,r6
   019D 4F                 1513 	orl	a,r7
   019E 60 2C              1514 	jz	00103$
                           1515 ;	main.c:84: send_msg(output_buf, len, &UIP_IP_BUF->srcipaddr);
   01A0 7Cr00              1516 	mov	r4,#_uip_aligned_buf
   01A2 7Ds00              1517 	mov	r5,#(_uip_aligned_buf >> 8)
   01A4 74 08              1518 	mov	a,#0x08
   01A6 2C                 1519 	add	a,r4
   01A7 FC                 1520 	mov	r4,a
   01A8 E4                 1521 	clr	a
   01A9 3D                 1522 	addc	a,r5
   01AA FD                 1523 	mov	r5,a
   01AB 7B 00              1524 	mov	r3,#0x00
   01AD C0 04              1525 	push	ar4
   01AF C0 05              1526 	push	ar5
   01B1 C0 03              1527 	push	ar3
   01B3 C0 06              1528 	push	ar6
   01B5 C0 07              1529 	push	ar7
   01B7 90s00r00           1530 	mov	dptr,#_output_buf
   01BA 75 F0 00           1531 	mov	b,#0x00
   01BD 78rAA              1532 	mov	r0,#_send_msg
   01BF 79s00              1533 	mov	r1,#(_send_msg >> 8)
   01C1 7As00              1534 	mov	r2,#(_send_msg >> 16)
   01C3 12s00r00           1535 	lcall	__sdcc_banked_call
   01C6 E5 81              1536 	mov	a,sp
   01C8 24 FB              1537 	add	a,#0xfb
   01CA F5 81              1538 	mov	sp,a
   01CC                    1539 00103$:
   01CC 02s00r00           1540 	ljmp	__sdcc_banked_ret
                           1541 ;------------------------------------------------------------
                           1542 ;Allocation info for local variables in function 'register_response_handler'
                           1543 ;------------------------------------------------------------
                           1544 ;parameters                Allocated to registers r5 r6 r7 
                           1545 ;root                      Allocated to registers r5 r6 r7 
                           1546 ;sub                       Allocated to stack - sp -2
                           1547 ;------------------------------------------------------------
                           1548 ;	main.c:90: register_response_handler(uint8_t *parameters)
                           1549 ;	-----------------------------------------
                           1550 ;	 function register_response_handler
                           1551 ;	-----------------------------------------
   01CF                    1552 _register_response_handler:
   01CF 05 81              1553 	inc	sp
   01D1 05 81              1554 	inc	sp
   01D3 05 81              1555 	inc	sp
   01D5 AD 82              1556 	mov	r5,dpl
   01D7 AE 83              1557 	mov	r6,dph
   01D9 AF F0              1558 	mov	r7,b
                           1559 ;	main.c:94: PRINTF("register response:%s\n", parameters);
   01DB C0 07              1560 	push	ar7
   01DD C0 06              1561 	push	ar6
   01DF C0 05              1562 	push	ar5
   01E1 C0 05              1563 	push	ar5
   01E3 C0 06              1564 	push	ar6
   01E5 C0 07              1565 	push	ar7
   01E7 74r25              1566 	mov	a,#__str_3
   01E9 C0 E0              1567 	push	acc
   01EB 74s00              1568 	mov	a,#(__str_3 >> 8)
   01ED C0 E0              1569 	push	acc
   01EF 74 80              1570 	mov	a,#0x80
   01F1 C0 E0              1571 	push	acc
   01F3 78r00              1572 	mov	r0,#_printf
   01F5 79s00              1573 	mov	r1,#(_printf >> 8)
   01F7 7As00              1574 	mov	r2,#(_printf >> 16)
   01F9 12s00r00           1575 	lcall	__sdcc_banked_call
   01FC E5 81              1576 	mov	a,sp
   01FE 24 FA              1577 	add	a,#0xfa
   0200 F5 81              1578 	mov	sp,a
   0202 D0 05              1579 	pop	ar5
   0204 D0 06              1580 	pop	ar6
   0206 D0 07              1581 	pop	ar7
                           1582 ;	main.c:95: if (!parameters) {
   0208 ED                 1583 	mov	a,r5
   0209 4E                 1584 	orl	a,r6
   020A 70 03              1585 	jnz	00102$
                           1586 ;	main.c:96: return;
   020C 02s02rBF           1587 	ljmp	00108$
   020F                    1588 00102$:
                           1589 ;	main.c:99: root = cJSON_Parse(parameters);
   020F 8D 82              1590 	mov	dpl,r5
   0211 8E 83              1591 	mov	dph,r6
   0213 8F F0              1592 	mov	b,r7
   0215 78r00              1593 	mov	r0,#_cJSON_Parse
   0217 79s00              1594 	mov	r1,#(_cJSON_Parse >> 8)
   0219 7As00              1595 	mov	r2,#(_cJSON_Parse >> 16)
   021B 12s00r00           1596 	lcall	__sdcc_banked_call
   021E AD 82              1597 	mov	r5,dpl
   0220 AE 83              1598 	mov	r6,dph
   0222 AF F0              1599 	mov	r7,b
                           1600 ;	main.c:101: if (!root) {
   0224 ED                 1601 	mov	a,r5
   0225 4E                 1602 	orl	a,r6
   0226 70 03              1603 	jnz	00104$
                           1604 ;	main.c:102: return;
   0228 02s02rBF           1605 	ljmp	00108$
   022B                    1606 00104$:
                           1607 ;	main.c:105: sub = cJSON_GetArrayItem(root, 0);
   022B E4                 1608 	clr	a
   022C C0 E0              1609 	push	acc
   022E C0 E0              1610 	push	acc
   0230 8D 82              1611 	mov	dpl,r5
   0232 8E 83              1612 	mov	dph,r6
   0234 8F F0              1613 	mov	b,r7
   0236 78r00              1614 	mov	r0,#_cJSON_GetArrayItem
   0238 79s00              1615 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   023A 7As00              1616 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   023C 12s00r00           1617 	lcall	__sdcc_banked_call
   023F AD 82              1618 	mov	r5,dpl
   0241 AE 83              1619 	mov	r6,dph
   0243 AF F0              1620 	mov	r7,b
   0245 15 81              1621 	dec	sp
   0247 15 81              1622 	dec	sp
   0249 A8 81              1623 	mov	r0,sp
   024B 18                 1624 	dec	r0
   024C 18                 1625 	dec	r0
   024D A6 05              1626 	mov	@r0,ar5
   024F 08                 1627 	inc	r0
   0250 A6 06              1628 	mov	@r0,ar6
   0252 08                 1629 	inc	r0
   0253 A6 07              1630 	mov	@r0,ar7
                           1631 ;	main.c:106: PRINTF("register response ret code:%d\n", sub->valueint);
   0255 A8 81              1632 	mov	r0,sp
   0257 18                 1633 	dec	r0
   0258 18                 1634 	dec	r0
   0259 74 0E              1635 	mov	a,#0x0E
   025B 26                 1636 	add	a,@r0
   025C FA                 1637 	mov	r2,a
   025D E4                 1638 	clr	a
   025E 08                 1639 	inc	r0
   025F 36                 1640 	addc	a,@r0
   0260 FB                 1641 	mov	r3,a
   0261 08                 1642 	inc	r0
   0262 86 04              1643 	mov	ar4,@r0
   0264 8A 82              1644 	mov	dpl,r2
   0266 8B 83              1645 	mov	dph,r3
   0268 8C F0              1646 	mov	b,r4
   026A 12s00r00           1647 	lcall	__gptrget
   026D FE                 1648 	mov	r6,a
   026E A3                 1649 	inc	dptr
   026F 12s00r00           1650 	lcall	__gptrget
   0272 FF                 1651 	mov	r7,a
   0273 C0 04              1652 	push	ar4
   0275 C0 03              1653 	push	ar3
   0277 C0 02              1654 	push	ar2
   0279 C0 06              1655 	push	ar6
   027B C0 07              1656 	push	ar7
   027D 74r3B              1657 	mov	a,#__str_4
   027F C0 E0              1658 	push	acc
   0281 74s00              1659 	mov	a,#(__str_4 >> 8)
   0283 C0 E0              1660 	push	acc
   0285 74 80              1661 	mov	a,#0x80
   0287 C0 E0              1662 	push	acc
   0289 78r00              1663 	mov	r0,#_printf
   028B 79s00              1664 	mov	r1,#(_printf >> 8)
   028D 7As00              1665 	mov	r2,#(_printf >> 16)
   028F 12s00r00           1666 	lcall	__sdcc_banked_call
   0292 E5 81              1667 	mov	a,sp
   0294 24 FB              1668 	add	a,#0xfb
   0296 F5 81              1669 	mov	sp,a
   0298 D0 02              1670 	pop	ar2
   029A D0 03              1671 	pop	ar3
   029C D0 04              1672 	pop	ar4
                           1673 ;	main.c:107: if (sub && sub->valueint == RETCODE_SUCCESS) {
   029E A8 81              1674 	mov	r0,sp
   02A0 18                 1675 	dec	r0
   02A1 18                 1676 	dec	r0
   02A2 E6                 1677 	mov	a,@r0
   02A3 08                 1678 	inc	r0
   02A4 46                 1679 	orl	a,@r0
   02A5 60 18              1680 	jz	00106$
   02A7 8A 82              1681 	mov	dpl,r2
   02A9 8B 83              1682 	mov	dph,r3
   02AB 8C F0              1683 	mov	b,r4
   02AD 12s00r00           1684 	lcall	__gptrget
   02B0 FA                 1685 	mov	r2,a
   02B1 A3                 1686 	inc	dptr
   02B2 12s00r00           1687 	lcall	__gptrget
   02B5 FB                 1688 	mov	r3,a
   02B6 4A                 1689 	orl	a,r2
   02B7 70 06              1690 	jnz	00106$
                           1691 ;	main.c:108: reg_success = 1;
   02B9 90s00r01           1692 	mov	dptr,#_reg_success
   02BC 74 01              1693 	mov	a,#0x01
   02BE F0                 1694 	movx	@dptr,a
   02BF                    1695 00106$:
                           1696 ;	main.c:111: return;
   02BF                    1697 00108$:
   02BF 15 81              1698 	dec	sp
   02C1 15 81              1699 	dec	sp
   02C3 15 81              1700 	dec	sp
   02C5 02s00r00           1701 	ljmp	__sdcc_banked_ret
                           1702 ;------------------------------------------------------------
                           1703 ;Allocation info for local variables in function 'report_request_handler'
                           1704 ;------------------------------------------------------------
                           1705 ;parameters                Allocated to stack - sp -5
                           1706 ;device_id                 Allocated to registers 
                           1707 ;------------------------------------------------------------
                           1708 ;	main.c:116: report_request_handler(uint8_t *device_id, uint8_t *parameters)
                           1709 ;	-----------------------------------------
                           1710 ;	 function report_request_handler
                           1711 ;	-----------------------------------------
   02C8                    1712 _report_request_handler:
                           1713 ;	main.c:118: return;
   02C8 02s00r00           1714 	ljmp	__sdcc_banked_ret
                           1715 ;------------------------------------------------------------
                           1716 ;Allocation info for local variables in function 'set_objects_request_handler'
                           1717 ;------------------------------------------------------------
                           1718 ;parameters                Allocated to registers r5 r6 r7 
                           1719 ;root                      Allocated to stack - sp -28
                           1720 ;sub                       Allocated to registers r5 r6 r7 
                           1721 ;sub1                      Allocated to registers r2 r3 r4 
                           1722 ;sub2                      Allocated to stack - sp -25
                           1723 ;sub3                      Allocated to registers r5 r6 r7 
                           1724 ;i                         Allocated to stack - sp -22
                           1725 ;j                         Allocated to stack - sp -20
                           1726 ;obj                       Allocated to stack - sp -18
                           1727 ;res                       Allocated to stack - sp -15
                           1728 ;value                     Allocated to stack - sp -12
                           1729 ;retcode                   Allocated to registers 
                           1730 ;sloc0                     Allocated to stack - sp -4
                           1731 ;sloc1                     Allocated to stack - sp +10
                           1732 ;sloc2                     Allocated to stack - sp -3
                           1733 ;------------------------------------------------------------
                           1734 ;	main.c:123: set_objects_request_handler(uint8_t *parameters)
                           1735 ;	-----------------------------------------
                           1736 ;	 function set_objects_request_handler
                           1737 ;	-----------------------------------------
   02CB                    1738 _set_objects_request_handler:
   02CB E5 81              1739 	mov	a,sp
   02CD 24 1D              1740 	add	a,#0x1D
   02CF F5 81              1741 	mov	sp,a
   02D1 AD 82              1742 	mov	r5,dpl
   02D3 AE 83              1743 	mov	r6,dph
   02D5 AF F0              1744 	mov	r7,b
                           1745 ;	main.c:132: if (!parameters) {
   02D7 ED                 1746 	mov	a,r5
   02D8 4E                 1747 	orl	a,r6
   02D9 70 03              1748 	jnz	00102$
                           1749 ;	main.c:133: return;
   02DB 02s07r92           1750 	ljmp	00138$
   02DE                    1751 00102$:
                           1752 ;	main.c:136: root = cJSON_Parse(parameters);
   02DE 8D 82              1753 	mov	dpl,r5
   02E0 8E 83              1754 	mov	dph,r6
   02E2 8F F0              1755 	mov	b,r7
   02E4 78r00              1756 	mov	r0,#_cJSON_Parse
   02E6 79s00              1757 	mov	r1,#(_cJSON_Parse >> 8)
   02E8 7As00              1758 	mov	r2,#(_cJSON_Parse >> 16)
   02EA 12s00r00           1759 	lcall	__sdcc_banked_call
   02ED AD 82              1760 	mov	r5,dpl
   02EF AE 83              1761 	mov	r6,dph
   02F1 AF F0              1762 	mov	r7,b
   02F3 E5 81              1763 	mov	a,sp
   02F5 24 E4              1764 	add	a,#0xe4
   02F7 F8                 1765 	mov	r0,a
   02F8 A6 05              1766 	mov	@r0,ar5
   02FA 08                 1767 	inc	r0
   02FB A6 06              1768 	mov	@r0,ar6
   02FD 08                 1769 	inc	r0
   02FE A6 07              1770 	mov	@r0,ar7
                           1771 ;	main.c:138: if (!root) {
   0300 E5 81              1772 	mov	a,sp
   0302 24 E4              1773 	add	a,#0xe4
   0304 F8                 1774 	mov	r0,a
   0305 E6                 1775 	mov	a,@r0
   0306 08                 1776 	inc	r0
   0307 46                 1777 	orl	a,@r0
   0308 70 03              1778 	jnz	00156$
                           1779 ;	main.c:139: return;
   030A 02s07r92           1780 	ljmp	00138$
   030D                    1781 00156$:
   030D E5 81              1782 	mov	a,sp
   030F 24 EA              1783 	add	a,#0xea
   0311 F8                 1784 	mov	r0,a
   0312 E4                 1785 	clr	a
   0313 F6                 1786 	mov	@r0,a
   0314 08                 1787 	inc	r0
   0315 F6                 1788 	mov	@r0,a
   0316                    1789 00134$:
                           1790 ;	main.c:142: for (;i < cJSON_GetArraySize(root); i++) {
   0316 E5 81              1791 	mov	a,sp
   0318 24 E4              1792 	add	a,#0xe4
   031A F8                 1793 	mov	r0,a
   031B 86 82              1794 	mov	dpl,@r0
   031D 08                 1795 	inc	r0
   031E 86 83              1796 	mov	dph,@r0
   0320 08                 1797 	inc	r0
   0321 86 F0              1798 	mov	b,@r0
   0323 78r00              1799 	mov	r0,#_cJSON_GetArraySize
   0325 79s00              1800 	mov	r1,#(_cJSON_GetArraySize >> 8)
   0327 7As00              1801 	mov	r2,#(_cJSON_GetArraySize >> 16)
   0329 12s00r00           1802 	lcall	__sdcc_banked_call
   032C AA 82              1803 	mov	r2,dpl
   032E AF 83              1804 	mov	r7,dph
   0330 E5 81              1805 	mov	a,sp
   0332 24 EA              1806 	add	a,#0xea
   0334 F8                 1807 	mov	r0,a
   0335 C3                 1808 	clr	c
   0336 E6                 1809 	mov	a,@r0
   0337 9A                 1810 	subb	a,r2
   0338 08                 1811 	inc	r0
   0339 E6                 1812 	mov	a,@r0
   033A 9F                 1813 	subb	a,r7
   033B 40 03              1814 	jc	00177$
   033D 02s07r1C           1815 	ljmp	00137$
   0340                    1816 00177$:
                           1817 ;	main.c:144: sub = cJSON_GetArrayItem(root, i);
   0340 E5 81              1818 	mov	a,sp
   0342 24 EA              1819 	add	a,#0xea
   0344 F8                 1820 	mov	r0,a
   0345 86 06              1821 	mov	ar6,@r0
   0347 08                 1822 	inc	r0
   0348 86 07              1823 	mov	ar7,@r0
   034A C0 06              1824 	push	ar6
   034C C0 07              1825 	push	ar7
   034E E5 81              1826 	mov	a,sp
   0350 24 E2              1827 	add	a,#0xe2
   0352 F8                 1828 	mov	r0,a
   0353 86 82              1829 	mov	dpl,@r0
   0355 08                 1830 	inc	r0
   0356 86 83              1831 	mov	dph,@r0
   0358 08                 1832 	inc	r0
   0359 86 F0              1833 	mov	b,@r0
   035B 78r00              1834 	mov	r0,#_cJSON_GetArrayItem
   035D 79s00              1835 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   035F 7As00              1836 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0361 12s00r00           1837 	lcall	__sdcc_banked_call
   0364 AD 82              1838 	mov	r5,dpl
   0366 AE 83              1839 	mov	r6,dph
   0368 AF F0              1840 	mov	r7,b
   036A 15 81              1841 	dec	sp
   036C 15 81              1842 	dec	sp
                           1843 ;	main.c:145: if (!sub) {
   036E ED                 1844 	mov	a,r5
   036F 4E                 1845 	orl	a,r6
   0370 70 03              1846 	jnz	00106$
                           1847 ;	main.c:146: return;
   0372 02s07r92           1848 	ljmp	00138$
   0375                    1849 00106$:
                           1850 ;	main.c:149: sub1 = cJSON_GetArrayItem(sub, 0);
   0375 C0 07              1851 	push	ar7
   0377 C0 06              1852 	push	ar6
   0379 C0 05              1853 	push	ar5
   037B E4                 1854 	clr	a
   037C C0 E0              1855 	push	acc
   037E C0 E0              1856 	push	acc
   0380 8D 82              1857 	mov	dpl,r5
   0382 8E 83              1858 	mov	dph,r6
   0384 8F F0              1859 	mov	b,r7
   0386 78r00              1860 	mov	r0,#_cJSON_GetArrayItem
   0388 79s00              1861 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   038A 7As00              1862 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   038C 12s00r00           1863 	lcall	__sdcc_banked_call
   038F AA 82              1864 	mov	r2,dpl
   0391 AB 83              1865 	mov	r3,dph
   0393 AC F0              1866 	mov	r4,b
   0395 15 81              1867 	dec	sp
   0397 15 81              1868 	dec	sp
   0399 D0 05              1869 	pop	ar5
   039B D0 06              1870 	pop	ar6
   039D D0 07              1871 	pop	ar7
                           1872 ;	main.c:150: if (!sub1) {
   039F EA                 1873 	mov	a,r2
   03A0 4B                 1874 	orl	a,r3
   03A1 70 03              1875 	jnz	00108$
                           1876 ;	main.c:151: return;
   03A3 02s07r92           1877 	ljmp	00138$
   03A6                    1878 00108$:
                           1879 ;	main.c:154: obj = device_find_object(sub1->valuestring);
   03A6 C0 05              1880 	push	ar5
   03A8 C0 06              1881 	push	ar6
   03AA C0 07              1882 	push	ar7
   03AC 74 0B              1883 	mov	a,#0x0B
   03AE 2A                 1884 	add	a,r2
   03AF FD                 1885 	mov	r5,a
   03B0 E4                 1886 	clr	a
   03B1 3B                 1887 	addc	a,r3
   03B2 FE                 1888 	mov	r6,a
   03B3 8C 07              1889 	mov	ar7,r4
   03B5 8D 82              1890 	mov	dpl,r5
   03B7 8E 83              1891 	mov	dph,r6
   03B9 8F F0              1892 	mov	b,r7
   03BB 12s00r00           1893 	lcall	__gptrget
   03BE FD                 1894 	mov	r5,a
   03BF A3                 1895 	inc	dptr
   03C0 12s00r00           1896 	lcall	__gptrget
   03C3 FE                 1897 	mov	r6,a
   03C4 A3                 1898 	inc	dptr
   03C5 12s00r00           1899 	lcall	__gptrget
   03C8 FF                 1900 	mov	r7,a
   03C9 8D 82              1901 	mov	dpl,r5
   03CB 8E 83              1902 	mov	dph,r6
   03CD 8F F0              1903 	mov	b,r7
   03CF 78r00              1904 	mov	r0,#_device_find_object
   03D1 79s00              1905 	mov	r1,#(_device_find_object >> 8)
   03D3 7As00              1906 	mov	r2,#(_device_find_object >> 16)
   03D5 12s00r00           1907 	lcall	__sdcc_banked_call
   03D8 AD 82              1908 	mov	r5,dpl
   03DA AE 83              1909 	mov	r6,dph
   03DC AF F0              1910 	mov	r7,b
   03DE E5 81              1911 	mov	a,sp
   03E0 24 EB              1912 	add	a,#0xeb
   03E2 F8                 1913 	mov	r0,a
   03E3 A6 05              1914 	mov	@r0,ar5
   03E5 08                 1915 	inc	r0
   03E6 A6 06              1916 	mov	@r0,ar6
   03E8 08                 1917 	inc	r0
   03E9 A6 07              1918 	mov	@r0,ar7
                           1919 ;	main.c:155: if(!obj) {
   03EB D0 07              1920 	pop	ar7
   03ED D0 06              1921 	pop	ar6
   03EF D0 05              1922 	pop	ar5
   03F1 E5 81              1923 	mov	a,sp
   03F3 24 EE              1924 	add	a,#0xee
   03F5 F8                 1925 	mov	r0,a
   03F6 E6                 1926 	mov	a,@r0
   03F7 08                 1927 	inc	r0
   03F8 46                 1928 	orl	a,@r0
   03F9 70 03              1929 	jnz	00180$
   03FB 02s07r0E           1930 	ljmp	00136$
   03FE                    1931 00180$:
                           1932 ;	main.c:160: sub1 = cJSON_GetArrayItem(sub, 1);
   03FE 74 01              1933 	mov	a,#0x01
   0400 C0 E0              1934 	push	acc
   0402 E4                 1935 	clr	a
   0403 C0 E0              1936 	push	acc
   0405 8D 82              1937 	mov	dpl,r5
   0407 8E 83              1938 	mov	dph,r6
   0409 8F F0              1939 	mov	b,r7
   040B 78r00              1940 	mov	r0,#_cJSON_GetArrayItem
   040D 79s00              1941 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   040F 7As00              1942 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0411 12s00r00           1943 	lcall	__sdcc_banked_call
   0414 AD 82              1944 	mov	r5,dpl
   0416 AE 83              1945 	mov	r6,dph
   0418 AF F0              1946 	mov	r7,b
   041A 15 81              1947 	dec	sp
   041C 15 81              1948 	dec	sp
   041E 8D 02              1949 	mov	ar2,r5
   0420 8E 03              1950 	mov	ar3,r6
   0422 8F 04              1951 	mov	ar4,r7
                           1952 ;	main.c:161: if (!sub1) {
   0424 EA                 1953 	mov	a,r2
   0425 4B                 1954 	orl	a,r3
   0426 70 03              1955 	jnz	00181$
   0428 02s07r0E           1956 	ljmp	00136$
   042B                    1957 00181$:
                           1958 ;	main.c:165: for (j = 0; j < cJSON_GetArraySize(sub1); j++) {
   042B E5 81              1959 	mov	a,sp
   042D 24 EC              1960 	add	a,#0xec
   042F F8                 1961 	mov	r0,a
   0430 E4                 1962 	clr	a
   0431 F6                 1963 	mov	@r0,a
   0432 08                 1964 	inc	r0
   0433 F6                 1965 	mov	@r0,a
   0434                    1966 00130$:
   0434 8A 82              1967 	mov	dpl,r2
   0436 8B 83              1968 	mov	dph,r3
   0438 8C F0              1969 	mov	b,r4
   043A C0 04              1970 	push	ar4
   043C C0 03              1971 	push	ar3
   043E C0 02              1972 	push	ar2
   0440 78r00              1973 	mov	r0,#_cJSON_GetArraySize
   0442 79s00              1974 	mov	r1,#(_cJSON_GetArraySize >> 8)
   0444 7As00              1975 	mov	r2,#(_cJSON_GetArraySize >> 16)
   0446 12s00r00           1976 	lcall	__sdcc_banked_call
   0449 AD 82              1977 	mov	r5,dpl
   044B AF 83              1978 	mov	r7,dph
   044D D0 02              1979 	pop	ar2
   044F D0 03              1980 	pop	ar3
   0451 D0 04              1981 	pop	ar4
   0453 E5 81              1982 	mov	a,sp
   0455 24 EC              1983 	add	a,#0xec
   0457 F8                 1984 	mov	r0,a
   0458 C3                 1985 	clr	c
   0459 E6                 1986 	mov	a,@r0
   045A 9D                 1987 	subb	a,r5
   045B 08                 1988 	inc	r0
   045C E6                 1989 	mov	a,@r0
   045D 9F                 1990 	subb	a,r7
   045E 40 03              1991 	jc	00182$
   0460 02s07r0E           1992 	ljmp	00136$
   0463                    1993 00182$:
                           1994 ;	main.c:166: sub2 = cJSON_GetArrayItem(sub1, j);
   0463 E5 81              1995 	mov	a,sp
   0465 24 EC              1996 	add	a,#0xec
   0467 F8                 1997 	mov	r0,a
   0468 86 06              1998 	mov	ar6,@r0
   046A 08                 1999 	inc	r0
   046B 86 07              2000 	mov	ar7,@r0
   046D C0 04              2001 	push	ar4
   046F C0 03              2002 	push	ar3
   0471 C0 02              2003 	push	ar2
   0473 C0 06              2004 	push	ar6
   0475 C0 07              2005 	push	ar7
   0477 8A 82              2006 	mov	dpl,r2
   0479 8B 83              2007 	mov	dph,r3
   047B 8C F0              2008 	mov	b,r4
   047D 78r00              2009 	mov	r0,#_cJSON_GetArrayItem
   047F 79s00              2010 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0481 7As00              2011 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0483 12s00r00           2012 	lcall	__sdcc_banked_call
   0486 AD 82              2013 	mov	r5,dpl
   0488 AE 83              2014 	mov	r6,dph
   048A AF F0              2015 	mov	r7,b
   048C 15 81              2016 	dec	sp
   048E 15 81              2017 	dec	sp
   0490 D0 02              2018 	pop	ar2
   0492 D0 03              2019 	pop	ar3
   0494 D0 04              2020 	pop	ar4
   0496 E5 81              2021 	mov	a,sp
   0498 24 E7              2022 	add	a,#0xe7
   049A F8                 2023 	mov	r0,a
   049B A6 05              2024 	mov	@r0,ar5
   049D 08                 2025 	inc	r0
   049E A6 06              2026 	mov	@r0,ar6
   04A0 08                 2027 	inc	r0
   04A1 A6 07              2028 	mov	@r0,ar7
                           2029 ;	main.c:167: if (!sub2) {
   04A3 E5 81              2030 	mov	a,sp
   04A5 24 E7              2031 	add	a,#0xe7
   04A7 F8                 2032 	mov	r0,a
   04A8 E6                 2033 	mov	a,@r0
   04A9 08                 2034 	inc	r0
   04AA 46                 2035 	orl	a,@r0
   04AB 70 03              2036 	jnz	00183$
   04AD 02s07r00           2037 	ljmp	00132$
   04B0                    2038 00183$:
                           2039 ;	main.c:171: sub3 = cJSON_GetArrayItem(sub2, 0);
   04B0 C0 04              2040 	push	ar4
   04B2 C0 03              2041 	push	ar3
   04B4 C0 02              2042 	push	ar2
   04B6 E4                 2043 	clr	a
   04B7 C0 E0              2044 	push	acc
   04B9 C0 E0              2045 	push	acc
   04BB E5 81              2046 	mov	a,sp
   04BD 24 E2              2047 	add	a,#0xe2
   04BF F8                 2048 	mov	r0,a
   04C0 86 82              2049 	mov	dpl,@r0
   04C2 08                 2050 	inc	r0
   04C3 86 83              2051 	mov	dph,@r0
   04C5 08                 2052 	inc	r0
   04C6 86 F0              2053 	mov	b,@r0
   04C8 78r00              2054 	mov	r0,#_cJSON_GetArrayItem
   04CA 79s00              2055 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   04CC 7As00              2056 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   04CE 12s00r00           2057 	lcall	__sdcc_banked_call
   04D1 AD 82              2058 	mov	r5,dpl
   04D3 AE 83              2059 	mov	r6,dph
   04D5 AF F0              2060 	mov	r7,b
   04D7 15 81              2061 	dec	sp
   04D9 15 81              2062 	dec	sp
   04DB D0 02              2063 	pop	ar2
   04DD D0 03              2064 	pop	ar3
   04DF D0 04              2065 	pop	ar4
                           2066 ;	main.c:172: if (!sub3) {
   04E1 ED                 2067 	mov	a,r5
   04E2 4E                 2068 	orl	a,r6
   04E3 70 03              2069 	jnz	00184$
   04E5 02s07r00           2070 	ljmp	00132$
   04E8                    2071 00184$:
                           2072 ;	main.c:176: res = object_instance_find_resource(obj, sub3->valueint);
   04E8 C0 02              2073 	push	ar2
   04EA C0 03              2074 	push	ar3
   04EC C0 04              2075 	push	ar4
   04EE 74 0E              2076 	mov	a,#0x0E
   04F0 2D                 2077 	add	a,r5
   04F1 FA                 2078 	mov	r2,a
   04F2 E4                 2079 	clr	a
   04F3 3E                 2080 	addc	a,r6
   04F4 FB                 2081 	mov	r3,a
   04F5 8F 04              2082 	mov	ar4,r7
   04F7 8A 82              2083 	mov	dpl,r2
   04F9 8B 83              2084 	mov	dph,r3
   04FB 8C F0              2085 	mov	b,r4
   04FD 12s00r00           2086 	lcall	__gptrget
   0500 FA                 2087 	mov	r2,a
   0501 A3                 2088 	inc	dptr
   0502 12s00r00           2089 	lcall	__gptrget
   0505 FB                 2090 	mov	r3,a
   0506 C0 02              2091 	push	ar2
   0508 C0 03              2092 	push	ar3
   050A E5 81              2093 	mov	a,sp
   050C 24 E9              2094 	add	a,#0xe9
   050E F8                 2095 	mov	r0,a
   050F 86 82              2096 	mov	dpl,@r0
   0511 08                 2097 	inc	r0
   0512 86 83              2098 	mov	dph,@r0
   0514 08                 2099 	inc	r0
   0515 86 F0              2100 	mov	b,@r0
   0517 78r00              2101 	mov	r0,#_object_instance_find_resource
   0519 79s00              2102 	mov	r1,#(_object_instance_find_resource >> 8)
   051B 7As00              2103 	mov	r2,#(_object_instance_find_resource >> 16)
   051D 12s00r00           2104 	lcall	__sdcc_banked_call
   0520 AA 82              2105 	mov	r2,dpl
   0522 AB 83              2106 	mov	r3,dph
   0524 AC F0              2107 	mov	r4,b
   0526 15 81              2108 	dec	sp
   0528 15 81              2109 	dec	sp
   052A E5 81              2110 	mov	a,sp
   052C 24 EE              2111 	add	a,#0xee
   052E F8                 2112 	mov	r0,a
   052F A6 02              2113 	mov	@r0,ar2
   0531 08                 2114 	inc	r0
   0532 A6 03              2115 	mov	@r0,ar3
   0534 08                 2116 	inc	r0
   0535 A6 04              2117 	mov	@r0,ar4
                           2118 ;	main.c:177: if (!res) {
   0537 D0 04              2119 	pop	ar4
   0539 D0 03              2120 	pop	ar3
   053B D0 02              2121 	pop	ar2
   053D E5 81              2122 	mov	a,sp
   053F 24 F1              2123 	add	a,#0xf1
   0541 F8                 2124 	mov	r0,a
   0542 E6                 2125 	mov	a,@r0
   0543 08                 2126 	inc	r0
   0544 46                 2127 	orl	a,@r0
   0545 70 03              2128 	jnz	00185$
   0547 02s07r00           2129 	ljmp	00132$
   054A                    2130 00185$:
                           2131 ;	main.c:181: sub3 = cJSON_GetArrayItem(sub2, 1);
   054A C0 02              2132 	push	ar2
   054C C0 03              2133 	push	ar3
   054E C0 04              2134 	push	ar4
   0550 74 01              2135 	mov	a,#0x01
   0552 C0 E0              2136 	push	acc
   0554 E4                 2137 	clr	a
   0555 C0 E0              2138 	push	acc
   0557 E5 81              2139 	mov	a,sp
   0559 24 E2              2140 	add	a,#0xe2
   055B F8                 2141 	mov	r0,a
   055C 86 82              2142 	mov	dpl,@r0
   055E 08                 2143 	inc	r0
   055F 86 83              2144 	mov	dph,@r0
   0561 08                 2145 	inc	r0
   0562 86 F0              2146 	mov	b,@r0
   0564 78r00              2147 	mov	r0,#_cJSON_GetArrayItem
   0566 79s00              2148 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0568 7As00              2149 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   056A 12s00r00           2150 	lcall	__sdcc_banked_call
   056D AA 82              2151 	mov	r2,dpl
   056F AB 83              2152 	mov	r3,dph
   0571 AC F0              2153 	mov	r4,b
   0573 15 81              2154 	dec	sp
   0575 15 81              2155 	dec	sp
   0577 8A 05              2156 	mov	ar5,r2
   0579 8B 06              2157 	mov	ar6,r3
   057B 8C 07              2158 	mov	ar7,r4
                           2159 ;	main.c:182: if (!sub3) {
   057D D0 04              2160 	pop	ar4
   057F D0 03              2161 	pop	ar3
   0581 D0 02              2162 	pop	ar2
   0583 ED                 2163 	mov	a,r5
   0584 4E                 2164 	orl	a,r6
   0585 70 03              2165 	jnz	00186$
   0587 02s07r00           2166 	ljmp	00132$
   058A                    2167 00186$:
                           2168 ;	main.c:186: if (res->resource_type->type == Integer) {
   058A C0 02              2169 	push	ar2
   058C C0 03              2170 	push	ar3
   058E C0 04              2171 	push	ar4
   0590 E5 81              2172 	mov	a,sp
   0592 24 EE              2173 	add	a,#0xee
   0594 F8                 2174 	mov	r0,a
   0595 74 06              2175 	mov	a,#0x06
   0597 26                 2176 	add	a,@r0
   0598 FA                 2177 	mov	r2,a
   0599 E4                 2178 	clr	a
   059A 08                 2179 	inc	r0
   059B 36                 2180 	addc	a,@r0
   059C FB                 2181 	mov	r3,a
   059D 08                 2182 	inc	r0
   059E 86 04              2183 	mov	ar4,@r0
   05A0 8A 82              2184 	mov	dpl,r2
   05A2 8B 83              2185 	mov	dph,r3
   05A4 8C F0              2186 	mov	b,r4
   05A6 12s00r00           2187 	lcall	__gptrget
   05A9 FA                 2188 	mov	r2,a
   05AA A3                 2189 	inc	dptr
   05AB 12s00r00           2190 	lcall	__gptrget
   05AE FB                 2191 	mov	r3,a
   05AF A3                 2192 	inc	dptr
   05B0 12s00r00           2193 	lcall	__gptrget
   05B3 FC                 2194 	mov	r4,a
   05B4 74 03              2195 	mov	a,#0x03
   05B6 2A                 2196 	add	a,r2
   05B7 FA                 2197 	mov	r2,a
   05B8 E4                 2198 	clr	a
   05B9 3B                 2199 	addc	a,r3
   05BA FB                 2200 	mov	r3,a
   05BB 8A 82              2201 	mov	dpl,r2
   05BD 8B 83              2202 	mov	dph,r3
   05BF 8C F0              2203 	mov	b,r4
   05C1 E5 81              2204 	mov	a,sp
   05C3 24 F9              2205 	add	a,#0xf9
   05C5 F8                 2206 	mov	r0,a
   05C6 12s00r00           2207 	lcall	__gptrget
   05C9 F6                 2208 	mov	@r0,a
   05CA D0 04              2209 	pop	ar4
   05CC D0 03              2210 	pop	ar3
   05CE D0 02              2211 	pop	ar2
   05D0 E5 81              2212 	mov	a,sp
   05D2 24 FC              2213 	add	a,#0xfc
   05D4 F8                 2214 	mov	r0,a
   05D5 E6                 2215 	mov	a,@r0
   05D6 70 32              2216 	jnz	00128$
                           2217 ;	main.c:187: value.int_value = sub3->valueint;
   05D8 C0 02              2218 	push	ar2
   05DA C0 03              2219 	push	ar3
   05DC C0 04              2220 	push	ar4
   05DE E5 81              2221 	mov	a,sp
   05E0 24 F1              2222 	add	a,#0xF1
   05E2 F9                 2223 	mov	r1,a
   05E3 74 0E              2224 	mov	a,#0x0E
   05E5 2D                 2225 	add	a,r5
   05E6 FA                 2226 	mov	r2,a
   05E7 E4                 2227 	clr	a
   05E8 3E                 2228 	addc	a,r6
   05E9 FB                 2229 	mov	r3,a
   05EA 8F 04              2230 	mov	ar4,r7
   05EC 8A 82              2231 	mov	dpl,r2
   05EE 8B 83              2232 	mov	dph,r3
   05F0 8C F0              2233 	mov	b,r4
   05F2 12s00r00           2234 	lcall	__gptrget
   05F5 FA                 2235 	mov	r2,a
   05F6 A3                 2236 	inc	dptr
   05F7 12s00r00           2237 	lcall	__gptrget
   05FA FB                 2238 	mov	r3,a
   05FB A7 02              2239 	mov	@r1,ar2
   05FD 09                 2240 	inc	r1
   05FE A7 03              2241 	mov	@r1,ar3
   0600 19                 2242 	dec	r1
   0601 D0 04              2243 	pop	ar4
   0603 D0 03              2244 	pop	ar3
   0605 D0 02              2245 	pop	ar2
   0607 02s06rC9           2246 	ljmp	00129$
   060A                    2247 00128$:
                           2248 ;	main.c:188: } else if (res->resource_type->type == Float) {
   060A E5 81              2249 	mov	a,sp
   060C 24 FC              2250 	add	a,#0xfc
   060E F8                 2251 	mov	r0,a
   060F B6 01 53           2252 	cjne	@r0,#0x01,00125$
                           2253 ;	main.c:189: value.float_value = sub3->valuefloat;
   0612 C0 02              2254 	push	ar2
   0614 C0 03              2255 	push	ar3
   0616 C0 04              2256 	push	ar4
   0618 E5 81              2257 	mov	a,sp
   061A 24 F1              2258 	add	a,#0xF1
   061C F9                 2259 	mov	r1,a
   061D 74 10              2260 	mov	a,#0x10
   061F 2D                 2261 	add	a,r5
   0620 FA                 2262 	mov	r2,a
   0621 E4                 2263 	clr	a
   0622 3E                 2264 	addc	a,r6
   0623 FB                 2265 	mov	r3,a
   0624 8F 04              2266 	mov	ar4,r7
   0626 8A 82              2267 	mov	dpl,r2
   0628 8B 83              2268 	mov	dph,r3
   062A 8C F0              2269 	mov	b,r4
   062C E5 81              2270 	mov	a,sp
   062E 24 FA              2271 	add	a,#0xfa
   0630 F8                 2272 	mov	r0,a
   0631 12s00r00           2273 	lcall	__gptrget
   0634 F6                 2274 	mov	@r0,a
   0635 A3                 2275 	inc	dptr
   0636 12s00r00           2276 	lcall	__gptrget
   0639 08                 2277 	inc	r0
   063A F6                 2278 	mov	@r0,a
   063B A3                 2279 	inc	dptr
   063C 12s00r00           2280 	lcall	__gptrget
   063F 08                 2281 	inc	r0
   0640 F6                 2282 	mov	@r0,a
   0641 A3                 2283 	inc	dptr
   0642 12s00r00           2284 	lcall	__gptrget
   0645 08                 2285 	inc	r0
   0646 F6                 2286 	mov	@r0,a
   0647 E5 81              2287 	mov	a,sp
   0649 24 FA              2288 	add	a,#0xfa
   064B F8                 2289 	mov	r0,a
   064C E6                 2290 	mov	a,@r0
   064D F7                 2291 	mov	@r1,a
   064E 09                 2292 	inc	r1
   064F 08                 2293 	inc	r0
   0650 E6                 2294 	mov	a,@r0
   0651 F7                 2295 	mov	@r1,a
   0652 09                 2296 	inc	r1
   0653 08                 2297 	inc	r0
   0654 E6                 2298 	mov	a,@r0
   0655 F7                 2299 	mov	@r1,a
   0656 09                 2300 	inc	r1
   0657 08                 2301 	inc	r0
   0658 E6                 2302 	mov	a,@r0
   0659 F7                 2303 	mov	@r1,a
   065A 19                 2304 	dec	r1
   065B 19                 2305 	dec	r1
   065C 19                 2306 	dec	r1
   065D D0 04              2307 	pop	ar4
   065F D0 03              2308 	pop	ar3
   0661 D0 02              2309 	pop	ar2
   0663 80 64              2310 	sjmp	00129$
   0665                    2311 00125$:
                           2312 ;	main.c:190: } else if (res->resource_type->type == String) {
   0665 E5 81              2313 	mov	a,sp
   0667 24 FC              2314 	add	a,#0xfc
   0669 F8                 2315 	mov	r0,a
   066A B6 02 02           2316 	cjne	@r0,#0x02,00190$
   066D 80 03              2317 	sjmp	00191$
   066F                    2318 00190$:
   066F 02s07r00           2319 	ljmp	00132$
   0672                    2320 00191$:
                           2321 ;	main.c:191: strcpy(value.string_value, sub3->valuestring);
   0672 C0 02              2322 	push	ar2
   0674 C0 03              2323 	push	ar3
   0676 C0 04              2324 	push	ar4
   0678 74 0B              2325 	mov	a,#0x0B
   067A 2D                 2326 	add	a,r5
   067B FD                 2327 	mov	r5,a
   067C E4                 2328 	clr	a
   067D 3E                 2329 	addc	a,r6
   067E FE                 2330 	mov	r6,a
   067F 8D 82              2331 	mov	dpl,r5
   0681 8E 83              2332 	mov	dph,r6
   0683 8F F0              2333 	mov	b,r7
   0685 12s00r00           2334 	lcall	__gptrget
   0688 FD                 2335 	mov	r5,a
   0689 A3                 2336 	inc	dptr
   068A 12s00r00           2337 	lcall	__gptrget
   068D FE                 2338 	mov	r6,a
   068E A3                 2339 	inc	dptr
   068F 12s00r00           2340 	lcall	__gptrget
   0692 FF                 2341 	mov	r7,a
   0693 E5 81              2342 	mov	a,sp
   0695 24 F1              2343 	add	a,#0xF1
   0697 FC                 2344 	mov	r4,a
   0698 7B 00              2345 	mov	r3,#0x00
   069A 7A 40              2346 	mov	r2,#0x40
   069C C0 04              2347 	push	ar4
   069E C0 03              2348 	push	ar3
   06A0 C0 02              2349 	push	ar2
   06A2 C0 05              2350 	push	ar5
   06A4 C0 06              2351 	push	ar6
   06A6 C0 07              2352 	push	ar7
   06A8 8C 82              2353 	mov	dpl,r4
   06AA 8B 83              2354 	mov	dph,r3
   06AC 8A F0              2355 	mov	b,r2
   06AE 78r00              2356 	mov	r0,#_strcpy
   06B0 79s00              2357 	mov	r1,#(_strcpy >> 8)
   06B2 7As00              2358 	mov	r2,#(_strcpy >> 16)
   06B4 12s00r00           2359 	lcall	__sdcc_banked_call
   06B7 15 81              2360 	dec	sp
   06B9 15 81              2361 	dec	sp
   06BB 15 81              2362 	dec	sp
   06BD D0 02              2363 	pop	ar2
   06BF D0 03              2364 	pop	ar3
   06C1 D0 04              2365 	pop	ar4
                           2366 ;	main.c:204: return;
   06C3 D0 04              2367 	pop	ar4
   06C5 D0 03              2368 	pop	ar3
   06C7 D0 02              2369 	pop	ar2
                           2370 ;	main.c:193: continue;
   06C9                    2371 00129$:
                           2372 ;	main.c:196: set_resource_value(res, &value);
   06C9 E5 81              2373 	mov	a,sp
   06CB 24 F4              2374 	add	a,#0xF4
   06CD FF                 2375 	mov	r7,a
   06CE 7E 00              2376 	mov	r6,#0x00
   06D0 7D 40              2377 	mov	r5,#0x40
   06D2 C0 04              2378 	push	ar4
   06D4 C0 03              2379 	push	ar3
   06D6 C0 02              2380 	push	ar2
   06D8 C0 07              2381 	push	ar7
   06DA C0 06              2382 	push	ar6
   06DC C0 05              2383 	push	ar5
   06DE E5 81              2384 	mov	a,sp
   06E0 24 EB              2385 	add	a,#0xeb
   06E2 F8                 2386 	mov	r0,a
   06E3 86 82              2387 	mov	dpl,@r0
   06E5 08                 2388 	inc	r0
   06E6 86 83              2389 	mov	dph,@r0
   06E8 08                 2390 	inc	r0
   06E9 86 F0              2391 	mov	b,@r0
   06EB 78r00              2392 	mov	r0,#_set_resource_value
   06ED 79s00              2393 	mov	r1,#(_set_resource_value >> 8)
   06EF 7As00              2394 	mov	r2,#(_set_resource_value >> 16)
   06F1 12s00r00           2395 	lcall	__sdcc_banked_call
   06F4 15 81              2396 	dec	sp
   06F6 15 81              2397 	dec	sp
   06F8 15 81              2398 	dec	sp
   06FA D0 02              2399 	pop	ar2
   06FC D0 03              2400 	pop	ar3
   06FE D0 04              2401 	pop	ar4
   0700                    2402 00132$:
                           2403 ;	main.c:165: for (j = 0; j < cJSON_GetArraySize(sub1); j++) {
   0700 E5 81              2404 	mov	a,sp
   0702 24 EC              2405 	add	a,#0xec
   0704 F8                 2406 	mov	r0,a
   0705 06                 2407 	inc	@r0
   0706 B6 00 02           2408 	cjne	@r0,#0x00,00192$
   0709 08                 2409 	inc	r0
   070A 06                 2410 	inc	@r0
   070B                    2411 00192$:
   070B 02s04r34           2412 	ljmp	00130$
   070E                    2413 00136$:
                           2414 ;	main.c:142: for (;i < cJSON_GetArraySize(root); i++) {
   070E E5 81              2415 	mov	a,sp
   0710 24 EA              2416 	add	a,#0xea
   0712 F8                 2417 	mov	r0,a
   0713 06                 2418 	inc	@r0
   0714 B6 00 02           2419 	cjne	@r0,#0x00,00193$
   0717 08                 2420 	inc	r0
   0718 06                 2421 	inc	@r0
   0719                    2422 00193$:
   0719 02s03r16           2423 	ljmp	00134$
   071C                    2424 00137$:
                           2425 ;	main.c:201: sprintf(output_buf, "[%d]", retcode);
   071C E4                 2426 	clr	a
   071D C0 E0              2427 	push	acc
   071F C0 E0              2428 	push	acc
   0721 74r5A              2429 	mov	a,#__str_5
   0723 C0 E0              2430 	push	acc
   0725 74s00              2431 	mov	a,#(__str_5 >> 8)
   0727 C0 E0              2432 	push	acc
   0729 74 80              2433 	mov	a,#0x80
   072B C0 E0              2434 	push	acc
   072D 74r00              2435 	mov	a,#_output_buf
   072F C0 E0              2436 	push	acc
   0731 74s00              2437 	mov	a,#(_output_buf >> 8)
   0733 C0 E0              2438 	push	acc
   0735 E4                 2439 	clr	a
   0736 C0 E0              2440 	push	acc
   0738 78r00              2441 	mov	r0,#_sprintf
   073A 79s00              2442 	mov	r1,#(_sprintf >> 8)
   073C 7As00              2443 	mov	r2,#(_sprintf >> 16)
   073E 12s00r00           2444 	lcall	__sdcc_banked_call
   0741 E5 81              2445 	mov	a,sp
   0743 24 F8              2446 	add	a,#0xf8
   0745 F5 81              2447 	mov	sp,a
                           2448 ;	main.c:202: send_msg(output_buf, strlen(output_buf), &UIP_IP_BUF->srcipaddr);
   0747 7Er00              2449 	mov	r6,#_uip_aligned_buf
   0749 7Fs00              2450 	mov	r7,#(_uip_aligned_buf >> 8)
   074B 74 08              2451 	mov	a,#0x08
   074D 2E                 2452 	add	a,r6
   074E FE                 2453 	mov	r6,a
   074F E4                 2454 	clr	a
   0750 3F                 2455 	addc	a,r7
   0751 FF                 2456 	mov	r7,a
   0752 7D 00              2457 	mov	r5,#0x00
   0754 90s00r00           2458 	mov	dptr,#_output_buf
   0757 75 F0 00           2459 	mov	b,#0x00
   075A C0 07              2460 	push	ar7
   075C C0 06              2461 	push	ar6
   075E C0 05              2462 	push	ar5
   0760 78r00              2463 	mov	r0,#_strlen
   0762 79s00              2464 	mov	r1,#(_strlen >> 8)
   0764 7As00              2465 	mov	r2,#(_strlen >> 16)
   0766 12s00r00           2466 	lcall	__sdcc_banked_call
   0769 AB 82              2467 	mov	r3,dpl
   076B AC 83              2468 	mov	r4,dph
   076D D0 05              2469 	pop	ar5
   076F D0 06              2470 	pop	ar6
   0771 D0 07              2471 	pop	ar7
   0773 C0 06              2472 	push	ar6
   0775 C0 07              2473 	push	ar7
   0777 C0 05              2474 	push	ar5
   0779 C0 03              2475 	push	ar3
   077B C0 04              2476 	push	ar4
   077D 90s00r00           2477 	mov	dptr,#_output_buf
   0780 75 F0 00           2478 	mov	b,#0x00
   0783 78rAA              2479 	mov	r0,#_send_msg
   0785 79s00              2480 	mov	r1,#(_send_msg >> 8)
   0787 7As00              2481 	mov	r2,#(_send_msg >> 16)
   0789 12s00r00           2482 	lcall	__sdcc_banked_call
   078C E5 81              2483 	mov	a,sp
   078E 24 FB              2484 	add	a,#0xfb
   0790 F5 81              2485 	mov	sp,a
                           2486 ;	main.c:204: return;
   0792                    2487 00138$:
   0792 E5 81              2488 	mov	a,sp
   0794 24 E3              2489 	add	a,#0xE3
   0796 F5 81              2490 	mov	sp,a
   0798 02s00r00           2491 	ljmp	__sdcc_banked_ret
                           2492 ;------------------------------------------------------------
                           2493 ;Allocation info for local variables in function 'get_resources_request_handler'
                           2494 ;------------------------------------------------------------
                           2495 ;parameters                Allocated to registers r5 r6 r7 
                           2496 ;root                      Allocated to stack - sp -33
                           2497 ;sub                       Allocated to stack - sp -30
                           2498 ;sub1                      Allocated to stack - sp -27
                           2499 ;sub2                      Allocated to registers r3 r4 r5 
                           2500 ;i                         Allocated to stack - sp -24
                           2501 ;j                         Allocated to registers r6 r7 
                           2502 ;obj                       Allocated to stack - sp -22
                           2503 ;res                       Allocated to registers r5 r4 r3 
                           2504 ;value                     Allocated to stack - sp -19
                           2505 ;ptr                       Allocated to stack - sp -11
                           2506 ;sloc0                     Allocated to stack - sp +3
                           2507 ;sloc1                     Allocated to stack - sp +4
                           2508 ;sloc2                     Allocated to stack - sp -8
                           2509 ;sloc3                     Allocated to stack - sp -6
                           2510 ;sloc4                     Allocated to stack - sp -3
                           2511 ;------------------------------------------------------------
                           2512 ;	main.c:210: get_resources_request_handler(uint8_t *parameters)
                           2513 ;	-----------------------------------------
                           2514 ;	 function get_resources_request_handler
                           2515 ;	-----------------------------------------
   079B                    2516 _get_resources_request_handler:
   079B E5 81              2517 	mov	a,sp
   079D 24 22              2518 	add	a,#0x22
   079F F5 81              2519 	mov	sp,a
   07A1 AD 82              2520 	mov	r5,dpl
   07A3 AE 83              2521 	mov	r6,dph
   07A5 AF F0              2522 	mov	r7,b
                           2523 ;	main.c:217: uint8_t *ptr = output_buf;
   07A7 E5 81              2524 	mov	a,sp
   07A9 24 F5              2525 	add	a,#0xf5
   07AB F8                 2526 	mov	r0,a
   07AC 76r00              2527 	mov	@r0,#_output_buf
   07AE 08                 2528 	inc	r0
   07AF 76s00              2529 	mov	@r0,#(_output_buf >> 8)
   07B1 08                 2530 	inc	r0
   07B2 76 00              2531 	mov	@r0,#0x00
                           2532 ;	main.c:219: if (!parameters) {
   07B4 ED                 2533 	mov	a,r5
   07B5 4E                 2534 	orl	a,r6
   07B6 70 03              2535 	jnz	00102$
                           2536 ;	main.c:220: return;
   07B8 02s0DrFE           2537 	ljmp	00136$
   07BB                    2538 00102$:
                           2539 ;	main.c:223: root = cJSON_Parse(parameters);
   07BB 8D 82              2540 	mov	dpl,r5
   07BD 8E 83              2541 	mov	dph,r6
   07BF 8F F0              2542 	mov	b,r7
   07C1 78r00              2543 	mov	r0,#_cJSON_Parse
   07C3 79s00              2544 	mov	r1,#(_cJSON_Parse >> 8)
   07C5 7As00              2545 	mov	r2,#(_cJSON_Parse >> 16)
   07C7 12s00r00           2546 	lcall	__sdcc_banked_call
   07CA AD 82              2547 	mov	r5,dpl
   07CC AE 83              2548 	mov	r6,dph
   07CE AF F0              2549 	mov	r7,b
   07D0 E5 81              2550 	mov	a,sp
   07D2 24 DF              2551 	add	a,#0xdf
   07D4 F8                 2552 	mov	r0,a
   07D5 A6 05              2553 	mov	@r0,ar5
   07D7 08                 2554 	inc	r0
   07D8 A6 06              2555 	mov	@r0,ar6
   07DA 08                 2556 	inc	r0
   07DB A6 07              2557 	mov	@r0,ar7
                           2558 ;	main.c:225: if (!root) {
   07DD E5 81              2559 	mov	a,sp
   07DF 24 DF              2560 	add	a,#0xdf
   07E1 F8                 2561 	mov	r0,a
   07E2 E6                 2562 	mov	a,@r0
   07E3 08                 2563 	inc	r0
   07E4 46                 2564 	orl	a,@r0
   07E5 70 03              2565 	jnz	00104$
                           2566 ;	main.c:226: return;
   07E7 02s0DrFE           2567 	ljmp	00136$
   07EA                    2568 00104$:
                           2569 ;	main.c:229: sprintf(ptr, "[");
   07EA E5 81              2570 	mov	a,sp
   07EC 24 F5              2571 	add	a,#0xf5
   07EE F8                 2572 	mov	r0,a
   07EF 86 05              2573 	mov	ar5,@r0
   07F1 08                 2574 	inc	r0
   07F2 86 06              2575 	mov	ar6,@r0
   07F4 08                 2576 	inc	r0
   07F5 86 07              2577 	mov	ar7,@r0
   07F7 74r5F              2578 	mov	a,#__str_6
   07F9 C0 E0              2579 	push	acc
   07FB 74s00              2580 	mov	a,#(__str_6 >> 8)
   07FD C0 E0              2581 	push	acc
   07FF 74 80              2582 	mov	a,#0x80
   0801 C0 E0              2583 	push	acc
   0803 C0 05              2584 	push	ar5
   0805 C0 06              2585 	push	ar6
   0807 C0 07              2586 	push	ar7
   0809 78r00              2587 	mov	r0,#_sprintf
   080B 79s00              2588 	mov	r1,#(_sprintf >> 8)
   080D 7As00              2589 	mov	r2,#(_sprintf >> 16)
   080F 12s00r00           2590 	lcall	__sdcc_banked_call
   0812 E5 81              2591 	mov	a,sp
   0814 24 FA              2592 	add	a,#0xfa
                           2593 ;	main.c:230: ptr++;
   0816 F5 81              2594 	mov	sp,a
   0818 24 F5              2595 	add	a,#0xf5
   081A F8                 2596 	mov	r0,a
   081B 06                 2597 	inc	@r0
   081C B6 00 02           2598 	cjne	@r0,#0x00,00173$
   081F 08                 2599 	inc	r0
   0820 06                 2600 	inc	@r0
   0821                    2601 00173$:
   0821 E5 81              2602 	mov	a,sp
   0823 24 E8              2603 	add	a,#0xe8
   0825 F8                 2604 	mov	r0,a
   0826 E4                 2605 	clr	a
   0827 F6                 2606 	mov	@r0,a
   0828 08                 2607 	inc	r0
   0829 F6                 2608 	mov	@r0,a
                           2609 ;	main.c:296: return;
                           2610 ;	main.c:230: ptr++;
   082A                    2611 00132$:
                           2612 ;	main.c:232: for (;i < cJSON_GetArraySize(root); i++) {
   082A E5 81              2613 	mov	a,sp
   082C 24 DF              2614 	add	a,#0xdf
   082E F8                 2615 	mov	r0,a
   082F 86 82              2616 	mov	dpl,@r0
   0831 08                 2617 	inc	r0
   0832 86 83              2618 	mov	dph,@r0
   0834 08                 2619 	inc	r0
   0835 86 F0              2620 	mov	b,@r0
   0837 78r00              2621 	mov	r0,#_cJSON_GetArraySize
   0839 79s00              2622 	mov	r1,#(_cJSON_GetArraySize >> 8)
   083B 7As00              2623 	mov	r2,#(_cJSON_GetArraySize >> 16)
   083D 12s00r00           2624 	lcall	__sdcc_banked_call
   0840 AB 82              2625 	mov	r3,dpl
   0842 AC 83              2626 	mov	r4,dph
   0844 E5 81              2627 	mov	a,sp
   0846 24 E8              2628 	add	a,#0xe8
   0848 F8                 2629 	mov	r0,a
   0849 C3                 2630 	clr	c
   084A E6                 2631 	mov	a,@r0
   084B 9B                 2632 	subb	a,r3
   084C 08                 2633 	inc	r0
   084D E6                 2634 	mov	a,@r0
   084E 9C                 2635 	subb	a,r4
   084F 40 03              2636 	jc	00174$
   0851 02s0Dr91           2637 	ljmp	00135$
   0854                    2638 00174$:
                           2639 ;	main.c:234: sub = cJSON_GetArrayItem(root, i);
   0854 E5 81              2640 	mov	a,sp
   0856 24 E8              2641 	add	a,#0xe8
   0858 F8                 2642 	mov	r0,a
   0859 86 03              2643 	mov	ar3,@r0
   085B 08                 2644 	inc	r0
   085C 86 04              2645 	mov	ar4,@r0
   085E C0 03              2646 	push	ar3
   0860 C0 04              2647 	push	ar4
   0862 E5 81              2648 	mov	a,sp
   0864 24 DD              2649 	add	a,#0xdd
   0866 F8                 2650 	mov	r0,a
   0867 86 82              2651 	mov	dpl,@r0
   0869 08                 2652 	inc	r0
   086A 86 83              2653 	mov	dph,@r0
   086C 08                 2654 	inc	r0
   086D 86 F0              2655 	mov	b,@r0
   086F 78r00              2656 	mov	r0,#_cJSON_GetArrayItem
   0871 79s00              2657 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0873 7As00              2658 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0875 12s00r00           2659 	lcall	__sdcc_banked_call
   0878 AA 82              2660 	mov	r2,dpl
   087A AB 83              2661 	mov	r3,dph
   087C AC F0              2662 	mov	r4,b
   087E 15 81              2663 	dec	sp
   0880 15 81              2664 	dec	sp
   0882 E5 81              2665 	mov	a,sp
   0884 24 E2              2666 	add	a,#0xe2
   0886 F8                 2667 	mov	r0,a
   0887 A6 02              2668 	mov	@r0,ar2
   0889 08                 2669 	inc	r0
   088A A6 03              2670 	mov	@r0,ar3
   088C 08                 2671 	inc	r0
   088D A6 04              2672 	mov	@r0,ar4
                           2673 ;	main.c:235: if (!sub) {
   088F E5 81              2674 	mov	a,sp
   0891 24 E2              2675 	add	a,#0xe2
   0893 F8                 2676 	mov	r0,a
   0894 E6                 2677 	mov	a,@r0
   0895 08                 2678 	inc	r0
   0896 46                 2679 	orl	a,@r0
   0897 70 03              2680 	jnz	00106$
                           2681 ;	main.c:236: return;
   0899 02s0DrFE           2682 	ljmp	00136$
   089C                    2683 00106$:
                           2684 ;	main.c:239: sub1 = cJSON_GetArrayItem(sub, 0);
   089C E4                 2685 	clr	a
   089D C0 E0              2686 	push	acc
   089F C0 E0              2687 	push	acc
   08A1 E5 81              2688 	mov	a,sp
   08A3 24 E0              2689 	add	a,#0xe0
   08A5 F8                 2690 	mov	r0,a
   08A6 86 82              2691 	mov	dpl,@r0
   08A8 08                 2692 	inc	r0
   08A9 86 83              2693 	mov	dph,@r0
   08AB 08                 2694 	inc	r0
   08AC 86 F0              2695 	mov	b,@r0
   08AE 78r00              2696 	mov	r0,#_cJSON_GetArrayItem
   08B0 79s00              2697 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   08B2 7As00              2698 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   08B4 12s00r00           2699 	lcall	__sdcc_banked_call
   08B7 AF 82              2700 	mov	r7,dpl
   08B9 AE 83              2701 	mov	r6,dph
   08BB AD F0              2702 	mov	r5,b
   08BD 15 81              2703 	dec	sp
   08BF 15 81              2704 	dec	sp
   08C1 E5 81              2705 	mov	a,sp
   08C3 24 E5              2706 	add	a,#0xe5
   08C5 F8                 2707 	mov	r0,a
   08C6 A6 07              2708 	mov	@r0,ar7
   08C8 08                 2709 	inc	r0
   08C9 A6 06              2710 	mov	@r0,ar6
   08CB 08                 2711 	inc	r0
   08CC A6 05              2712 	mov	@r0,ar5
                           2713 ;	main.c:240: if (!sub1) {
   08CE E5 81              2714 	mov	a,sp
   08D0 24 E5              2715 	add	a,#0xe5
   08D2 F8                 2716 	mov	r0,a
   08D3 E6                 2717 	mov	a,@r0
   08D4 08                 2718 	inc	r0
   08D5 46                 2719 	orl	a,@r0
   08D6 70 03              2720 	jnz	00108$
                           2721 ;	main.c:241: return;
   08D8 02s0DrFE           2722 	ljmp	00136$
   08DB                    2723 00108$:
                           2724 ;	main.c:244: obj = device_find_object(sub1->valuestring);
   08DB E5 81              2725 	mov	a,sp
   08DD 24 E5              2726 	add	a,#0xe5
   08DF F8                 2727 	mov	r0,a
   08E0 74 0B              2728 	mov	a,#0x0B
   08E2 26                 2729 	add	a,@r0
   08E3 FD                 2730 	mov	r5,a
   08E4 E4                 2731 	clr	a
   08E5 08                 2732 	inc	r0
   08E6 36                 2733 	addc	a,@r0
   08E7 FE                 2734 	mov	r6,a
   08E8 08                 2735 	inc	r0
   08E9 86 07              2736 	mov	ar7,@r0
   08EB 8D 82              2737 	mov	dpl,r5
   08ED 8E 83              2738 	mov	dph,r6
   08EF 8F F0              2739 	mov	b,r7
   08F1 12s00r00           2740 	lcall	__gptrget
   08F4 FA                 2741 	mov	r2,a
   08F5 A3                 2742 	inc	dptr
   08F6 12s00r00           2743 	lcall	__gptrget
   08F9 FB                 2744 	mov	r3,a
   08FA A3                 2745 	inc	dptr
   08FB 12s00r00           2746 	lcall	__gptrget
   08FE FC                 2747 	mov	r4,a
   08FF 8A 82              2748 	mov	dpl,r2
   0901 8B 83              2749 	mov	dph,r3
   0903 8C F0              2750 	mov	b,r4
   0905 C0 07              2751 	push	ar7
   0907 C0 06              2752 	push	ar6
   0909 C0 05              2753 	push	ar5
   090B 78r00              2754 	mov	r0,#_device_find_object
   090D 79s00              2755 	mov	r1,#(_device_find_object >> 8)
   090F 7As00              2756 	mov	r2,#(_device_find_object >> 16)
   0911 12s00r00           2757 	lcall	__sdcc_banked_call
   0914 AA 82              2758 	mov	r2,dpl
   0916 AB 83              2759 	mov	r3,dph
   0918 AC F0              2760 	mov	r4,b
   091A D0 05              2761 	pop	ar5
   091C D0 06              2762 	pop	ar6
   091E D0 07              2763 	pop	ar7
   0920 E5 81              2764 	mov	a,sp
   0922 24 EA              2765 	add	a,#0xea
   0924 F8                 2766 	mov	r0,a
   0925 A6 02              2767 	mov	@r0,ar2
   0927 08                 2768 	inc	r0
   0928 A6 03              2769 	mov	@r0,ar3
   092A 08                 2770 	inc	r0
   092B A6 04              2771 	mov	@r0,ar4
                           2772 ;	main.c:245: if(!obj) {
   092D E5 81              2773 	mov	a,sp
   092F 24 EA              2774 	add	a,#0xea
   0931 F8                 2775 	mov	r0,a
   0932 E6                 2776 	mov	a,@r0
   0933 08                 2777 	inc	r0
   0934 46                 2778 	orl	a,@r0
   0935 70 03              2779 	jnz	00177$
   0937 02s0Dr83           2780 	ljmp	00134$
   093A                    2781 00177$:
                           2782 ;	main.c:249: sprintf(ptr, "[%s,[", sub1->valuestring);
   093A 8D 82              2783 	mov	dpl,r5
   093C 8E 83              2784 	mov	dph,r6
   093E 8F F0              2785 	mov	b,r7
   0940 12s00r00           2786 	lcall	__gptrget
   0943 FD                 2787 	mov	r5,a
   0944 A3                 2788 	inc	dptr
   0945 12s00r00           2789 	lcall	__gptrget
   0948 FE                 2790 	mov	r6,a
   0949 A3                 2791 	inc	dptr
   094A 12s00r00           2792 	lcall	__gptrget
   094D FF                 2793 	mov	r7,a
   094E E5 81              2794 	mov	a,sp
   0950 24 F5              2795 	add	a,#0xf5
   0952 F8                 2796 	mov	r0,a
   0953 86 02              2797 	mov	ar2,@r0
   0955 08                 2798 	inc	r0
   0956 86 03              2799 	mov	ar3,@r0
   0958 08                 2800 	inc	r0
   0959 86 04              2801 	mov	ar4,@r0
   095B C0 05              2802 	push	ar5
   095D C0 06              2803 	push	ar6
   095F C0 07              2804 	push	ar7
   0961 74r61              2805 	mov	a,#__str_7
   0963 C0 E0              2806 	push	acc
   0965 74s00              2807 	mov	a,#(__str_7 >> 8)
   0967 C0 E0              2808 	push	acc
   0969 74 80              2809 	mov	a,#0x80
   096B C0 E0              2810 	push	acc
   096D C0 02              2811 	push	ar2
   096F C0 03              2812 	push	ar3
   0971 C0 04              2813 	push	ar4
   0973 78r00              2814 	mov	r0,#_sprintf
   0975 79s00              2815 	mov	r1,#(_sprintf >> 8)
   0977 7As00              2816 	mov	r2,#(_sprintf >> 16)
   0979 12s00r00           2817 	lcall	__sdcc_banked_call
   097C E5 81              2818 	mov	a,sp
   097E 24 F7              2819 	add	a,#0xf7
                           2820 ;	main.c:250: ptr = ptr + strlen(ptr);
   0980 F5 81              2821 	mov	sp,a
   0982 24 F5              2822 	add	a,#0xf5
   0984 F8                 2823 	mov	r0,a
   0985 86 02              2824 	mov	ar2,@r0
   0987 08                 2825 	inc	r0
   0988 86 03              2826 	mov	ar3,@r0
   098A 08                 2827 	inc	r0
   098B 86 04              2828 	mov	ar4,@r0
   098D 8A 82              2829 	mov	dpl,r2
   098F 8B 83              2830 	mov	dph,r3
   0991 8C F0              2831 	mov	b,r4
   0993 78r00              2832 	mov	r0,#_strlen
   0995 79s00              2833 	mov	r1,#(_strlen >> 8)
   0997 7As00              2834 	mov	r2,#(_strlen >> 16)
   0999 12s00r00           2835 	lcall	__sdcc_banked_call
   099C AE 82              2836 	mov	r6,dpl
   099E AF 83              2837 	mov	r7,dph
   09A0 E5 81              2838 	mov	a,sp
   09A2 24 F5              2839 	add	a,#0xf5
   09A4 F8                 2840 	mov	r0,a
   09A5 EE                 2841 	mov	a,r6
   09A6 26                 2842 	add	a,@r0
   09A7 F6                 2843 	mov	@r0,a
   09A8 EF                 2844 	mov	a,r7
   09A9 08                 2845 	inc	r0
   09AA 36                 2846 	addc	a,@r0
   09AB F6                 2847 	mov	@r0,a
                           2848 ;	main.c:253: sub1 = cJSON_GetArrayItem(sub, 1);
   09AC 74 01              2849 	mov	a,#0x01
   09AE C0 E0              2850 	push	acc
   09B0 E4                 2851 	clr	a
   09B1 C0 E0              2852 	push	acc
   09B3 E5 81              2853 	mov	a,sp
   09B5 24 E0              2854 	add	a,#0xe0
   09B7 F8                 2855 	mov	r0,a
   09B8 86 82              2856 	mov	dpl,@r0
   09BA 08                 2857 	inc	r0
   09BB 86 83              2858 	mov	dph,@r0
   09BD 08                 2859 	inc	r0
   09BE 86 F0              2860 	mov	b,@r0
   09C0 78r00              2861 	mov	r0,#_cJSON_GetArrayItem
   09C2 79s00              2862 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   09C4 7As00              2863 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   09C6 12s00r00           2864 	lcall	__sdcc_banked_call
   09C9 AD 82              2865 	mov	r5,dpl
   09CB AE 83              2866 	mov	r6,dph
   09CD AF F0              2867 	mov	r7,b
   09CF 15 81              2868 	dec	sp
   09D1 15 81              2869 	dec	sp
   09D3 E5 81              2870 	mov	a,sp
   09D5 24 E5              2871 	add	a,#0xe5
   09D7 F8                 2872 	mov	r0,a
   09D8 A6 05              2873 	mov	@r0,ar5
   09DA 08                 2874 	inc	r0
   09DB A6 06              2875 	mov	@r0,ar6
   09DD 08                 2876 	inc	r0
   09DE A6 07              2877 	mov	@r0,ar7
                           2878 ;	main.c:254: if (!sub1) {
   09E0 E5 81              2879 	mov	a,sp
   09E2 24 E5              2880 	add	a,#0xe5
   09E4 F8                 2881 	mov	r0,a
   09E5 E6                 2882 	mov	a,@r0
   09E6 08                 2883 	inc	r0
   09E7 46                 2884 	orl	a,@r0
   09E8 70 03              2885 	jnz	00178$
   09EA 02s0Dr83           2886 	ljmp	00134$
   09ED                    2887 00178$:
                           2888 ;	main.c:258: for (j = 0; j < cJSON_GetArraySize(sub1); j++) {
   09ED 7E 00              2889 	mov	r6,#0x00
   09EF 7F 00              2890 	mov	r7,#0x00
   09F1                    2891 00128$:
   09F1 E5 81              2892 	mov	a,sp
   09F3 24 E5              2893 	add	a,#0xe5
   09F5 F8                 2894 	mov	r0,a
   09F6 86 82              2895 	mov	dpl,@r0
   09F8 08                 2896 	inc	r0
   09F9 86 83              2897 	mov	dph,@r0
   09FB 08                 2898 	inc	r0
   09FC 86 F0              2899 	mov	b,@r0
   09FE C0 07              2900 	push	ar7
   0A00 C0 06              2901 	push	ar6
   0A02 78r00              2902 	mov	r0,#_cJSON_GetArraySize
   0A04 79s00              2903 	mov	r1,#(_cJSON_GetArraySize >> 8)
   0A06 7As00              2904 	mov	r2,#(_cJSON_GetArraySize >> 16)
   0A08 12s00r00           2905 	lcall	__sdcc_banked_call
   0A0B AC 82              2906 	mov	r4,dpl
   0A0D AD 83              2907 	mov	r5,dph
   0A0F D0 06              2908 	pop	ar6
   0A11 D0 07              2909 	pop	ar7
   0A13 C3                 2910 	clr	c
   0A14 EE                 2911 	mov	a,r6
   0A15 9C                 2912 	subb	a,r4
   0A16 EF                 2913 	mov	a,r7
   0A17 9D                 2914 	subb	a,r5
   0A18 40 03              2915 	jc	00179$
   0A1A 02s0Dr46           2916 	ljmp	00131$
   0A1D                    2917 00179$:
                           2918 ;	main.c:259: sub2 = cJSON_GetArrayItem(sub1, j);
   0A1D 8E 04              2919 	mov	ar4,r6
   0A1F 8F 05              2920 	mov	ar5,r7
   0A21 C0 07              2921 	push	ar7
   0A23 C0 06              2922 	push	ar6
   0A25 C0 04              2923 	push	ar4
   0A27 C0 05              2924 	push	ar5
   0A29 E5 81              2925 	mov	a,sp
   0A2B 24 E1              2926 	add	a,#0xe1
   0A2D F8                 2927 	mov	r0,a
   0A2E 86 82              2928 	mov	dpl,@r0
   0A30 08                 2929 	inc	r0
   0A31 86 83              2930 	mov	dph,@r0
   0A33 08                 2931 	inc	r0
   0A34 86 F0              2932 	mov	b,@r0
   0A36 78r00              2933 	mov	r0,#_cJSON_GetArrayItem
   0A38 79s00              2934 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0A3A 7As00              2935 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0A3C 12s00r00           2936 	lcall	__sdcc_banked_call
   0A3F AB 82              2937 	mov	r3,dpl
   0A41 AC 83              2938 	mov	r4,dph
   0A43 AD F0              2939 	mov	r5,b
   0A45 15 81              2940 	dec	sp
   0A47 15 81              2941 	dec	sp
   0A49 D0 06              2942 	pop	ar6
   0A4B D0 07              2943 	pop	ar7
                           2944 ;	main.c:260: if (!sub2) {
   0A4D EB                 2945 	mov	a,r3
   0A4E 4C                 2946 	orl	a,r4
   0A4F 70 03              2947 	jnz	00180$
   0A51 02s0Dr3E           2948 	ljmp	00130$
   0A54                    2949 00180$:
                           2950 ;	main.c:264: res = object_instance_find_resource(obj, sub2->valueint);
   0A54 C0 06              2951 	push	ar6
   0A56 C0 07              2952 	push	ar7
   0A58 E5 81              2953 	mov	a,sp
   0A5A 24 F8              2954 	add	a,#0xf8
   0A5C F8                 2955 	mov	r0,a
   0A5D 74 0E              2956 	mov	a,#0x0E
   0A5F 2B                 2957 	add	a,r3
   0A60 F6                 2958 	mov	@r0,a
   0A61 E4                 2959 	clr	a
   0A62 3C                 2960 	addc	a,r4
   0A63 08                 2961 	inc	r0
   0A64 F6                 2962 	mov	@r0,a
   0A65 08                 2963 	inc	r0
   0A66 A6 05              2964 	mov	@r0,ar5
   0A68 E5 81              2965 	mov	a,sp
   0A6A 24 F8              2966 	add	a,#0xf8
   0A6C F8                 2967 	mov	r0,a
   0A6D 86 82              2968 	mov	dpl,@r0
   0A6F 08                 2969 	inc	r0
   0A70 86 83              2970 	mov	dph,@r0
   0A72 08                 2971 	inc	r0
   0A73 86 F0              2972 	mov	b,@r0
   0A75 12s00r00           2973 	lcall	__gptrget
   0A78 FA                 2974 	mov	r2,a
   0A79 A3                 2975 	inc	dptr
   0A7A 12s00r00           2976 	lcall	__gptrget
   0A7D FF                 2977 	mov	r7,a
   0A7E C0 02              2978 	push	ar2
   0A80 C0 07              2979 	push	ar7
   0A82 E5 81              2980 	mov	a,sp
   0A84 24 E6              2981 	add	a,#0xe6
   0A86 F8                 2982 	mov	r0,a
   0A87 86 82              2983 	mov	dpl,@r0
   0A89 08                 2984 	inc	r0
   0A8A 86 83              2985 	mov	dph,@r0
   0A8C 08                 2986 	inc	r0
   0A8D 86 F0              2987 	mov	b,@r0
   0A8F 78r00              2988 	mov	r0,#_object_instance_find_resource
   0A91 79s00              2989 	mov	r1,#(_object_instance_find_resource >> 8)
   0A93 7As00              2990 	mov	r2,#(_object_instance_find_resource >> 16)
   0A95 12s00r00           2991 	lcall	__sdcc_banked_call
   0A98 AA 82              2992 	mov	r2,dpl
   0A9A AE 83              2993 	mov	r6,dph
   0A9C AF F0              2994 	mov	r7,b
   0A9E 15 81              2995 	dec	sp
   0AA0 15 81              2996 	dec	sp
   0AA2 8A 05              2997 	mov	ar5,r2
   0AA4 8E 04              2998 	mov	ar4,r6
   0AA6 8F 03              2999 	mov	ar3,r7
                           3000 ;	main.c:265: if (!res) {
   0AA8 D0 07              3001 	pop	ar7
   0AAA D0 06              3002 	pop	ar6
   0AAC ED                 3003 	mov	a,r5
   0AAD 4C                 3004 	orl	a,r4
   0AAE 70 03              3005 	jnz	00181$
   0AB0 02s0Dr3E           3006 	ljmp	00130$
   0AB3                    3007 00181$:
                           3008 ;	main.c:269: if (get_resource_value(res, &value) == FAIL) {
   0AB3 C0 06              3009 	push	ar6
   0AB5 C0 07              3010 	push	ar7
   0AB7 E5 81              3011 	mov	a,sp
   0AB9 24 EB              3012 	add	a,#0xEB
   0ABB FA                 3013 	mov	r2,a
   0ABC 7E 00              3014 	mov	r6,#0x00
   0ABE 7F 40              3015 	mov	r7,#0x40
   0AC0 C0 06              3016 	push	ar6
   0AC2 C0 05              3017 	push	ar5
   0AC4 C0 04              3018 	push	ar4
   0AC6 C0 03              3019 	push	ar3
   0AC8 C0 02              3020 	push	ar2
   0ACA C0 06              3021 	push	ar6
   0ACC C0 07              3022 	push	ar7
   0ACE 8D 82              3023 	mov	dpl,r5
   0AD0 8C 83              3024 	mov	dph,r4
   0AD2 8B F0              3025 	mov	b,r3
   0AD4 78r00              3026 	mov	r0,#_get_resource_value
   0AD6 79s00              3027 	mov	r1,#(_get_resource_value >> 8)
   0AD8 7As00              3028 	mov	r2,#(_get_resource_value >> 16)
   0ADA 12s00r00           3029 	lcall	__sdcc_banked_call
   0ADD AF 82              3030 	mov	r7,dpl
   0ADF 15 81              3031 	dec	sp
   0AE1 15 81              3032 	dec	sp
   0AE3 15 81              3033 	dec	sp
   0AE5 D0 03              3034 	pop	ar3
   0AE7 D0 04              3035 	pop	ar4
   0AE9 D0 05              3036 	pop	ar5
   0AEB D0 06              3037 	pop	ar6
   0AED EF                 3038 	mov	a,r7
   0AEE D0 07              3039 	pop	ar7
   0AF0 D0 06              3040 	pop	ar6
   0AF2 70 03              3041 	jnz	00182$
   0AF4 02s0Dr3E           3042 	ljmp	00130$
   0AF7                    3043 00182$:
                           3044 ;	main.c:273: if (res->resource_type->type == Integer) {
   0AF7 C0 06              3045 	push	ar6
   0AF9 C0 07              3046 	push	ar7
   0AFB 74 06              3047 	mov	a,#0x06
   0AFD 2D                 3048 	add	a,r5
   0AFE FA                 3049 	mov	r2,a
   0AFF E4                 3050 	clr	a
   0B00 3C                 3051 	addc	a,r4
   0B01 FE                 3052 	mov	r6,a
   0B02 8B 07              3053 	mov	ar7,r3
   0B04 8A 82              3054 	mov	dpl,r2
   0B06 8E 83              3055 	mov	dph,r6
   0B08 8F F0              3056 	mov	b,r7
   0B0A 12s00r00           3057 	lcall	__gptrget
   0B0D FA                 3058 	mov	r2,a
   0B0E A3                 3059 	inc	dptr
   0B0F 12s00r00           3060 	lcall	__gptrget
   0B12 FE                 3061 	mov	r6,a
   0B13 A3                 3062 	inc	dptr
   0B14 12s00r00           3063 	lcall	__gptrget
   0B17 FF                 3064 	mov	r7,a
   0B18 74 03              3065 	mov	a,#0x03
   0B1A 2A                 3066 	add	a,r2
   0B1B FA                 3067 	mov	r2,a
   0B1C E4                 3068 	clr	a
   0B1D 3E                 3069 	addc	a,r6
   0B1E FE                 3070 	mov	r6,a
   0B1F 8A 82              3071 	mov	dpl,r2
   0B21 8E 83              3072 	mov	dph,r6
   0B23 8F F0              3073 	mov	b,r7
   0B25 12s00r00           3074 	lcall	__gptrget
   0B28 FD                 3075 	mov	r5,a
   0B29 D0 07              3076 	pop	ar7
   0B2B D0 06              3077 	pop	ar6
   0B2D ED                 3078 	mov	a,r5
   0B2E 60 03              3079 	jz	00183$
   0B30 02s0BrD7           3080 	ljmp	00126$
   0B33                    3081 00183$:
                           3082 ;	main.c:274: sprintf(ptr, "[%d, %d],", sub2->valueint, value.int_value);
   0B33 C0 06              3083 	push	ar6
   0B35 C0 07              3084 	push	ar7
   0B37 E5 81              3085 	mov	a,sp
   0B39 24 EB              3086 	add	a,#0xEB
   0B3B F9                 3087 	mov	r1,a
   0B3C 87 05              3088 	mov	ar5,@r1
   0B3E 09                 3089 	inc	r1
   0B3F 87 04              3090 	mov	ar4,@r1
   0B41 19                 3091 	dec	r1
   0B42 E5 81              3092 	mov	a,sp
   0B44 24 F8              3093 	add	a,#0xf8
   0B46 F8                 3094 	mov	r0,a
   0B47 86 82              3095 	mov	dpl,@r0
   0B49 08                 3096 	inc	r0
   0B4A 86 83              3097 	mov	dph,@r0
   0B4C 08                 3098 	inc	r0
   0B4D 86 F0              3099 	mov	b,@r0
   0B4F E5 81              3100 	mov	a,sp
   0B51 24 F6              3101 	add	a,#0xf6
   0B53 F9                 3102 	mov	r1,a
   0B54 12s00r00           3103 	lcall	__gptrget
   0B57 F7                 3104 	mov	@r1,a
   0B58 A3                 3105 	inc	dptr
   0B59 12s00r00           3106 	lcall	__gptrget
   0B5C 09                 3107 	inc	r1
   0B5D F7                 3108 	mov	@r1,a
   0B5E E5 81              3109 	mov	a,sp
   0B60 24 F3              3110 	add	a,#0xf3
   0B62 F8                 3111 	mov	r0,a
   0B63 86 02              3112 	mov	ar2,@r0
   0B65 08                 3113 	inc	r0
   0B66 86 06              3114 	mov	ar6,@r0
   0B68 08                 3115 	inc	r0
   0B69 86 07              3116 	mov	ar7,@r0
   0B6B C0 07              3117 	push	ar7
   0B6D C0 06              3118 	push	ar6
   0B6F C0 05              3119 	push	ar5
   0B71 C0 04              3120 	push	ar4
   0B73 E5 81              3121 	mov	a,sp
   0B75 24 F2              3122 	add	a,#0xf2
   0B77 F8                 3123 	mov	r0,a
   0B78 E6                 3124 	mov	a,@r0
   0B79 C0 E0              3125 	push	acc
   0B7B 08                 3126 	inc	r0
   0B7C E6                 3127 	mov	a,@r0
   0B7D C0 E0              3128 	push	acc
   0B7F 74r67              3129 	mov	a,#__str_8
   0B81 C0 E0              3130 	push	acc
   0B83 74s00              3131 	mov	a,#(__str_8 >> 8)
   0B85 C0 E0              3132 	push	acc
   0B87 74 80              3133 	mov	a,#0x80
   0B89 C0 E0              3134 	push	acc
   0B8B C0 02              3135 	push	ar2
   0B8D C0 06              3136 	push	ar6
   0B8F C0 07              3137 	push	ar7
   0B91 78r00              3138 	mov	r0,#_sprintf
   0B93 79s00              3139 	mov	r1,#(_sprintf >> 8)
   0B95 7As00              3140 	mov	r2,#(_sprintf >> 16)
   0B97 12s00r00           3141 	lcall	__sdcc_banked_call
   0B9A E5 81              3142 	mov	a,sp
   0B9C 24 F6              3143 	add	a,#0xf6
   0B9E F5 81              3144 	mov	sp,a
   0BA0 D0 06              3145 	pop	ar6
   0BA2 D0 07              3146 	pop	ar7
                           3147 ;	main.c:275: ptr = ptr + strlen(ptr);
   0BA4 E5 81              3148 	mov	a,sp
   0BA6 24 F3              3149 	add	a,#0xf3
   0BA8 F8                 3150 	mov	r0,a
   0BA9 86 02              3151 	mov	ar2,@r0
   0BAB 08                 3152 	inc	r0
   0BAC 86 06              3153 	mov	ar6,@r0
   0BAE 08                 3154 	inc	r0
   0BAF 86 07              3155 	mov	ar7,@r0
   0BB1 8A 82              3156 	mov	dpl,r2
   0BB3 8E 83              3157 	mov	dph,r6
   0BB5 8F F0              3158 	mov	b,r7
   0BB7 78r00              3159 	mov	r0,#_strlen
   0BB9 79s00              3160 	mov	r1,#(_strlen >> 8)
   0BBB 7As00              3161 	mov	r2,#(_strlen >> 16)
   0BBD 12s00r00           3162 	lcall	__sdcc_banked_call
   0BC0 AE 82              3163 	mov	r6,dpl
   0BC2 AF 83              3164 	mov	r7,dph
   0BC4 E5 81              3165 	mov	a,sp
   0BC6 24 F3              3166 	add	a,#0xf3
   0BC8 F8                 3167 	mov	r0,a
   0BC9 EE                 3168 	mov	a,r6
   0BCA 26                 3169 	add	a,@r0
   0BCB F6                 3170 	mov	@r0,a
   0BCC EF                 3171 	mov	a,r7
   0BCD 08                 3172 	inc	r0
   0BCE 36                 3173 	addc	a,@r0
   0BCF F6                 3174 	mov	@r0,a
   0BD0 D0 07              3175 	pop	ar7
   0BD2 D0 06              3176 	pop	ar6
   0BD4 02s0Dr3E           3177 	ljmp	00130$
   0BD7                    3178 00126$:
                           3179 ;	main.c:276: } else if (res->resource_type->type == Float) {
   0BD7 BD 01 02           3180 	cjne	r5,#0x01,00184$
   0BDA 80 03              3181 	sjmp	00185$
   0BDC                    3182 00184$:
   0BDC 02s0Cr95           3183 	ljmp	00123$
   0BDF                    3184 00185$:
                           3185 ;	main.c:277: sprintf(ptr, "[%d, %f],", sub2->valueint, value.float_value);
   0BDF C0 06              3186 	push	ar6
   0BE1 C0 07              3187 	push	ar7
   0BE3 E5 81              3188 	mov	a,sp
   0BE5 24 EB              3189 	add	a,#0xEB
   0BE7 F9                 3190 	mov	r1,a
   0BE8 E5 81              3191 	mov	a,sp
   0BEA 24 FB              3192 	add	a,#0xfb
   0BEC F8                 3193 	mov	r0,a
   0BED E7                 3194 	mov	a,@r1
   0BEE F6                 3195 	mov	@r0,a
   0BEF 09                 3196 	inc	r1
   0BF0 E7                 3197 	mov	a,@r1
   0BF1 08                 3198 	inc	r0
   0BF2 F6                 3199 	mov	@r0,a
   0BF3 09                 3200 	inc	r1
   0BF4 E7                 3201 	mov	a,@r1
   0BF5 08                 3202 	inc	r0
   0BF6 F6                 3203 	mov	@r0,a
   0BF7 09                 3204 	inc	r1
   0BF8 E7                 3205 	mov	a,@r1
   0BF9 08                 3206 	inc	r0
   0BFA F6                 3207 	mov	@r0,a
   0BFB 19                 3208 	dec	r1
   0BFC 19                 3209 	dec	r1
   0BFD 19                 3210 	dec	r1
   0BFE E5 81              3211 	mov	a,sp
   0C00 24 F8              3212 	add	a,#0xf8
   0C02 F8                 3213 	mov	r0,a
   0C03 86 82              3214 	mov	dpl,@r0
   0C05 08                 3215 	inc	r0
   0C06 86 83              3216 	mov	dph,@r0
   0C08 08                 3217 	inc	r0
   0C09 86 F0              3218 	mov	b,@r0
   0C0B 12s00r00           3219 	lcall	__gptrget
   0C0E FD                 3220 	mov	r5,a
   0C0F A3                 3221 	inc	dptr
   0C10 12s00r00           3222 	lcall	__gptrget
   0C13 FA                 3223 	mov	r2,a
   0C14 E5 81              3224 	mov	a,sp
   0C16 24 F3              3225 	add	a,#0xf3
   0C18 F8                 3226 	mov	r0,a
   0C19 86 03              3227 	mov	ar3,@r0
   0C1B 08                 3228 	inc	r0
   0C1C 86 04              3229 	mov	ar4,@r0
   0C1E 08                 3230 	inc	r0
   0C1F 86 07              3231 	mov	ar7,@r0
   0C21 C0 07              3232 	push	ar7
   0C23 C0 06              3233 	push	ar6
   0C25 E5 81              3234 	mov	a,sp
   0C27 24 F9              3235 	add	a,#0xf9
   0C29 F8                 3236 	mov	r0,a
   0C2A E6                 3237 	mov	a,@r0
   0C2B C0 E0              3238 	push	acc
   0C2D 08                 3239 	inc	r0
   0C2E E6                 3240 	mov	a,@r0
   0C2F C0 E0              3241 	push	acc
   0C31 08                 3242 	inc	r0
   0C32 E6                 3243 	mov	a,@r0
   0C33 C0 E0              3244 	push	acc
   0C35 08                 3245 	inc	r0
   0C36 E6                 3246 	mov	a,@r0
   0C37 C0 E0              3247 	push	acc
   0C39 C0 05              3248 	push	ar5
   0C3B C0 02              3249 	push	ar2
   0C3D 74r71              3250 	mov	a,#__str_9
   0C3F C0 E0              3251 	push	acc
   0C41 74s00              3252 	mov	a,#(__str_9 >> 8)
   0C43 C0 E0              3253 	push	acc
   0C45 74 80              3254 	mov	a,#0x80
   0C47 C0 E0              3255 	push	acc
   0C49 C0 03              3256 	push	ar3
   0C4B C0 04              3257 	push	ar4
   0C4D C0 07              3258 	push	ar7
   0C4F 78r00              3259 	mov	r0,#_sprintf
   0C51 79s00              3260 	mov	r1,#(_sprintf >> 8)
   0C53 7As00              3261 	mov	r2,#(_sprintf >> 16)
   0C55 12s00r00           3262 	lcall	__sdcc_banked_call
   0C58 E5 81              3263 	mov	a,sp
   0C5A 24 F4              3264 	add	a,#0xf4
   0C5C F5 81              3265 	mov	sp,a
   0C5E D0 06              3266 	pop	ar6
   0C60 D0 07              3267 	pop	ar7
                           3268 ;	main.c:278: ptr = ptr + strlen(ptr);
   0C62 E5 81              3269 	mov	a,sp
   0C64 24 F3              3270 	add	a,#0xf3
   0C66 F8                 3271 	mov	r0,a
   0C67 86 02              3272 	mov	ar2,@r0
   0C69 08                 3273 	inc	r0
   0C6A 86 03              3274 	mov	ar3,@r0
   0C6C 08                 3275 	inc	r0
   0C6D 86 04              3276 	mov	ar4,@r0
   0C6F 8A 82              3277 	mov	dpl,r2
   0C71 8B 83              3278 	mov	dph,r3
   0C73 8C F0              3279 	mov	b,r4
   0C75 78r00              3280 	mov	r0,#_strlen
   0C77 79s00              3281 	mov	r1,#(_strlen >> 8)
   0C79 7As00              3282 	mov	r2,#(_strlen >> 16)
   0C7B 12s00r00           3283 	lcall	__sdcc_banked_call
   0C7E AE 82              3284 	mov	r6,dpl
   0C80 AF 83              3285 	mov	r7,dph
   0C82 E5 81              3286 	mov	a,sp
   0C84 24 F3              3287 	add	a,#0xf3
   0C86 F8                 3288 	mov	r0,a
   0C87 EE                 3289 	mov	a,r6
   0C88 26                 3290 	add	a,@r0
   0C89 F6                 3291 	mov	@r0,a
   0C8A EF                 3292 	mov	a,r7
   0C8B 08                 3293 	inc	r0
   0C8C 36                 3294 	addc	a,@r0
   0C8D F6                 3295 	mov	@r0,a
   0C8E D0 07              3296 	pop	ar7
   0C90 D0 06              3297 	pop	ar6
   0C92 02s0Dr3E           3298 	ljmp	00130$
   0C95                    3299 00123$:
                           3300 ;	main.c:279: } else if (res->resource_type->type == String) {
   0C95 BD 02 02           3301 	cjne	r5,#0x02,00186$
   0C98 80 03              3302 	sjmp	00187$
   0C9A                    3303 00186$:
   0C9A 02s0Dr3E           3304 	ljmp	00130$
   0C9D                    3305 00187$:
                           3306 ;	main.c:280: sprintf(ptr, "[%d, %s],", sub2->valueint, value.string_value);
   0C9D C0 06              3307 	push	ar6
   0C9F C0 07              3308 	push	ar7
   0CA1 E5 81              3309 	mov	a,sp
   0CA3 24 EB              3310 	add	a,#0xEB
   0CA5 FD                 3311 	mov	r5,a
   0CA6 7C 00              3312 	mov	r4,#0x00
   0CA8 7B 40              3313 	mov	r3,#0x40
   0CAA E5 81              3314 	mov	a,sp
   0CAC 24 F8              3315 	add	a,#0xf8
   0CAE F8                 3316 	mov	r0,a
   0CAF 86 82              3317 	mov	dpl,@r0
   0CB1 08                 3318 	inc	r0
   0CB2 86 83              3319 	mov	dph,@r0
   0CB4 08                 3320 	inc	r0
   0CB5 86 F0              3321 	mov	b,@r0
   0CB7 E5 81              3322 	mov	a,sp
   0CB9 24 FB              3323 	add	a,#0xfb
   0CBB F9                 3324 	mov	r1,a
   0CBC 12s00r00           3325 	lcall	__gptrget
   0CBF F7                 3326 	mov	@r1,a
   0CC0 A3                 3327 	inc	dptr
   0CC1 12s00r00           3328 	lcall	__gptrget
   0CC4 09                 3329 	inc	r1
   0CC5 F7                 3330 	mov	@r1,a
   0CC6 E5 81              3331 	mov	a,sp
   0CC8 24 F3              3332 	add	a,#0xf3
   0CCA F8                 3333 	mov	r0,a
   0CCB 86 02              3334 	mov	ar2,@r0
   0CCD 08                 3335 	inc	r0
   0CCE 86 06              3336 	mov	ar6,@r0
   0CD0 08                 3337 	inc	r0
   0CD1 86 07              3338 	mov	ar7,@r0
   0CD3 C0 07              3339 	push	ar7
   0CD5 C0 06              3340 	push	ar6
   0CD7 C0 05              3341 	push	ar5
   0CD9 C0 04              3342 	push	ar4
   0CDB C0 03              3343 	push	ar3
   0CDD E5 81              3344 	mov	a,sp
   0CDF 24 F6              3345 	add	a,#0xf6
   0CE1 F8                 3346 	mov	r0,a
   0CE2 E6                 3347 	mov	a,@r0
   0CE3 C0 E0              3348 	push	acc
   0CE5 08                 3349 	inc	r0
   0CE6 E6                 3350 	mov	a,@r0
   0CE7 C0 E0              3351 	push	acc
   0CE9 74r7B              3352 	mov	a,#__str_10
   0CEB C0 E0              3353 	push	acc
   0CED 74s00              3354 	mov	a,#(__str_10 >> 8)
   0CEF C0 E0              3355 	push	acc
   0CF1 74 80              3356 	mov	a,#0x80
   0CF3 C0 E0              3357 	push	acc
   0CF5 C0 02              3358 	push	ar2
   0CF7 C0 06              3359 	push	ar6
   0CF9 C0 07              3360 	push	ar7
   0CFB 78r00              3361 	mov	r0,#_sprintf
   0CFD 79s00              3362 	mov	r1,#(_sprintf >> 8)
   0CFF 7As00              3363 	mov	r2,#(_sprintf >> 16)
   0D01 12s00r00           3364 	lcall	__sdcc_banked_call
   0D04 E5 81              3365 	mov	a,sp
   0D06 24 F5              3366 	add	a,#0xf5
   0D08 F5 81              3367 	mov	sp,a
   0D0A D0 06              3368 	pop	ar6
   0D0C D0 07              3369 	pop	ar7
                           3370 ;	main.c:281: ptr = ptr + strlen(ptr);
   0D0E E5 81              3371 	mov	a,sp
   0D10 24 F3              3372 	add	a,#0xf3
   0D12 F8                 3373 	mov	r0,a
   0D13 86 02              3374 	mov	ar2,@r0
   0D15 08                 3375 	inc	r0
   0D16 86 03              3376 	mov	ar3,@r0
   0D18 08                 3377 	inc	r0
   0D19 86 04              3378 	mov	ar4,@r0
   0D1B 8A 82              3379 	mov	dpl,r2
   0D1D 8B 83              3380 	mov	dph,r3
   0D1F 8C F0              3381 	mov	b,r4
   0D21 78r00              3382 	mov	r0,#_strlen
   0D23 79s00              3383 	mov	r1,#(_strlen >> 8)
   0D25 7As00              3384 	mov	r2,#(_strlen >> 16)
   0D27 12s00r00           3385 	lcall	__sdcc_banked_call
   0D2A AE 82              3386 	mov	r6,dpl
   0D2C AF 83              3387 	mov	r7,dph
   0D2E E5 81              3388 	mov	a,sp
   0D30 24 F3              3389 	add	a,#0xf3
   0D32 F8                 3390 	mov	r0,a
   0D33 EE                 3391 	mov	a,r6
   0D34 26                 3392 	add	a,@r0
   0D35 F6                 3393 	mov	@r0,a
   0D36 EF                 3394 	mov	a,r7
   0D37 08                 3395 	inc	r0
   0D38 36                 3396 	addc	a,@r0
   0D39 F6                 3397 	mov	@r0,a
                           3398 ;	main.c:296: return;
   0D3A D0 07              3399 	pop	ar7
   0D3C D0 06              3400 	pop	ar6
                           3401 ;	main.c:283: continue;
   0D3E                    3402 00130$:
                           3403 ;	main.c:258: for (j = 0; j < cJSON_GetArraySize(sub1); j++) {
   0D3E 0E                 3404 	inc	r6
   0D3F BE 00 01           3405 	cjne	r6,#0x00,00188$
   0D42 0F                 3406 	inc	r7
   0D43                    3407 00188$:
   0D43 02s09rF1           3408 	ljmp	00128$
   0D46                    3409 00131$:
                           3410 ;	main.c:288: sprintf((ptr - 1), "]],");
   0D46 E5 81              3411 	mov	a,sp
   0D48 24 F5              3412 	add	a,#0xf5
   0D4A F8                 3413 	mov	r0,a
   0D4B E6                 3414 	mov	a,@r0
   0D4C 24 FF              3415 	add	a,#0xFF
   0D4E FD                 3416 	mov	r5,a
   0D4F 08                 3417 	inc	r0
   0D50 E6                 3418 	mov	a,@r0
   0D51 34 FF              3419 	addc	a,#0xFF
   0D53 FE                 3420 	mov	r6,a
   0D54 08                 3421 	inc	r0
   0D55 86 07              3422 	mov	ar7,@r0
   0D57 74r85              3423 	mov	a,#__str_11
   0D59 C0 E0              3424 	push	acc
   0D5B 74s00              3425 	mov	a,#(__str_11 >> 8)
   0D5D C0 E0              3426 	push	acc
   0D5F 74 80              3427 	mov	a,#0x80
   0D61 C0 E0              3428 	push	acc
   0D63 C0 05              3429 	push	ar5
   0D65 C0 06              3430 	push	ar6
   0D67 C0 07              3431 	push	ar7
   0D69 78r00              3432 	mov	r0,#_sprintf
   0D6B 79s00              3433 	mov	r1,#(_sprintf >> 8)
   0D6D 7As00              3434 	mov	r2,#(_sprintf >> 16)
   0D6F 12s00r00           3435 	lcall	__sdcc_banked_call
   0D72 E5 81              3436 	mov	a,sp
   0D74 24 FA              3437 	add	a,#0xfa
                           3438 ;	main.c:289: ptr += 2;
   0D76 F5 81              3439 	mov	sp,a
   0D78 24 F5              3440 	add	a,#0xf5
   0D7A F8                 3441 	mov	r0,a
   0D7B 74 02              3442 	mov	a,#0x02
   0D7D 26                 3443 	add	a,@r0
   0D7E F6                 3444 	mov	@r0,a
   0D7F E4                 3445 	clr	a
   0D80 08                 3446 	inc	r0
   0D81 36                 3447 	addc	a,@r0
   0D82 F6                 3448 	mov	@r0,a
   0D83                    3449 00134$:
                           3450 ;	main.c:232: for (;i < cJSON_GetArraySize(root); i++) {
   0D83 E5 81              3451 	mov	a,sp
   0D85 24 E8              3452 	add	a,#0xe8
   0D87 F8                 3453 	mov	r0,a
   0D88 06                 3454 	inc	@r0
   0D89 B6 00 02           3455 	cjne	@r0,#0x00,00189$
   0D8C 08                 3456 	inc	r0
   0D8D 06                 3457 	inc	@r0
   0D8E                    3458 00189$:
   0D8E 02s08r2A           3459 	ljmp	00132$
   0D91                    3460 00135$:
                           3461 ;	main.c:292: sprintf((ptr - 1), "]");//discard last ','
   0D91 E5 81              3462 	mov	a,sp
   0D93 24 F5              3463 	add	a,#0xf5
   0D95 F8                 3464 	mov	r0,a
   0D96 E6                 3465 	mov	a,@r0
   0D97 24 FF              3466 	add	a,#0xFF
   0D99 FD                 3467 	mov	r5,a
   0D9A 08                 3468 	inc	r0
   0D9B E6                 3469 	mov	a,@r0
   0D9C 34 FF              3470 	addc	a,#0xFF
   0D9E FE                 3471 	mov	r6,a
   0D9F 08                 3472 	inc	r0
   0DA0 86 07              3473 	mov	ar7,@r0
   0DA2 74r89              3474 	mov	a,#__str_12
   0DA4 C0 E0              3475 	push	acc
   0DA6 74s00              3476 	mov	a,#(__str_12 >> 8)
   0DA8 C0 E0              3477 	push	acc
   0DAA 74 80              3478 	mov	a,#0x80
   0DAC C0 E0              3479 	push	acc
   0DAE C0 05              3480 	push	ar5
   0DB0 C0 06              3481 	push	ar6
   0DB2 C0 07              3482 	push	ar7
   0DB4 78r00              3483 	mov	r0,#_sprintf
   0DB6 79s00              3484 	mov	r1,#(_sprintf >> 8)
   0DB8 7As00              3485 	mov	r2,#(_sprintf >> 16)
   0DBA 12s00r00           3486 	lcall	__sdcc_banked_call
   0DBD E5 81              3487 	mov	a,sp
   0DBF 24 FA              3488 	add	a,#0xfa
   0DC1 F5 81              3489 	mov	sp,a
                           3490 ;	main.c:294: send_msg(output_buf, ptr - output_buf, &UIP_IP_BUF->srcipaddr);
   0DC3 7Er00              3491 	mov	r6,#_uip_aligned_buf
   0DC5 7Fs00              3492 	mov	r7,#(_uip_aligned_buf >> 8)
   0DC7 74 08              3493 	mov	a,#0x08
   0DC9 2E                 3494 	add	a,r6
   0DCA FE                 3495 	mov	r6,a
   0DCB E4                 3496 	clr	a
   0DCC 3F                 3497 	addc	a,r7
   0DCD FF                 3498 	mov	r7,a
   0DCE 7D 00              3499 	mov	r5,#0x00
   0DD0 E5 81              3500 	mov	a,sp
   0DD2 24 F5              3501 	add	a,#0xf5
   0DD4 F8                 3502 	mov	r0,a
   0DD5 E6                 3503 	mov	a,@r0
   0DD6 C3                 3504 	clr	c
   0DD7 94r00              3505 	subb	a,#_output_buf
   0DD9 FB                 3506 	mov	r3,a
   0DDA 08                 3507 	inc	r0
   0DDB E6                 3508 	mov	a,@r0
   0DDC 94s00              3509 	subb	a,#(_output_buf >> 8)
   0DDE FC                 3510 	mov	r4,a
   0DDF C0 06              3511 	push	ar6
   0DE1 C0 07              3512 	push	ar7
   0DE3 C0 05              3513 	push	ar5
   0DE5 C0 03              3514 	push	ar3
   0DE7 C0 04              3515 	push	ar4
   0DE9 90s00r00           3516 	mov	dptr,#_output_buf
   0DEC 75 F0 00           3517 	mov	b,#0x00
   0DEF 78rAA              3518 	mov	r0,#_send_msg
   0DF1 79s00              3519 	mov	r1,#(_send_msg >> 8)
   0DF3 7As00              3520 	mov	r2,#(_send_msg >> 16)
   0DF5 12s00r00           3521 	lcall	__sdcc_banked_call
   0DF8 E5 81              3522 	mov	a,sp
   0DFA 24 FB              3523 	add	a,#0xfb
   0DFC F5 81              3524 	mov	sp,a
                           3525 ;	main.c:296: return;
   0DFE                    3526 00136$:
   0DFE E5 81              3527 	mov	a,sp
   0E00 24 DE              3528 	add	a,#0xDE
   0E02 F5 81              3529 	mov	sp,a
   0E04 02s00r00           3530 	ljmp	__sdcc_banked_ret
                           3531 ;------------------------------------------------------------
                           3532 ;Allocation info for local variables in function 'reload_request_handler'
                           3533 ;------------------------------------------------------------
                           3534 ;	main.c:325: reload_request_handler()
                           3535 ;	-----------------------------------------
                           3536 ;	 function reload_request_handler
                           3537 ;	-----------------------------------------
   0E07                    3538 _reload_request_handler:
                           3539 ;	main.c:328: }
   0E07 02s00r00           3540 	ljmp	__sdcc_banked_ret
                           3541 ;------------------------------------------------------------
                           3542 ;Allocation info for local variables in function 'subscribe_request_handler'
                           3543 ;------------------------------------------------------------
                           3544 ;parameters                Allocated to stack - sp -30
                           3545 ;device_id                 Allocated to stack - sp -24
                           3546 ;root                      Allocated to stack - sp -21
                           3547 ;sub                       Allocated to registers r3 r4 r5 
                           3548 ;sub1                      Allocated to registers r3 r4 r5 
                           3549 ;sub3                      Allocated to registers r7 r6 r2 
                           3550 ;sub4                      Allocated to stack - sp -18
                           3551 ;i                         Allocated to stack - sp -15
                           3552 ;j                         Allocated to registers 
                           3553 ;obj                       Allocated to stack - sp -13
                           3554 ;res                       Allocated to stack - sp -10
                           3555 ;retcode                   Allocated to registers 
                           3556 ;subscriber                Allocated to stack - sp -7
                           3557 ;cond_value                Allocated to stack - sp -4
                           3558 ;op                        Allocated to stack - sp +0
                           3559 ;sloc0                     Allocated to stack - sp +13
                           3560 ;------------------------------------------------------------
                           3561 ;	main.c:332: subscribe_request_handler(uint8_t *device_id, uint8_t *parameters)
                           3562 ;	-----------------------------------------
                           3563 ;	 function subscribe_request_handler
                           3564 ;	-----------------------------------------
   0E0A                    3565 _subscribe_request_handler:
   0E0A C0 82              3566 	push	dpl
   0E0C C0 83              3567 	push	dph
   0E0E C0 F0              3568 	push	b
   0E10 E5 81              3569 	mov	a,sp
   0E12 24 16              3570 	add	a,#0x16
                           3571 ;	main.c:343: if (!parameters) {
   0E14 F5 81              3572 	mov	sp,a
   0E16 24 E2              3573 	add	a,#0xe2
   0E18 F8                 3574 	mov	r0,a
   0E19 E6                 3575 	mov	a,@r0
   0E1A 08                 3576 	inc	r0
   0E1B 46                 3577 	orl	a,@r0
   0E1C 70 03              3578 	jnz	00102$
                           3579 ;	main.c:344: return;
   0E1E 02s13r59           3580 	ljmp	00141$
   0E21                    3581 00102$:
                           3582 ;	main.c:347: root = cJSON_Parse(parameters);
   0E21 E5 81              3583 	mov	a,sp
   0E23 24 E2              3584 	add	a,#0xe2
   0E25 F8                 3585 	mov	r0,a
   0E26 86 02              3586 	mov	ar2,@r0
   0E28 08                 3587 	inc	r0
   0E29 86 03              3588 	mov	ar3,@r0
   0E2B 08                 3589 	inc	r0
   0E2C 86 04              3590 	mov	ar4,@r0
   0E2E 8A 82              3591 	mov	dpl,r2
   0E30 8B 83              3592 	mov	dph,r3
   0E32 8C F0              3593 	mov	b,r4
   0E34 78r00              3594 	mov	r0,#_cJSON_Parse
   0E36 79s00              3595 	mov	r1,#(_cJSON_Parse >> 8)
   0E38 7As00              3596 	mov	r2,#(_cJSON_Parse >> 16)
   0E3A 12s00r00           3597 	lcall	__sdcc_banked_call
   0E3D AA 82              3598 	mov	r2,dpl
   0E3F AB 83              3599 	mov	r3,dph
   0E41 AC F0              3600 	mov	r4,b
   0E43 E5 81              3601 	mov	a,sp
   0E45 24 EB              3602 	add	a,#0xeb
   0E47 F8                 3603 	mov	r0,a
   0E48 A6 02              3604 	mov	@r0,ar2
   0E4A 08                 3605 	inc	r0
   0E4B A6 03              3606 	mov	@r0,ar3
   0E4D 08                 3607 	inc	r0
   0E4E A6 04              3608 	mov	@r0,ar4
                           3609 ;	main.c:349: if (!root) {
   0E50 E5 81              3610 	mov	a,sp
   0E52 24 EB              3611 	add	a,#0xeb
   0E54 F8                 3612 	mov	r0,a
   0E55 E6                 3613 	mov	a,@r0
   0E56 08                 3614 	inc	r0
   0E57 46                 3615 	orl	a,@r0
   0E58 70 03              3616 	jnz	00160$
                           3617 ;	main.c:350: return;
   0E5A 02s13r59           3618 	ljmp	00141$
   0E5D                    3619 00160$:
   0E5D E5 81              3620 	mov	a,sp
   0E5F 24 F1              3621 	add	a,#0xf1
   0E61 F8                 3622 	mov	r0,a
   0E62 E4                 3623 	clr	a
   0E63 F6                 3624 	mov	@r0,a
   0E64 08                 3625 	inc	r0
   0E65 F6                 3626 	mov	@r0,a
   0E66                    3627 00137$:
                           3628 ;	main.c:353: for (;i < cJSON_GetArraySize(root); i++) {
   0E66 E5 81              3629 	mov	a,sp
   0E68 24 EB              3630 	add	a,#0xeb
   0E6A F8                 3631 	mov	r0,a
   0E6B 86 82              3632 	mov	dpl,@r0
   0E6D 08                 3633 	inc	r0
   0E6E 86 83              3634 	mov	dph,@r0
   0E70 08                 3635 	inc	r0
   0E71 86 F0              3636 	mov	b,@r0
   0E73 78r00              3637 	mov	r0,#_cJSON_GetArraySize
   0E75 79s00              3638 	mov	r1,#(_cJSON_GetArraySize >> 8)
   0E77 7As00              3639 	mov	r2,#(_cJSON_GetArraySize >> 16)
   0E79 12s00r00           3640 	lcall	__sdcc_banked_call
   0E7C AC 82              3641 	mov	r4,dpl
   0E7E AD 83              3642 	mov	r5,dph
   0E80 E5 81              3643 	mov	a,sp
   0E82 24 F1              3644 	add	a,#0xf1
   0E84 F8                 3645 	mov	r0,a
   0E85 C3                 3646 	clr	c
   0E86 E6                 3647 	mov	a,@r0
   0E87 9C                 3648 	subb	a,r4
   0E88 08                 3649 	inc	r0
   0E89 E6                 3650 	mov	a,@r0
   0E8A 9D                 3651 	subb	a,r5
   0E8B 40 03              3652 	jc	00181$
   0E8D 02s12rE3           3653 	ljmp	00140$
   0E90                    3654 00181$:
                           3655 ;	main.c:355: sub = cJSON_GetArrayItem(root, i);
   0E90 E5 81              3656 	mov	a,sp
   0E92 24 F1              3657 	add	a,#0xf1
   0E94 F8                 3658 	mov	r0,a
   0E95 86 04              3659 	mov	ar4,@r0
   0E97 08                 3660 	inc	r0
   0E98 86 05              3661 	mov	ar5,@r0
   0E9A C0 04              3662 	push	ar4
   0E9C C0 05              3663 	push	ar5
   0E9E E5 81              3664 	mov	a,sp
   0EA0 24 E9              3665 	add	a,#0xe9
   0EA2 F8                 3666 	mov	r0,a
   0EA3 86 82              3667 	mov	dpl,@r0
   0EA5 08                 3668 	inc	r0
   0EA6 86 83              3669 	mov	dph,@r0
   0EA8 08                 3670 	inc	r0
   0EA9 86 F0              3671 	mov	b,@r0
   0EAB 78r00              3672 	mov	r0,#_cJSON_GetArrayItem
   0EAD 79s00              3673 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0EAF 7As00              3674 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0EB1 12s00r00           3675 	lcall	__sdcc_banked_call
   0EB4 AB 82              3676 	mov	r3,dpl
   0EB6 AC 83              3677 	mov	r4,dph
   0EB8 AD F0              3678 	mov	r5,b
   0EBA 15 81              3679 	dec	sp
   0EBC 15 81              3680 	dec	sp
                           3681 ;	main.c:356: if (!sub) {
   0EBE EB                 3682 	mov	a,r3
   0EBF 4C                 3683 	orl	a,r4
   0EC0 70 03              3684 	jnz	00106$
                           3685 ;	main.c:357: return;
   0EC2 02s13r59           3686 	ljmp	00141$
   0EC5                    3687 00106$:
                           3688 ;	main.c:360: sub1 = cJSON_GetArrayItem(sub, 0);
   0EC5 E4                 3689 	clr	a
   0EC6 C0 E0              3690 	push	acc
   0EC8 C0 E0              3691 	push	acc
   0ECA 8B 82              3692 	mov	dpl,r3
   0ECC 8C 83              3693 	mov	dph,r4
   0ECE 8D F0              3694 	mov	b,r5
   0ED0 78r00              3695 	mov	r0,#_cJSON_GetArrayItem
   0ED2 79s00              3696 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0ED4 7As00              3697 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0ED6 12s00r00           3698 	lcall	__sdcc_banked_call
   0ED9 AB 82              3699 	mov	r3,dpl
   0EDB AC 83              3700 	mov	r4,dph
   0EDD AD F0              3701 	mov	r5,b
   0EDF 15 81              3702 	dec	sp
   0EE1 15 81              3703 	dec	sp
                           3704 ;	main.c:361: if (!sub1) {
   0EE3 EB                 3705 	mov	a,r3
   0EE4 4C                 3706 	orl	a,r4
   0EE5 70 03              3707 	jnz	00108$
                           3708 ;	main.c:362: return;
   0EE7 02s13r59           3709 	ljmp	00141$
   0EEA                    3710 00108$:
                           3711 ;	main.c:365: obj = device_find_object(sub1->valuestring);
   0EEA 74 0B              3712 	mov	a,#0x0B
   0EEC 2B                 3713 	add	a,r3
   0EED FA                 3714 	mov	r2,a
   0EEE E4                 3715 	clr	a
   0EEF 3C                 3716 	addc	a,r4
   0EF0 FE                 3717 	mov	r6,a
   0EF1 8D 07              3718 	mov	ar7,r5
   0EF3 8A 82              3719 	mov	dpl,r2
   0EF5 8E 83              3720 	mov	dph,r6
   0EF7 8F F0              3721 	mov	b,r7
   0EF9 12s00r00           3722 	lcall	__gptrget
   0EFC FA                 3723 	mov	r2,a
   0EFD A3                 3724 	inc	dptr
   0EFE 12s00r00           3725 	lcall	__gptrget
   0F01 FE                 3726 	mov	r6,a
   0F02 A3                 3727 	inc	dptr
   0F03 12s00r00           3728 	lcall	__gptrget
   0F06 FF                 3729 	mov	r7,a
   0F07 8A 82              3730 	mov	dpl,r2
   0F09 8E 83              3731 	mov	dph,r6
   0F0B 8F F0              3732 	mov	b,r7
   0F0D C0 05              3733 	push	ar5
   0F0F C0 04              3734 	push	ar4
   0F11 C0 03              3735 	push	ar3
   0F13 78r00              3736 	mov	r0,#_device_find_object
   0F15 79s00              3737 	mov	r1,#(_device_find_object >> 8)
   0F17 7As00              3738 	mov	r2,#(_device_find_object >> 16)
   0F19 12s00r00           3739 	lcall	__sdcc_banked_call
   0F1C AA 82              3740 	mov	r2,dpl
   0F1E AE 83              3741 	mov	r6,dph
   0F20 AF F0              3742 	mov	r7,b
   0F22 D0 03              3743 	pop	ar3
   0F24 D0 04              3744 	pop	ar4
   0F26 D0 05              3745 	pop	ar5
   0F28 E5 81              3746 	mov	a,sp
   0F2A 24 F3              3747 	add	a,#0xf3
   0F2C F8                 3748 	mov	r0,a
   0F2D A6 02              3749 	mov	@r0,ar2
   0F2F 08                 3750 	inc	r0
   0F30 A6 06              3751 	mov	@r0,ar6
   0F32 08                 3752 	inc	r0
   0F33 A6 07              3753 	mov	@r0,ar7
                           3754 ;	main.c:366: if(!obj) {
   0F35 E5 81              3755 	mov	a,sp
   0F37 24 F3              3756 	add	a,#0xf3
   0F39 F8                 3757 	mov	r0,a
   0F3A E6                 3758 	mov	a,@r0
   0F3B 08                 3759 	inc	r0
   0F3C 46                 3760 	orl	a,@r0
   0F3D 70 03              3761 	jnz	00184$
   0F3F 02s12rD5           3762 	ljmp	00139$
   0F42                    3763 00184$:
                           3764 ;	main.c:370: res = object_instance_find_resource(obj, 5700);//sensor value 
   0F42 C0 05              3765 	push	ar5
   0F44 C0 04              3766 	push	ar4
   0F46 C0 03              3767 	push	ar3
   0F48 74 44              3768 	mov	a,#0x44
   0F4A C0 E0              3769 	push	acc
   0F4C 74 16              3770 	mov	a,#0x16
   0F4E C0 E0              3771 	push	acc
   0F50 E5 81              3772 	mov	a,sp
   0F52 24 EE              3773 	add	a,#0xee
   0F54 F8                 3774 	mov	r0,a
   0F55 86 82              3775 	mov	dpl,@r0
   0F57 08                 3776 	inc	r0
   0F58 86 83              3777 	mov	dph,@r0
   0F5A 08                 3778 	inc	r0
   0F5B 86 F0              3779 	mov	b,@r0
   0F5D 78r00              3780 	mov	r0,#_object_instance_find_resource
   0F5F 79s00              3781 	mov	r1,#(_object_instance_find_resource >> 8)
   0F61 7As00              3782 	mov	r2,#(_object_instance_find_resource >> 16)
   0F63 12s00r00           3783 	lcall	__sdcc_banked_call
   0F66 AF 82              3784 	mov	r7,dpl
   0F68 AE 83              3785 	mov	r6,dph
   0F6A AA F0              3786 	mov	r2,b
   0F6C 15 81              3787 	dec	sp
   0F6E 15 81              3788 	dec	sp
   0F70 D0 03              3789 	pop	ar3
   0F72 D0 04              3790 	pop	ar4
   0F74 D0 05              3791 	pop	ar5
   0F76 E5 81              3792 	mov	a,sp
   0F78 24 F6              3793 	add	a,#0xf6
   0F7A F8                 3794 	mov	r0,a
   0F7B A6 07              3795 	mov	@r0,ar7
   0F7D 08                 3796 	inc	r0
   0F7E A6 06              3797 	mov	@r0,ar6
   0F80 08                 3798 	inc	r0
   0F81 A6 02              3799 	mov	@r0,ar2
                           3800 ;	main.c:371: if (!res) {
   0F83 E5 81              3801 	mov	a,sp
   0F85 24 F6              3802 	add	a,#0xf6
   0F87 F8                 3803 	mov	r0,a
   0F88 E6                 3804 	mov	a,@r0
   0F89 08                 3805 	inc	r0
   0F8A 46                 3806 	orl	a,@r0
   0F8B 70 03              3807 	jnz	00185$
   0F8D 02s12rD5           3808 	ljmp	00139$
   0F90                    3809 00185$:
                           3810 ;	main.c:375: sub3 = cJSON_GetArrayItem(sub1, 1);
   0F90 74 01              3811 	mov	a,#0x01
   0F92 C0 E0              3812 	push	acc
   0F94 E4                 3813 	clr	a
   0F95 C0 E0              3814 	push	acc
   0F97 8B 82              3815 	mov	dpl,r3
   0F99 8C 83              3816 	mov	dph,r4
   0F9B 8D F0              3817 	mov	b,r5
   0F9D 78r00              3818 	mov	r0,#_cJSON_GetArrayItem
   0F9F 79s00              3819 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0FA1 7As00              3820 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0FA3 12s00r00           3821 	lcall	__sdcc_banked_call
   0FA6 AB 82              3822 	mov	r3,dpl
   0FA8 AC 83              3823 	mov	r4,dph
   0FAA AD F0              3824 	mov	r5,b
   0FAC 15 81              3825 	dec	sp
   0FAE 15 81              3826 	dec	sp
   0FB0 8B 07              3827 	mov	ar7,r3
   0FB2 8C 06              3828 	mov	ar6,r4
   0FB4 8D 02              3829 	mov	ar2,r5
                           3830 ;	main.c:376: if (!sub3) {
   0FB6 EF                 3831 	mov	a,r7
   0FB7 4E                 3832 	orl	a,r6
   0FB8 70 03              3833 	jnz	00186$
   0FBA 02s12rD5           3834 	ljmp	00139$
   0FBD                    3835 00186$:
                           3836 ;	main.c:381: sub4 = cJSON_GetArrayItem(sub3, 0);
   0FBD C0 07              3837 	push	ar7
   0FBF C0 06              3838 	push	ar6
   0FC1 C0 02              3839 	push	ar2
   0FC3 E4                 3840 	clr	a
   0FC4 C0 E0              3841 	push	acc
   0FC6 C0 E0              3842 	push	acc
   0FC8 8F 82              3843 	mov	dpl,r7
   0FCA 8E 83              3844 	mov	dph,r6
   0FCC 8A F0              3845 	mov	b,r2
   0FCE 78r00              3846 	mov	r0,#_cJSON_GetArrayItem
   0FD0 79s00              3847 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   0FD2 7As00              3848 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   0FD4 12s00r00           3849 	lcall	__sdcc_banked_call
   0FD7 AD 82              3850 	mov	r5,dpl
   0FD9 AC 83              3851 	mov	r4,dph
   0FDB AB F0              3852 	mov	r3,b
   0FDD 15 81              3853 	dec	sp
   0FDF 15 81              3854 	dec	sp
   0FE1 D0 02              3855 	pop	ar2
   0FE3 D0 06              3856 	pop	ar6
   0FE5 D0 07              3857 	pop	ar7
   0FE7 E5 81              3858 	mov	a,sp
   0FE9 24 EE              3859 	add	a,#0xee
   0FEB F8                 3860 	mov	r0,a
   0FEC A6 05              3861 	mov	@r0,ar5
   0FEE 08                 3862 	inc	r0
   0FEF A6 04              3863 	mov	@r0,ar4
   0FF1 08                 3864 	inc	r0
   0FF2 A6 03              3865 	mov	@r0,ar3
                           3866 ;	main.c:382: if (sub4) {
   0FF4 E5 81              3867 	mov	a,sp
   0FF6 24 EE              3868 	add	a,#0xee
   0FF8 F8                 3869 	mov	r0,a
   0FF9 E6                 3870 	mov	a,@r0
   0FFA 08                 3871 	inc	r0
   0FFB 46                 3872 	orl	a,@r0
   0FFC 70 03              3873 	jnz	00187$
   0FFE 02s12rD5           3874 	ljmp	00139$
   1001                    3875 00187$:
                           3876 ;	main.c:383: if (sub4->valueint == CONDITION_TYPE_VALUE_COMPARE) {
   1001 C0 07              3877 	push	ar7
   1003 C0 06              3878 	push	ar6
   1005 C0 02              3879 	push	ar2
   1007 E5 81              3880 	mov	a,sp
   1009 24 EB              3881 	add	a,#0xeb
   100B F8                 3882 	mov	r0,a
   100C 74 0E              3883 	mov	a,#0x0E
   100E 26                 3884 	add	a,@r0
   100F FB                 3885 	mov	r3,a
   1010 E4                 3886 	clr	a
   1011 08                 3887 	inc	r0
   1012 36                 3888 	addc	a,@r0
   1013 FC                 3889 	mov	r4,a
   1014 08                 3890 	inc	r0
   1015 86 05              3891 	mov	ar5,@r0
   1017 8B 82              3892 	mov	dpl,r3
   1019 8C 83              3893 	mov	dph,r4
   101B 8D F0              3894 	mov	b,r5
   101D 12s00r00           3895 	lcall	__gptrget
   1020 FD                 3896 	mov	r5,a
   1021 A3                 3897 	inc	dptr
   1022 12s00r00           3898 	lcall	__gptrget
   1025 FC                 3899 	mov	r4,a
   1026 BD 01 05           3900 	cjne	r5,#0x01,00188$
   1029 BC 00 02           3901 	cjne	r4,#0x00,00188$
   102C 80 09              3902 	sjmp	00189$
   102E                    3903 00188$:
   102E D0 02              3904 	pop	ar2
   1030 D0 06              3905 	pop	ar6
   1032 D0 07              3906 	pop	ar7
   1034 02s12r3F           3907 	ljmp	00133$
   1037                    3908 00189$:
   1037 D0 02              3909 	pop	ar2
   1039 D0 06              3910 	pop	ar6
   103B D0 07              3911 	pop	ar7
                           3912 ;	main.c:384: sub4 = cJSON_GetArrayItem(sub3, 1);
   103D C0 07              3913 	push	ar7
   103F C0 06              3914 	push	ar6
   1041 C0 02              3915 	push	ar2
   1043 74 01              3916 	mov	a,#0x01
   1045 C0 E0              3917 	push	acc
   1047 E4                 3918 	clr	a
   1048 C0 E0              3919 	push	acc
   104A 8F 82              3920 	mov	dpl,r7
   104C 8E 83              3921 	mov	dph,r6
   104E 8A F0              3922 	mov	b,r2
   1050 78r00              3923 	mov	r0,#_cJSON_GetArrayItem
   1052 79s00              3924 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   1054 7As00              3925 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   1056 12s00r00           3926 	lcall	__sdcc_banked_call
   1059 AB 82              3927 	mov	r3,dpl
   105B AC 83              3928 	mov	r4,dph
   105D AD F0              3929 	mov	r5,b
   105F 15 81              3930 	dec	sp
   1061 15 81              3931 	dec	sp
   1063 D0 02              3932 	pop	ar2
   1065 D0 06              3933 	pop	ar6
   1067 D0 07              3934 	pop	ar7
   1069 E5 81              3935 	mov	a,sp
   106B 24 EE              3936 	add	a,#0xee
   106D F8                 3937 	mov	r0,a
   106E A6 03              3938 	mov	@r0,ar3
   1070 08                 3939 	inc	r0
   1071 A6 04              3940 	mov	@r0,ar4
   1073 08                 3941 	inc	r0
   1074 A6 05              3942 	mov	@r0,ar5
                           3943 ;	main.c:385: if (sub4) {
   1076 E5 81              3944 	mov	a,sp
   1078 24 EE              3945 	add	a,#0xee
   107A F8                 3946 	mov	r0,a
   107B E6                 3947 	mov	a,@r0
   107C 08                 3948 	inc	r0
   107D 46                 3949 	orl	a,@r0
   107E 70 03              3950 	jnz	00190$
   1080 02s12rD5           3951 	ljmp	00139$
   1083                    3952 00190$:
                           3953 ;	main.c:386: op = sub4->valueint;
   1083 E5 81              3954 	mov	a,sp
   1085 24 EE              3955 	add	a,#0xee
   1087 F8                 3956 	mov	r0,a
   1088 74 0E              3957 	mov	a,#0x0E
   108A 26                 3958 	add	a,@r0
   108B FB                 3959 	mov	r3,a
   108C E4                 3960 	clr	a
   108D 08                 3961 	inc	r0
   108E 36                 3962 	addc	a,@r0
   108F FC                 3963 	mov	r4,a
   1090 08                 3964 	inc	r0
   1091 86 05              3965 	mov	ar5,@r0
   1093 8B 82              3966 	mov	dpl,r3
   1095 8C 83              3967 	mov	dph,r4
   1097 8D F0              3968 	mov	b,r5
   1099 12s00r00           3969 	lcall	__gptrget
   109C FB                 3970 	mov	r3,a
   109D A3                 3971 	inc	dptr
   109E 12s00r00           3972 	lcall	__gptrget
   10A1 A8 81              3973 	mov	r0,sp
   10A3 A6 03              3974 	mov	@r0,ar3
                           3975 ;	main.c:387: sub4 = cJSON_GetArrayItem(sub3, 2);
   10A5 74 02              3976 	mov	a,#0x02
   10A7 C0 E0              3977 	push	acc
   10A9 E4                 3978 	clr	a
   10AA C0 E0              3979 	push	acc
   10AC 8F 82              3980 	mov	dpl,r7
   10AE 8E 83              3981 	mov	dph,r6
   10B0 8A F0              3982 	mov	b,r2
   10B2 78r00              3983 	mov	r0,#_cJSON_GetArrayItem
   10B4 79s00              3984 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   10B6 7As00              3985 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   10B8 12s00r00           3986 	lcall	__sdcc_banked_call
   10BB AB 82              3987 	mov	r3,dpl
   10BD AC 83              3988 	mov	r4,dph
   10BF AD F0              3989 	mov	r5,b
   10C1 15 81              3990 	dec	sp
   10C3 15 81              3991 	dec	sp
   10C5 E5 81              3992 	mov	a,sp
   10C7 24 EE              3993 	add	a,#0xee
   10C9 F8                 3994 	mov	r0,a
   10CA A6 03              3995 	mov	@r0,ar3
   10CC 08                 3996 	inc	r0
   10CD A6 04              3997 	mov	@r0,ar4
   10CF 08                 3998 	inc	r0
   10D0 A6 05              3999 	mov	@r0,ar5
                           4000 ;	main.c:388: if (sub4) {
   10D2 E5 81              4001 	mov	a,sp
   10D4 24 EE              4002 	add	a,#0xee
   10D6 F8                 4003 	mov	r0,a
   10D7 E6                 4004 	mov	a,@r0
   10D8 08                 4005 	inc	r0
   10D9 46                 4006 	orl	a,@r0
   10DA 70 03              4007 	jnz	00191$
   10DC 02s11r93           4008 	ljmp	00122$
   10DF                    4009 00191$:
                           4010 ;	main.c:389: if (res->resource_type->type == Integer) {
   10DF E5 81              4011 	mov	a,sp
   10E1 24 F6              4012 	add	a,#0xf6
   10E3 F8                 4013 	mov	r0,a
   10E4 74 06              4014 	mov	a,#0x06
   10E6 26                 4015 	add	a,@r0
   10E7 FB                 4016 	mov	r3,a
   10E8 E4                 4017 	clr	a
   10E9 08                 4018 	inc	r0
   10EA 36                 4019 	addc	a,@r0
   10EB FC                 4020 	mov	r4,a
   10EC 08                 4021 	inc	r0
   10ED 86 05              4022 	mov	ar5,@r0
   10EF 8B 82              4023 	mov	dpl,r3
   10F1 8C 83              4024 	mov	dph,r4
   10F3 8D F0              4025 	mov	b,r5
   10F5 12s00r00           4026 	lcall	__gptrget
   10F8 FB                 4027 	mov	r3,a
   10F9 A3                 4028 	inc	dptr
   10FA 12s00r00           4029 	lcall	__gptrget
   10FD FC                 4030 	mov	r4,a
   10FE A3                 4031 	inc	dptr
   10FF 12s00r00           4032 	lcall	__gptrget
   1102 FD                 4033 	mov	r5,a
   1103 74 03              4034 	mov	a,#0x03
   1105 2B                 4035 	add	a,r3
   1106 FB                 4036 	mov	r3,a
   1107 E4                 4037 	clr	a
   1108 3C                 4038 	addc	a,r4
   1109 FC                 4039 	mov	r4,a
   110A 8B 82              4040 	mov	dpl,r3
   110C 8C 83              4041 	mov	dph,r4
   110E 8D F0              4042 	mov	b,r5
   1110 12s00r00           4043 	lcall	__gptrget
   1113 FD                 4044 	mov	r5,a
   1114 70 39              4045 	jnz	00119$
                           4046 ;	main.c:390: cond_value.int_value = sub4->valueint;
   1116 E5 81              4047 	mov	a,sp
   1118 24 FC              4048 	add	a,#0xFC
   111A F9                 4049 	mov	r1,a
   111B E5 81              4050 	mov	a,sp
   111D 24 EE              4051 	add	a,#0xee
   111F F8                 4052 	mov	r0,a
   1120 74 0E              4053 	mov	a,#0x0E
   1122 26                 4054 	add	a,@r0
   1123 FB                 4055 	mov	r3,a
   1124 E4                 4056 	clr	a
   1125 08                 4057 	inc	r0
   1126 36                 4058 	addc	a,@r0
   1127 FC                 4059 	mov	r4,a
   1128 08                 4060 	inc	r0
   1129 86 07              4061 	mov	ar7,@r0
   112B 8B 82              4062 	mov	dpl,r3
   112D 8C 83              4063 	mov	dph,r4
   112F 8F F0              4064 	mov	b,r7
   1131 12s00r00           4065 	lcall	__gptrget
   1134 FB                 4066 	mov	r3,a
   1135 A3                 4067 	inc	dptr
   1136 12s00r00           4068 	lcall	__gptrget
   1139 FC                 4069 	mov	r4,a
   113A 33                 4070 	rlc	a
   113B 95 E0              4071 	subb	a,acc
   113D FF                 4072 	mov	r7,a
   113E FE                 4073 	mov	r6,a
   113F A7 03              4074 	mov	@r1,ar3
   1141 09                 4075 	inc	r1
   1142 A7 04              4076 	mov	@r1,ar4
   1144 09                 4077 	inc	r1
   1145 A7 07              4078 	mov	@r1,ar7
   1147 09                 4079 	inc	r1
   1148 A7 06              4080 	mov	@r1,ar6
   114A 19                 4081 	dec	r1
   114B 19                 4082 	dec	r1
   114C 19                 4083 	dec	r1
   114D 80 44              4084 	sjmp	00122$
   114F                    4085 00119$:
                           4086 ;	main.c:391: } else if (res->resource_type->type == Float) {
   114F BD 01 02           4087 	cjne	r5,#0x01,00193$
   1152 80 03              4088 	sjmp	00194$
   1154                    4089 00193$:
   1154 02s12rD5           4090 	ljmp	00139$
   1157                    4091 00194$:
                           4092 ;	main.c:392: cond_value.float_value = sub4->valuefloat;
   1157 E5 81              4093 	mov	a,sp
   1159 24 FC              4094 	add	a,#0xFC
   115B F9                 4095 	mov	r1,a
   115C E5 81              4096 	mov	a,sp
   115E 24 EE              4097 	add	a,#0xee
   1160 F8                 4098 	mov	r0,a
   1161 74 10              4099 	mov	a,#0x10
   1163 26                 4100 	add	a,@r0
   1164 FD                 4101 	mov	r5,a
   1165 E4                 4102 	clr	a
   1166 08                 4103 	inc	r0
   1167 36                 4104 	addc	a,@r0
   1168 FE                 4105 	mov	r6,a
   1169 08                 4106 	inc	r0
   116A 86 07              4107 	mov	ar7,@r0
   116C 8D 82              4108 	mov	dpl,r5
   116E 8E 83              4109 	mov	dph,r6
   1170 8F F0              4110 	mov	b,r7
   1172 12s00r00           4111 	lcall	__gptrget
   1175 FD                 4112 	mov	r5,a
   1176 A3                 4113 	inc	dptr
   1177 12s00r00           4114 	lcall	__gptrget
   117A FE                 4115 	mov	r6,a
   117B A3                 4116 	inc	dptr
   117C 12s00r00           4117 	lcall	__gptrget
   117F FF                 4118 	mov	r7,a
   1180 A3                 4119 	inc	dptr
   1181 12s00r00           4120 	lcall	__gptrget
   1184 FC                 4121 	mov	r4,a
   1185 A7 05              4122 	mov	@r1,ar5
   1187 09                 4123 	inc	r1
   1188 A7 06              4124 	mov	@r1,ar6
   118A 09                 4125 	inc	r1
   118B A7 07              4126 	mov	@r1,ar7
   118D 09                 4127 	inc	r1
   118E A7 04              4128 	mov	@r1,ar4
   1190 19                 4129 	dec	r1
   1191 19                 4130 	dec	r1
   1192 19                 4131 	dec	r1
                           4132 ;	main.c:394: continue;
   1193                    4133 00122$:
                           4134 ;	main.c:398: subscriber = subscriber_alloc();
   1193 78r00              4135 	mov	r0,#_subscriber_alloc
   1195 79s00              4136 	mov	r1,#(_subscriber_alloc >> 8)
   1197 7As00              4137 	mov	r2,#(_subscriber_alloc >> 16)
   1199 12s00r00           4138 	lcall	__sdcc_banked_call
   119C AD 82              4139 	mov	r5,dpl
   119E AE 83              4140 	mov	r6,dph
   11A0 AF F0              4141 	mov	r7,b
   11A2 E5 81              4142 	mov	a,sp
   11A4 24 F9              4143 	add	a,#0xf9
   11A6 F8                 4144 	mov	r0,a
   11A7 A6 05              4145 	mov	@r0,ar5
   11A9 08                 4146 	inc	r0
   11AA A6 06              4147 	mov	@r0,ar6
   11AC 08                 4148 	inc	r0
   11AD A6 07              4149 	mov	@r0,ar7
                           4150 ;	main.c:399: if (subscriber) {
   11AF E5 81              4151 	mov	a,sp
   11B1 24 F9              4152 	add	a,#0xf9
   11B3 F8                 4153 	mov	r0,a
   11B4 E6                 4154 	mov	a,@r0
   11B5 08                 4155 	inc	r0
   11B6 46                 4156 	orl	a,@r0
   11B7 70 03              4157 	jnz	00195$
   11B9 02s12rD5           4158 	ljmp	00139$
   11BC                    4159 00195$:
                           4160 ;	main.c:400: subscriber_value_compare_type_init(subscriber, &UIP_IP_BUF->srcipaddr, device_id, op, &cond_value);
   11BC E5 81              4161 	mov	a,sp
   11BE 24 FC              4162 	add	a,#0xFC
   11C0 FC                 4163 	mov	r4,a
   11C1 7B 00              4164 	mov	r3,#0x00
   11C3 7A 40              4165 	mov	r2,#0x40
   11C5 7Er00              4166 	mov	r6,#_uip_aligned_buf
   11C7 7Fs00              4167 	mov	r7,#(_uip_aligned_buf >> 8)
   11C9 74 08              4168 	mov	a,#0x08
   11CB 2E                 4169 	add	a,r6
   11CC FE                 4170 	mov	r6,a
   11CD E4                 4171 	clr	a
   11CE 3F                 4172 	addc	a,r7
   11CF FF                 4173 	mov	r7,a
   11D0 7D 00              4174 	mov	r5,#0x00
   11D2 C0 04              4175 	push	ar4
   11D4 C0 03              4176 	push	ar3
   11D6 C0 02              4177 	push	ar2
   11D8 E5 81              4178 	mov	a,sp
   11DA 24 FD              4179 	add	a,#0xfd
   11DC F8                 4180 	mov	r0,a
   11DD E6                 4181 	mov	a,@r0
   11DE C0 E0              4182 	push	acc
   11E0 E5 81              4183 	mov	a,sp
   11E2 24 E4              4184 	add	a,#0xe4
   11E4 F8                 4185 	mov	r0,a
   11E5 E6                 4186 	mov	a,@r0
   11E6 C0 E0              4187 	push	acc
   11E8 08                 4188 	inc	r0
   11E9 E6                 4189 	mov	a,@r0
   11EA C0 E0              4190 	push	acc
   11EC 08                 4191 	inc	r0
   11ED E6                 4192 	mov	a,@r0
   11EE C0 E0              4193 	push	acc
   11F0 C0 06              4194 	push	ar6
   11F2 C0 07              4195 	push	ar7
   11F4 C0 05              4196 	push	ar5
   11F6 E5 81              4197 	mov	a,sp
   11F8 24 EF              4198 	add	a,#0xef
   11FA F8                 4199 	mov	r0,a
   11FB 86 82              4200 	mov	dpl,@r0
   11FD 08                 4201 	inc	r0
   11FE 86 83              4202 	mov	dph,@r0
   1200 08                 4203 	inc	r0
   1201 86 F0              4204 	mov	b,@r0
   1203 78r00              4205 	mov	r0,#_subscriber_value_compare_type_init
   1205 79s00              4206 	mov	r1,#(_subscriber_value_compare_type_init >> 8)
   1207 7As00              4207 	mov	r2,#(_subscriber_value_compare_type_init >> 16)
   1209 12s00r00           4208 	lcall	__sdcc_banked_call
   120C E5 81              4209 	mov	a,sp
   120E 24 F6              4210 	add	a,#0xf6
                           4211 ;	main.c:401: object_add_subscriber(obj, subscriber);
   1210 F5 81              4212 	mov	sp,a
   1212 24 F9              4213 	add	a,#0xf9
   1214 F8                 4214 	mov	r0,a
   1215 E6                 4215 	mov	a,@r0
   1216 C0 E0              4216 	push	acc
   1218 08                 4217 	inc	r0
   1219 E6                 4218 	mov	a,@r0
   121A C0 E0              4219 	push	acc
   121C 08                 4220 	inc	r0
   121D E6                 4221 	mov	a,@r0
   121E C0 E0              4222 	push	acc
   1220 E5 81              4223 	mov	a,sp
   1222 24 F0              4224 	add	a,#0xf0
   1224 F8                 4225 	mov	r0,a
   1225 86 82              4226 	mov	dpl,@r0
   1227 08                 4227 	inc	r0
   1228 86 83              4228 	mov	dph,@r0
   122A 08                 4229 	inc	r0
   122B 86 F0              4230 	mov	b,@r0
   122D 78r00              4231 	mov	r0,#_object_add_subscriber
   122F 79s00              4232 	mov	r1,#(_object_add_subscriber >> 8)
   1231 7As00              4233 	mov	r2,#(_object_add_subscriber >> 16)
   1233 12s00r00           4234 	lcall	__sdcc_banked_call
   1236 15 81              4235 	dec	sp
   1238 15 81              4236 	dec	sp
   123A 15 81              4237 	dec	sp
   123C 02s12rD5           4238 	ljmp	00139$
   123F                    4239 00133$:
                           4240 ;	main.c:404: } else if (sub4->valueint == CONDITION_TYPE_REPORT) {
   123F ED                 4241 	mov	a,r5
   1240 4C                 4242 	orl	a,r4
   1241 60 03              4243 	jz	00196$
   1243 02s12rD5           4244 	ljmp	00139$
   1246                    4245 00196$:
                           4246 ;	main.c:405: subscriber = subscriber_alloc();
   1246 78r00              4247 	mov	r0,#_subscriber_alloc
   1248 79s00              4248 	mov	r1,#(_subscriber_alloc >> 8)
   124A 7As00              4249 	mov	r2,#(_subscriber_alloc >> 16)
   124C 12s00r00           4250 	lcall	__sdcc_banked_call
   124F AD 82              4251 	mov	r5,dpl
   1251 AE 83              4252 	mov	r6,dph
   1253 AF F0              4253 	mov	r7,b
   1255 E5 81              4254 	mov	a,sp
   1257 24 F9              4255 	add	a,#0xf9
   1259 F8                 4256 	mov	r0,a
   125A A6 05              4257 	mov	@r0,ar5
   125C 08                 4258 	inc	r0
   125D A6 06              4259 	mov	@r0,ar6
   125F 08                 4260 	inc	r0
   1260 A6 07              4261 	mov	@r0,ar7
                           4262 ;	main.c:406: if (subscriber) {
   1262 E5 81              4263 	mov	a,sp
   1264 24 F9              4264 	add	a,#0xf9
   1266 F8                 4265 	mov	r0,a
   1267 E6                 4266 	mov	a,@r0
   1268 08                 4267 	inc	r0
   1269 46                 4268 	orl	a,@r0
   126A 60 69              4269 	jz	00139$
                           4270 ;	main.c:407: subscriber_report_type_init(subscriber, &UIP_IP_BUF->srcipaddr, device_id);
   126C 7Er00              4271 	mov	r6,#_uip_aligned_buf
   126E 7Fs00              4272 	mov	r7,#(_uip_aligned_buf >> 8)
   1270 74 08              4273 	mov	a,#0x08
   1272 2E                 4274 	add	a,r6
   1273 FE                 4275 	mov	r6,a
   1274 E4                 4276 	clr	a
   1275 3F                 4277 	addc	a,r7
   1276 FF                 4278 	mov	r7,a
   1277 7D 00              4279 	mov	r5,#0x00
   1279 E5 81              4280 	mov	a,sp
   127B 24 E8              4281 	add	a,#0xe8
   127D F8                 4282 	mov	r0,a
   127E E6                 4283 	mov	a,@r0
   127F C0 E0              4284 	push	acc
   1281 08                 4285 	inc	r0
   1282 E6                 4286 	mov	a,@r0
   1283 C0 E0              4287 	push	acc
   1285 08                 4288 	inc	r0
   1286 E6                 4289 	mov	a,@r0
   1287 C0 E0              4290 	push	acc
   1289 C0 06              4291 	push	ar6
   128B C0 07              4292 	push	ar7
   128D C0 05              4293 	push	ar5
   128F E5 81              4294 	mov	a,sp
   1291 24 F3              4295 	add	a,#0xf3
   1293 F8                 4296 	mov	r0,a
   1294 86 82              4297 	mov	dpl,@r0
   1296 08                 4298 	inc	r0
   1297 86 83              4299 	mov	dph,@r0
   1299 08                 4300 	inc	r0
   129A 86 F0              4301 	mov	b,@r0
   129C 78r00              4302 	mov	r0,#_subscriber_report_type_init
   129E 79s00              4303 	mov	r1,#(_subscriber_report_type_init >> 8)
   12A0 7As00              4304 	mov	r2,#(_subscriber_report_type_init >> 16)
   12A2 12s00r00           4305 	lcall	__sdcc_banked_call
   12A5 E5 81              4306 	mov	a,sp
   12A7 24 FA              4307 	add	a,#0xfa
                           4308 ;	main.c:408: object_add_subscriber(obj, subscriber);
   12A9 F5 81              4309 	mov	sp,a
   12AB 24 F9              4310 	add	a,#0xf9
   12AD F8                 4311 	mov	r0,a
   12AE E6                 4312 	mov	a,@r0
   12AF C0 E0              4313 	push	acc
   12B1 08                 4314 	inc	r0
   12B2 E6                 4315 	mov	a,@r0
   12B3 C0 E0              4316 	push	acc
   12B5 08                 4317 	inc	r0
   12B6 E6                 4318 	mov	a,@r0
   12B7 C0 E0              4319 	push	acc
   12B9 E5 81              4320 	mov	a,sp
   12BB 24 F0              4321 	add	a,#0xf0
   12BD F8                 4322 	mov	r0,a
   12BE 86 82              4323 	mov	dpl,@r0
   12C0 08                 4324 	inc	r0
   12C1 86 83              4325 	mov	dph,@r0
   12C3 08                 4326 	inc	r0
   12C4 86 F0              4327 	mov	b,@r0
   12C6 78r00              4328 	mov	r0,#_object_add_subscriber
   12C8 79s00              4329 	mov	r1,#(_object_add_subscriber >> 8)
   12CA 7As00              4330 	mov	r2,#(_object_add_subscriber >> 16)
   12CC 12s00r00           4331 	lcall	__sdcc_banked_call
   12CF 15 81              4332 	dec	sp
   12D1 15 81              4333 	dec	sp
   12D3 15 81              4334 	dec	sp
                           4335 ;	main.c:411: continue;
   12D5                    4336 00139$:
                           4337 ;	main.c:353: for (;i < cJSON_GetArraySize(root); i++) {
   12D5 E5 81              4338 	mov	a,sp
   12D7 24 F1              4339 	add	a,#0xf1
   12D9 F8                 4340 	mov	r0,a
   12DA 06                 4341 	inc	@r0
   12DB B6 00 02           4342 	cjne	@r0,#0x00,00198$
   12DE 08                 4343 	inc	r0
   12DF 06                 4344 	inc	@r0
   12E0                    4345 00198$:
   12E0 02s0Er66           4346 	ljmp	00137$
   12E3                    4347 00140$:
                           4348 ;	main.c:417: sprintf(output_buf, "[%d]", retcode);
   12E3 E4                 4349 	clr	a
   12E4 C0 E0              4350 	push	acc
   12E6 C0 E0              4351 	push	acc
   12E8 74r5A              4352 	mov	a,#__str_5
   12EA C0 E0              4353 	push	acc
   12EC 74s00              4354 	mov	a,#(__str_5 >> 8)
   12EE C0 E0              4355 	push	acc
   12F0 74 80              4356 	mov	a,#0x80
   12F2 C0 E0              4357 	push	acc
   12F4 74r00              4358 	mov	a,#_output_buf
   12F6 C0 E0              4359 	push	acc
   12F8 74s00              4360 	mov	a,#(_output_buf >> 8)
   12FA C0 E0              4361 	push	acc
   12FC E4                 4362 	clr	a
   12FD C0 E0              4363 	push	acc
   12FF 78r00              4364 	mov	r0,#_sprintf
   1301 79s00              4365 	mov	r1,#(_sprintf >> 8)
   1303 7As00              4366 	mov	r2,#(_sprintf >> 16)
   1305 12s00r00           4367 	lcall	__sdcc_banked_call
   1308 E5 81              4368 	mov	a,sp
   130A 24 F8              4369 	add	a,#0xf8
   130C F5 81              4370 	mov	sp,a
                           4371 ;	main.c:418: send_msg(output_buf, strlen(output_buf), &UIP_IP_BUF->srcipaddr);
   130E 7Er00              4372 	mov	r6,#_uip_aligned_buf
   1310 7Fs00              4373 	mov	r7,#(_uip_aligned_buf >> 8)
   1312 74 08              4374 	mov	a,#0x08
   1314 2E                 4375 	add	a,r6
   1315 FE                 4376 	mov	r6,a
   1316 E4                 4377 	clr	a
   1317 3F                 4378 	addc	a,r7
   1318 FF                 4379 	mov	r7,a
   1319 7D 00              4380 	mov	r5,#0x00
   131B 90s00r00           4381 	mov	dptr,#_output_buf
   131E 75 F0 00           4382 	mov	b,#0x00
   1321 C0 07              4383 	push	ar7
   1323 C0 06              4384 	push	ar6
   1325 C0 05              4385 	push	ar5
   1327 78r00              4386 	mov	r0,#_strlen
   1329 79s00              4387 	mov	r1,#(_strlen >> 8)
   132B 7As00              4388 	mov	r2,#(_strlen >> 16)
   132D 12s00r00           4389 	lcall	__sdcc_banked_call
   1330 AB 82              4390 	mov	r3,dpl
   1332 AC 83              4391 	mov	r4,dph
   1334 D0 05              4392 	pop	ar5
   1336 D0 06              4393 	pop	ar6
   1338 D0 07              4394 	pop	ar7
   133A C0 06              4395 	push	ar6
   133C C0 07              4396 	push	ar7
   133E C0 05              4397 	push	ar5
   1340 C0 03              4398 	push	ar3
   1342 C0 04              4399 	push	ar4
   1344 90s00r00           4400 	mov	dptr,#_output_buf
   1347 75 F0 00           4401 	mov	b,#0x00
   134A 78rAA              4402 	mov	r0,#_send_msg
   134C 79s00              4403 	mov	r1,#(_send_msg >> 8)
   134E 7As00              4404 	mov	r2,#(_send_msg >> 16)
   1350 12s00r00           4405 	lcall	__sdcc_banked_call
   1353 E5 81              4406 	mov	a,sp
   1355 24 FB              4407 	add	a,#0xfb
   1357 F5 81              4408 	mov	sp,a
                           4409 ;	main.c:420: return;
   1359                    4410 00141$:
   1359 E5 81              4411 	mov	a,sp
   135B 24 E7              4412 	add	a,#0xE7
   135D F5 81              4413 	mov	sp,a
   135F 02s00r00           4414 	ljmp	__sdcc_banked_ret
                           4415 ;------------------------------------------------------------
                           4416 ;Allocation info for local variables in function 'unsubscribe_request_handler'
                           4417 ;------------------------------------------------------------
                           4418 ;parameters                Allocated to registers r5 r6 r7 
                           4419 ;root                      Allocated to stack - sp -7
                           4420 ;sub                       Allocated to registers r5 r6 r7 
                           4421 ;sub1                      Allocated to registers r2 r3 r4 
                           4422 ;i                         Allocated to stack - sp -4
                           4423 ;j                         Allocated to registers 
                           4424 ;obj                       Allocated to stack - sp -2
                           4425 ;retcode                   Allocated to registers 
                           4426 ;------------------------------------------------------------
                           4427 ;	main.c:426: unsubscribe_request_handler(uint8_t *parameters)
                           4428 ;	-----------------------------------------
                           4429 ;	 function unsubscribe_request_handler
                           4430 ;	-----------------------------------------
   1362                    4431 _unsubscribe_request_handler:
   1362 E5 81              4432 	mov	a,sp
   1364 24 08              4433 	add	a,#0x08
   1366 F5 81              4434 	mov	sp,a
   1368 AD 82              4435 	mov	r5,dpl
   136A AE 83              4436 	mov	r6,dph
   136C AF F0              4437 	mov	r7,b
                           4438 ;	main.c:433: if (!parameters) {
   136E ED                 4439 	mov	a,r5
   136F 4E                 4440 	orl	a,r6
   1370 70 03              4441 	jnz	00102$
                           4442 ;	main.c:434: return;
   1372 02s15r6E           4443 	ljmp	00117$
   1375                    4444 00102$:
                           4445 ;	main.c:437: root = cJSON_Parse(parameters);
   1375 8D 82              4446 	mov	dpl,r5
   1377 8E 83              4447 	mov	dph,r6
   1379 8F F0              4448 	mov	b,r7
   137B 78r00              4449 	mov	r0,#_cJSON_Parse
   137D 79s00              4450 	mov	r1,#(_cJSON_Parse >> 8)
   137F 7As00              4451 	mov	r2,#(_cJSON_Parse >> 16)
   1381 12s00r00           4452 	lcall	__sdcc_banked_call
   1384 AD 82              4453 	mov	r5,dpl
   1386 AE 83              4454 	mov	r6,dph
   1388 AF F0              4455 	mov	r7,b
   138A E5 81              4456 	mov	a,sp
   138C 24 F9              4457 	add	a,#0xf9
   138E F8                 4458 	mov	r0,a
   138F A6 05              4459 	mov	@r0,ar5
   1391 08                 4460 	inc	r0
   1392 A6 06              4461 	mov	@r0,ar6
   1394 08                 4462 	inc	r0
   1395 A6 07              4463 	mov	@r0,ar7
                           4464 ;	main.c:439: if (!root) {
   1397 E5 81              4465 	mov	a,sp
   1399 24 F9              4466 	add	a,#0xf9
   139B F8                 4467 	mov	r0,a
   139C E6                 4468 	mov	a,@r0
   139D 08                 4469 	inc	r0
   139E 46                 4470 	orl	a,@r0
   139F 70 03              4471 	jnz	00126$
                           4472 ;	main.c:440: return;
   13A1 02s15r6E           4473 	ljmp	00117$
   13A4                    4474 00126$:
   13A4 E5 81              4475 	mov	a,sp
   13A6 24 FC              4476 	add	a,#0xfc
   13A8 F8                 4477 	mov	r0,a
   13A9 E4                 4478 	clr	a
   13AA F6                 4479 	mov	@r0,a
   13AB 08                 4480 	inc	r0
   13AC F6                 4481 	mov	@r0,a
   13AD                    4482 00113$:
                           4483 ;	main.c:443: for (;i < cJSON_GetArraySize(root); i++) {
   13AD E5 81              4484 	mov	a,sp
   13AF 24 F9              4485 	add	a,#0xf9
   13B1 F8                 4486 	mov	r0,a
   13B2 86 82              4487 	mov	dpl,@r0
   13B4 08                 4488 	inc	r0
   13B5 86 83              4489 	mov	dph,@r0
   13B7 08                 4490 	inc	r0
   13B8 86 F0              4491 	mov	b,@r0
   13BA 78r00              4492 	mov	r0,#_cJSON_GetArraySize
   13BC 79s00              4493 	mov	r1,#(_cJSON_GetArraySize >> 8)
   13BE 7As00              4494 	mov	r2,#(_cJSON_GetArraySize >> 16)
   13C0 12s00r00           4495 	lcall	__sdcc_banked_call
   13C3 AA 82              4496 	mov	r2,dpl
   13C5 AF 83              4497 	mov	r7,dph
   13C7 E5 81              4498 	mov	a,sp
   13C9 24 FC              4499 	add	a,#0xfc
   13CB F8                 4500 	mov	r0,a
   13CC C3                 4501 	clr	c
   13CD E6                 4502 	mov	a,@r0
   13CE 9A                 4503 	subb	a,r2
   13CF 08                 4504 	inc	r0
   13D0 E6                 4505 	mov	a,@r0
   13D1 9F                 4506 	subb	a,r7
   13D2 40 03              4507 	jc	00137$
   13D4 02s14rF8           4508 	ljmp	00116$
   13D7                    4509 00137$:
                           4510 ;	main.c:445: sub = cJSON_GetArrayItem(root, i);
   13D7 E5 81              4511 	mov	a,sp
   13D9 24 FC              4512 	add	a,#0xfc
   13DB F8                 4513 	mov	r0,a
   13DC 86 06              4514 	mov	ar6,@r0
   13DE 08                 4515 	inc	r0
   13DF 86 07              4516 	mov	ar7,@r0
   13E1 C0 06              4517 	push	ar6
   13E3 C0 07              4518 	push	ar7
   13E5 E5 81              4519 	mov	a,sp
   13E7 24 F7              4520 	add	a,#0xf7
   13E9 F8                 4521 	mov	r0,a
   13EA 86 82              4522 	mov	dpl,@r0
   13EC 08                 4523 	inc	r0
   13ED 86 83              4524 	mov	dph,@r0
   13EF 08                 4525 	inc	r0
   13F0 86 F0              4526 	mov	b,@r0
   13F2 78r00              4527 	mov	r0,#_cJSON_GetArrayItem
   13F4 79s00              4528 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   13F6 7As00              4529 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   13F8 12s00r00           4530 	lcall	__sdcc_banked_call
   13FB AD 82              4531 	mov	r5,dpl
   13FD AE 83              4532 	mov	r6,dph
   13FF AF F0              4533 	mov	r7,b
   1401 15 81              4534 	dec	sp
   1403 15 81              4535 	dec	sp
                           4536 ;	main.c:446: if (!sub) {
   1405 ED                 4537 	mov	a,r5
   1406 4E                 4538 	orl	a,r6
   1407 70 03              4539 	jnz	00106$
                           4540 ;	main.c:447: return;
   1409 02s15r6E           4541 	ljmp	00117$
   140C                    4542 00106$:
                           4543 ;	main.c:450: sub1 = cJSON_GetArrayItem(sub, 0);
   140C C0 07              4544 	push	ar7
   140E C0 06              4545 	push	ar6
   1410 C0 05              4546 	push	ar5
   1412 E4                 4547 	clr	a
   1413 C0 E0              4548 	push	acc
   1415 C0 E0              4549 	push	acc
   1417 8D 82              4550 	mov	dpl,r5
   1419 8E 83              4551 	mov	dph,r6
   141B 8F F0              4552 	mov	b,r7
   141D 78r00              4553 	mov	r0,#_cJSON_GetArrayItem
   141F 79s00              4554 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   1421 7As00              4555 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   1423 12s00r00           4556 	lcall	__sdcc_banked_call
   1426 AA 82              4557 	mov	r2,dpl
   1428 AB 83              4558 	mov	r3,dph
   142A AC F0              4559 	mov	r4,b
   142C 15 81              4560 	dec	sp
   142E 15 81              4561 	dec	sp
   1430 D0 05              4562 	pop	ar5
   1432 D0 06              4563 	pop	ar6
   1434 D0 07              4564 	pop	ar7
                           4565 ;	main.c:451: if (!sub1) {
   1436 EA                 4566 	mov	a,r2
   1437 4B                 4567 	orl	a,r3
   1438 70 03              4568 	jnz	00108$
                           4569 ;	main.c:452: return;
   143A 02s15r6E           4570 	ljmp	00117$
   143D                    4571 00108$:
                           4572 ;	main.c:455: obj = device_find_object(sub1->valuestring);
   143D C0 05              4573 	push	ar5
   143F C0 06              4574 	push	ar6
   1441 C0 07              4575 	push	ar7
   1443 74 0B              4576 	mov	a,#0x0B
   1445 2A                 4577 	add	a,r2
   1446 FD                 4578 	mov	r5,a
   1447 E4                 4579 	clr	a
   1448 3B                 4580 	addc	a,r3
   1449 FE                 4581 	mov	r6,a
   144A 8C 07              4582 	mov	ar7,r4
   144C 8D 82              4583 	mov	dpl,r5
   144E 8E 83              4584 	mov	dph,r6
   1450 8F F0              4585 	mov	b,r7
   1452 12s00r00           4586 	lcall	__gptrget
   1455 FD                 4587 	mov	r5,a
   1456 A3                 4588 	inc	dptr
   1457 12s00r00           4589 	lcall	__gptrget
   145A FE                 4590 	mov	r6,a
   145B A3                 4591 	inc	dptr
   145C 12s00r00           4592 	lcall	__gptrget
   145F FF                 4593 	mov	r7,a
   1460 8D 82              4594 	mov	dpl,r5
   1462 8E 83              4595 	mov	dph,r6
   1464 8F F0              4596 	mov	b,r7
   1466 78r00              4597 	mov	r0,#_device_find_object
   1468 79s00              4598 	mov	r1,#(_device_find_object >> 8)
   146A 7As00              4599 	mov	r2,#(_device_find_object >> 16)
   146C 12s00r00           4600 	lcall	__sdcc_banked_call
   146F AD 82              4601 	mov	r5,dpl
   1471 AE 83              4602 	mov	r6,dph
   1473 AF F0              4603 	mov	r7,b
   1475 E5 81              4604 	mov	a,sp
   1477 24 FB              4605 	add	a,#0xfb
   1479 F8                 4606 	mov	r0,a
   147A A6 05              4607 	mov	@r0,ar5
   147C 08                 4608 	inc	r0
   147D A6 06              4609 	mov	@r0,ar6
   147F 08                 4610 	inc	r0
   1480 A6 07              4611 	mov	@r0,ar7
                           4612 ;	main.c:456: if(!obj) {
   1482 D0 07              4613 	pop	ar7
   1484 D0 06              4614 	pop	ar6
   1486 D0 05              4615 	pop	ar5
   1488 A8 81              4616 	mov	r0,sp
   148A 18                 4617 	dec	r0
   148B 18                 4618 	dec	r0
   148C E6                 4619 	mov	a,@r0
   148D 08                 4620 	inc	r0
   148E 46                 4621 	orl	a,@r0
   148F 60 59              4622 	jz	00115$
                           4623 ;	main.c:461: sub1 = cJSON_GetArrayItem(sub, 1);
   1491 74 01              4624 	mov	a,#0x01
   1493 C0 E0              4625 	push	acc
   1495 E4                 4626 	clr	a
   1496 C0 E0              4627 	push	acc
   1498 8D 82              4628 	mov	dpl,r5
   149A 8E 83              4629 	mov	dph,r6
   149C 8F F0              4630 	mov	b,r7
   149E 78r00              4631 	mov	r0,#_cJSON_GetArrayItem
   14A0 79s00              4632 	mov	r1,#(_cJSON_GetArrayItem >> 8)
   14A2 7As00              4633 	mov	r2,#(_cJSON_GetArrayItem >> 16)
   14A4 12s00r00           4634 	lcall	__sdcc_banked_call
   14A7 AD 82              4635 	mov	r5,dpl
   14A9 AE 83              4636 	mov	r6,dph
   14AB AF F0              4637 	mov	r7,b
   14AD 15 81              4638 	dec	sp
   14AF 15 81              4639 	dec	sp
   14B1 8D 02              4640 	mov	ar2,r5
   14B3 8E 03              4641 	mov	ar3,r6
   14B5 8F 04              4642 	mov	ar4,r7
                           4643 ;	main.c:462: if (!sub1) {
   14B7 EA                 4644 	mov	a,r2
   14B8 4B                 4645 	orl	a,r3
   14B9 60 2F              4646 	jz	00115$
                           4647 ;	main.c:466: object_remove_subscriber(obj, &UIP_IP_BUF->srcipaddr);
   14BB 7Er00              4648 	mov	r6,#_uip_aligned_buf
   14BD 7Fs00              4649 	mov	r7,#(_uip_aligned_buf >> 8)
   14BF 74 08              4650 	mov	a,#0x08
   14C1 2E                 4651 	add	a,r6
   14C2 FE                 4652 	mov	r6,a
   14C3 E4                 4653 	clr	a
   14C4 3F                 4654 	addc	a,r7
   14C5 FF                 4655 	mov	r7,a
   14C6 7D 00              4656 	mov	r5,#0x00
   14C8 C0 06              4657 	push	ar6
   14CA C0 07              4658 	push	ar7
   14CC C0 05              4659 	push	ar5
   14CE E5 81              4660 	mov	a,sp
   14D0 24 FB              4661 	add	a,#0xfb
   14D2 F8                 4662 	mov	r0,a
   14D3 86 82              4663 	mov	dpl,@r0
   14D5 08                 4664 	inc	r0
   14D6 86 83              4665 	mov	dph,@r0
   14D8 08                 4666 	inc	r0
   14D9 86 F0              4667 	mov	b,@r0
   14DB 78r00              4668 	mov	r0,#_object_remove_subscriber
   14DD 79s00              4669 	mov	r1,#(_object_remove_subscriber >> 8)
   14DF 7As00              4670 	mov	r2,#(_object_remove_subscriber >> 16)
   14E1 12s00r00           4671 	lcall	__sdcc_banked_call
   14E4 15 81              4672 	dec	sp
   14E6 15 81              4673 	dec	sp
   14E8 15 81              4674 	dec	sp
   14EA                    4675 00115$:
                           4676 ;	main.c:443: for (;i < cJSON_GetArraySize(root); i++) {
   14EA E5 81              4677 	mov	a,sp
   14EC 24 FC              4678 	add	a,#0xfc
   14EE F8                 4679 	mov	r0,a
   14EF 06                 4680 	inc	@r0
   14F0 B6 00 02           4681 	cjne	@r0,#0x00,00142$
   14F3 08                 4682 	inc	r0
   14F4 06                 4683 	inc	@r0
   14F5                    4684 00142$:
   14F5 02s13rAD           4685 	ljmp	00113$
   14F8                    4686 00116$:
                           4687 ;	main.c:471: sprintf(output_buf, "[%d]", retcode);
   14F8 E4                 4688 	clr	a
   14F9 C0 E0              4689 	push	acc
   14FB C0 E0              4690 	push	acc
   14FD 74r5A              4691 	mov	a,#__str_5
   14FF C0 E0              4692 	push	acc
   1501 74s00              4693 	mov	a,#(__str_5 >> 8)
   1503 C0 E0              4694 	push	acc
   1505 74 80              4695 	mov	a,#0x80
   1507 C0 E0              4696 	push	acc
   1509 74r00              4697 	mov	a,#_output_buf
   150B C0 E0              4698 	push	acc
   150D 74s00              4699 	mov	a,#(_output_buf >> 8)
   150F C0 E0              4700 	push	acc
   1511 E4                 4701 	clr	a
   1512 C0 E0              4702 	push	acc
   1514 78r00              4703 	mov	r0,#_sprintf
   1516 79s00              4704 	mov	r1,#(_sprintf >> 8)
   1518 7As00              4705 	mov	r2,#(_sprintf >> 16)
   151A 12s00r00           4706 	lcall	__sdcc_banked_call
   151D E5 81              4707 	mov	a,sp
   151F 24 F8              4708 	add	a,#0xf8
   1521 F5 81              4709 	mov	sp,a
                           4710 ;	main.c:473: send_msg(output_buf, strlen(output_buf), &UIP_IP_BUF->srcipaddr);
   1523 7Er00              4711 	mov	r6,#_uip_aligned_buf
   1525 7Fs00              4712 	mov	r7,#(_uip_aligned_buf >> 8)
   1527 74 08              4713 	mov	a,#0x08
   1529 2E                 4714 	add	a,r6
   152A FE                 4715 	mov	r6,a
   152B E4                 4716 	clr	a
   152C 3F                 4717 	addc	a,r7
   152D FF                 4718 	mov	r7,a
   152E 7D 00              4719 	mov	r5,#0x00
   1530 90s00r00           4720 	mov	dptr,#_output_buf
   1533 75 F0 00           4721 	mov	b,#0x00
   1536 C0 07              4722 	push	ar7
   1538 C0 06              4723 	push	ar6
   153A C0 05              4724 	push	ar5
   153C 78r00              4725 	mov	r0,#_strlen
   153E 79s00              4726 	mov	r1,#(_strlen >> 8)
   1540 7As00              4727 	mov	r2,#(_strlen >> 16)
   1542 12s00r00           4728 	lcall	__sdcc_banked_call
   1545 AB 82              4729 	mov	r3,dpl
   1547 AC 83              4730 	mov	r4,dph
   1549 D0 05              4731 	pop	ar5
   154B D0 06              4732 	pop	ar6
   154D D0 07              4733 	pop	ar7
   154F C0 06              4734 	push	ar6
   1551 C0 07              4735 	push	ar7
   1553 C0 05              4736 	push	ar5
   1555 C0 03              4737 	push	ar3
   1557 C0 04              4738 	push	ar4
   1559 90s00r00           4739 	mov	dptr,#_output_buf
   155C 75 F0 00           4740 	mov	b,#0x00
   155F 78rAA              4741 	mov	r0,#_send_msg
   1561 79s00              4742 	mov	r1,#(_send_msg >> 8)
   1563 7As00              4743 	mov	r2,#(_send_msg >> 16)
   1565 12s00r00           4744 	lcall	__sdcc_banked_call
   1568 E5 81              4745 	mov	a,sp
   156A 24 FB              4746 	add	a,#0xfb
   156C F5 81              4747 	mov	sp,a
                           4748 ;	main.c:475: return;
   156E                    4749 00117$:
   156E E5 81              4750 	mov	a,sp
   1570 24 F8              4751 	add	a,#0xF8
   1572 F5 81              4752 	mov	sp,a
   1574 02s00r00           4753 	ljmp	__sdcc_banked_ret
                           4754 ;------------------------------------------------------------
                           4755 ;Allocation info for local variables in function 'message_handler'
                           4756 ;------------------------------------------------------------
                           4757 ;data                      Allocated to stack - sp -11
                           4758 ;parameters                Allocated to stack - sp -8
                           4759 ;method                    Allocated to registers r7 
                           4760 ;len                       Allocated to registers r6 r7 
                           4761 ;len1                      Allocated to registers r4 r5 
                           4762 ;i                         Allocated to registers r2 r3 
                           4763 ;security_header           Allocated to registers 
                           4764 ;shared_key                Allocated to stack - sp -8
                           4765 ;sloc0                     Allocated to stack - sp -5
                           4766 ;sloc1                     Allocated to stack - sp -2
                           4767 ;------------------------------------------------------------
                           4768 ;	main.c:480: message_handler(void)
                           4769 ;	-----------------------------------------
                           4770 ;	 function message_handler
                           4771 ;	-----------------------------------------
   1577                    4772 _message_handler:
   1577 E5 81              4773 	mov	a,sp
   1579 24 0C              4774 	add	a,#0x0C
   157B F5 81              4775 	mov	sp,a
                           4776 ;	main.c:488: if(uip_newdata()) {
   157D 90s00r00           4777 	mov	dptr,#_uip_flags
   1580 E0                 4778 	movx	a,@dptr
   1581 FF                 4779 	mov	r7,a
   1582 20 E1 03           4780 	jb	acc.1,00187$
   1585 02s19rCB           4781 	ljmp	00143$
   1588                    4782 00187$:
                           4783 ;	main.c:489: len = uip_datalen();
   1588 90s00r00           4784 	mov	dptr,#_uip_len
   158B E0                 4785 	movx	a,@dptr
   158C FE                 4786 	mov	r6,a
   158D A3                 4787 	inc	dptr
   158E E0                 4788 	movx	a,@dptr
   158F FF                 4789 	mov	r7,a
                           4790 ;	main.c:490: memcpy(output_buf, uip_appdata, len);
   1590 C0 07              4791 	push	ar7
   1592 C0 06              4792 	push	ar6
   1594 C0 06              4793 	push	ar6
   1596 C0 07              4794 	push	ar7
   1598 90s00r00           4795 	mov	dptr,#_uip_appdata
   159B E0                 4796 	movx	a,@dptr
   159C C0 E0              4797 	push	acc
   159E A3                 4798 	inc	dptr
   159F E0                 4799 	movx	a,@dptr
   15A0 C0 E0              4800 	push	acc
   15A2 A3                 4801 	inc	dptr
   15A3 E0                 4802 	movx	a,@dptr
   15A4 C0 E0              4803 	push	acc
   15A6 90s00r00           4804 	mov	dptr,#_output_buf
   15A9 75 F0 00           4805 	mov	b,#0x00
   15AC 78r00              4806 	mov	r0,#_memcpy
   15AE 79s00              4807 	mov	r1,#(_memcpy >> 8)
   15B0 7As00              4808 	mov	r2,#(_memcpy >> 16)
   15B2 12s00r00           4809 	lcall	__sdcc_banked_call
   15B5 E5 81              4810 	mov	a,sp
   15B7 24 FB              4811 	add	a,#0xfb
   15B9 F5 81              4812 	mov	sp,a
   15BB D0 06              4813 	pop	ar6
   15BD D0 07              4814 	pop	ar7
                           4815 ;	main.c:500: security_header = (security_header_t *)output_buf;
                           4816 ;	main.c:501: if (security_header->content_type == SECURITY_SERVER_HELLO) {
   15BF 7Br00              4817 	mov	r3,#_output_buf
   15C1 7Cs00              4818 	mov	r4,#(_output_buf >> 8)
   15C3 7D 00              4819 	mov	r5,#0x00
   15C5 8B 82              4820 	mov	dpl,r3
   15C7 8C 83              4821 	mov	dph,r4
   15C9 8D F0              4822 	mov	b,r5
   15CB 12s00r00           4823 	lcall	__gptrget
   15CE 03                 4824 	rr	a
   15CF 03                 4825 	rr	a
   15D0 54 07              4826 	anl	a,#0x07
   15D2 FB                 4827 	mov	r3,a
   15D3 BB 01 02           4828 	cjne	r3,#0x01,00188$
   15D6 80 03              4829 	sjmp	00189$
   15D8                    4830 00188$:
   15D8 02s16r71           4831 	ljmp	00139$
   15DB                    4832 00189$:
                           4833 ;	main.c:502: data = output_buf + sizeof(security_server_hello_msg_t);
   15DB E5 81              4834 	mov	a,sp
   15DD 24 F5              4835 	add	a,#0xf5
   15DF F8                 4836 	mov	r0,a
   15E0 76r03              4837 	mov	@r0,#(_output_buf + 0x0003)
   15E2 08                 4838 	inc	r0
   15E3 76s00              4839 	mov	@r0,#((_output_buf + 0x0003) >> 8)
   15E5 08                 4840 	inc	r0
   15E6 76 00              4841 	mov	@r0,#0x00
                           4842 ;	main.c:510: len1 = decrypt_data_by_master_key(data, security_header->len, data);
   15E8 90s00r01           4843 	mov	dptr,#(_output_buf + 0x0001)
   15EB 75 F0 00           4844 	mov	b,#0x00
   15EE 12s00r00           4845 	lcall	__gptrget
   15F1 FA                 4846 	mov	r2,a
   15F2 A3                 4847 	inc	dptr
   15F3 12s00r00           4848 	lcall	__gptrget
   15F6 FD                 4849 	mov	r5,a
   15F7 E5 81              4850 	mov	a,sp
   15F9 24 F5              4851 	add	a,#0xf5
   15FB F8                 4852 	mov	r0,a
   15FC E6                 4853 	mov	a,@r0
   15FD C0 E0              4854 	push	acc
   15FF 08                 4855 	inc	r0
   1600 E6                 4856 	mov	a,@r0
   1601 C0 E0              4857 	push	acc
   1603 08                 4858 	inc	r0
   1604 E6                 4859 	mov	a,@r0
   1605 C0 E0              4860 	push	acc
   1607 C0 02              4861 	push	ar2
   1609 C0 05              4862 	push	ar5
   160B E5 81              4863 	mov	a,sp
   160D 24 F0              4864 	add	a,#0xf0
   160F F8                 4865 	mov	r0,a
   1610 86 82              4866 	mov	dpl,@r0
   1612 08                 4867 	inc	r0
   1613 86 83              4868 	mov	dph,@r0
   1615 08                 4869 	inc	r0
   1616 86 F0              4870 	mov	b,@r0
   1618 78r00              4871 	mov	r0,#_decrypt_data_by_master_key
   161A 79s00              4872 	mov	r1,#(_decrypt_data_by_master_key >> 8)
   161C 7As00              4873 	mov	r2,#(_decrypt_data_by_master_key >> 16)
   161E 12s00r00           4874 	lcall	__sdcc_banked_call
   1621 AC 82              4875 	mov	r4,dpl
   1623 AD 83              4876 	mov	r5,dph
   1625 E5 81              4877 	mov	a,sp
   1627 24 FB              4878 	add	a,#0xfb
   1629 F5 81              4879 	mov	sp,a
                           4880 ;	main.c:518: if (len1) {
   162B EC                 4881 	mov	a,r4
   162C 4D                 4882 	orl	a,r5
   162D 60 3F              4883 	jz	00104$
                           4884 ;	main.c:519: if (set_network_shared_key(data, security_header->key_version)) {
   162F 7Fr00              4885 	mov	r7,#_output_buf
   1631 7Es00              4886 	mov	r6,#(_output_buf >> 8)
   1633 7D 00              4887 	mov	r5,#0x00
   1635 8F 82              4888 	mov	dpl,r7
   1637 8E 83              4889 	mov	dph,r6
   1639 8D F0              4890 	mov	b,r5
   163B 12s00r00           4891 	lcall	__gptrget
   163E C4                 4892 	swap	a
   163F 03                 4893 	rr	a
   1640 54 07              4894 	anl	a,#0x07
   1642 FB                 4895 	mov	r3,a
   1643 7A 00              4896 	mov	r2,#0x00
   1645 C0 03              4897 	push	ar3
   1647 C0 02              4898 	push	ar2
   1649 E5 81              4899 	mov	a,sp
   164B 24 F3              4900 	add	a,#0xf3
   164D F8                 4901 	mov	r0,a
   164E 86 82              4902 	mov	dpl,@r0
   1650 08                 4903 	inc	r0
   1651 86 83              4904 	mov	dph,@r0
   1653 08                 4905 	inc	r0
   1654 86 F0              4906 	mov	b,@r0
   1656 78r00              4907 	mov	r0,#_set_network_shared_key
   1658 79s00              4908 	mov	r1,#(_set_network_shared_key >> 8)
   165A 7As00              4909 	mov	r2,#(_set_network_shared_key >> 16)
   165C 12s00r00           4910 	lcall	__sdcc_banked_call
   165F AB 82              4911 	mov	r3,dpl
   1661 15 81              4912 	dec	sp
   1663 15 81              4913 	dec	sp
   1665 EB                 4914 	mov	a,r3
   1666 60 06              4915 	jz	00104$
                           4916 ;	main.c:520: auth_success = 1;
   1668 90s00r00           4917 	mov	dptr,#_auth_success
   166B 74 01              4918 	mov	a,#0x01
   166D F0                 4919 	movx	@dptr,a
   166E                    4920 00104$:
                           4921 ;	main.c:524: return;
   166E 02s19rCB           4922 	ljmp	00143$
   1671                    4923 00139$:
                           4924 ;	main.c:525: } else if(security_header->content_type == SECURITY_ERROR) {
   1671 C0 06              4925 	push	ar6
   1673 C0 07              4926 	push	ar7
   1675 7Ar00              4927 	mov	r2,#_output_buf
   1677 7Bs00              4928 	mov	r3,#(_output_buf >> 8)
   1679 7F 00              4929 	mov	r7,#0x00
   167B 8A 82              4930 	mov	dpl,r2
   167D 8B 83              4931 	mov	dph,r3
   167F 8F F0              4932 	mov	b,r7
   1681 12s00r00           4933 	lcall	__gptrget
   1684 03                 4934 	rr	a
   1685 03                 4935 	rr	a
   1686 54 07              4936 	anl	a,#0x07
   1688 FA                 4937 	mov	r2,a
   1689 BA 03 02           4938 	cjne	r2,#0x03,00192$
   168C 80 07              4939 	sjmp	00193$
   168E                    4940 00192$:
   168E D0 07              4941 	pop	ar7
   1690 D0 06              4942 	pop	ar6
   1692 02s17r1B           4943 	ljmp	00136$
   1695                    4944 00193$:
   1695 D0 07              4945 	pop	ar7
   1697 D0 06              4946 	pop	ar6
                           4947 ;	main.c:526: i = *((uint16_t *)(security_header + sizeof(security_header_t)));
   1699 90s00r09           4948 	mov	dptr,#(_output_buf + 0x0009)
   169C 75 F0 00           4949 	mov	b,#0x00
   169F 12s00r00           4950 	lcall	__gptrget
   16A2 FA                 4951 	mov	r2,a
   16A3 A3                 4952 	inc	dptr
   16A4 12s00r00           4953 	lcall	__gptrget
   16A7 FB                 4954 	mov	r3,a
                           4955 ;	main.c:527: PRINTF("Security Error:%d", i);
   16A8 C0 03              4956 	push	ar3
   16AA C0 02              4957 	push	ar2
   16AC C0 02              4958 	push	ar2
   16AE C0 03              4959 	push	ar3
   16B0 74r8B              4960 	mov	a,#__str_13
   16B2 C0 E0              4961 	push	acc
   16B4 74s00              4962 	mov	a,#(__str_13 >> 8)
   16B6 C0 E0              4963 	push	acc
   16B8 74 80              4964 	mov	a,#0x80
   16BA C0 E0              4965 	push	acc
   16BC 78r00              4966 	mov	r0,#_printf
   16BE 79s00              4967 	mov	r1,#(_printf >> 8)
   16C0 7As00              4968 	mov	r2,#(_printf >> 16)
   16C2 12s00r00           4969 	lcall	__sdcc_banked_call
   16C5 E5 81              4970 	mov	a,sp
   16C7 24 FB              4971 	add	a,#0xfb
   16C9 F5 81              4972 	mov	sp,a
   16CB D0 02              4973 	pop	ar2
   16CD D0 03              4974 	pop	ar3
                           4975 ;	main.c:528: if (i == SECURITY_ERROR_INVALID_KEY_VERSION || i == SECURITY_ERROR_DECRYPT_ERROR) {
   16CF BA 01 05           4976 	cjne	r2,#0x01,00194$
   16D2 BB 00 02           4977 	cjne	r3,#0x00,00194$
   16D5 80 06              4978 	sjmp	00107$
   16D7                    4979 00194$:
   16D7 BA 02 39           4980 	cjne	r2,#0x02,00108$
   16DA BB 00 36           4981 	cjne	r3,#0x00,00108$
   16DD                    4982 00107$:
                           4983 ;	main.c:529: shared_key = get_network_shared_key();
   16DD 78r00              4984 	mov	r0,#_get_network_shared_key
   16DF 79s00              4985 	mov	r1,#(_get_network_shared_key >> 8)
   16E1 7As00              4986 	mov	r2,#(_get_network_shared_key >> 16)
   16E3 12s00r00           4987 	lcall	__sdcc_banked_call
   16E6 C8                 4988 	xch	a,r0
   16E7 E5 81              4989 	mov	a,sp
   16E9 24 F8              4990 	add	a,#0xf8
   16EB C8                 4991 	xch	a,r0
   16EC A6 82              4992 	mov	@r0,dpl
   16EE 08                 4993 	inc	r0
   16EF A6 83              4994 	mov	@r0,dph
   16F1 08                 4995 	inc	r0
   16F2 A6 F0              4996 	mov	@r0,b
   16F4 E5 81              4997 	mov	a,sp
   16F6 24 F8              4998 	add	a,#0xf8
                           4999 ;	main.c:530: if (shared_key) {
   16F8 E5 81              5000 	mov	a,sp
   16FA 24 F8              5001 	add	a,#0xf8
   16FC F8                 5002 	mov	r0,a
   16FD E6                 5003 	mov	a,@r0
   16FE 08                 5004 	inc	r0
   16FF 46                 5005 	orl	a,@r0
   1700 60 11              5006 	jz	00108$
                           5007 ;	main.c:531: shared_key->used = false;
   1702 E5 81              5008 	mov	a,sp
   1704 24 F8              5009 	add	a,#0xf8
   1706 F8                 5010 	mov	r0,a
   1707 86 82              5011 	mov	dpl,@r0
   1709 08                 5012 	inc	r0
   170A 86 83              5013 	mov	dph,@r0
   170C 08                 5014 	inc	r0
   170D 86 F0              5015 	mov	b,@r0
   170F E4                 5016 	clr	a
   1710 12s00r00           5017 	lcall	__gptrput
   1713                    5018 00108$:
                           5019 ;	main.c:534: auth_success = 0;
   1713 90s00r00           5020 	mov	dptr,#_auth_success
   1716 E4                 5021 	clr	a
   1717 F0                 5022 	movx	@dptr,a
                           5023 ;	main.c:535: return;
   1718 02s19rCB           5024 	ljmp	00143$
   171B                    5025 00136$:
                           5026 ;	main.c:536: } else if (security_header->content_type == SECURITY_DATA) {
   171B C0 06              5027 	push	ar6
   171D C0 07              5028 	push	ar7
   171F 7Ar00              5029 	mov	r2,#_output_buf
   1721 7Bs00              5030 	mov	r3,#(_output_buf >> 8)
   1723 7F 00              5031 	mov	r7,#0x00
   1725 8A 82              5032 	mov	dpl,r2
   1727 8B 83              5033 	mov	dph,r3
   1729 8F F0              5034 	mov	b,r7
   172B 12s00r00           5035 	lcall	__gptrget
   172E 03                 5036 	rr	a
   172F 03                 5037 	rr	a
   1730 54 07              5038 	anl	a,#0x07
   1732 FA                 5039 	mov	r2,a
   1733 BA 02 02           5040 	cjne	r2,#0x02,00198$
   1736 80 07              5041 	sjmp	00199$
   1738                    5042 00198$:
   1738 D0 07              5043 	pop	ar7
   173A D0 06              5044 	pop	ar6
   173C 02s19rCB           5045 	ljmp	00143$
   173F                    5046 00199$:
   173F D0 07              5047 	pop	ar7
   1741 D0 06              5048 	pop	ar6
                           5049 ;	main.c:537: data = output_buf + sizeof(security_header_t);
   1743 E5 81              5050 	mov	a,sp
   1745 24 F5              5051 	add	a,#0xf5
   1747 F8                 5052 	mov	r0,a
   1748 76r03              5053 	mov	@r0,#(_output_buf + 0x0003)
   174A 08                 5054 	inc	r0
   174B 76s00              5055 	mov	@r0,#((_output_buf + 0x0003) >> 8)
   174D 08                 5056 	inc	r0
   174E 76 00              5057 	mov	@r0,#0x00
                           5058 ;	main.c:538: len1 = decrypt_data_by_network_shared_key(data, len - sizeof(security_header_t), data);
   1750 EE                 5059 	mov	a,r6
   1751 24 FD              5060 	add	a,#0xFD
   1753 FE                 5061 	mov	r6,a
   1754 EF                 5062 	mov	a,r7
   1755 34 FF              5063 	addc	a,#0xFF
   1757 FF                 5064 	mov	r7,a
   1758 E5 81              5065 	mov	a,sp
   175A 24 F5              5066 	add	a,#0xf5
   175C F8                 5067 	mov	r0,a
   175D E6                 5068 	mov	a,@r0
   175E C0 E0              5069 	push	acc
   1760 08                 5070 	inc	r0
   1761 E6                 5071 	mov	a,@r0
   1762 C0 E0              5072 	push	acc
   1764 08                 5073 	inc	r0
   1765 E6                 5074 	mov	a,@r0
   1766 C0 E0              5075 	push	acc
   1768 C0 06              5076 	push	ar6
   176A C0 07              5077 	push	ar7
   176C E5 81              5078 	mov	a,sp
   176E 24 F0              5079 	add	a,#0xf0
   1770 F8                 5080 	mov	r0,a
   1771 86 82              5081 	mov	dpl,@r0
   1773 08                 5082 	inc	r0
   1774 86 83              5083 	mov	dph,@r0
   1776 08                 5084 	inc	r0
   1777 86 F0              5085 	mov	b,@r0
   1779 78r00              5086 	mov	r0,#_decrypt_data_by_network_shared_key
   177B 79s00              5087 	mov	r1,#(_decrypt_data_by_network_shared_key >> 8)
   177D 7As00              5088 	mov	r2,#(_decrypt_data_by_network_shared_key >> 16)
   177F 12s00r00           5089 	lcall	__sdcc_banked_call
   1782 AE 82              5090 	mov	r6,dpl
   1784 AF 83              5091 	mov	r7,dph
   1786 E5 81              5092 	mov	a,sp
   1788 24 FB              5093 	add	a,#0xfb
   178A F5 81              5094 	mov	sp,a
   178C 8E 04              5095 	mov	ar4,r6
   178E 8F 05              5096 	mov	ar5,r7
                           5097 ;	main.c:539: if (!len1) {
   1790 EC                 5098 	mov	a,r4
   1791 4D                 5099 	orl	a,r5
   1792 70 1E              5100 	jnz	00111$
                           5101 ;	main.c:540: PRINTF("Decrypt Error");
   1794 74r9D              5102 	mov	a,#__str_14
   1796 C0 E0              5103 	push	acc
   1798 74s00              5104 	mov	a,#(__str_14 >> 8)
   179A C0 E0              5105 	push	acc
   179C 74 80              5106 	mov	a,#0x80
   179E C0 E0              5107 	push	acc
   17A0 78r00              5108 	mov	r0,#_printf
   17A2 79s00              5109 	mov	r1,#(_printf >> 8)
   17A4 7As00              5110 	mov	r2,#(_printf >> 16)
   17A6 12s00r00           5111 	lcall	__sdcc_banked_call
   17A9 15 81              5112 	dec	sp
   17AB 15 81              5113 	dec	sp
   17AD 15 81              5114 	dec	sp
                           5115 ;	main.c:541: return;
   17AF 02s19rCB           5116 	ljmp	00143$
   17B2                    5117 00111$:
                           5118 ;	main.c:549: if (len1 >= sizeof(msg_header_t)) {
   17B2 C3                 5119 	clr	c
   17B3 EC                 5120 	mov	a,r4
   17B4 94 0C              5121 	subb	a,#0x0C
   17B6 ED                 5122 	mov	a,r5
   17B7 94 00              5123 	subb	a,#0x00
   17B9 50 03              5124 	jnc	00201$
   17BB 02s19rCB           5125 	ljmp	00143$
   17BE                    5126 00201$:
                           5127 ;	main.c:550: if (memcmp(get_msg_device_id(data), g_device.device_id, DEV_ID_SIZE) == 0) {
   17BE E5 81              5128 	mov	a,sp
   17C0 24 F5              5129 	add	a,#0xf5
   17C2 F8                 5130 	mov	r0,a
   17C3 A9 81              5131 	mov	r1,sp
   17C5 19                 5132 	dec	r1
   17C6 19                 5133 	dec	r1
   17C7 E6                 5134 	mov	a,@r0
   17C8 F7                 5135 	mov	@r1,a
   17C9 08                 5136 	inc	r0
   17CA 09                 5137 	inc	r1
   17CB E6                 5138 	mov	a,@r0
   17CC F7                 5139 	mov	@r1,a
   17CD 08                 5140 	inc	r0
   17CE 09                 5141 	inc	r1
   17CF E6                 5142 	mov	a,@r0
   17D0 F7                 5143 	mov	@r1,a
   17D1 A8 81              5144 	mov	r0,sp
   17D3 18                 5145 	dec	r0
   17D4 18                 5146 	dec	r0
   17D5 E5 81              5147 	mov	a,sp
   17D7 24 FB              5148 	add	a,#0xfb
   17D9 F9                 5149 	mov	r1,a
   17DA 74 04              5150 	mov	a,#0x04
   17DC 26                 5151 	add	a,@r0
   17DD F7                 5152 	mov	@r1,a
   17DE E4                 5153 	clr	a
   17DF 08                 5154 	inc	r0
   17E0 36                 5155 	addc	a,@r0
   17E1 09                 5156 	inc	r1
   17E2 F7                 5157 	mov	@r1,a
   17E3 08                 5158 	inc	r0
   17E4 09                 5159 	inc	r1
   17E5 E6                 5160 	mov	a,@r0
   17E6 F7                 5161 	mov	@r1,a
   17E7 E5 81              5162 	mov	a,sp
   17E9 24 FB              5163 	add	a,#0xfb
   17EB F8                 5164 	mov	r0,a
   17EC 86 02              5165 	mov	ar2,@r0
   17EE 08                 5166 	inc	r0
   17EF 86 06              5167 	mov	ar6,@r0
   17F1 08                 5168 	inc	r0
   17F2 86 07              5169 	mov	ar7,@r0
   17F4 74 08              5170 	mov	a,#0x08
   17F6 C0 E0              5171 	push	acc
   17F8 E4                 5172 	clr	a
   17F9 C0 E0              5173 	push	acc
   17FB 74r00              5174 	mov	a,#_g_device
   17FD C0 E0              5175 	push	acc
   17FF 74s00              5176 	mov	a,#(_g_device >> 8)
   1801 C0 E0              5177 	push	acc
   1803 E4                 5178 	clr	a
   1804 C0 E0              5179 	push	acc
   1806 8A 82              5180 	mov	dpl,r2
   1808 8E 83              5181 	mov	dph,r6
   180A 8F F0              5182 	mov	b,r7
   180C 78r00              5183 	mov	r0,#_memcmp
   180E 79s00              5184 	mov	r1,#(_memcmp >> 8)
   1810 7As00              5185 	mov	r2,#(_memcmp >> 16)
   1812 12s00r00           5186 	lcall	__sdcc_banked_call
   1815 AE 82              5187 	mov	r6,dpl
   1817 AF 83              5188 	mov	r7,dph
   1819 E5 81              5189 	mov	a,sp
   181B 24 FB              5190 	add	a,#0xfb
   181D F5 81              5191 	mov	sp,a
   181F EE                 5192 	mov	a,r6
   1820 4F                 5193 	orl	a,r7
   1821 60 03              5194 	jz	00202$
   1823 02s19rB0           5195 	ljmp	00129$
   1826                    5196 00202$:
                           5197 ;	main.c:551: if (get_msg_type(data) == TYPE_REQUEST) {
   1826 A8 81              5198 	mov	r0,sp
   1828 18                 5199 	dec	r0
   1829 18                 5200 	dec	r0
   182A 86 02              5201 	mov	ar2,@r0
   182C 08                 5202 	inc	r0
   182D 86 06              5203 	mov	ar6,@r0
   182F 08                 5204 	inc	r0
   1830 86 07              5205 	mov	ar7,@r0
   1832 8A 82              5206 	mov	dpl,r2
   1834 8E 83              5207 	mov	dph,r6
   1836 8F F0              5208 	mov	b,r7
   1838 12s00r00           5209 	lcall	__gptrget
   183B 54 FC              5210 	anl	a,#0xFC
   183D 60 03              5211 	jz	00203$
   183F 02s19r6A           5212 	ljmp	00126$
   1842                    5213 00203$:
                           5214 ;	main.c:553: method = get_msg_method(data);
   1842 A8 81              5215 	mov	r0,sp
   1844 18                 5216 	dec	r0
   1845 18                 5217 	dec	r0
   1846 74 01              5218 	mov	a,#0x01
   1848 26                 5219 	add	a,@r0
   1849 FA                 5220 	mov	r2,a
   184A E4                 5221 	clr	a
   184B 08                 5222 	inc	r0
   184C 36                 5223 	addc	a,@r0
   184D FE                 5224 	mov	r6,a
   184E 08                 5225 	inc	r0
   184F 86 07              5226 	mov	ar7,@r0
   1851 8A 82              5227 	mov	dpl,r2
   1853 8E 83              5228 	mov	dph,r6
   1855 8F F0              5229 	mov	b,r7
   1857 12s00r00           5230 	lcall	__gptrget
   185A FA                 5231 	mov	r2,a
   185B FF                 5232 	mov	r7,a
                           5233 ;	main.c:554: switch(method){
   185C BF 00 02           5234 	cjne	r7,#0x00,00204$
   185F 80 25              5235 	sjmp	00112$
   1861                    5236 00204$:
   1861 BF 02 03           5237 	cjne	r7,#0x02,00205$
   1864 02s18rE7           5238 	ljmp	00115$
   1867                    5239 00205$:
   1867 BF 03 02           5240 	cjne	r7,#0x03,00206$
   186A 80 5A              5241 	sjmp	00114$
   186C                    5242 00206$:
   186C BF 04 02           5243 	cjne	r7,#0x04,00207$
   186F 80 21              5244 	sjmp	00113$
   1871                    5245 00207$:
   1871 BF 06 03           5246 	cjne	r7,#0x06,00208$
   1874 02s19r08           5247 	ljmp	00116$
   1877                    5248 00208$:
   1877 BF 0C 03           5249 	cjne	r7,#0x0C,00209$
   187A 02s19r14           5250 	ljmp	00117$
   187D                    5251 00209$:
   187D BF 0D 03           5252 	cjne	r7,#0x0D,00210$
   1880 02s19r48           5253 	ljmp	00118$
   1883                    5254 00210$:
   1883 02s19r68           5255 	ljmp	00119$
                           5256 ;	main.c:555: case METHOD_NEW_DEVICE:
   1886                    5257 00112$:
                           5258 ;	main.c:556: discover_request_handler();
   1886 78r77              5259 	mov	r0,#_discover_request_handler
   1888 79s01              5260 	mov	r1,#(_discover_request_handler >> 8)
   188A 7As00              5261 	mov	r2,#(_discover_request_handler >> 16)
   188C 12s00r00           5262 	lcall	__sdcc_banked_call
                           5263 ;	main.c:557: break;
   188F 02s19rCB           5264 	ljmp	00143$
                           5265 ;	main.c:558: case METHOD_REPORT:
   1892                    5266 00113$:
                           5267 ;	main.c:559: report_request_handler(get_msg_device_id(data), get_msg_parameters(data));
   1892 A8 81              5268 	mov	r0,sp
   1894 18                 5269 	dec	r0
   1895 18                 5270 	dec	r0
   1896 74 0C              5271 	mov	a,#0x0C
   1898 26                 5272 	add	a,@r0
   1899 FA                 5273 	mov	r2,a
   189A E4                 5274 	clr	a
   189B 08                 5275 	inc	r0
   189C 36                 5276 	addc	a,@r0
   189D FD                 5277 	mov	r5,a
   189E 08                 5278 	inc	r0
   189F 86 06              5279 	mov	ar6,@r0
   18A1 C0 02              5280 	push	ar2
   18A3 C0 05              5281 	push	ar5
   18A5 C0 06              5282 	push	ar6
   18A7 E5 81              5283 	mov	a,sp
   18A9 24 F8              5284 	add	a,#0xf8
   18AB F8                 5285 	mov	r0,a
   18AC 86 82              5286 	mov	dpl,@r0
   18AE 08                 5287 	inc	r0
   18AF 86 83              5288 	mov	dph,@r0
   18B1 08                 5289 	inc	r0
   18B2 86 F0              5290 	mov	b,@r0
   18B4 78rC8              5291 	mov	r0,#_report_request_handler
   18B6 79s02              5292 	mov	r1,#(_report_request_handler >> 8)
   18B8 7As00              5293 	mov	r2,#(_report_request_handler >> 16)
   18BA 12s00r00           5294 	lcall	__sdcc_banked_call
   18BD 15 81              5295 	dec	sp
   18BF 15 81              5296 	dec	sp
   18C1 15 81              5297 	dec	sp
                           5298 ;	main.c:560: break;
   18C3 02s19rCB           5299 	ljmp	00143$
                           5300 ;	main.c:561: case METHOD_SET_RESOURCES:
   18C6                    5301 00114$:
                           5302 ;	main.c:562: set_objects_request_handler(get_msg_parameters(data));
   18C6 A8 81              5303 	mov	r0,sp
   18C8 18                 5304 	dec	r0
   18C9 18                 5305 	dec	r0
   18CA 74 0C              5306 	mov	a,#0x0C
   18CC 26                 5307 	add	a,@r0
   18CD FC                 5308 	mov	r4,a
   18CE E4                 5309 	clr	a
   18CF 08                 5310 	inc	r0
   18D0 36                 5311 	addc	a,@r0
   18D1 FD                 5312 	mov	r5,a
   18D2 08                 5313 	inc	r0
   18D3 86 06              5314 	mov	ar6,@r0
   18D5 8C 82              5315 	mov	dpl,r4
   18D7 8D 83              5316 	mov	dph,r5
   18D9 8E F0              5317 	mov	b,r6
   18DB 78rCB              5318 	mov	r0,#_set_objects_request_handler
   18DD 79s02              5319 	mov	r1,#(_set_objects_request_handler >> 8)
   18DF 7As00              5320 	mov	r2,#(_set_objects_request_handler >> 16)
   18E1 12s00r00           5321 	lcall	__sdcc_banked_call
                           5322 ;	main.c:563: break;
   18E4 02s19rCB           5323 	ljmp	00143$
                           5324 ;	main.c:564: case METHOD_GET_RESOURCES:
   18E7                    5325 00115$:
                           5326 ;	main.c:565: get_resources_request_handler(get_msg_parameters(data));
   18E7 A8 81              5327 	mov	r0,sp
   18E9 18                 5328 	dec	r0
   18EA 18                 5329 	dec	r0
   18EB 74 0C              5330 	mov	a,#0x0C
   18ED 26                 5331 	add	a,@r0
   18EE FC                 5332 	mov	r4,a
   18EF E4                 5333 	clr	a
   18F0 08                 5334 	inc	r0
   18F1 36                 5335 	addc	a,@r0
   18F2 FD                 5336 	mov	r5,a
   18F3 08                 5337 	inc	r0
   18F4 86 06              5338 	mov	ar6,@r0
   18F6 8C 82              5339 	mov	dpl,r4
   18F8 8D 83              5340 	mov	dph,r5
   18FA 8E F0              5341 	mov	b,r6
   18FC 78r9B              5342 	mov	r0,#_get_resources_request_handler
   18FE 79s07              5343 	mov	r1,#(_get_resources_request_handler >> 8)
   1900 7As00              5344 	mov	r2,#(_get_resources_request_handler >> 16)
   1902 12s00r00           5345 	lcall	__sdcc_banked_call
                           5346 ;	main.c:566: break;
   1905 02s19rCB           5347 	ljmp	00143$
                           5348 ;	main.c:578: case METHOD_RELOAD:
   1908                    5349 00116$:
                           5350 ;	main.c:579: reload_request_handler();
   1908 78r07              5351 	mov	r0,#_reload_request_handler
   190A 79s0E              5352 	mov	r1,#(_reload_request_handler >> 8)
   190C 7As00              5353 	mov	r2,#(_reload_request_handler >> 16)
   190E 12s00r00           5354 	lcall	__sdcc_banked_call
                           5355 ;	main.c:580: break;
   1911 02s19rCB           5356 	ljmp	00143$
                           5357 ;	main.c:581: case METHOD_SUBSCRIBE:
   1914                    5358 00117$:
                           5359 ;	main.c:582: subscribe_request_handler(get_msg_device_id(data), get_msg_parameters(data));
   1914 A8 81              5360 	mov	r0,sp
   1916 18                 5361 	dec	r0
   1917 18                 5362 	dec	r0
   1918 74 0C              5363 	mov	a,#0x0C
   191A 26                 5364 	add	a,@r0
   191B FC                 5365 	mov	r4,a
   191C E4                 5366 	clr	a
   191D 08                 5367 	inc	r0
   191E 36                 5368 	addc	a,@r0
   191F FD                 5369 	mov	r5,a
   1920 08                 5370 	inc	r0
   1921 86 06              5371 	mov	ar6,@r0
   1923 C0 04              5372 	push	ar4
   1925 C0 05              5373 	push	ar5
   1927 C0 06              5374 	push	ar6
   1929 E5 81              5375 	mov	a,sp
   192B 24 F8              5376 	add	a,#0xf8
   192D F8                 5377 	mov	r0,a
   192E 86 82              5378 	mov	dpl,@r0
   1930 08                 5379 	inc	r0
   1931 86 83              5380 	mov	dph,@r0
   1933 08                 5381 	inc	r0
   1934 86 F0              5382 	mov	b,@r0
   1936 78r0A              5383 	mov	r0,#_subscribe_request_handler
   1938 79s0E              5384 	mov	r1,#(_subscribe_request_handler >> 8)
   193A 7As00              5385 	mov	r2,#(_subscribe_request_handler >> 16)
   193C 12s00r00           5386 	lcall	__sdcc_banked_call
   193F 15 81              5387 	dec	sp
   1941 15 81              5388 	dec	sp
   1943 15 81              5389 	dec	sp
                           5390 ;	main.c:583: break;
   1945 02s19rCB           5391 	ljmp	00143$
                           5392 ;	main.c:584: case METHOD_UNSUBSCRIBE:
   1948                    5393 00118$:
                           5394 ;	main.c:585: unsubscribe_request_handler(get_msg_parameters(data));
   1948 A8 81              5395 	mov	r0,sp
   194A 18                 5396 	dec	r0
   194B 18                 5397 	dec	r0
   194C 74 0C              5398 	mov	a,#0x0C
   194E 26                 5399 	add	a,@r0
   194F FC                 5400 	mov	r4,a
   1950 E4                 5401 	clr	a
   1951 08                 5402 	inc	r0
   1952 36                 5403 	addc	a,@r0
   1953 FD                 5404 	mov	r5,a
   1954 08                 5405 	inc	r0
   1955 86 06              5406 	mov	ar6,@r0
   1957 8C 82              5407 	mov	dpl,r4
   1959 8D 83              5408 	mov	dph,r5
   195B 8E F0              5409 	mov	b,r6
   195D 78r62              5410 	mov	r0,#_unsubscribe_request_handler
   195F 79s13              5411 	mov	r1,#(_unsubscribe_request_handler >> 8)
   1961 7As00              5412 	mov	r2,#(_unsubscribe_request_handler >> 16)
   1963 12s00r00           5413 	lcall	__sdcc_banked_call
                           5414 ;	main.c:586: break;
                           5415 ;	main.c:587: default:
   1966 80 63              5416 	sjmp	00143$
   1968                    5417 00119$:
                           5418 ;	main.c:588: return;
                           5419 ;	main.c:589: }
   1968 80 61              5420 	sjmp	00143$
   196A                    5421 00126$:
                           5422 ;	main.c:591: method = get_msg_method(data);
   196A A8 81              5423 	mov	r0,sp
   196C 18                 5424 	dec	r0
   196D 18                 5425 	dec	r0
   196E 74 01              5426 	mov	a,#0x01
   1970 26                 5427 	add	a,@r0
   1971 FC                 5428 	mov	r4,a
   1972 E4                 5429 	clr	a
   1973 08                 5430 	inc	r0
   1974 36                 5431 	addc	a,@r0
   1975 FD                 5432 	mov	r5,a
   1976 08                 5433 	inc	r0
   1977 86 06              5434 	mov	ar6,@r0
   1979 8C 82              5435 	mov	dpl,r4
   197B 8D 83              5436 	mov	dph,r5
   197D 8E F0              5437 	mov	b,r6
   197F 12s00r00           5438 	lcall	__gptrget
   1982 FC                 5439 	mov	r4,a
   1983 FF                 5440 	mov	r7,a
                           5441 ;	main.c:592: switch(method){
   1984 BF 00 02           5442 	cjne	r7,#0x00,00211$
   1987 80 05              5443 	sjmp	00121$
   1989                    5444 00211$:
                           5445 ;	main.c:593: case METHOD_NEW_DEVICE:
   1989 BF 01 22           5446 	cjne	r7,#0x01,00123$
   198C 80 3D              5447 	sjmp	00143$
   198E                    5448 00121$:
                           5449 ;	main.c:594: register_response_handler(get_msg_parameters(data));
   198E A8 81              5450 	mov	r0,sp
   1990 18                 5451 	dec	r0
   1991 18                 5452 	dec	r0
   1992 74 0C              5453 	mov	a,#0x0C
   1994 26                 5454 	add	a,@r0
   1995 FD                 5455 	mov	r5,a
   1996 E4                 5456 	clr	a
   1997 08                 5457 	inc	r0
   1998 36                 5458 	addc	a,@r0
   1999 FE                 5459 	mov	r6,a
   199A 08                 5460 	inc	r0
   199B 86 07              5461 	mov	ar7,@r0
   199D 8D 82              5462 	mov	dpl,r5
   199F 8E 83              5463 	mov	dph,r6
   19A1 8F F0              5464 	mov	b,r7
   19A3 78rCF              5465 	mov	r0,#_register_response_handler
   19A5 79s01              5466 	mov	r1,#(_register_response_handler >> 8)
   19A7 7As00              5467 	mov	r2,#(_register_response_handler >> 16)
   19A9 12s00r00           5468 	lcall	__sdcc_banked_call
                           5469 ;	main.c:595: break;
                           5470 ;	main.c:598: default:
   19AC 80 1D              5471 	sjmp	00143$
   19AE                    5472 00123$:
                           5473 ;	main.c:599: return;
                           5474 ;	main.c:600: }
   19AE 80 1B              5475 	sjmp	00143$
   19B0                    5476 00129$:
                           5477 ;	main.c:603: PRINTF("It is not for me\n");
   19B0 74rAB              5478 	mov	a,#__str_15
   19B2 C0 E0              5479 	push	acc
   19B4 74s00              5480 	mov	a,#(__str_15 >> 8)
   19B6 C0 E0              5481 	push	acc
   19B8 74 80              5482 	mov	a,#0x80
   19BA C0 E0              5483 	push	acc
   19BC 78r00              5484 	mov	r0,#_printf
   19BE 79s00              5485 	mov	r1,#(_printf >> 8)
   19C0 7As00              5486 	mov	r2,#(_printf >> 16)
   19C2 12s00r00           5487 	lcall	__sdcc_banked_call
   19C5 15 81              5488 	dec	sp
   19C7 15 81              5489 	dec	sp
   19C9 15 81              5490 	dec	sp
   19CB                    5491 00143$:
   19CB E5 81              5492 	mov	a,sp
   19CD 24 F4              5493 	add	a,#0xF4
   19CF F5 81              5494 	mov	sp,a
   19D1 02s00r00           5495 	ljmp	__sdcc_banked_ret
                           5496 ;------------------------------------------------------------
                           5497 ;Allocation info for local variables in function 'print_local_addresses'
                           5498 ;------------------------------------------------------------
                           5499 ;i                         Allocated to registers r6 r7 
                           5500 ;state                     Allocated to registers r2 
                           5501 ;sloc0                     Allocated to stack - sp -1
                           5502 ;------------------------------------------------------------
                           5503 ;	main.c:611: print_local_addresses(void)
                           5504 ;	-----------------------------------------
                           5505 ;	 function print_local_addresses
                           5506 ;	-----------------------------------------
   19D4                    5507 _print_local_addresses:
   19D4 05 81              5508 	inc	sp
   19D6 05 81              5509 	inc	sp
                           5510 ;	main.c:616: PRINTF("Client IPv6 addresses: ");
   19D8 74rBD              5511 	mov	a,#__str_16
   19DA C0 E0              5512 	push	acc
   19DC 74s00              5513 	mov	a,#(__str_16 >> 8)
   19DE C0 E0              5514 	push	acc
   19E0 74 80              5515 	mov	a,#0x80
   19E2 C0 E0              5516 	push	acc
   19E4 78r00              5517 	mov	r0,#_printf
   19E6 79s00              5518 	mov	r1,#(_printf >> 8)
   19E8 7As00              5519 	mov	r2,#(_printf >> 16)
   19EA 12s00r00           5520 	lcall	__sdcc_banked_call
   19ED 15 81              5521 	dec	sp
   19EF 15 81              5522 	dec	sp
   19F1 15 81              5523 	dec	sp
                           5524 ;	main.c:617: for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
   19F3 7E 00              5525 	mov	r6,#0x00
   19F5 7F 00              5526 	mov	r7,#0x00
   19F7 7C 00              5527 	mov	r4,#0x00
   19F9 7D 00              5528 	mov	r5,#0x00
   19FB A8 81              5529 	mov	r0,sp
   19FD 18                 5530 	dec	r0
   19FE E4                 5531 	clr	a
   19FF F6                 5532 	mov	@r0,a
   1A00 08                 5533 	inc	r0
   1A01 F6                 5534 	mov	@r0,a
   1A02                    5535 00107$:
   1A02 C3                 5536 	clr	c
   1A03 EE                 5537 	mov	a,r6
   1A04 94 03              5538 	subb	a,#0x03
   1A06 EF                 5539 	mov	a,r7
   1A07 94 00              5540 	subb	a,#0x00
   1A09 40 03              5541 	jc	00124$
   1A0B 02s1ArC5           5542 	ljmp	00111$
   1A0E                    5543 00124$:
                           5544 ;	main.c:618: state = uip_ds6_if.addr_list[i].state;
   1A0E C0 06              5545 	push	ar6
   1A10 C0 07              5546 	push	ar7
   1A12 E5 81              5547 	mov	a,sp
   1A14 24 FD              5548 	add	a,#0xfd
   1A16 F8                 5549 	mov	r0,a
   1A17 E6                 5550 	mov	a,@r0
   1A18 24r12              5551 	add	a,#(_uip_ds6_if + 0x0012)
   1A1A FE                 5552 	mov	r6,a
   1A1B 08                 5553 	inc	r0
   1A1C E6                 5554 	mov	a,@r0
   1A1D 34s00              5555 	addc	a,#((_uip_ds6_if + 0x0012) >> 8)
   1A1F FF                 5556 	mov	r7,a
   1A20 74 11              5557 	mov	a,#0x11
   1A22 2E                 5558 	add	a,r6
   1A23 F5 82              5559 	mov	dpl,a
   1A25 E4                 5560 	clr	a
   1A26 3F                 5561 	addc	a,r7
   1A27 F5 83              5562 	mov	dph,a
   1A29 E0                 5563 	movx	a,@dptr
   1A2A FB                 5564 	mov	r3,a
   1A2B FA                 5565 	mov	r2,a
                           5566 ;	main.c:619: if(uip_ds6_if.addr_list[i].isused &&
   1A2C 8E 82              5567 	mov	dpl,r6
   1A2E 8F 83              5568 	mov	dph,r7
   1A30 E0                 5569 	movx	a,@dptr
   1A31 D0 07              5570 	pop	ar7
   1A33 D0 06              5571 	pop	ar6
   1A35 60 74              5572 	jz	00109$
                           5573 ;	main.c:620: (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
   1A37 EA                 5574 	mov	a,r2
   1A38 60 03              5575 	jz	00103$
   1A3A BA 01 6E           5576 	cjne	r2,#0x01,00109$
   1A3D                    5577 00103$:
                           5578 ;	main.c:621: PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
   1A3D C0 06              5579 	push	ar6
   1A3F C0 07              5580 	push	ar7
   1A41 EC                 5581 	mov	a,r4
   1A42 24r12              5582 	add	a,#(_uip_ds6_if + 0x0012)
   1A44 FE                 5583 	mov	r6,a
   1A45 ED                 5584 	mov	a,r5
   1A46 34s00              5585 	addc	a,#((_uip_ds6_if + 0x0012) >> 8)
   1A48 FF                 5586 	mov	r7,a
   1A49 0E                 5587 	inc	r6
   1A4A BE 00 01           5588 	cjne	r6,#0x00,00129$
   1A4D 0F                 5589 	inc	r7
   1A4E                    5590 00129$:
   1A4E 8F 03              5591 	mov	ar3,r7
   1A50 7F 00              5592 	mov	r7,#0x00
   1A52 8E 82              5593 	mov	dpl,r6
   1A54 8B 83              5594 	mov	dph,r3
   1A56 8F F0              5595 	mov	b,r7
   1A58 C0 07              5596 	push	ar7
   1A5A C0 06              5597 	push	ar6
   1A5C C0 05              5598 	push	ar5
   1A5E C0 04              5599 	push	ar4
   1A60 C0 02              5600 	push	ar2
   1A62 78r00              5601 	mov	r0,#_uip_debug_ipaddr_print
   1A64 79s00              5602 	mov	r1,#(_uip_debug_ipaddr_print >> 8)
   1A66 7As00              5603 	mov	r2,#(_uip_debug_ipaddr_print >> 16)
   1A68 12s00r00           5604 	lcall	__sdcc_banked_call
                           5605 ;	main.c:622: PRINTF("\n");
   1A6B 74r23              5606 	mov	a,#__str_2
   1A6D C0 E0              5607 	push	acc
   1A6F 74s00              5608 	mov	a,#(__str_2 >> 8)
   1A71 C0 E0              5609 	push	acc
   1A73 74 80              5610 	mov	a,#0x80
   1A75 C0 E0              5611 	push	acc
   1A77 78r00              5612 	mov	r0,#_printf
   1A79 79s00              5613 	mov	r1,#(_printf >> 8)
   1A7B 7As00              5614 	mov	r2,#(_printf >> 16)
   1A7D 12s00r00           5615 	lcall	__sdcc_banked_call
   1A80 15 81              5616 	dec	sp
   1A82 15 81              5617 	dec	sp
   1A84 15 81              5618 	dec	sp
   1A86 D0 02              5619 	pop	ar2
   1A88 D0 04              5620 	pop	ar4
   1A8A D0 05              5621 	pop	ar5
   1A8C D0 06              5622 	pop	ar6
   1A8E D0 07              5623 	pop	ar7
                           5624 ;	main.c:624: if (state == ADDR_TENTATIVE) {
   1A90 D0 07              5625 	pop	ar7
   1A92 D0 06              5626 	pop	ar6
   1A94 EA                 5627 	mov	a,r2
   1A95 70 14              5628 	jnz	00109$
                           5629 ;	main.c:625: uip_ds6_if.addr_list[i].state = ADDR_PREFERRED;
   1A97 EC                 5630 	mov	a,r4
   1A98 24r12              5631 	add	a,#(_uip_ds6_if + 0x0012)
   1A9A FA                 5632 	mov	r2,a
   1A9B ED                 5633 	mov	a,r5
   1A9C 34s00              5634 	addc	a,#((_uip_ds6_if + 0x0012) >> 8)
   1A9E FB                 5635 	mov	r3,a
   1A9F 74 11              5636 	mov	a,#0x11
   1AA1 2A                 5637 	add	a,r2
   1AA2 F5 82              5638 	mov	dpl,a
   1AA4 E4                 5639 	clr	a
   1AA5 3B                 5640 	addc	a,r3
   1AA6 F5 83              5641 	mov	dph,a
   1AA8 74 01              5642 	mov	a,#0x01
   1AAA F0                 5643 	movx	@dptr,a
   1AAB                    5644 00109$:
                           5645 ;	main.c:617: for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
   1AAB 74 1C              5646 	mov	a,#0x1C
   1AAD 2C                 5647 	add	a,r4
   1AAE FC                 5648 	mov	r4,a
   1AAF E4                 5649 	clr	a
   1AB0 3D                 5650 	addc	a,r5
   1AB1 FD                 5651 	mov	r5,a
   1AB2 A8 81              5652 	mov	r0,sp
   1AB4 18                 5653 	dec	r0
   1AB5 74 1C              5654 	mov	a,#0x1C
   1AB7 26                 5655 	add	a,@r0
   1AB8 F6                 5656 	mov	@r0,a
   1AB9 E4                 5657 	clr	a
   1ABA 08                 5658 	inc	r0
   1ABB 36                 5659 	addc	a,@r0
   1ABC F6                 5660 	mov	@r0,a
   1ABD 0E                 5661 	inc	r6
   1ABE BE 00 01           5662 	cjne	r6,#0x00,00131$
   1AC1 0F                 5663 	inc	r7
   1AC2                    5664 00131$:
   1AC2 02s1Ar02           5665 	ljmp	00107$
   1AC5                    5666 00111$:
   1AC5 15 81              5667 	dec	sp
   1AC7 15 81              5668 	dec	sp
   1AC9 02s00r00           5669 	ljmp	__sdcc_banked_ret
                           5670 ;------------------------------------------------------------
                           5671 ;Allocation info for local variables in function 'set_server_address'
                           5672 ;------------------------------------------------------------
                           5673 ;g_addr                    Allocated to stack - sp -6
                           5674 ;sloc0                     Allocated to stack - sp -3
                           5675 ;sloc1                     Allocated to stack - sp -1
                           5676 ;------------------------------------------------------------
                           5677 ;	main.c:632: set_server_address(void)
                           5678 ;	-----------------------------------------
                           5679 ;	 function set_server_address
                           5680 ;	-----------------------------------------
   1ACC                    5681 _set_server_address:
   1ACC E5 81              5682 	mov	a,sp
   1ACE 24 07              5683 	add	a,#0x07
   1AD0 F5 81              5684 	mov	sp,a
                           5685 ;	main.c:636: g_addr = uip_ds6_get_global(ADDR_PREFERRED);
   1AD2 75 82 01           5686 	mov	dpl,#0x01
   1AD5 78r00              5687 	mov	r0,#_uip_ds6_get_global
   1AD7 79s00              5688 	mov	r1,#(_uip_ds6_get_global >> 8)
   1AD9 7As00              5689 	mov	r2,#(_uip_ds6_get_global >> 16)
   1ADB 12s00r00           5690 	lcall	__sdcc_banked_call
   1ADE AD 82              5691 	mov	r5,dpl
   1AE0 AE 83              5692 	mov	r6,dph
   1AE2 AF F0              5693 	mov	r7,b
   1AE4 E5 81              5694 	mov	a,sp
   1AE6 24 FA              5695 	add	a,#0xfa
   1AE8 F8                 5696 	mov	r0,a
   1AE9 A6 05              5697 	mov	@r0,ar5
   1AEB 08                 5698 	inc	r0
   1AEC A6 06              5699 	mov	@r0,ar6
   1AEE 08                 5700 	inc	r0
   1AEF A6 07              5701 	mov	@r0,ar7
                           5702 ;	main.c:637: if (!g_addr) {
   1AF1 E5 81              5703 	mov	a,sp
   1AF3 24 FA              5704 	add	a,#0xfa
   1AF5 F8                 5705 	mov	r0,a
   1AF6 E6                 5706 	mov	a,@r0
   1AF7 08                 5707 	inc	r0
   1AF8 46                 5708 	orl	a,@r0
   1AF9 60 03              5709 	jz	00113$
   1AFB 02s1Br98           5710 	ljmp	00106$
   1AFE                    5711 00113$:
                           5712 ;	main.c:638: uip_ip6addr(&server_ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
   1AFE 90s01r25           5713 	mov	dptr,#_server_ipaddr
   1B01 74 AA              5714 	mov	a,#0xAA
   1B03 F0                 5715 	movx	@dptr,a
   1B04 A3                 5716 	inc	dptr
   1B05 F0                 5717 	movx	@dptr,a
   1B06 90s01r27           5718 	mov	dptr,#(_server_ipaddr + 0x0002)
   1B09 E4                 5719 	clr	a
   1B0A F0                 5720 	movx	@dptr,a
   1B0B A3                 5721 	inc	dptr
   1B0C F0                 5722 	movx	@dptr,a
   1B0D 90s01r29           5723 	mov	dptr,#(_server_ipaddr + 0x0004)
   1B10 F0                 5724 	movx	@dptr,a
   1B11 A3                 5725 	inc	dptr
   1B12 E4                 5726 	clr	a
   1B13 F0                 5727 	movx	@dptr,a
   1B14 90s01r2B           5728 	mov	dptr,#(_server_ipaddr + 0x0006)
   1B17 F0                 5729 	movx	@dptr,a
   1B18 A3                 5730 	inc	dptr
   1B19 E4                 5731 	clr	a
   1B1A F0                 5732 	movx	@dptr,a
   1B1B 90s01r2D           5733 	mov	dptr,#(_server_ipaddr + 0x0008)
   1B1E F0                 5734 	movx	@dptr,a
   1B1F A3                 5735 	inc	dptr
   1B20 E4                 5736 	clr	a
   1B21 F0                 5737 	movx	@dptr,a
   1B22 90s01r2F           5738 	mov	dptr,#(_server_ipaddr + 0x000a)
   1B25 F0                 5739 	movx	@dptr,a
   1B26 A3                 5740 	inc	dptr
   1B27 E4                 5741 	clr	a
   1B28 F0                 5742 	movx	@dptr,a
   1B29 90s01r31           5743 	mov	dptr,#(_server_ipaddr + 0x000c)
   1B2C F0                 5744 	movx	@dptr,a
   1B2D A3                 5745 	inc	dptr
   1B2E E4                 5746 	clr	a
   1B2F F0                 5747 	movx	@dptr,a
   1B30 90s01r33           5748 	mov	dptr,#(_server_ipaddr + 0x000e)
   1B33 F0                 5749 	movx	@dptr,a
   1B34 A3                 5750 	inc	dptr
   1B35 E4                 5751 	clr	a
   1B36 F0                 5752 	movx	@dptr,a
                           5753 ;	main.c:639: uip_ds6_set_addr_iid(&server_ipaddr, &uip_lladdr);
   1B37 74r00              5754 	mov	a,#_uip_lladdr
   1B39 C0 E0              5755 	push	acc
   1B3B 74s00              5756 	mov	a,#(_uip_lladdr >> 8)
   1B3D C0 E0              5757 	push	acc
   1B3F E4                 5758 	clr	a
   1B40 C0 E0              5759 	push	acc
   1B42 90s01r25           5760 	mov	dptr,#_server_ipaddr
   1B45 75 F0 00           5761 	mov	b,#0x00
   1B48 78r00              5762 	mov	r0,#_uip_ds6_set_addr_iid
   1B4A 79s00              5763 	mov	r1,#(_uip_ds6_set_addr_iid >> 8)
   1B4C 7As00              5764 	mov	r2,#(_uip_ds6_set_addr_iid >> 16)
   1B4E 12s00r00           5765 	lcall	__sdcc_banked_call
   1B51 15 81              5766 	dec	sp
   1B53 15 81              5767 	dec	sp
   1B55 15 81              5768 	dec	sp
                           5769 ;	main.c:640: uip_ds6_addr_add(&server_ipaddr, 0, ADDR_AUTOCONF);
   1B57 74 01              5770 	mov	a,#0x01
   1B59 C0 E0              5771 	push	acc
   1B5B E4                 5772 	clr	a
   1B5C C0 E0              5773 	push	acc
   1B5E C0 E0              5774 	push	acc
   1B60 C0 E0              5775 	push	acc
   1B62 C0 E0              5776 	push	acc
   1B64 90s01r25           5777 	mov	dptr,#_server_ipaddr
   1B67 75 F0 00           5778 	mov	b,#0x00
   1B6A 78r00              5779 	mov	r0,#_uip_ds6_addr_add
   1B6C 79s00              5780 	mov	r1,#(_uip_ds6_addr_add >> 8)
   1B6E 7As00              5781 	mov	r2,#(_uip_ds6_addr_add >> 16)
   1B70 12s00r00           5782 	lcall	__sdcc_banked_call
   1B73 E5 81              5783 	mov	a,sp
   1B75 24 FB              5784 	add	a,#0xfb
   1B77 F5 81              5785 	mov	sp,a
                           5786 ;	main.c:641: g_addr = uip_ds6_get_global(ADDR_PREFERRED);
   1B79 75 82 01           5787 	mov	dpl,#0x01
   1B7C 78r00              5788 	mov	r0,#_uip_ds6_get_global
   1B7E 79s00              5789 	mov	r1,#(_uip_ds6_get_global >> 8)
   1B80 7As00              5790 	mov	r2,#(_uip_ds6_get_global >> 16)
   1B82 12s00r00           5791 	lcall	__sdcc_banked_call
   1B85 AA 82              5792 	mov	r2,dpl
   1B87 AB 83              5793 	mov	r3,dph
   1B89 AC F0              5794 	mov	r4,b
   1B8B E5 81              5795 	mov	a,sp
   1B8D 24 FA              5796 	add	a,#0xfa
   1B8F F8                 5797 	mov	r0,a
   1B90 A6 02              5798 	mov	@r0,ar2
   1B92 08                 5799 	inc	r0
   1B93 A6 03              5800 	mov	@r0,ar3
   1B95 08                 5801 	inc	r0
   1B96 A6 04              5802 	mov	@r0,ar4
                           5803 ;	main.c:644: uip_ip6addr(&server_ipaddr, g_addr->ipaddr.u16[0], g_addr->ipaddr.u16[1], g_addr->ipaddr.u16[2],
   1B98                    5804 00106$:
   1B98 E5 81              5805 	mov	a,sp
   1B9A 24 FA              5806 	add	a,#0xfa
   1B9C F8                 5807 	mov	r0,a
   1B9D 74 01              5808 	mov	a,#0x01
   1B9F 26                 5809 	add	a,@r0
   1BA0 FA                 5810 	mov	r2,a
   1BA1 E4                 5811 	clr	a
   1BA2 08                 5812 	inc	r0
   1BA3 36                 5813 	addc	a,@r0
   1BA4 FB                 5814 	mov	r3,a
   1BA5 08                 5815 	inc	r0
   1BA6 86 04              5816 	mov	ar4,@r0
   1BA8 8A 82              5817 	mov	dpl,r2
   1BAA 8B 83              5818 	mov	dph,r3
   1BAC 8C F0              5819 	mov	b,r4
   1BAE 12s00r00           5820 	lcall	__gptrget
   1BB1 FA                 5821 	mov	r2,a
   1BB2 A3                 5822 	inc	dptr
   1BB3 12s00r00           5823 	lcall	__gptrget
   1BB6 FB                 5824 	mov	r3,a
   1BB7 8A 07              5825 	mov	ar7,r2
   1BB9 7C 00              5826 	mov	r4,#0x00
   1BBB 8B 02              5827 	mov	ar2,r3
   1BBD 7B 00              5828 	mov	r3,#0x00
   1BBF EA                 5829 	mov	a,r2
   1BC0 42 04              5830 	orl	ar4,a
   1BC2 EB                 5831 	mov	a,r3
   1BC3 42 07              5832 	orl	ar7,a
   1BC5 90s01r25           5833 	mov	dptr,#_server_ipaddr
   1BC8 EC                 5834 	mov	a,r4
   1BC9 F0                 5835 	movx	@dptr,a
   1BCA A3                 5836 	inc	dptr
   1BCB EF                 5837 	mov	a,r7
   1BCC F0                 5838 	movx	@dptr,a
   1BCD E5 81              5839 	mov	a,sp
   1BCF 24 FA              5840 	add	a,#0xfa
   1BD1 F8                 5841 	mov	r0,a
   1BD2 74 01              5842 	mov	a,#0x01
   1BD4 26                 5843 	add	a,@r0
   1BD5 FD                 5844 	mov	r5,a
   1BD6 E4                 5845 	clr	a
   1BD7 08                 5846 	inc	r0
   1BD8 36                 5847 	addc	a,@r0
   1BD9 FE                 5848 	mov	r6,a
   1BDA 08                 5849 	inc	r0
   1BDB 86 07              5850 	mov	ar7,@r0
   1BDD 74 02              5851 	mov	a,#0x02
   1BDF 2D                 5852 	add	a,r5
   1BE0 FA                 5853 	mov	r2,a
   1BE1 E4                 5854 	clr	a
   1BE2 3E                 5855 	addc	a,r6
   1BE3 FB                 5856 	mov	r3,a
   1BE4 8F 04              5857 	mov	ar4,r7
   1BE6 8A 82              5858 	mov	dpl,r2
   1BE8 8B 83              5859 	mov	dph,r3
   1BEA 8C F0              5860 	mov	b,r4
   1BEC E5 81              5861 	mov	a,sp
   1BEE 24 FD              5862 	add	a,#0xfd
   1BF0 F8                 5863 	mov	r0,a
   1BF1 12s00r00           5864 	lcall	__gptrget
   1BF4 F6                 5865 	mov	@r0,a
   1BF5 A3                 5866 	inc	dptr
   1BF6 12s00r00           5867 	lcall	__gptrget
   1BF9 08                 5868 	inc	r0
   1BFA F6                 5869 	mov	@r0,a
   1BFB E5 81              5870 	mov	a,sp
   1BFD 24 FD              5871 	add	a,#0xfd
   1BFF F8                 5872 	mov	r0,a
   1C00 A9 81              5873 	mov	r1,sp
   1C02 19                 5874 	dec	r1
   1C03 E6                 5875 	mov	a,@r0
   1C04 09                 5876 	inc	r1
   1C05 F7                 5877 	mov	@r1,a
   1C06 19                 5878 	dec	r1
   1C07 77 00              5879 	mov	@r1,#0x00
   1C09 E5 81              5880 	mov	a,sp
   1C0B 24 FD              5881 	add	a,#0xfd
   1C0D F8                 5882 	mov	r0,a
   1C0E 08                 5883 	inc	r0
   1C0F 86 02              5884 	mov	ar2,@r0
   1C11 7C 00              5885 	mov	r4,#0x00
   1C13 A8 81              5886 	mov	r0,sp
   1C15 18                 5887 	dec	r0
   1C16 E6                 5888 	mov	a,@r0
   1C17 42 02              5889 	orl	ar2,a
   1C19 08                 5890 	inc	r0
   1C1A E6                 5891 	mov	a,@r0
   1C1B 42 04              5892 	orl	ar4,a
   1C1D 90s01r27           5893 	mov	dptr,#(_server_ipaddr + 0x0002)
   1C20 EA                 5894 	mov	a,r2
   1C21 F0                 5895 	movx	@dptr,a
   1C22 A3                 5896 	inc	dptr
   1C23 EC                 5897 	mov	a,r4
   1C24 F0                 5898 	movx	@dptr,a
   1C25 74 04              5899 	mov	a,#0x04
   1C27 2D                 5900 	add	a,r5
   1C28 FA                 5901 	mov	r2,a
   1C29 E4                 5902 	clr	a
   1C2A 3E                 5903 	addc	a,r6
   1C2B FB                 5904 	mov	r3,a
   1C2C 8F 04              5905 	mov	ar4,r7
   1C2E 8A 82              5906 	mov	dpl,r2
   1C30 8B 83              5907 	mov	dph,r3
   1C32 8C F0              5908 	mov	b,r4
   1C34 A8 81              5909 	mov	r0,sp
   1C36 18                 5910 	dec	r0
   1C37 12s00r00           5911 	lcall	__gptrget
   1C3A F6                 5912 	mov	@r0,a
   1C3B A3                 5913 	inc	dptr
   1C3C 12s00r00           5914 	lcall	__gptrget
   1C3F 08                 5915 	inc	r0
   1C40 F6                 5916 	mov	@r0,a
   1C41 A8 81              5917 	mov	r0,sp
   1C43 18                 5918 	dec	r0
   1C44 E5 81              5919 	mov	a,sp
   1C46 24 FD              5920 	add	a,#0xfd
   1C48 F9                 5921 	mov	r1,a
   1C49 E6                 5922 	mov	a,@r0
   1C4A 09                 5923 	inc	r1
   1C4B F7                 5924 	mov	@r1,a
   1C4C 19                 5925 	dec	r1
   1C4D 77 00              5926 	mov	@r1,#0x00
   1C4F A8 81              5927 	mov	r0,sp
   1C51 86 02              5928 	mov	ar2,@r0
   1C53 7C 00              5929 	mov	r4,#0x00
   1C55 E5 81              5930 	mov	a,sp
   1C57 24 FD              5931 	add	a,#0xfd
   1C59 F8                 5932 	mov	r0,a
   1C5A E6                 5933 	mov	a,@r0
   1C5B 42 02              5934 	orl	ar2,a
   1C5D 08                 5935 	inc	r0
   1C5E E6                 5936 	mov	a,@r0
   1C5F 42 04              5937 	orl	ar4,a
   1C61 90s01r29           5938 	mov	dptr,#(_server_ipaddr + 0x0004)
   1C64 EA                 5939 	mov	a,r2
   1C65 F0                 5940 	movx	@dptr,a
   1C66 A3                 5941 	inc	dptr
   1C67 EC                 5942 	mov	a,r4
   1C68 F0                 5943 	movx	@dptr,a
   1C69 74 06              5944 	mov	a,#0x06
   1C6B 2D                 5945 	add	a,r5
   1C6C FD                 5946 	mov	r5,a
   1C6D E4                 5947 	clr	a
   1C6E 3E                 5948 	addc	a,r6
   1C6F FE                 5949 	mov	r6,a
   1C70 8D 82              5950 	mov	dpl,r5
   1C72 8E 83              5951 	mov	dph,r6
   1C74 8F F0              5952 	mov	b,r7
   1C76 12s00r00           5953 	lcall	__gptrget
   1C79 FD                 5954 	mov	r5,a
   1C7A A3                 5955 	inc	dptr
   1C7B 12s00r00           5956 	lcall	__gptrget
   1C7E FE                 5957 	mov	r6,a
   1C7F 8D 07              5958 	mov	ar7,r5
   1C81 7C 00              5959 	mov	r4,#0x00
   1C83 8E 05              5960 	mov	ar5,r6
   1C85 7E 00              5961 	mov	r6,#0x00
   1C87 ED                 5962 	mov	a,r5
   1C88 42 04              5963 	orl	ar4,a
   1C8A EE                 5964 	mov	a,r6
   1C8B 42 07              5965 	orl	ar7,a
   1C8D 90s01r2B           5966 	mov	dptr,#(_server_ipaddr + 0x0006)
   1C90 EC                 5967 	mov	a,r4
   1C91 F0                 5968 	movx	@dptr,a
   1C92 A3                 5969 	inc	dptr
   1C93 EF                 5970 	mov	a,r7
   1C94 F0                 5971 	movx	@dptr,a
   1C95 90s01r2D           5972 	mov	dptr,#(_server_ipaddr + 0x0008)
   1C98 E4                 5973 	clr	a
   1C99 F0                 5974 	movx	@dptr,a
   1C9A A3                 5975 	inc	dptr
   1C9B F0                 5976 	movx	@dptr,a
   1C9C 90s01r2F           5977 	mov	dptr,#(_server_ipaddr + 0x000a)
   1C9F F0                 5978 	movx	@dptr,a
   1CA0 A3                 5979 	inc	dptr
   1CA1 E4                 5980 	clr	a
   1CA2 F0                 5981 	movx	@dptr,a
   1CA3 90s01r31           5982 	mov	dptr,#(_server_ipaddr + 0x000c)
   1CA6 F0                 5983 	movx	@dptr,a
   1CA7 A3                 5984 	inc	dptr
   1CA8 E4                 5985 	clr	a
   1CA9 F0                 5986 	movx	@dptr,a
   1CAA 90s01r33           5987 	mov	dptr,#(_server_ipaddr + 0x000e)
   1CAD F0                 5988 	movx	@dptr,a
   1CAE A3                 5989 	inc	dptr
   1CAF 74 01              5990 	mov	a,#0x01
   1CB1 F0                 5991 	movx	@dptr,a
   1CB2 E5 81              5992 	mov	a,sp
   1CB4 24 F9              5993 	add	a,#0xF9
   1CB6 F5 81              5994 	mov	sp,a
   1CB8 02s00r00           5995 	ljmp	__sdcc_banked_ret
                           5996 ;------------------------------------------------------------
                           5997 ;Allocation info for local variables in function 'process_thread_coconut_sensor_process'
                           5998 ;------------------------------------------------------------
                           5999 ;ev                        Allocated to stack - sp -6
                           6000 ;data                      Allocated to stack - sp -9
                           6001 ;process_pt                Allocated to stack - sp -2
                           6002 ;len                       Allocated to registers r6 r7 
                           6003 ;PT_YIELD_FLAG             Allocated to registers r4 
                           6004 ;sloc0                     Allocated to stack - sp +4
                           6005 ;et                        Allocated with name '_process_thread_coconut_sensor_process_et_1_1'
                           6006 ;------------------------------------------------------------
                           6007 ;	main.c:651: PROCESS_THREAD(coconut_sensor_process, ev, data)
                           6008 ;	-----------------------------------------
                           6009 ;	 function process_thread_coconut_sensor_process
                           6010 ;	-----------------------------------------
   1CBB                    6011 _process_thread_coconut_sensor_process:
   1CBB C0 82              6012 	push	dpl
   1CBD C0 83              6013 	push	dph
   1CBF C0 F0              6014 	push	b
                           6015 ;	main.c:656: PROCESS_BEGIN();
   1CC1 7C 01              6016 	mov	r4,#0x01
   1CC3 A8 81              6017 	mov	r0,sp
   1CC5 18                 6018 	dec	r0
   1CC6 18                 6019 	dec	r0
   1CC7 86 82              6020 	mov	dpl,@r0
   1CC9 08                 6021 	inc	r0
   1CCA 86 83              6022 	mov	dph,@r0
   1CCC 08                 6023 	inc	r0
   1CCD 86 F0              6024 	mov	b,@r0
   1CCF 12s00r00           6025 	lcall	__gptrget
   1CD2 FA                 6026 	mov	r2,a
   1CD3 A3                 6027 	inc	dptr
   1CD4 12s00r00           6028 	lcall	__gptrget
   1CD7 FB                 6029 	mov	r3,a
   1CD8 BA 00 05           6030 	cjne	r2,#0x00,00183$
   1CDB BB 00 02           6031 	cjne	r3,#0x00,00183$
   1CDE 80 14              6032 	sjmp	00109$
   1CE0                    6033 00183$:
   1CE0 BA 92 05           6034 	cjne	r2,#0x92,00184$
   1CE3 BB 02 02           6035 	cjne	r3,#0x02,00184$
   1CE6 80 50              6036 	sjmp	00102$
   1CE8                    6037 00184$:
   1CE8 BA C1 06           6038 	cjne	r2,#0xC1,00185$
   1CEB BB 02 03           6039 	cjne	r3,#0x02,00185$
   1CEE 02s1Fr99           6040 	ljmp	00127$
   1CF1                    6041 00185$:
   1CF1 02s21r1B           6042 	ljmp	00150$
                           6043 ;	main.c:658: PROCESS_PAUSE();
   1CF4                    6044 00109$:
   1CF4 90s00r00           6045 	mov	dptr,#_process_current
   1CF7 E0                 6046 	movx	a,@dptr
   1CF8 FA                 6047 	mov	r2,a
   1CF9 A3                 6048 	inc	dptr
   1CFA E0                 6049 	movx	a,@dptr
   1CFB FB                 6050 	mov	r3,a
   1CFC A3                 6051 	inc	dptr
   1CFD E0                 6052 	movx	a,@dptr
   1CFE FF                 6053 	mov	r7,a
   1CFF E4                 6054 	clr	a
   1D00 C0 E0              6055 	push	acc
   1D02 C0 E0              6056 	push	acc
   1D04 C0 E0              6057 	push	acc
   1D06 74 85              6058 	mov	a,#0x85
   1D08 C0 E0              6059 	push	acc
   1D0A 8A 82              6060 	mov	dpl,r2
   1D0C 8B 83              6061 	mov	dph,r3
   1D0E 8F F0              6062 	mov	b,r7
   1D10 78r00              6063 	mov	r0,#_process_post
   1D12 79s00              6064 	mov	r1,#(_process_post >> 8)
   1D14 7As00              6065 	mov	r2,#(_process_post >> 16)
   1D16 12s00r00           6066 	lcall	__sdcc_banked_call
   1D19 E5 81              6067 	mov	a,sp
   1D1B 24 FC              6068 	add	a,#0xfc
   1D1D F5 81              6069 	mov	sp,a
   1D1F 7C 00              6070 	mov	r4,#0x00
   1D21 A8 81              6071 	mov	r0,sp
   1D23 18                 6072 	dec	r0
   1D24 18                 6073 	dec	r0
   1D25 86 82              6074 	mov	dpl,@r0
   1D27 08                 6075 	inc	r0
   1D28 86 83              6076 	mov	dph,@r0
   1D2A 08                 6077 	inc	r0
   1D2B 86 F0              6078 	mov	b,@r0
   1D2D 74 92              6079 	mov	a,#0x92
   1D2F 12s00r00           6080 	lcall	__gptrput
   1D32 A3                 6081 	inc	dptr
   1D33 74 02              6082 	mov	a,#0x02
   1D35 12s00r00           6083 	lcall	__gptrput
   1D38                    6084 00102$:
   1D38 EC                 6085 	mov	a,r4
   1D39 60 0A              6086 	jz	00103$
   1D3B E5 81              6087 	mov	a,sp
   1D3D 24 FA              6088 	add	a,#0xfa
   1D3F F8                 6089 	mov	r0,a
   1D40 B6 85 02           6090 	cjne	@r0,#0x85,00187$
   1D43 80 06              6091 	sjmp	00107$
   1D45                    6092 00187$:
   1D45                    6093 00103$:
   1D45 75 82 01           6094 	mov	dpl,#0x01
   1D48 02s21r33           6095 	ljmp	00151$
   1D4B                    6096 00107$:
                           6097 ;	main.c:660: set_server_address();
   1D4B 78rCC              6098 	mov	r0,#_set_server_address
   1D4D 79s1A              6099 	mov	r1,#(_set_server_address >> 8)
   1D4F 7As00              6100 	mov	r2,#(_set_server_address >> 16)
   1D51 12s00r00           6101 	lcall	__sdcc_banked_call
                           6102 ;	main.c:662: PRINTF("Coconut process started\n");
   1D54 74rD5              6103 	mov	a,#__str_17
   1D56 C0 E0              6104 	push	acc
   1D58 74s00              6105 	mov	a,#(__str_17 >> 8)
   1D5A C0 E0              6106 	push	acc
   1D5C 74 80              6107 	mov	a,#0x80
   1D5E C0 E0              6108 	push	acc
   1D60 78r00              6109 	mov	r0,#_printf
   1D62 79s00              6110 	mov	r1,#(_printf >> 8)
   1D64 7As00              6111 	mov	r2,#(_printf >> 16)
   1D66 12s00r00           6112 	lcall	__sdcc_banked_call
   1D69 15 81              6113 	dec	sp
   1D6B 15 81              6114 	dec	sp
   1D6D 15 81              6115 	dec	sp
                           6116 ;	main.c:664: print_local_addresses();
   1D6F 78rD4              6117 	mov	r0,#_print_local_addresses
   1D71 79s19              6118 	mov	r1,#(_print_local_addresses >> 8)
   1D73 7As00              6119 	mov	r2,#(_print_local_addresses >> 16)
   1D75 12s00r00           6120 	lcall	__sdcc_banked_call
                           6121 ;	main.c:666: subscribers_mem_pool_init(); 
   1D78 78r00              6122 	mov	r0,#_subscribers_mem_pool_init
   1D7A 79s00              6123 	mov	r1,#(_subscribers_mem_pool_init >> 8)
   1D7C 7As00              6124 	mov	r2,#(_subscribers_mem_pool_init >> 16)
   1D7E 12s00r00           6125 	lcall	__sdcc_banked_call
                           6126 ;	main.c:672: device_fs_init(); 
   1D81 78r00              6127 	mov	r0,#_device_fs_init
   1D83 79s00              6128 	mov	r1,#(_device_fs_init >> 8)
   1D85 7As00              6129 	mov	r2,#(_device_fs_init >> 16)
   1D87 12s00r00           6130 	lcall	__sdcc_banked_call
                           6131 ;	main.c:674: if (!crypto_init()) {
   1D8A 78r00              6132 	mov	r0,#_crypto_init
   1D8C 79s00              6133 	mov	r1,#(_crypto_init >> 8)
   1D8E 7As00              6134 	mov	r2,#(_crypto_init >> 16)
   1D90 12s00r00           6135 	lcall	__sdcc_banked_call
   1D93 E5 82              6136 	mov	a,dpl
   1D95 70 36              6137 	jnz	00116$
                           6138 ;	main.c:675: PRINTF("Crypto init fail\n");
   1D97 74rEE              6139 	mov	a,#__str_18
   1D99 C0 E0              6140 	push	acc
   1D9B 74s00              6141 	mov	a,#(__str_18 >> 8)
   1D9D C0 E0              6142 	push	acc
   1D9F 74 80              6143 	mov	a,#0x80
   1DA1 C0 E0              6144 	push	acc
   1DA3 78r00              6145 	mov	r0,#_printf
   1DA5 79s00              6146 	mov	r1,#(_printf >> 8)
   1DA7 7As00              6147 	mov	r2,#(_printf >> 16)
   1DA9 12s00r00           6148 	lcall	__sdcc_banked_call
   1DAC 15 81              6149 	dec	sp
   1DAE 15 81              6150 	dec	sp
   1DB0 15 81              6151 	dec	sp
                           6152 ;	main.c:676: PROCESS_EXIT();
   1DB2 A8 81              6153 	mov	r0,sp
   1DB4 18                 6154 	dec	r0
   1DB5 18                 6155 	dec	r0
   1DB6 86 82              6156 	mov	dpl,@r0
   1DB8 08                 6157 	inc	r0
   1DB9 86 83              6158 	mov	dph,@r0
   1DBB 08                 6159 	inc	r0
   1DBC 86 F0              6160 	mov	b,@r0
   1DBE E4                 6161 	clr	a
   1DBF 12s00r00           6162 	lcall	__gptrput
   1DC2 A3                 6163 	inc	dptr
   1DC3 E4                 6164 	clr	a
   1DC4 12s00r00           6165 	lcall	__gptrput
   1DC7 75 82 02           6166 	mov	dpl,#0x02
   1DCA 02s21r33           6167 	ljmp	00151$
   1DCD                    6168 00116$:
                           6169 ;	main.c:679: PRINTF("Crypto init Done\n");
   1DCD 74r00              6170 	mov	a,#__str_19
   1DCF C0 E0              6171 	push	acc
   1DD1 74s01              6172 	mov	a,#(__str_19 >> 8)
   1DD3 C0 E0              6173 	push	acc
   1DD5 74 80              6174 	mov	a,#0x80
   1DD7 C0 E0              6175 	push	acc
   1DD9 78r00              6176 	mov	r0,#_printf
   1DDB 79s00              6177 	mov	r1,#(_printf >> 8)
   1DDD 7As00              6178 	mov	r2,#(_printf >> 16)
   1DDF 12s00r00           6179 	lcall	__sdcc_banked_call
   1DE2 15 81              6180 	dec	sp
   1DE4 15 81              6181 	dec	sp
   1DE6 15 81              6182 	dec	sp
                           6183 ;	main.c:682: if (!create_device()) {
   1DE8 78r00              6184 	mov	r0,#_create_device
   1DEA 79s00              6185 	mov	r1,#(_create_device >> 8)
   1DEC 7As00              6186 	mov	r2,#(_create_device >> 16)
   1DEE 12s00r00           6187 	lcall	__sdcc_banked_call
   1DF1 40 36              6188 	jc	00121$
                           6189 ;	main.c:683: PRINTF("Device init fail\n");
   1DF3 74r12              6190 	mov	a,#__str_20
   1DF5 C0 E0              6191 	push	acc
   1DF7 74s01              6192 	mov	a,#(__str_20 >> 8)
   1DF9 C0 E0              6193 	push	acc
   1DFB 74 80              6194 	mov	a,#0x80
   1DFD C0 E0              6195 	push	acc
   1DFF 78r00              6196 	mov	r0,#_printf
   1E01 79s00              6197 	mov	r1,#(_printf >> 8)
   1E03 7As00              6198 	mov	r2,#(_printf >> 16)
   1E05 12s00r00           6199 	lcall	__sdcc_banked_call
   1E08 15 81              6200 	dec	sp
   1E0A 15 81              6201 	dec	sp
   1E0C 15 81              6202 	dec	sp
                           6203 ;	main.c:684: PROCESS_EXIT();
   1E0E A8 81              6204 	mov	r0,sp
   1E10 18                 6205 	dec	r0
   1E11 18                 6206 	dec	r0
   1E12 86 82              6207 	mov	dpl,@r0
   1E14 08                 6208 	inc	r0
   1E15 86 83              6209 	mov	dph,@r0
   1E17 08                 6210 	inc	r0
   1E18 86 F0              6211 	mov	b,@r0
   1E1A E4                 6212 	clr	a
   1E1B 12s00r00           6213 	lcall	__gptrput
   1E1E A3                 6214 	inc	dptr
   1E1F E4                 6215 	clr	a
   1E20 12s00r00           6216 	lcall	__gptrput
   1E23 75 82 02           6217 	mov	dpl,#0x02
   1E26 02s21r33           6218 	ljmp	00151$
   1E29                    6219 00121$:
                           6220 ;	main.c:687: PRINTF("Device create done\n");
   1E29 74r24              6221 	mov	a,#__str_21
   1E2B C0 E0              6222 	push	acc
   1E2D 74s01              6223 	mov	a,#(__str_21 >> 8)
   1E2F C0 E0              6224 	push	acc
   1E31 74 80              6225 	mov	a,#0x80
   1E33 C0 E0              6226 	push	acc
   1E35 78r00              6227 	mov	r0,#_printf
   1E37 79s00              6228 	mov	r1,#(_printf >> 8)
   1E39 7As00              6229 	mov	r2,#(_printf >> 16)
   1E3B 12s00r00           6230 	lcall	__sdcc_banked_call
   1E3E 15 81              6231 	dec	sp
   1E40 15 81              6232 	dec	sp
   1E42 15 81              6233 	dec	sp
                           6234 ;	main.c:690: client_conn = udp_new(NULL, UIP_HTONS(COCONUT_UDP_SERVER_PORT), NULL);
   1E44 E4                 6235 	clr	a
   1E45 C0 E0              6236 	push	acc
   1E47 C0 E0              6237 	push	acc
   1E49 C0 E0              6238 	push	acc
   1E4B 74 16              6239 	mov	a,#0x16
   1E4D C0 E0              6240 	push	acc
   1E4F 74 2E              6241 	mov	a,#0x2E
   1E51 C0 E0              6242 	push	acc
   1E53 90 00 00           6243 	mov	dptr,#0x0000
   1E56 75 F0 00           6244 	mov	b,#0x00
   1E59 78r00              6245 	mov	r0,#_udp_new
   1E5B 79s00              6246 	mov	r1,#(_udp_new >> 8)
   1E5D 7As00              6247 	mov	r2,#(_udp_new >> 16)
   1E5F 12s00r00           6248 	lcall	__sdcc_banked_call
   1E62 AD 82              6249 	mov	r5,dpl
   1E64 AE 83              6250 	mov	r6,dph
   1E66 AF F0              6251 	mov	r7,b
   1E68 E5 81              6252 	mov	a,sp
   1E6A 24 FB              6253 	add	a,#0xfb
   1E6C F5 81              6254 	mov	sp,a
   1E6E 90s01r22           6255 	mov	dptr,#_client_conn
   1E71 ED                 6256 	mov	a,r5
   1E72 F0                 6257 	movx	@dptr,a
   1E73 A3                 6258 	inc	dptr
   1E74 EE                 6259 	mov	a,r6
   1E75 F0                 6260 	movx	@dptr,a
   1E76 A3                 6261 	inc	dptr
   1E77 EF                 6262 	mov	a,r7
   1E78 F0                 6263 	movx	@dptr,a
                           6264 ;	main.c:691: if(client_conn == NULL) {
   1E79 ED                 6265 	mov	a,r5
   1E7A 4E                 6266 	orl	a,r6
   1E7B 70 36              6267 	jnz	00126$
                           6268 ;	main.c:692: PRINTF("No UDP connection available, exiting the process!\n");
   1E7D 74r38              6269 	mov	a,#__str_22
   1E7F C0 E0              6270 	push	acc
   1E81 74s01              6271 	mov	a,#(__str_22 >> 8)
   1E83 C0 E0              6272 	push	acc
   1E85 74 80              6273 	mov	a,#0x80
   1E87 C0 E0              6274 	push	acc
   1E89 78r00              6275 	mov	r0,#_printf
   1E8B 79s00              6276 	mov	r1,#(_printf >> 8)
   1E8D 7As00              6277 	mov	r2,#(_printf >> 16)
   1E8F 12s00r00           6278 	lcall	__sdcc_banked_call
   1E92 15 81              6279 	dec	sp
   1E94 15 81              6280 	dec	sp
   1E96 15 81              6281 	dec	sp
                           6282 ;	main.c:693: PROCESS_EXIT();
   1E98 A8 81              6283 	mov	r0,sp
   1E9A 18                 6284 	dec	r0
   1E9B 18                 6285 	dec	r0
   1E9C 86 82              6286 	mov	dpl,@r0
   1E9E 08                 6287 	inc	r0
   1E9F 86 83              6288 	mov	dph,@r0
   1EA1 08                 6289 	inc	r0
   1EA2 86 F0              6290 	mov	b,@r0
   1EA4 E4                 6291 	clr	a
   1EA5 12s00r00           6292 	lcall	__gptrput
   1EA8 A3                 6293 	inc	dptr
   1EA9 E4                 6294 	clr	a
   1EAA 12s00r00           6295 	lcall	__gptrput
   1EAD 75 82 02           6296 	mov	dpl,#0x02
   1EB0 02s21r33           6297 	ljmp	00151$
   1EB3                    6298 00126$:
                           6299 ;	main.c:695: udp_bind(client_conn, UIP_HTONS(COCONUT_UDP_CLIENT_PORT));
   1EB3 74 10              6300 	mov	a,#0x10
   1EB5 2D                 6301 	add	a,r5
   1EB6 FD                 6302 	mov	r5,a
   1EB7 E4                 6303 	clr	a
   1EB8 3E                 6304 	addc	a,r6
   1EB9 FE                 6305 	mov	r6,a
   1EBA 8D 82              6306 	mov	dpl,r5
   1EBC 8E 83              6307 	mov	dph,r6
   1EBE 8F F0              6308 	mov	b,r7
   1EC0 74 22              6309 	mov	a,#0x22
   1EC2 12s00r00           6310 	lcall	__gptrput
   1EC5 A3                 6311 	inc	dptr
   1EC6 74 3D              6312 	mov	a,#0x3D
   1EC8 12s00r00           6313 	lcall	__gptrput
                           6314 ;	main.c:697: PRINTF("Created a connection with the server ");
   1ECB 74r6B              6315 	mov	a,#__str_23
   1ECD C0 E0              6316 	push	acc
   1ECF 74s01              6317 	mov	a,#(__str_23 >> 8)
   1ED1 C0 E0              6318 	push	acc
   1ED3 74 80              6319 	mov	a,#0x80
   1ED5 C0 E0              6320 	push	acc
   1ED7 78r00              6321 	mov	r0,#_printf
   1ED9 79s00              6322 	mov	r1,#(_printf >> 8)
   1EDB 7As00              6323 	mov	r2,#(_printf >> 16)
   1EDD 12s00r00           6324 	lcall	__sdcc_banked_call
   1EE0 15 81              6325 	dec	sp
   1EE2 15 81              6326 	dec	sp
   1EE4 15 81              6327 	dec	sp
                           6328 ;	main.c:698: PRINT6ADDR(&client_conn->ripaddr);
   1EE6 90s01r22           6329 	mov	dptr,#_client_conn
   1EE9 E0                 6330 	movx	a,@dptr
   1EEA FD                 6331 	mov	r5,a
   1EEB A3                 6332 	inc	dptr
   1EEC E0                 6333 	movx	a,@dptr
   1EED FE                 6334 	mov	r6,a
   1EEE A3                 6335 	inc	dptr
   1EEF E0                 6336 	movx	a,@dptr
   1EF0 FF                 6337 	mov	r7,a
   1EF1 8D 82              6338 	mov	dpl,r5
   1EF3 8E 83              6339 	mov	dph,r6
   1EF5 8F F0              6340 	mov	b,r7
   1EF7 78r00              6341 	mov	r0,#_uip_debug_ipaddr_print
   1EF9 79s00              6342 	mov	r1,#(_uip_debug_ipaddr_print >> 8)
   1EFB 7As00              6343 	mov	r2,#(_uip_debug_ipaddr_print >> 16)
   1EFD 12s00r00           6344 	lcall	__sdcc_banked_call
                           6345 ;	main.c:699: PRINTF(" local/remote port %u/%u\n",
   1F00 90s01r22           6346 	mov	dptr,#_client_conn
   1F03 E0                 6347 	movx	a,@dptr
   1F04 FD                 6348 	mov	r5,a
   1F05 A3                 6349 	inc	dptr
   1F06 E0                 6350 	movx	a,@dptr
   1F07 FE                 6351 	mov	r6,a
   1F08 A3                 6352 	inc	dptr
   1F09 E0                 6353 	movx	a,@dptr
   1F0A FC                 6354 	mov	r4,a
   1F0B 74 12              6355 	mov	a,#0x12
   1F0D 2D                 6356 	add	a,r5
   1F0E FA                 6357 	mov	r2,a
   1F0F E4                 6358 	clr	a
   1F10 3E                 6359 	addc	a,r6
   1F11 FB                 6360 	mov	r3,a
   1F12 8C 07              6361 	mov	ar7,r4
   1F14 8A 82              6362 	mov	dpl,r2
   1F16 8B 83              6363 	mov	dph,r3
   1F18 8F F0              6364 	mov	b,r7
   1F1A 12s00r00           6365 	lcall	__gptrget
   1F1D FA                 6366 	mov	r2,a
   1F1E A3                 6367 	inc	dptr
   1F1F 12s00r00           6368 	lcall	__gptrget
   1F22 FB                 6369 	mov	r3,a
   1F23 EA                 6370 	mov	a,r2
   1F24 8B 02              6371 	mov	ar2,r3
   1F26 FB                 6372 	mov	r3,a
   1F27 74 10              6373 	mov	a,#0x10
   1F29 2D                 6374 	add	a,r5
   1F2A FD                 6375 	mov	r5,a
   1F2B E4                 6376 	clr	a
   1F2C 3E                 6377 	addc	a,r6
   1F2D FE                 6378 	mov	r6,a
   1F2E 8C 07              6379 	mov	ar7,r4
   1F30 8D 82              6380 	mov	dpl,r5
   1F32 8E 83              6381 	mov	dph,r6
   1F34 8F F0              6382 	mov	b,r7
   1F36 12s00r00           6383 	lcall	__gptrget
   1F39 FD                 6384 	mov	r5,a
   1F3A A3                 6385 	inc	dptr
   1F3B 12s00r00           6386 	lcall	__gptrget
   1F3E FE                 6387 	mov	r6,a
   1F3F ED                 6388 	mov	a,r5
   1F40 8E 05              6389 	mov	ar5,r6
   1F42 FE                 6390 	mov	r6,a
   1F43 C0 02              6391 	push	ar2
   1F45 C0 03              6392 	push	ar3
   1F47 C0 05              6393 	push	ar5
   1F49 C0 06              6394 	push	ar6
   1F4B 74r91              6395 	mov	a,#__str_24
   1F4D C0 E0              6396 	push	acc
   1F4F 74s01              6397 	mov	a,#(__str_24 >> 8)
   1F51 C0 E0              6398 	push	acc
   1F53 74 80              6399 	mov	a,#0x80
   1F55 C0 E0              6400 	push	acc
   1F57 78r00              6401 	mov	r0,#_printf
   1F59 79s00              6402 	mov	r1,#(_printf >> 8)
   1F5B 7As00              6403 	mov	r2,#(_printf >> 16)
   1F5D 12s00r00           6404 	lcall	__sdcc_banked_call
   1F60 E5 81              6405 	mov	a,sp
   1F62 24 F9              6406 	add	a,#0xf9
   1F64 F5 81              6407 	mov	sp,a
                           6408 ;	main.c:702: etimer_set(&et, SEND_INTERVAL);
   1F66 E4                 6409 	clr	a
   1F67 C0 E0              6410 	push	acc
   1F69 74 0A              6411 	mov	a,#0x0A
   1F6B C0 E0              6412 	push	acc
   1F6D 90s01r35           6413 	mov	dptr,#_process_thread_coconut_sensor_process_et_1_1
   1F70 75 F0 00           6414 	mov	b,#0x00
   1F73 78r00              6415 	mov	r0,#_etimer_set
   1F75 79s00              6416 	mov	r1,#(_etimer_set >> 8)
   1F77 7As00              6417 	mov	r2,#(_etimer_set >> 16)
   1F79 12s00r00           6418 	lcall	__sdcc_banked_call
   1F7C 15 81              6419 	dec	sp
   1F7E 15 81              6420 	dec	sp
                           6421 ;	main.c:704: while(1) {
   1F80                    6422 00148$:
                           6423 ;	main.c:705: PROCESS_YIELD();
   1F80 7C 00              6424 	mov	r4,#0x00
   1F82 A8 81              6425 	mov	r0,sp
   1F84 18                 6426 	dec	r0
   1F85 18                 6427 	dec	r0
   1F86 86 82              6428 	mov	dpl,@r0
   1F88 08                 6429 	inc	r0
   1F89 86 83              6430 	mov	dph,@r0
   1F8B 08                 6431 	inc	r0
   1F8C 86 F0              6432 	mov	b,@r0
   1F8E 74 C1              6433 	mov	a,#0xC1
   1F90 12s00r00           6434 	lcall	__gptrput
   1F93 A3                 6435 	inc	dptr
   1F94 74 02              6436 	mov	a,#0x02
   1F96 12s00r00           6437 	lcall	__gptrput
   1F99                    6438 00127$:
   1F99 EC                 6439 	mov	a,r4
   1F9A 70 06              6440 	jnz	00131$
   1F9C 75 82 01           6441 	mov	dpl,#0x01
   1F9F 02s21r33           6442 	ljmp	00151$
   1FA2                    6443 00131$:
                           6444 ;	main.c:706: if(etimer_expired(&et)) {
   1FA2 90s01r35           6445 	mov	dptr,#_process_thread_coconut_sensor_process_et_1_1
   1FA5 75 F0 00           6446 	mov	b,#0x00
   1FA8 78r00              6447 	mov	r0,#_etimer_expired
   1FAA 79s00              6448 	mov	r1,#(_etimer_expired >> 8)
   1FAC 7As00              6449 	mov	r2,#(_etimer_expired >> 16)
   1FAE 12s00r00           6450 	lcall	__sdcc_banked_call
   1FB1 E5 82              6451 	mov	a,dpl
   1FB3 85 83 F0           6452 	mov	b,dph
   1FB6 45 F0              6453 	orl	a,b
   1FB8 70 03              6454 	jnz	00192$
   1FBA 02s20rFC           6455 	ljmp	00144$
   1FBD                    6456 00192$:
                           6457 ;	main.c:707: if (!auth_success) {
   1FBD 90s00r00           6458 	mov	dptr,#_auth_success
   1FC0 E0                 6459 	movx	a,@dptr
   1FC1 FF                 6460 	mov	r7,a
   1FC2 60 03              6461 	jz	00193$
   1FC4 02s20r44           6462 	ljmp	00141$
   1FC7                    6463 00193$:
                           6464 ;	main.c:708: etimer_restart(&et);
   1FC7 90s01r35           6465 	mov	dptr,#_process_thread_coconut_sensor_process_et_1_1
   1FCA 75 F0 00           6466 	mov	b,#0x00
   1FCD 78r00              6467 	mov	r0,#_etimer_restart
   1FCF 79s00              6468 	mov	r1,#(_etimer_restart >> 8)
   1FD1 7As00              6469 	mov	r2,#(_etimer_restart >> 16)
   1FD3 12s00r00           6470 	lcall	__sdcc_banked_call
                           6471 ;	main.c:709: PRINTF("Send auth message\n");
   1FD6 74rAB              6472 	mov	a,#__str_25
   1FD8 C0 E0              6473 	push	acc
   1FDA 74s01              6474 	mov	a,#(__str_25 >> 8)
   1FDC C0 E0              6475 	push	acc
   1FDE 74 80              6476 	mov	a,#0x80
   1FE0 C0 E0              6477 	push	acc
   1FE2 78r00              6478 	mov	r0,#_printf
   1FE4 79s00              6479 	mov	r1,#(_printf >> 8)
   1FE6 7As00              6480 	mov	r2,#(_printf >> 16)
   1FE8 12s00r00           6481 	lcall	__sdcc_banked_call
   1FEB 15 81              6482 	dec	sp
   1FED 15 81              6483 	dec	sp
   1FEF 15 81              6484 	dec	sp
                           6485 ;	main.c:710: len = create_security_client_hello_msg(output_buf);
   1FF1 90s00r00           6486 	mov	dptr,#_output_buf
   1FF4 75 F0 00           6487 	mov	b,#0x00
   1FF7 78r00              6488 	mov	r0,#_create_security_client_hello_msg
   1FF9 79s00              6489 	mov	r1,#(_create_security_client_hello_msg >> 8)
   1FFB 7As00              6490 	mov	r2,#(_create_security_client_hello_msg >> 16)
   1FFD 12s00r00           6491 	lcall	__sdcc_banked_call
   2000 AE 82              6492 	mov	r6,dpl
   2002 AF 83              6493 	mov	r7,dph
                           6494 ;	main.c:711: if (len){
   2004 EE                 6495 	mov	a,r6
   2005 4F                 6496 	orl	a,r7
   2006 70 03              6497 	jnz	00194$
   2008 02s20rFC           6498 	ljmp	00144$
   200B                    6499 00194$:
                           6500 ;	main.c:712: debug_print_msg(output_buf, len);
   200B C0 07              6501 	push	ar7
   200D C0 06              6502 	push	ar6
   200F C0 06              6503 	push	ar6
   2011 C0 07              6504 	push	ar7
   2013 90s00r00           6505 	mov	dptr,#_output_buf
   2016 75 F0 00           6506 	mov	b,#0x00
   2019 78r00              6507 	mov	r0,#_debug_print_msg
   201B 79s00              6508 	mov	r1,#(_debug_print_msg >> 8)
   201D 7As00              6509 	mov	r2,#(_debug_print_msg >> 16)
   201F 12s00r00           6510 	lcall	__sdcc_banked_call
   2022 15 81              6511 	dec	sp
   2024 15 81              6512 	dec	sp
   2026 D0 06              6513 	pop	ar6
   2028 D0 07              6514 	pop	ar7
                           6515 ;	main.c:713: send_msg_to_gateway(output_buf, len);
   202A C0 06              6516 	push	ar6
   202C C0 07              6517 	push	ar7
   202E 90s00r00           6518 	mov	dptr,#_output_buf
   2031 75 F0 00           6519 	mov	b,#0x00
   2034 78r13              6520 	mov	r0,#_send_msg_to_gateway
   2036 79s01              6521 	mov	r1,#(_send_msg_to_gateway >> 8)
   2038 7As00              6522 	mov	r2,#(_send_msg_to_gateway >> 16)
   203A 12s00r00           6523 	lcall	__sdcc_banked_call
   203D 15 81              6524 	dec	sp
   203F 15 81              6525 	dec	sp
   2041 02s20rFC           6526 	ljmp	00144$
   2044                    6527 00141$:
                           6528 ;	main.c:715: } else if (!reg_success) {
   2044 90s00r01           6529 	mov	dptr,#_reg_success
   2047 E0                 6530 	movx	a,@dptr
   2048 FD                 6531 	mov	r5,a
   2049 60 03              6532 	jz	00195$
   204B 02s20rED           6533 	ljmp	00138$
   204E                    6534 00195$:
                           6535 ;	main.c:717: etimer_restart(&et);
   204E 90s01r35           6536 	mov	dptr,#_process_thread_coconut_sensor_process_et_1_1
   2051 75 F0 00           6537 	mov	b,#0x00
   2054 78r00              6538 	mov	r0,#_etimer_restart
   2056 79s00              6539 	mov	r1,#(_etimer_restart >> 8)
   2058 7As00              6540 	mov	r2,#(_etimer_restart >> 16)
   205A 12s00r00           6541 	lcall	__sdcc_banked_call
                           6542 ;	main.c:719: len = create_new_device_msg(output_buf + sizeof(security_header_t), 
   205D E4                 6543 	clr	a
   205E C0 E0              6544 	push	acc
   2060 74 1F              6545 	mov	a,#0x1F
   2062 C0 E0              6546 	push	acc
   2064 74 01              6547 	mov	a,#0x01
   2066 C0 E0              6548 	push	acc
   2068 90s00r03           6549 	mov	dptr,#(_output_buf + 0x0003)
   206B 75 F0 00           6550 	mov	b,#0x00
   206E 78r00              6551 	mov	r0,#_create_new_device_msg
   2070 79s00              6552 	mov	r1,#(_create_new_device_msg >> 8)
   2072 7As00              6553 	mov	r2,#(_create_new_device_msg >> 16)
   2074 12s00r00           6554 	lcall	__sdcc_banked_call
   2077 AC 82              6555 	mov	r4,dpl
   2079 AD 83              6556 	mov	r5,dph
   207B 15 81              6557 	dec	sp
   207D 15 81              6558 	dec	sp
   207F 15 81              6559 	dec	sp
   2081 8C 06              6560 	mov	ar6,r4
   2083 8D 07              6561 	mov	ar7,r5
                           6562 ;	main.c:721: len = create_security_data_msg(output_buf, output_buf + sizeof(security_header_t), len);
   2085 C0 06              6563 	push	ar6
   2087 C0 07              6564 	push	ar7
   2089 74r03              6565 	mov	a,#(_output_buf + 0x0003)
   208B C0 E0              6566 	push	acc
   208D 74s00              6567 	mov	a,#((_output_buf + 0x0003) >> 8)
   208F C0 E0              6568 	push	acc
   2091 E4                 6569 	clr	a
   2092 C0 E0              6570 	push	acc
   2094 90s00r00           6571 	mov	dptr,#_output_buf
   2097 75 F0 00           6572 	mov	b,#0x00
   209A 78r00              6573 	mov	r0,#_create_security_data_msg
   209C 79s00              6574 	mov	r1,#(_create_security_data_msg >> 8)
   209E 7As00              6575 	mov	r2,#(_create_security_data_msg >> 16)
   20A0 12s00r00           6576 	lcall	__sdcc_banked_call
   20A3 AC 82              6577 	mov	r4,dpl
   20A5 AD 83              6578 	mov	r5,dph
   20A7 E5 81              6579 	mov	a,sp
   20A9 24 FB              6580 	add	a,#0xfb
   20AB F5 81              6581 	mov	sp,a
   20AD 8C 06              6582 	mov	ar6,r4
   20AF 8D 07              6583 	mov	ar7,r5
                           6584 ;	main.c:722: if (len) {
   20B1 EE                 6585 	mov	a,r6
   20B2 4F                 6586 	orl	a,r7
   20B3 60 47              6587 	jz	00144$
                           6588 ;	main.c:723: debug_print_msg(output_buf, len);
   20B5 C0 07              6589 	push	ar7
   20B7 C0 06              6590 	push	ar6
   20B9 C0 06              6591 	push	ar6
   20BB C0 07              6592 	push	ar7
   20BD 90s00r00           6593 	mov	dptr,#_output_buf
   20C0 75 F0 00           6594 	mov	b,#0x00
   20C3 78r00              6595 	mov	r0,#_debug_print_msg
   20C5 79s00              6596 	mov	r1,#(_debug_print_msg >> 8)
   20C7 7As00              6597 	mov	r2,#(_debug_print_msg >> 16)
   20C9 12s00r00           6598 	lcall	__sdcc_banked_call
   20CC 15 81              6599 	dec	sp
   20CE 15 81              6600 	dec	sp
   20D0 D0 06              6601 	pop	ar6
   20D2 D0 07              6602 	pop	ar7
                           6603 ;	main.c:724: send_msg_to_gateway(output_buf, len);
   20D4 C0 06              6604 	push	ar6
   20D6 C0 07              6605 	push	ar7
   20D8 90s00r00           6606 	mov	dptr,#_output_buf
   20DB 75 F0 00           6607 	mov	b,#0x00
   20DE 78r13              6608 	mov	r0,#_send_msg_to_gateway
   20E0 79s01              6609 	mov	r1,#(_send_msg_to_gateway >> 8)
   20E2 7As00              6610 	mov	r2,#(_send_msg_to_gateway >> 16)
   20E4 12s00r00           6611 	lcall	__sdcc_banked_call
   20E7 15 81              6612 	dec	sp
   20E9 15 81              6613 	dec	sp
   20EB 80 0F              6614 	sjmp	00144$
   20ED                    6615 00138$:
                           6616 ;	main.c:727: etimer_restart(&et);
   20ED 90s01r35           6617 	mov	dptr,#_process_thread_coconut_sensor_process_et_1_1
   20F0 75 F0 00           6618 	mov	b,#0x00
   20F3 78r00              6619 	mov	r0,#_etimer_restart
   20F5 79s00              6620 	mov	r1,#(_etimer_restart >> 8)
   20F7 7As00              6621 	mov	r2,#(_etimer_restart >> 16)
   20F9 12s00r00           6622 	lcall	__sdcc_banked_call
   20FC                    6623 00144$:
                           6624 ;	main.c:731: if(ev == tcpip_event) {
   20FC 90s00r00           6625 	mov	dptr,#_tcpip_event
   20FF E0                 6626 	movx	a,@dptr
   2100 FF                 6627 	mov	r7,a
   2101 E5 81              6628 	mov	a,sp
   2103 24 FA              6629 	add	a,#0xfa
   2105 F8                 6630 	mov	r0,a
   2106 E6                 6631 	mov	a,@r0
   2107 B5 07 02           6632 	cjne	a,ar7,00197$
   210A 80 03              6633 	sjmp	00198$
   210C                    6634 00197$:
   210C 02s1Fr80           6635 	ljmp	00148$
   210F                    6636 00198$:
                           6637 ;	main.c:732: message_handler();
   210F 78r77              6638 	mov	r0,#_message_handler
   2111 79s15              6639 	mov	r1,#(_message_handler >> 8)
   2113 7As00              6640 	mov	r2,#(_message_handler >> 16)
   2115 12s00r00           6641 	lcall	__sdcc_banked_call
   2118 02s1Fr80           6642 	ljmp	00148$
                           6643 ;	main.c:736: PROCESS_END();
   211B                    6644 00150$:
   211B A8 81              6645 	mov	r0,sp
   211D 18                 6646 	dec	r0
   211E 18                 6647 	dec	r0
   211F 86 82              6648 	mov	dpl,@r0
   2121 08                 6649 	inc	r0
   2122 86 83              6650 	mov	dph,@r0
   2124 08                 6651 	inc	r0
   2125 86 F0              6652 	mov	b,@r0
   2127 E4                 6653 	clr	a
   2128 12s00r00           6654 	lcall	__gptrput
   212B A3                 6655 	inc	dptr
   212C E4                 6656 	clr	a
   212D 12s00r00           6657 	lcall	__gptrput
   2130 75 82 03           6658 	mov	dpl,#0x03
   2133                    6659 00151$:
   2133 15 81              6660 	dec	sp
   2135 15 81              6661 	dec	sp
   2137 15 81              6662 	dec	sp
   2139 02s00r00           6663 	ljmp	__sdcc_banked_ret
                           6664 	.area CSEG    (CODE)
                           6665 	.area CONST   (CODE)
   0000                    6666 _autostart_processes:
   0000r03s00 00           6667 	.byte _coconut_sensor_process,(_coconut_sensor_process >> 8),#0x00
                           6668 ; generic printIvalPtr
   0003 00 00 00           6669 	.byte #0x00,#0x00,#0x00
   0006                    6670 __str_0:
   0006 4D 65 73 73 61 67  6671 	.ascii "Message len:%d, content:"
        65 20 6C 65 6E 3A
        25 64 2C 20 63 6F
        6E 74 65 6E 74 3A
   001E 00                 6672 	.db 0x00
   001F                    6673 __str_1:
   001F 25 78 20           6674 	.ascii "%x "
   0022 00                 6675 	.db 0x00
   0023                    6676 __str_2:
   0023 0A                 6677 	.db 0x0A
   0024 00                 6678 	.db 0x00
   0025                    6679 __str_3:
   0025 72 65 67 69 73 74  6680 	.ascii "register response:%s"
        65 72 20 72 65 73
        70 6F 6E 73 65 3A
        25 73
   0039 0A                 6681 	.db 0x0A
   003A 00                 6682 	.db 0x00
   003B                    6683 __str_4:
   003B 72 65 67 69 73 74  6684 	.ascii "register response ret code:%d"
        65 72 20 72 65 73
        70 6F 6E 73 65 20
        72 65 74 20 63 6F
        64 65 3A 25 64
   0058 0A                 6685 	.db 0x0A
   0059 00                 6686 	.db 0x00
   005A                    6687 __str_5:
   005A 5B 25 64 5D        6688 	.ascii "[%d]"
   005E 00                 6689 	.db 0x00
   005F                    6690 __str_6:
   005F 5B                 6691 	.ascii "["
   0060 00                 6692 	.db 0x00
   0061                    6693 __str_7:
   0061 5B 25 73 2C 5B     6694 	.ascii "[%s,["
   0066 00                 6695 	.db 0x00
   0067                    6696 __str_8:
   0067 5B 25 64 2C 20 25  6697 	.ascii "[%d, %d],"
        64 5D 2C
   0070 00                 6698 	.db 0x00
   0071                    6699 __str_9:
   0071 5B 25 64 2C 20 25  6700 	.ascii "[%d, %f],"
        66 5D 2C
   007A 00                 6701 	.db 0x00
   007B                    6702 __str_10:
   007B 5B 25 64 2C 20 25  6703 	.ascii "[%d, %s],"
        73 5D 2C
   0084 00                 6704 	.db 0x00
   0085                    6705 __str_11:
   0085 5D 5D 2C           6706 	.ascii "]],"
   0088 00                 6707 	.db 0x00
   0089                    6708 __str_12:
   0089 5D                 6709 	.ascii "]"
   008A 00                 6710 	.db 0x00
   008B                    6711 __str_13:
   008B 53 65 63 75 72 69  6712 	.ascii "Security Error:%d"
        74 79 20 45 72 72
        6F 72 3A 25 64
   009C 00                 6713 	.db 0x00
   009D                    6714 __str_14:
   009D 44 65 63 72 79 70  6715 	.ascii "Decrypt Error"
        74 20 45 72 72 6F
        72
   00AA 00                 6716 	.db 0x00
   00AB                    6717 __str_15:
   00AB 49 74 20 69 73 20  6718 	.ascii "It is not for me"
        6E 6F 74 20 66 6F
        72 20 6D 65
   00BB 0A                 6719 	.db 0x0A
   00BC 00                 6720 	.db 0x00
   00BD                    6721 __str_16:
   00BD 43 6C 69 65 6E 74  6722 	.ascii "Client IPv6 addresses: "
        20 49 50 76 36 20
        61 64 64 72 65 73
        73 65 73 3A 20
   00D4 00                 6723 	.db 0x00
   00D5                    6724 __str_17:
   00D5 43 6F 63 6F 6E 75  6725 	.ascii "Coconut process started"
        74 20 70 72 6F 63
        65 73 73 20 73 74
        61 72 74 65 64
   00EC 0A                 6726 	.db 0x0A
   00ED 00                 6727 	.db 0x00
   00EE                    6728 __str_18:
   00EE 43 72 79 70 74 6F  6729 	.ascii "Crypto init fail"
        20 69 6E 69 74 20
        66 61 69 6C
   00FE 0A                 6730 	.db 0x0A
   00FF 00                 6731 	.db 0x00
   0100                    6732 __str_19:
   0100 43 72 79 70 74 6F  6733 	.ascii "Crypto init Done"
        20 69 6E 69 74 20
        44 6F 6E 65
   0110 0A                 6734 	.db 0x0A
   0111 00                 6735 	.db 0x00
   0112                    6736 __str_20:
   0112 44 65 76 69 63 65  6737 	.ascii "Device init fail"
        20 69 6E 69 74 20
        66 61 69 6C
   0122 0A                 6738 	.db 0x0A
   0123 00                 6739 	.db 0x00
   0124                    6740 __str_21:
   0124 44 65 76 69 63 65  6741 	.ascii "Device create done"
        20 63 72 65 61 74
        65 20 64 6F 6E 65
   0136 0A                 6742 	.db 0x0A
   0137 00                 6743 	.db 0x00
   0138                    6744 __str_22:
   0138 4E 6F 20 55 44 50  6745 	.ascii "No UDP connection available, exiting the process!"
        20 63 6F 6E 6E 65
        63 74 69 6F 6E 20
        61 76 61 69 6C 61
        62 6C 65 2C 20 65
        78 69 74 69 6E 67
        20 74 68 65 20 70
        72 6F 63 65 73 73
        21
   0169 0A                 6746 	.db 0x0A
   016A 00                 6747 	.db 0x00
   016B                    6748 __str_23:
   016B 43 72 65 61 74 65  6749 	.ascii "Created a connection with the server "
        64 20 61 20 63 6F
        6E 6E 65 63 74 69
        6F 6E 20 77 69 74
        68 20 74 68 65 20
        73 65 72 76 65 72
        20
   0190 00                 6750 	.db 0x00
   0191                    6751 __str_24:
   0191 20 6C 6F 63 61 6C  6752 	.ascii " local/remote port %u/%u"
        2F 72 65 6D 6F 74
        65 20 70 6F 72 74
        20 25 75 2F 25 75
   01A9 0A                 6753 	.db 0x0A
   01AA 00                 6754 	.db 0x00
   01AB                    6755 __str_25:
   01AB 53 65 6E 64 20 61  6756 	.ascii "Send auth message"
        75 74 68 20 6D 65
        73 73 61 67 65
   01BC 0A                 6757 	.db 0x0A
   01BD 00                 6758 	.db 0x00
                           6759 	.area XINIT   (CODE)
   0000                    6760 __xinit__auth_success:
   0000 00                 6761 	.db #0x00	; 0
   0001                    6762 __xinit__reg_success:
   0001 00                 6763 	.db #0x00	; 0
   0002                    6764 __xinit__get_global_addr_success:
   0002 00                 6765 	.db #0x00	; 0
   0003                    6766 __xinit__coconut_sensor_process:
                           6767 ; generic printIvalPtr
   0003 00 00 00           6768 	.byte #0x00,#0x00,#0x00
   0006rBBs1Cs00           6769 	.byte _process_thread_coconut_sensor_process,(_process_thread_coconut_sensor_process >> 8),(_process_thread_coconut_sensor_process >> 16)
   0009 00 00              6770 	.byte #0x00,#0x00	; 0
   000B 00                 6771 	.db #0x00	; 0
   000C 00                 6772 	.db #0x00	; 0
                           6773 	.area CABS    (ABS,CODE)
