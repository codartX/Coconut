                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.1 #7100 (Oct 29 2014) (Linux)
                              4 ; This file was generated Wed Dec  2 18:11:03 2015
                              5 ;--------------------------------------------------------
                              6 	.module slip
                              7 	.optsdcc -mmcs51 --model-huge
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _slip_arch_writeb
                             13 	.globl _tcpip_input
                             14 	.globl _process_poll
                             15 	.globl _memset
                             16 	.globl _memcmp
                             17 	.globl _memcpy
                             18 	.globl _ACTIVE
                             19 	.globl _TX_BYTE
                             20 	.globl _RX_BYTE
                             21 	.globl _ERR
                             22 	.globl _FE
                             23 	.globl _SLAVE
                             24 	.globl _RE
                             25 	.globl _MODE
                             26 	.globl _T3OVFIF
                             27 	.globl _T3CH0IF
                             28 	.globl _T3CH1IF
                             29 	.globl _T4OVFIF
                             30 	.globl _T4CH0IF
                             31 	.globl _T4CH1IF
                             32 	.globl _OVFIM
                             33 	.globl _B_0
                             34 	.globl _B_1
                             35 	.globl _B_2
                             36 	.globl _B_3
                             37 	.globl _B_4
                             38 	.globl _B_5
                             39 	.globl _B_6
                             40 	.globl _B_7
                             41 	.globl _P2IF
                             42 	.globl _UTX0IF
                             43 	.globl _UTX1IF
                             44 	.globl _P1IF
                             45 	.globl _WDTIF
                             46 	.globl _ACC_0
                             47 	.globl _ACC_1
                             48 	.globl _ACC_2
                             49 	.globl _ACC_3
                             50 	.globl _ACC_4
                             51 	.globl _ACC_5
                             52 	.globl _ACC_6
                             53 	.globl _ACC_7
                             54 	.globl _P
                             55 	.globl _F1
                             56 	.globl _OV
                             57 	.globl _RS0
                             58 	.globl _RS1
                             59 	.globl _F0
                             60 	.globl _AC
                             61 	.globl _CY
                             62 	.globl _DMAIF
                             63 	.globl _T1IF
                             64 	.globl _T2IF
                             65 	.globl _T3IF
                             66 	.globl _T4IF
                             67 	.globl _P0IF
                             68 	.globl _STIF
                             69 	.globl _DMAIE
                             70 	.globl _T1IE
                             71 	.globl _T2IE
                             72 	.globl _T3IE
                             73 	.globl _T4IE
                             74 	.globl _P0IE
                             75 	.globl _RFERRIE
                             76 	.globl _ADCIE
                             77 	.globl _URX0IE
                             78 	.globl _URX1IE
                             79 	.globl _ENCIE
                             80 	.globl _STIE
                             81 	.globl _EA
                             82 	.globl _P2_0
                             83 	.globl _P2_1
                             84 	.globl _P2_2
                             85 	.globl _P2_3
                             86 	.globl _P2_4
                             87 	.globl _P2_5
                             88 	.globl _P2_6
                             89 	.globl _P2_7
                             90 	.globl _ENCIF_0
                             91 	.globl _ENCIF_1
                             92 	.globl _P1_0
                             93 	.globl _P1_1
                             94 	.globl _P1_2
                             95 	.globl _P1_3
                             96 	.globl _P1_4
                             97 	.globl _P1_5
                             98 	.globl _P1_6
                             99 	.globl _P1_7
                            100 	.globl _IT0
                            101 	.globl _RFERRIF
                            102 	.globl _IT1
                            103 	.globl _URX0IF
                            104 	.globl _ADCIF
                            105 	.globl _URX1IF
                            106 	.globl _P0_0
                            107 	.globl _P0_1
                            108 	.globl _P0_2
                            109 	.globl _P0_3
                            110 	.globl _P0_4
                            111 	.globl _P0_5
                            112 	.globl _P0_6
                            113 	.globl _P0_7
                            114 	.globl _WDCTL
                            115 	.globl _U1GCR
                            116 	.globl _U1UCR
                            117 	.globl _U1BAUD
                            118 	.globl _U1DBUF
                            119 	.globl _U1CSR
                            120 	.globl _U0GCR
                            121 	.globl _U0UCR
                            122 	.globl _U0BAUD
                            123 	.globl _U0DBUF
                            124 	.globl _U0CSR
                            125 	.globl _TIMIF
                            126 	.globl _T4CC1
                            127 	.globl _T4CCTL1
                            128 	.globl _T4CC0
                            129 	.globl _T4CCTL0
                            130 	.globl _T4CTL
                            131 	.globl _T4CNT
                            132 	.globl _T3CC1
                            133 	.globl _T3CCTL1
                            134 	.globl _T3CC0
                            135 	.globl _T3CCTL0
                            136 	.globl _T3CTL
                            137 	.globl _T3CNT
                            138 	.globl _T2MSEL
                            139 	.globl _T2IRQM
                            140 	.globl _T2MOVF2
                            141 	.globl _T2MOVF1
                            142 	.globl _T2MOVF0
                            143 	.globl _T2M1
                            144 	.globl _T2M0
                            145 	.globl _T2IRQF
                            146 	.globl _T2EVTCFG
                            147 	.globl _T2CTRL
                            148 	.globl _T1STAT
                            149 	.globl _T1CCTL2
                            150 	.globl _T1CCTL1
                            151 	.globl _T1CCTL0
                            152 	.globl _T1CTL
                            153 	.globl _T1CNTH
                            154 	.globl _T1CNTL
                            155 	.globl _T1CC2H
                            156 	.globl _T1CC2L
                            157 	.globl _T1CC1H
                            158 	.globl _T1CC1L
                            159 	.globl _T1CC0H
                            160 	.globl _T1CC0L
                            161 	.globl _CLKCONSTA
                            162 	.globl _CLKCONCMD
                            163 	.globl _SLEEPSTA
                            164 	.globl _SLEEPCMD
                            165 	.globl _STLOAD
                            166 	.globl _ST2
                            167 	.globl _ST1
                            168 	.globl _ST0
                            169 	.globl _RFERRF
                            170 	.globl _RFIRQF0
                            171 	.globl _RFST
                            172 	.globl _RFD
                            173 	.globl _RFIRQF1
                            174 	.globl _PSBANK
                            175 	.globl _FMAP
                            176 	.globl _MEMCTR
                            177 	.globl __XPAGE
                            178 	.globl _MPAGE
                            179 	.globl _PMUX
                            180 	.globl _P2DIR
                            181 	.globl _P1DIR
                            182 	.globl _P0DIR
                            183 	.globl _P2INP
                            184 	.globl _P1INP
                            185 	.globl _P2SEL
                            186 	.globl _P1SEL
                            187 	.globl _P0SEL
                            188 	.globl _APCFG
                            189 	.globl _PERCFG
                            190 	.globl _P0INP
                            191 	.globl _P2IEN
                            192 	.globl _P1IEN
                            193 	.globl _P0IEN
                            194 	.globl _PICTL
                            195 	.globl _P2IFG
                            196 	.globl _P1IFG
                            197 	.globl _P0IFG
                            198 	.globl _DMAREQ
                            199 	.globl _DMAARM
                            200 	.globl _DMA0CFGH
                            201 	.globl _DMA0CFGL
                            202 	.globl _DMA1CFGH
                            203 	.globl _DMA1CFGL
                            204 	.globl _DMAIRQ
                            205 	.globl _ENCCS
                            206 	.globl _ENCDO
                            207 	.globl _ENCDI
                            208 	.globl _RNDH
                            209 	.globl _RNDL
                            210 	.globl _ADCH
                            211 	.globl _ADCL
                            212 	.globl _ADCCON3
                            213 	.globl _ADCCON2
                            214 	.globl _ADCCON1
                            215 	.globl _B
                            216 	.globl _IRCON2
                            217 	.globl _ACC
                            218 	.globl _PSW
                            219 	.globl _IRCON
                            220 	.globl _IP1
                            221 	.globl _IEN1
                            222 	.globl _IP0
                            223 	.globl _IEN0
                            224 	.globl _P2
                            225 	.globl _S1CON
                            226 	.globl _IEN2
                            227 	.globl _S0CON
                            228 	.globl _DPS
                            229 	.globl _P1
                            230 	.globl _TCON
                            231 	.globl _PCON
                            232 	.globl _DPH1
                            233 	.globl _DPL1
                            234 	.globl _DPH0
                            235 	.globl _DPL0
                            236 	.globl _SP
                            237 	.globl _P0
                            238 	.globl _slip_process
                            239 	.globl _slip_active
                            240 	.globl _X_IEEE_ADDR
                            241 	.globl _X_INFOPAGE
                            242 	.globl _X_P2DIR
                            243 	.globl _X_P1DIR
                            244 	.globl _X_P0DIR
                            245 	.globl _X_U1GCR
                            246 	.globl _X_U1UCR
                            247 	.globl _X_U1BAUD
                            248 	.globl _X_U1DBUF
                            249 	.globl _X_U1CSR
                            250 	.globl _X_P2INP
                            251 	.globl _X_P1INP
                            252 	.globl _X_P2SEL
                            253 	.globl _X_P1SEL
                            254 	.globl _X_P0SEL
                            255 	.globl _X_APCFG
                            256 	.globl _X_PERCFG
                            257 	.globl _X_T4CC1
                            258 	.globl _X_T4CCTL1
                            259 	.globl _X_T4CC0
                            260 	.globl _X_T4CCTL0
                            261 	.globl _X_T4CTL
                            262 	.globl _X_T4CNT
                            263 	.globl _X_RFIRQF0
                            264 	.globl _X_T1CCTL2
                            265 	.globl _X_T1CCTL1
                            266 	.globl _X_T1CCTL0
                            267 	.globl _X_T1CTL
                            268 	.globl _X_T1CNTH
                            269 	.globl _X_T1CNTL
                            270 	.globl _X_RFST
                            271 	.globl _X_T1CC2H
                            272 	.globl _X_T1CC2L
                            273 	.globl _X_T1CC1H
                            274 	.globl _X_T1CC1L
                            275 	.globl _X_T1CC0H
                            276 	.globl _X_T1CC0L
                            277 	.globl _X_RFD
                            278 	.globl _X_TIMIF
                            279 	.globl _X_DMAREQ
                            280 	.globl _X_DMAARM
                            281 	.globl _X_DMA0CFGH
                            282 	.globl _X_DMA0CFGL
                            283 	.globl _X_DMA1CFGH
                            284 	.globl _X_DMA1CFGL
                            285 	.globl _X_DMAIRQ
                            286 	.globl _X_T3CC1
                            287 	.globl _X_T3CCTL1
                            288 	.globl _X_T3CC0
                            289 	.globl _X_T3CCTL0
                            290 	.globl _X_T3CTL
                            291 	.globl _X_T3CNT
                            292 	.globl _X_WDCTL
                            293 	.globl _X_MEMCTR
                            294 	.globl _X_CLKCONCMD
                            295 	.globl _X_U0GCR
                            296 	.globl _X_U0UCR
                            297 	.globl _X_T2MSEL
                            298 	.globl _X_U0BAUD
                            299 	.globl _X_U0DBUF
                            300 	.globl _X_RFERRF
                            301 	.globl _X_SLEEPCMD
                            302 	.globl _X_RNDH
                            303 	.globl _X_RNDL
                            304 	.globl _X_ADCH
                            305 	.globl _X_ADCL
                            306 	.globl _X_ADCCON3
                            307 	.globl _X_ADCCON2
                            308 	.globl _X_ADCCON1
                            309 	.globl _X_ENCCS
                            310 	.globl _X_ENCDO
                            311 	.globl _X_ENCDI
                            312 	.globl _X_T1STAT
                            313 	.globl _X_PMUX
                            314 	.globl _X_STLOAD
                            315 	.globl _X_P2IEN
                            316 	.globl _X_P0IEN
                            317 	.globl _X_T2IRQM
                            318 	.globl _X_T2MOVF2
                            319 	.globl _X_T2MOVF1
                            320 	.globl _X_T2MOVF0
                            321 	.globl _X_T2M1
                            322 	.globl _X_T2M0
                            323 	.globl _X_T2IRQF
                            324 	.globl _X_P2
                            325 	.globl _X_PSBANK
                            326 	.globl _X_FMAP
                            327 	.globl _X_CLKCONSTA
                            328 	.globl _X_SLEEPSTA
                            329 	.globl _X_T2EVTCFG
                            330 	.globl _X_ST2
                            331 	.globl _X_ST1
                            332 	.globl _X_ST0
                            333 	.globl _X_T2CTRL
                            334 	.globl _X__XPAGE
                            335 	.globl _X_MPAGE
                            336 	.globl _X_RFIRQF1
                            337 	.globl _X_P1
                            338 	.globl _X_P0INP
                            339 	.globl _X_P1IEN
                            340 	.globl _X_PICTL
                            341 	.globl _X_P2IFG
                            342 	.globl _X_P1IFG
                            343 	.globl _X_P0IFG
                            344 	.globl _X_U0CSR
                            345 	.globl _X_P0
                            346 	.globl _USBF5
                            347 	.globl _USBF4
                            348 	.globl _USBF3
                            349 	.globl _USBF2
                            350 	.globl _USBF1
                            351 	.globl _USBF0
                            352 	.globl _USBCNTH
                            353 	.globl _USBCNTL
                            354 	.globl _USBCNT0
                            355 	.globl _USBCSOH
                            356 	.globl _USBCSOL
                            357 	.globl _USBMAXO
                            358 	.globl _USBCSIH
                            359 	.globl _USBCSIL
                            360 	.globl _USBCS0
                            361 	.globl _USBMAXI
                            362 	.globl _USBCTRL
                            363 	.globl _USBINDEX
                            364 	.globl _USBFRMH
                            365 	.globl _USBFRML
                            366 	.globl _USBCIE
                            367 	.globl _USBOIE
                            368 	.globl _USBIIE
                            369 	.globl _USBCIF
                            370 	.globl _USBOIF
                            371 	.globl _USBIIF
                            372 	.globl _USBPOW
                            373 	.globl _USBADDR
                            374 	.globl _CSPT
                            375 	.globl _CSPZ
                            376 	.globl _CSPY
                            377 	.globl _CSPX
                            378 	.globl _CSPSTAT
                            379 	.globl _CSPCTRL
                            380 	.globl _CSPPROG23
                            381 	.globl _CSPPROG22
                            382 	.globl _CSPPROG21
                            383 	.globl _CSPPROG20
                            384 	.globl _CSPPROG19
                            385 	.globl _CSPPROG18
                            386 	.globl _CSPPROG17
                            387 	.globl _CSPPROG16
                            388 	.globl _CSPPROG15
                            389 	.globl _CSPPROG14
                            390 	.globl _CSPPROG13
                            391 	.globl _CSPPROG12
                            392 	.globl _CSPPROG11
                            393 	.globl _CSPPROG10
                            394 	.globl _CSPPROG9
                            395 	.globl _CSPPROG8
                            396 	.globl _CSPPROG7
                            397 	.globl _CSPPROG6
                            398 	.globl _CSPPROG5
                            399 	.globl _CSPPROG4
                            400 	.globl _CSPPROG3
                            401 	.globl _CSPPROG2
                            402 	.globl _CSPPROG1
                            403 	.globl _CSPPROG0
                            404 	.globl _RFC_OBS_CTRL2
                            405 	.globl _RFC_OBS_CTRL1
                            406 	.globl _RFC_OBS_CTRL0
                            407 	.globl _TXFILTCFG
                            408 	.globl _PTEST1
                            409 	.globl _PTEST0
                            410 	.globl _ATEST
                            411 	.globl _DACTEST2
                            412 	.globl _DACTEST1
                            413 	.globl _DACTEST0
                            414 	.globl _MDMTEST1
                            415 	.globl _MDMTEST0
                            416 	.globl _ADCTEST2
                            417 	.globl _ADCTEST1
                            418 	.globl _ADCTEST0
                            419 	.globl _AGCCTRL3
                            420 	.globl _AGCCTRL2
                            421 	.globl _AGCCTRL1
                            422 	.globl _AGCCTRL0
                            423 	.globl _FSCAL3
                            424 	.globl _FSCAL2
                            425 	.globl _FSCAL1
                            426 	.globl _FSCAL0
                            427 	.globl _FSCTRL
                            428 	.globl _RXCTRL
                            429 	.globl _FREQEST
                            430 	.globl _MDMCTRL1
                            431 	.globl _MDMCTRL0
                            432 	.globl _RFRND
                            433 	.globl _RFERRM
                            434 	.globl _RFIRQM1
                            435 	.globl _RFIRQM0
                            436 	.globl _TXLAST_PTR
                            437 	.globl _TXFIRST_PTR
                            438 	.globl _RXP1_PTR
                            439 	.globl _RXLAST_PTR
                            440 	.globl _RXFIRST_PTR
                            441 	.globl _TXFIFOCNT
                            442 	.globl _RXFIFOCNT
                            443 	.globl _RXFIRST
                            444 	.globl _RSSISTAT
                            445 	.globl _RSSI
                            446 	.globl _CCACTRL1
                            447 	.globl _CCACTRL0
                            448 	.globl _FSMCTRL
                            449 	.globl _FIFOPCTRL
                            450 	.globl _FSMSTAT1
                            451 	.globl _FSMSTAT0
                            452 	.globl _TXCTRL
                            453 	.globl _TXPOWER
                            454 	.globl _FREQCTRL
                            455 	.globl _FREQTUNE
                            456 	.globl _RXMASKCLR
                            457 	.globl _RXMASKSET
                            458 	.globl _RXENABLE
                            459 	.globl _FRMCTRL1
                            460 	.globl _FRMCTRL0
                            461 	.globl _SRCEXTEN2
                            462 	.globl _SRCEXTEN1
                            463 	.globl _SRCEXTEN0
                            464 	.globl _SRCSHORTEN2
                            465 	.globl _SRCSHORTEN1
                            466 	.globl _SRCSHORTEN0
                            467 	.globl _SRCMATCH
                            468 	.globl _FRMFILT1
                            469 	.globl _FRMFILT0
                            470 	.globl _SHORT_ADDR1
                            471 	.globl _SHORT_ADDR0
                            472 	.globl _PAN_ID1
                            473 	.globl _PAN_ID0
                            474 	.globl _EXT_ADDR7
                            475 	.globl _EXT_ADDR6
                            476 	.globl _EXT_ADDR5
                            477 	.globl _EXT_ADDR4
                            478 	.globl _EXT_ADDR3
                            479 	.globl _EXT_ADDR2
                            480 	.globl _EXT_ADDR1
                            481 	.globl _EXT_ADDR0
                            482 	.globl _SRCSHORTPENDEN2
                            483 	.globl _SRCSHORTPENDEN1
                            484 	.globl _SRCSHORTPENDEN0
                            485 	.globl _SRCEXTPENDEN2
                            486 	.globl _SRCEXTPENDEN1
                            487 	.globl _SRCEXTPENDEN0
                            488 	.globl _SRCRESINDEX
                            489 	.globl _SRCRESMASK2
                            490 	.globl _SRCRESMASK1
                            491 	.globl _SRCRESMASK0
                            492 	.globl _SRC_ADDR_TABLE
                            493 	.globl _TXFIFO
                            494 	.globl _RXFIFO
                            495 	.globl _RFCORE_RAM
                            496 	.globl _CMPCTL
                            497 	.globl _OPAMPS
                            498 	.globl _OPAMPC
                            499 	.globl _STCV2
                            500 	.globl _STCV1
                            501 	.globl _STCV0
                            502 	.globl _STCS
                            503 	.globl _STCC
                            504 	.globl _T1CC4H
                            505 	.globl _T1CC4L
                            506 	.globl _T1CC3H
                            507 	.globl _T1CC3L
                            508 	.globl _XX_T1CC2H
                            509 	.globl _XX_T1CC2L
                            510 	.globl _XX_T1CC1H
                            511 	.globl _XX_T1CC1L
                            512 	.globl _XX_T1CC0H
                            513 	.globl _XX_T1CC0L
                            514 	.globl _T1CCTL4
                            515 	.globl _T1CCTL3
                            516 	.globl _XX_T1CCTL2
                            517 	.globl _XX_T1CCTL1
                            518 	.globl _XX_T1CCTL0
                            519 	.globl _CLD
                            520 	.globl _IRCTL
                            521 	.globl _CHIPINFO1
                            522 	.globl _CHIPINFO0
                            523 	.globl _FWDATA
                            524 	.globl _FADDRH
                            525 	.globl _FADDRL
                            526 	.globl _FCTL
                            527 	.globl _IVCTRL
                            528 	.globl _BATTMON
                            529 	.globl _SRCRC
                            530 	.globl _DBGDATA
                            531 	.globl _TESTREG0
                            532 	.globl _CHIPID
                            533 	.globl _CHVER
                            534 	.globl _OBSSEL5
                            535 	.globl _OBSSEL4
                            536 	.globl _OBSSEL3
                            537 	.globl _OBSSEL2
                            538 	.globl _OBSSEL1
                            539 	.globl _OBSSEL0
                            540 	.globl _I2CIO
                            541 	.globl _I2CWC
                            542 	.globl _I2CADDR
                            543 	.globl _I2CDATA
                            544 	.globl _I2CSTAT
                            545 	.globl _I2CCFG
                            546 	.globl _OPAMPMC
                            547 	.globl _MONMUX
                            548 	.globl _slip_set_input_callback
                            549 	.globl _slip_send
                            550 	.globl _slip_write
                            551 	.globl _slip_input_byte
                            552 ;--------------------------------------------------------
                            553 ; special function registers
                            554 ;--------------------------------------------------------
                            555 	.area RSEG    (ABS,DATA)
   0000                     556 	.org 0x0000
                    0080    557 _P0	=	0x0080
                    0081    558 _SP	=	0x0081
                    0082    559 _DPL0	=	0x0082
                    0083    560 _DPH0	=	0x0083
                    0084    561 _DPL1	=	0x0084
                    0085    562 _DPH1	=	0x0085
                    0087    563 _PCON	=	0x0087
                    0088    564 _TCON	=	0x0088
                    0090    565 _P1	=	0x0090
                    0092    566 _DPS	=	0x0092
                    0098    567 _S0CON	=	0x0098
                    009A    568 _IEN2	=	0x009a
                    009B    569 _S1CON	=	0x009b
                    00A0    570 _P2	=	0x00a0
                    00A8    571 _IEN0	=	0x00a8
                    00A9    572 _IP0	=	0x00a9
                    00B8    573 _IEN1	=	0x00b8
                    00B9    574 _IP1	=	0x00b9
                    00C0    575 _IRCON	=	0x00c0
                    00D0    576 _PSW	=	0x00d0
                    00E0    577 _ACC	=	0x00e0
                    00E8    578 _IRCON2	=	0x00e8
                    00F0    579 _B	=	0x00f0
                    00B4    580 _ADCCON1	=	0x00b4
                    00B5    581 _ADCCON2	=	0x00b5
                    00B6    582 _ADCCON3	=	0x00b6
                    00BA    583 _ADCL	=	0x00ba
                    00BB    584 _ADCH	=	0x00bb
                    00BC    585 _RNDL	=	0x00bc
                    00BD    586 _RNDH	=	0x00bd
                    00B1    587 _ENCDI	=	0x00b1
                    00B2    588 _ENCDO	=	0x00b2
                    00B3    589 _ENCCS	=	0x00b3
                    00D1    590 _DMAIRQ	=	0x00d1
                    00D2    591 _DMA1CFGL	=	0x00d2
                    00D3    592 _DMA1CFGH	=	0x00d3
                    00D4    593 _DMA0CFGL	=	0x00d4
                    00D5    594 _DMA0CFGH	=	0x00d5
                    00D6    595 _DMAARM	=	0x00d6
                    00D7    596 _DMAREQ	=	0x00d7
                    0089    597 _P0IFG	=	0x0089
                    008A    598 _P1IFG	=	0x008a
                    008B    599 _P2IFG	=	0x008b
                    008C    600 _PICTL	=	0x008c
                    00AB    601 _P0IEN	=	0x00ab
                    008D    602 _P1IEN	=	0x008d
                    00AC    603 _P2IEN	=	0x00ac
                    008F    604 _P0INP	=	0x008f
                    00F1    605 _PERCFG	=	0x00f1
                    00F2    606 _APCFG	=	0x00f2
                    00F3    607 _P0SEL	=	0x00f3
                    00F4    608 _P1SEL	=	0x00f4
                    00F5    609 _P2SEL	=	0x00f5
                    00F6    610 _P1INP	=	0x00f6
                    00F7    611 _P2INP	=	0x00f7
                    00FD    612 _P0DIR	=	0x00fd
                    00FE    613 _P1DIR	=	0x00fe
                    00FF    614 _P2DIR	=	0x00ff
                    00AE    615 _PMUX	=	0x00ae
                    0093    616 _MPAGE	=	0x0093
                    0093    617 __XPAGE	=	0x0093
                    00C7    618 _MEMCTR	=	0x00c7
                    009F    619 _FMAP	=	0x009f
                    009F    620 _PSBANK	=	0x009f
                    0091    621 _RFIRQF1	=	0x0091
                    00D9    622 _RFD	=	0x00d9
                    00E1    623 _RFST	=	0x00e1
                    00E9    624 _RFIRQF0	=	0x00e9
                    00BF    625 _RFERRF	=	0x00bf
                    0095    626 _ST0	=	0x0095
                    0096    627 _ST1	=	0x0096
                    0097    628 _ST2	=	0x0097
                    00AD    629 _STLOAD	=	0x00ad
                    00BE    630 _SLEEPCMD	=	0x00be
                    009D    631 _SLEEPSTA	=	0x009d
                    00C6    632 _CLKCONCMD	=	0x00c6
                    009E    633 _CLKCONSTA	=	0x009e
                    00DA    634 _T1CC0L	=	0x00da
                    00DB    635 _T1CC0H	=	0x00db
                    00DC    636 _T1CC1L	=	0x00dc
                    00DD    637 _T1CC1H	=	0x00dd
                    00DE    638 _T1CC2L	=	0x00de
                    00DF    639 _T1CC2H	=	0x00df
                    00E2    640 _T1CNTL	=	0x00e2
                    00E3    641 _T1CNTH	=	0x00e3
                    00E4    642 _T1CTL	=	0x00e4
                    00E5    643 _T1CCTL0	=	0x00e5
                    00E6    644 _T1CCTL1	=	0x00e6
                    00E7    645 _T1CCTL2	=	0x00e7
                    00AF    646 _T1STAT	=	0x00af
                    0094    647 _T2CTRL	=	0x0094
                    009C    648 _T2EVTCFG	=	0x009c
                    00A1    649 _T2IRQF	=	0x00a1
                    00A2    650 _T2M0	=	0x00a2
                    00A3    651 _T2M1	=	0x00a3
                    00A4    652 _T2MOVF0	=	0x00a4
                    00A5    653 _T2MOVF1	=	0x00a5
                    00A6    654 _T2MOVF2	=	0x00a6
                    00A7    655 _T2IRQM	=	0x00a7
                    00C3    656 _T2MSEL	=	0x00c3
                    00CA    657 _T3CNT	=	0x00ca
                    00CB    658 _T3CTL	=	0x00cb
                    00CC    659 _T3CCTL0	=	0x00cc
                    00CD    660 _T3CC0	=	0x00cd
                    00CE    661 _T3CCTL1	=	0x00ce
                    00CF    662 _T3CC1	=	0x00cf
                    00EA    663 _T4CNT	=	0x00ea
                    00EB    664 _T4CTL	=	0x00eb
                    00EC    665 _T4CCTL0	=	0x00ec
                    00ED    666 _T4CC0	=	0x00ed
                    00EE    667 _T4CCTL1	=	0x00ee
                    00EF    668 _T4CC1	=	0x00ef
                    00D8    669 _TIMIF	=	0x00d8
                    0086    670 _U0CSR	=	0x0086
                    00C1    671 _U0DBUF	=	0x00c1
                    00C2    672 _U0BAUD	=	0x00c2
                    00C4    673 _U0UCR	=	0x00c4
                    00C5    674 _U0GCR	=	0x00c5
                    00F8    675 _U1CSR	=	0x00f8
                    00F9    676 _U1DBUF	=	0x00f9
                    00FA    677 _U1BAUD	=	0x00fa
                    00FB    678 _U1UCR	=	0x00fb
                    00FC    679 _U1GCR	=	0x00fc
                    00C9    680 _WDCTL	=	0x00c9
                            681 ;--------------------------------------------------------
                            682 ; special function bits
                            683 ;--------------------------------------------------------
                            684 	.area RSEG    (ABS,DATA)
   0000                     685 	.org 0x0000
                    0087    686 _P0_7	=	0x0087
                    0086    687 _P0_6	=	0x0086
                    0085    688 _P0_5	=	0x0085
                    0084    689 _P0_4	=	0x0084
                    0083    690 _P0_3	=	0x0083
                    0082    691 _P0_2	=	0x0082
                    0081    692 _P0_1	=	0x0081
                    0080    693 _P0_0	=	0x0080
                    008F    694 _URX1IF	=	0x008f
                    008D    695 _ADCIF	=	0x008d
                    008B    696 _URX0IF	=	0x008b
                    008A    697 _IT1	=	0x008a
                    0089    698 _RFERRIF	=	0x0089
                    0088    699 _IT0	=	0x0088
                    0097    700 _P1_7	=	0x0097
                    0096    701 _P1_6	=	0x0096
                    0095    702 _P1_5	=	0x0095
                    0094    703 _P1_4	=	0x0094
                    0093    704 _P1_3	=	0x0093
                    0092    705 _P1_2	=	0x0092
                    0091    706 _P1_1	=	0x0091
                    0090    707 _P1_0	=	0x0090
                    0099    708 _ENCIF_1	=	0x0099
                    0098    709 _ENCIF_0	=	0x0098
                    00A7    710 _P2_7	=	0x00a7
                    00A6    711 _P2_6	=	0x00a6
                    00A5    712 _P2_5	=	0x00a5
                    00A4    713 _P2_4	=	0x00a4
                    00A3    714 _P2_3	=	0x00a3
                    00A2    715 _P2_2	=	0x00a2
                    00A1    716 _P2_1	=	0x00a1
                    00A0    717 _P2_0	=	0x00a0
                    00AF    718 _EA	=	0x00af
                    00AD    719 _STIE	=	0x00ad
                    00AC    720 _ENCIE	=	0x00ac
                    00AB    721 _URX1IE	=	0x00ab
                    00AA    722 _URX0IE	=	0x00aa
                    00A9    723 _ADCIE	=	0x00a9
                    00A8    724 _RFERRIE	=	0x00a8
                    00BD    725 _P0IE	=	0x00bd
                    00BC    726 _T4IE	=	0x00bc
                    00BB    727 _T3IE	=	0x00bb
                    00BA    728 _T2IE	=	0x00ba
                    00B9    729 _T1IE	=	0x00b9
                    00B8    730 _DMAIE	=	0x00b8
                    00C7    731 _STIF	=	0x00c7
                    00C5    732 _P0IF	=	0x00c5
                    00C4    733 _T4IF	=	0x00c4
                    00C3    734 _T3IF	=	0x00c3
                    00C2    735 _T2IF	=	0x00c2
                    00C1    736 _T1IF	=	0x00c1
                    00C0    737 _DMAIF	=	0x00c0
                    00D7    738 _CY	=	0x00d7
                    00D6    739 _AC	=	0x00d6
                    00D5    740 _F0	=	0x00d5
                    00D4    741 _RS1	=	0x00d4
                    00D3    742 _RS0	=	0x00d3
                    00D2    743 _OV	=	0x00d2
                    00D1    744 _F1	=	0x00d1
                    00D0    745 _P	=	0x00d0
                    00E7    746 _ACC_7	=	0x00e7
                    00E6    747 _ACC_6	=	0x00e6
                    00E5    748 _ACC_5	=	0x00e5
                    00E4    749 _ACC_4	=	0x00e4
                    00E3    750 _ACC_3	=	0x00e3
                    00E2    751 _ACC_2	=	0x00e2
                    00E1    752 _ACC_1	=	0x00e1
                    00E0    753 _ACC_0	=	0x00e0
                    00EC    754 _WDTIF	=	0x00ec
                    00EB    755 _P1IF	=	0x00eb
                    00EA    756 _UTX1IF	=	0x00ea
                    00E9    757 _UTX0IF	=	0x00e9
                    00E8    758 _P2IF	=	0x00e8
                    00F7    759 _B_7	=	0x00f7
                    00F6    760 _B_6	=	0x00f6
                    00F5    761 _B_5	=	0x00f5
                    00F4    762 _B_4	=	0x00f4
                    00F3    763 _B_3	=	0x00f3
                    00F2    764 _B_2	=	0x00f2
                    00F1    765 _B_1	=	0x00f1
                    00F0    766 _B_0	=	0x00f0
                    00DE    767 _OVFIM	=	0x00de
                    00DD    768 _T4CH1IF	=	0x00dd
                    00DC    769 _T4CH0IF	=	0x00dc
                    00DB    770 _T4OVFIF	=	0x00db
                    00DA    771 _T3CH1IF	=	0x00da
                    00D9    772 _T3CH0IF	=	0x00d9
                    00D8    773 _T3OVFIF	=	0x00d8
                    00FF    774 _MODE	=	0x00ff
                    00FE    775 _RE	=	0x00fe
                    00FD    776 _SLAVE	=	0x00fd
                    00FC    777 _FE	=	0x00fc
                    00FB    778 _ERR	=	0x00fb
                    00FA    779 _RX_BYTE	=	0x00fa
                    00F9    780 _TX_BYTE	=	0x00f9
                    00F8    781 _ACTIVE	=	0x00f8
                            782 ;--------------------------------------------------------
                            783 ; overlayable register banks
                            784 ;--------------------------------------------------------
                            785 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     786 	.ds 8
                            787 ;--------------------------------------------------------
                            788 ; internal ram data
                            789 ;--------------------------------------------------------
                            790 	.area DSEG    (DATA)
                            791 ;--------------------------------------------------------
                            792 ; overlayable items in internal ram 
                            793 ;--------------------------------------------------------
                            794 	.area OSEG    (OVR,DATA)
                            795 ;--------------------------------------------------------
                            796 ; indirectly addressable internal ram data
                            797 ;--------------------------------------------------------
                            798 	.area ISEG    (DATA)
                            799 ;--------------------------------------------------------
                            800 ; absolute internal ram data
                            801 ;--------------------------------------------------------
                            802 	.area IABS    (ABS,DATA)
                            803 	.area IABS    (ABS,DATA)
                            804 ;--------------------------------------------------------
                            805 ; bit data
                            806 ;--------------------------------------------------------
                            807 	.area BSEG    (BIT)
                            808 ;--------------------------------------------------------
                            809 ; paged external ram data
                            810 ;--------------------------------------------------------
                            811 	.area PSEG    (PAG,XDATA)
                            812 ;--------------------------------------------------------
                            813 ; external ram data
                            814 ;--------------------------------------------------------
                            815 	.area XSEG    (XDATA)
                    61A6    816 _MONMUX	=	0x61a6
                    61A6    817 _OPAMPMC	=	0x61a6
                    6230    818 _I2CCFG	=	0x6230
                    6231    819 _I2CSTAT	=	0x6231
                    6232    820 _I2CDATA	=	0x6232
                    6233    821 _I2CADDR	=	0x6233
                    6234    822 _I2CWC	=	0x6234
                    6235    823 _I2CIO	=	0x6235
                    6243    824 _OBSSEL0	=	0x6243
                    6244    825 _OBSSEL1	=	0x6244
                    6245    826 _OBSSEL2	=	0x6245
                    6246    827 _OBSSEL3	=	0x6246
                    6247    828 _OBSSEL4	=	0x6247
                    6248    829 _OBSSEL5	=	0x6248
                    6249    830 _CHVER	=	0x6249
                    624A    831 _CHIPID	=	0x624a
                    624B    832 _TESTREG0	=	0x624b
                    6260    833 _DBGDATA	=	0x6260
                    6262    834 _SRCRC	=	0x6262
                    6264    835 _BATTMON	=	0x6264
                    6265    836 _IVCTRL	=	0x6265
                    6270    837 _FCTL	=	0x6270
                    6271    838 _FADDRL	=	0x6271
                    6272    839 _FADDRH	=	0x6272
                    6273    840 _FWDATA	=	0x6273
                    6276    841 _CHIPINFO0	=	0x6276
                    6277    842 _CHIPINFO1	=	0x6277
                    6281    843 _IRCTL	=	0x6281
                    6290    844 _CLD	=	0x6290
                    62A0    845 _XX_T1CCTL0	=	0x62a0
                    62A1    846 _XX_T1CCTL1	=	0x62a1
                    62A2    847 _XX_T1CCTL2	=	0x62a2
                    62A3    848 _T1CCTL3	=	0x62a3
                    62A4    849 _T1CCTL4	=	0x62a4
                    62A6    850 _XX_T1CC0L	=	0x62a6
                    62A7    851 _XX_T1CC0H	=	0x62a7
                    62A8    852 _XX_T1CC1L	=	0x62a8
                    62A9    853 _XX_T1CC1H	=	0x62a9
                    62AA    854 _XX_T1CC2L	=	0x62aa
                    62AB    855 _XX_T1CC2H	=	0x62ab
                    62AC    856 _T1CC3L	=	0x62ac
                    62AD    857 _T1CC3H	=	0x62ad
                    62AE    858 _T1CC4L	=	0x62ae
                    62AF    859 _T1CC4H	=	0x62af
                    62B0    860 _STCC	=	0x62b0
                    62B1    861 _STCS	=	0x62b1
                    62B2    862 _STCV0	=	0x62b2
                    62B3    863 _STCV1	=	0x62b3
                    62B4    864 _STCV2	=	0x62b4
                    62C0    865 _OPAMPC	=	0x62c0
                    62C1    866 _OPAMPS	=	0x62c1
                    62D0    867 _CMPCTL	=	0x62d0
                    6000    868 _RFCORE_RAM	=	0x6000
                    6000    869 _RXFIFO	=	0x6000
                    6080    870 _TXFIFO	=	0x6080
                    6100    871 _SRC_ADDR_TABLE	=	0x6100
                    6160    872 _SRCRESMASK0	=	0x6160
                    6161    873 _SRCRESMASK1	=	0x6161
                    6162    874 _SRCRESMASK2	=	0x6162
                    6163    875 _SRCRESINDEX	=	0x6163
                    6164    876 _SRCEXTPENDEN0	=	0x6164
                    6165    877 _SRCEXTPENDEN1	=	0x6165
                    6166    878 _SRCEXTPENDEN2	=	0x6166
                    6167    879 _SRCSHORTPENDEN0	=	0x6167
                    6168    880 _SRCSHORTPENDEN1	=	0x6168
                    6169    881 _SRCSHORTPENDEN2	=	0x6169
                    616A    882 _EXT_ADDR0	=	0x616a
                    616B    883 _EXT_ADDR1	=	0x616b
                    616C    884 _EXT_ADDR2	=	0x616c
                    616D    885 _EXT_ADDR3	=	0x616d
                    616E    886 _EXT_ADDR4	=	0x616e
                    616F    887 _EXT_ADDR5	=	0x616f
                    6170    888 _EXT_ADDR6	=	0x6170
                    6171    889 _EXT_ADDR7	=	0x6171
                    6172    890 _PAN_ID0	=	0x6172
                    6173    891 _PAN_ID1	=	0x6173
                    6174    892 _SHORT_ADDR0	=	0x6174
                    6175    893 _SHORT_ADDR1	=	0x6175
                    6180    894 _FRMFILT0	=	0x6180
                    6181    895 _FRMFILT1	=	0x6181
                    6182    896 _SRCMATCH	=	0x6182
                    6183    897 _SRCSHORTEN0	=	0x6183
                    6184    898 _SRCSHORTEN1	=	0x6184
                    6185    899 _SRCSHORTEN2	=	0x6185
                    6186    900 _SRCEXTEN0	=	0x6186
                    6187    901 _SRCEXTEN1	=	0x6187
                    6188    902 _SRCEXTEN2	=	0x6188
                    6189    903 _FRMCTRL0	=	0x6189
                    618A    904 _FRMCTRL1	=	0x618a
                    618B    905 _RXENABLE	=	0x618b
                    618C    906 _RXMASKSET	=	0x618c
                    618D    907 _RXMASKCLR	=	0x618d
                    618E    908 _FREQTUNE	=	0x618e
                    618F    909 _FREQCTRL	=	0x618f
                    6190    910 _TXPOWER	=	0x6190
                    6191    911 _TXCTRL	=	0x6191
                    6192    912 _FSMSTAT0	=	0x6192
                    6193    913 _FSMSTAT1	=	0x6193
                    6194    914 _FIFOPCTRL	=	0x6194
                    6195    915 _FSMCTRL	=	0x6195
                    6196    916 _CCACTRL0	=	0x6196
                    6197    917 _CCACTRL1	=	0x6197
                    6198    918 _RSSI	=	0x6198
                    6199    919 _RSSISTAT	=	0x6199
                    619A    920 _RXFIRST	=	0x619a
                    619B    921 _RXFIFOCNT	=	0x619b
                    619C    922 _TXFIFOCNT	=	0x619c
                    619D    923 _RXFIRST_PTR	=	0x619d
                    619E    924 _RXLAST_PTR	=	0x619e
                    619F    925 _RXP1_PTR	=	0x619f
                    61A1    926 _TXFIRST_PTR	=	0x61a1
                    61A2    927 _TXLAST_PTR	=	0x61a2
                    61A3    928 _RFIRQM0	=	0x61a3
                    61A4    929 _RFIRQM1	=	0x61a4
                    61A5    930 _RFERRM	=	0x61a5
                    61A7    931 _RFRND	=	0x61a7
                    61A8    932 _MDMCTRL0	=	0x61a8
                    61A9    933 _MDMCTRL1	=	0x61a9
                    61AA    934 _FREQEST	=	0x61aa
                    61AB    935 _RXCTRL	=	0x61ab
                    61AC    936 _FSCTRL	=	0x61ac
                    61AD    937 _FSCAL0	=	0x61ad
                    61AE    938 _FSCAL1	=	0x61ae
                    61AF    939 _FSCAL2	=	0x61af
                    61B0    940 _FSCAL3	=	0x61b0
                    61B1    941 _AGCCTRL0	=	0x61b1
                    61B2    942 _AGCCTRL1	=	0x61b2
                    61B3    943 _AGCCTRL2	=	0x61b3
                    61B4    944 _AGCCTRL3	=	0x61b4
                    61B5    945 _ADCTEST0	=	0x61b5
                    61B6    946 _ADCTEST1	=	0x61b6
                    61B7    947 _ADCTEST2	=	0x61b7
                    61B8    948 _MDMTEST0	=	0x61b8
                    61B9    949 _MDMTEST1	=	0x61b9
                    61BA    950 _DACTEST0	=	0x61ba
                    61BB    951 _DACTEST1	=	0x61bb
                    61BC    952 _DACTEST2	=	0x61bc
                    61BD    953 _ATEST	=	0x61bd
                    61BE    954 _PTEST0	=	0x61be
                    61BF    955 _PTEST1	=	0x61bf
                    61FA    956 _TXFILTCFG	=	0x61fa
                    61EB    957 _RFC_OBS_CTRL0	=	0x61eb
                    61EC    958 _RFC_OBS_CTRL1	=	0x61ec
                    61ED    959 _RFC_OBS_CTRL2	=	0x61ed
                    61C0    960 _CSPPROG0	=	0x61c0
                    61C1    961 _CSPPROG1	=	0x61c1
                    61C2    962 _CSPPROG2	=	0x61c2
                    61C3    963 _CSPPROG3	=	0x61c3
                    61C4    964 _CSPPROG4	=	0x61c4
                    61C5    965 _CSPPROG5	=	0x61c5
                    61C6    966 _CSPPROG6	=	0x61c6
                    61C7    967 _CSPPROG7	=	0x61c7
                    61C8    968 _CSPPROG8	=	0x61c8
                    61C9    969 _CSPPROG9	=	0x61c9
                    61CA    970 _CSPPROG10	=	0x61ca
                    61CB    971 _CSPPROG11	=	0x61cb
                    61CC    972 _CSPPROG12	=	0x61cc
                    61CD    973 _CSPPROG13	=	0x61cd
                    61CE    974 _CSPPROG14	=	0x61ce
                    61CF    975 _CSPPROG15	=	0x61cf
                    61D0    976 _CSPPROG16	=	0x61d0
                    61D1    977 _CSPPROG17	=	0x61d1
                    61D2    978 _CSPPROG18	=	0x61d2
                    61D3    979 _CSPPROG19	=	0x61d3
                    61D4    980 _CSPPROG20	=	0x61d4
                    61D5    981 _CSPPROG21	=	0x61d5
                    61D6    982 _CSPPROG22	=	0x61d6
                    61D7    983 _CSPPROG23	=	0x61d7
                    61E0    984 _CSPCTRL	=	0x61e0
                    61E1    985 _CSPSTAT	=	0x61e1
                    61E2    986 _CSPX	=	0x61e2
                    61E3    987 _CSPY	=	0x61e3
                    61E4    988 _CSPZ	=	0x61e4
                    61E5    989 _CSPT	=	0x61e5
                    6200    990 _USBADDR	=	0x6200
                    6201    991 _USBPOW	=	0x6201
                    6202    992 _USBIIF	=	0x6202
                    6204    993 _USBOIF	=	0x6204
                    6206    994 _USBCIF	=	0x6206
                    6207    995 _USBIIE	=	0x6207
                    6209    996 _USBOIE	=	0x6209
                    620B    997 _USBCIE	=	0x620b
                    620C    998 _USBFRML	=	0x620c
                    620D    999 _USBFRMH	=	0x620d
                    620E   1000 _USBINDEX	=	0x620e
                    620F   1001 _USBCTRL	=	0x620f
                    6210   1002 _USBMAXI	=	0x6210
                    6211   1003 _USBCS0	=	0x6211
                    6211   1004 _USBCSIL	=	0x6211
                    6212   1005 _USBCSIH	=	0x6212
                    6213   1006 _USBMAXO	=	0x6213
                    6214   1007 _USBCSOL	=	0x6214
                    6215   1008 _USBCSOH	=	0x6215
                    6216   1009 _USBCNT0	=	0x6216
                    6216   1010 _USBCNTL	=	0x6216
                    6217   1011 _USBCNTH	=	0x6217
                    6220   1012 _USBF0	=	0x6220
                    6222   1013 _USBF1	=	0x6222
                    6224   1014 _USBF2	=	0x6224
                    6226   1015 _USBF3	=	0x6226
                    6228   1016 _USBF4	=	0x6228
                    622A   1017 _USBF5	=	0x622a
                    7080   1018 _X_P0	=	0x7080
                    7086   1019 _X_U0CSR	=	0x7086
                    7089   1020 _X_P0IFG	=	0x7089
                    708A   1021 _X_P1IFG	=	0x708a
                    708B   1022 _X_P2IFG	=	0x708b
                    708C   1023 _X_PICTL	=	0x708c
                    708D   1024 _X_P1IEN	=	0x708d
                    708F   1025 _X_P0INP	=	0x708f
                    7090   1026 _X_P1	=	0x7090
                    7091   1027 _X_RFIRQF1	=	0x7091
                    7093   1028 _X_MPAGE	=	0x7093
                    7093   1029 _X__XPAGE	=	0x7093
                    7094   1030 _X_T2CTRL	=	0x7094
                    7095   1031 _X_ST0	=	0x7095
                    7096   1032 _X_ST1	=	0x7096
                    7097   1033 _X_ST2	=	0x7097
                    709C   1034 _X_T2EVTCFG	=	0x709c
                    709D   1035 _X_SLEEPSTA	=	0x709d
                    709E   1036 _X_CLKCONSTA	=	0x709e
                    709F   1037 _X_FMAP	=	0x709f
                    709F   1038 _X_PSBANK	=	0x709f
                    70A0   1039 _X_P2	=	0x70a0
                    70A1   1040 _X_T2IRQF	=	0x70a1
                    70A2   1041 _X_T2M0	=	0x70a2
                    70A3   1042 _X_T2M1	=	0x70a3
                    70A4   1043 _X_T2MOVF0	=	0x70a4
                    70A5   1044 _X_T2MOVF1	=	0x70a5
                    70A6   1045 _X_T2MOVF2	=	0x70a6
                    70A7   1046 _X_T2IRQM	=	0x70a7
                    70AB   1047 _X_P0IEN	=	0x70ab
                    70AC   1048 _X_P2IEN	=	0x70ac
                    70AD   1049 _X_STLOAD	=	0x70ad
                    70AE   1050 _X_PMUX	=	0x70ae
                    70AF   1051 _X_T1STAT	=	0x70af
                    70B1   1052 _X_ENCDI	=	0x70b1
                    70B2   1053 _X_ENCDO	=	0x70b2
                    70B3   1054 _X_ENCCS	=	0x70b3
                    70B4   1055 _X_ADCCON1	=	0x70b4
                    70B5   1056 _X_ADCCON2	=	0x70b5
                    70B6   1057 _X_ADCCON3	=	0x70b6
                    70BA   1058 _X_ADCL	=	0x70ba
                    70BB   1059 _X_ADCH	=	0x70bb
                    70BC   1060 _X_RNDL	=	0x70bc
                    70BD   1061 _X_RNDH	=	0x70bd
                    70BE   1062 _X_SLEEPCMD	=	0x70be
                    70BF   1063 _X_RFERRF	=	0x70bf
                    70C1   1064 _X_U0DBUF	=	0x70c1
                    70C2   1065 _X_U0BAUD	=	0x70c2
                    70C3   1066 _X_T2MSEL	=	0x70c3
                    70C4   1067 _X_U0UCR	=	0x70c4
                    70C5   1068 _X_U0GCR	=	0x70c5
                    70C6   1069 _X_CLKCONCMD	=	0x70c6
                    70C7   1070 _X_MEMCTR	=	0x70c7
                    70C9   1071 _X_WDCTL	=	0x70c9
                    70CA   1072 _X_T3CNT	=	0x70ca
                    70CB   1073 _X_T3CTL	=	0x70cb
                    70CC   1074 _X_T3CCTL0	=	0x70cc
                    70CD   1075 _X_T3CC0	=	0x70cd
                    70CE   1076 _X_T3CCTL1	=	0x70ce
                    70CF   1077 _X_T3CC1	=	0x70cf
                    70D1   1078 _X_DMAIRQ	=	0x70d1
                    70D2   1079 _X_DMA1CFGL	=	0x70d2
                    70D3   1080 _X_DMA1CFGH	=	0x70d3
                    70D4   1081 _X_DMA0CFGL	=	0x70d4
                    70D5   1082 _X_DMA0CFGH	=	0x70d5
                    70D6   1083 _X_DMAARM	=	0x70d6
                    70D7   1084 _X_DMAREQ	=	0x70d7
                    70D8   1085 _X_TIMIF	=	0x70d8
                    70D9   1086 _X_RFD	=	0x70d9
                    70DA   1087 _X_T1CC0L	=	0x70da
                    70DB   1088 _X_T1CC0H	=	0x70db
                    70DC   1089 _X_T1CC1L	=	0x70dc
                    70DD   1090 _X_T1CC1H	=	0x70dd
                    70DE   1091 _X_T1CC2L	=	0x70de
                    70DF   1092 _X_T1CC2H	=	0x70df
                    70E1   1093 _X_RFST	=	0x70e1
                    70E2   1094 _X_T1CNTL	=	0x70e2
                    70E3   1095 _X_T1CNTH	=	0x70e3
                    70E4   1096 _X_T1CTL	=	0x70e4
                    70E5   1097 _X_T1CCTL0	=	0x70e5
                    70E6   1098 _X_T1CCTL1	=	0x70e6
                    70E7   1099 _X_T1CCTL2	=	0x70e7
                    70E9   1100 _X_RFIRQF0	=	0x70e9
                    70EA   1101 _X_T4CNT	=	0x70ea
                    70EB   1102 _X_T4CTL	=	0x70eb
                    70EC   1103 _X_T4CCTL0	=	0x70ec
                    70ED   1104 _X_T4CC0	=	0x70ed
                    70EE   1105 _X_T4CCTL1	=	0x70ee
                    70EF   1106 _X_T4CC1	=	0x70ef
                    70F1   1107 _X_PERCFG	=	0x70f1
                    70F2   1108 _X_APCFG	=	0x70f2
                    70F3   1109 _X_P0SEL	=	0x70f3
                    70F4   1110 _X_P1SEL	=	0x70f4
                    70F5   1111 _X_P2SEL	=	0x70f5
                    70F6   1112 _X_P1INP	=	0x70f6
                    70F7   1113 _X_P2INP	=	0x70f7
                    70F8   1114 _X_U1CSR	=	0x70f8
                    70F9   1115 _X_U1DBUF	=	0x70f9
                    70FA   1116 _X_U1BAUD	=	0x70fa
                    70FB   1117 _X_U1UCR	=	0x70fb
                    70FC   1118 _X_U1GCR	=	0x70fc
                    70FD   1119 _X_P0DIR	=	0x70fd
                    70FE   1120 _X_P1DIR	=	0x70fe
                    70FF   1121 _X_P2DIR	=	0x70ff
                    7800   1122 _X_INFOPAGE	=	0x7800
                    780C   1123 _X_IEEE_ADDR	=	0x780c
   0000                    1124 _slip_active::
   0000                    1125 	.ds 1
   0001                    1126 _begin:
   0001                    1127 	.ds 2
   0003                    1128 _end:
   0003                    1129 	.ds 2
   0005                    1130 _rxbuf:
   0005                    1131 	.ds 351
   0164                    1132 _pkt_end:
   0164                    1133 	.ds 2
                           1134 ;--------------------------------------------------------
                           1135 ; absolute external ram data
                           1136 ;--------------------------------------------------------
                           1137 	.area XABS    (ABS,XDATA)
                           1138 ;--------------------------------------------------------
                           1139 ; external initialized ram data
                           1140 ;--------------------------------------------------------
                           1141 	.area XISEG   (XDATA)
   0000                    1142 _slip_process::
   0000                    1143 	.ds 10
   000A                    1144 _state:
   000A                    1145 	.ds 1
   000B                    1146 _input_callback:
   000B                    1147 	.ds 3
                           1148 	.area HOME    (CODE)
                           1149 	.area GSINIT0 (CODE)
                           1150 	.area GSINIT1 (CODE)
                           1151 	.area GSINIT2 (CODE)
                           1152 	.area GSINIT3 (CODE)
                           1153 	.area GSINIT4 (CODE)
                           1154 	.area GSINIT5 (CODE)
                           1155 	.area GSINIT  (CODE)
                           1156 	.area GSFINAL (CODE)
                           1157 	.area CSEG    (CODE)
                           1158 ;--------------------------------------------------------
                           1159 ; global & static initialisations
                           1160 ;--------------------------------------------------------
                           1161 	.area HOME    (CODE)
                           1162 	.area GSINIT  (CODE)
                           1163 	.area GSFINAL (CODE)
                           1164 	.area GSINIT  (CODE)
                           1165 ;--------------------------------------------------------
                           1166 ; Home
                           1167 ;--------------------------------------------------------
                           1168 	.area HOME    (CODE)
                           1169 	.area HOME    (CODE)
                           1170 ;--------------------------------------------------------
                           1171 ; code
                           1172 ;--------------------------------------------------------
                           1173 	.area BANK1   (CODE)
                           1174 ;------------------------------------------------------------
                           1175 ;Allocation info for local variables in function 'slip_set_input_callback'
                           1176 ;------------------------------------------------------------
                           1177 ;c                         Allocated to registers 
                           1178 ;------------------------------------------------------------
                           1179 ;	../../../contiki-sensinode//core/dev/slip.c:91: slip_set_input_callback(void (*c)(void))
                           1180 ;	-----------------------------------------
                           1181 ;	 function slip_set_input_callback
                           1182 ;	-----------------------------------------
   0000                    1183 _slip_set_input_callback:
                    0007   1184 	ar7 = 0x07
                    0006   1185 	ar6 = 0x06
                    0005   1186 	ar5 = 0x05
                    0004   1187 	ar4 = 0x04
                    0003   1188 	ar3 = 0x03
                    0002   1189 	ar2 = 0x02
                    0001   1190 	ar1 = 0x01
                    0000   1191 	ar0 = 0x00
   0000 AF F0              1192 	mov	r7,b
   0002 AE 83              1193 	mov	r6,dph
   0004 E5 82              1194 	mov	a,dpl
   0006 90s00r0B           1195 	mov	dptr,#_input_callback
   0009 F0                 1196 	movx	@dptr,a
   000A A3                 1197 	inc	dptr
   000B EE                 1198 	mov	a,r6
   000C F0                 1199 	movx	@dptr,a
   000D A3                 1200 	inc	dptr
   000E EF                 1201 	mov	a,r7
   000F F0                 1202 	movx	@dptr,a
                           1203 ;	../../../contiki-sensinode//core/dev/slip.c:93: input_callback = c;
   0010 02s00r00           1204 	ljmp	__sdcc_banked_ret
                           1205 ;------------------------------------------------------------
                           1206 ;Allocation info for local variables in function 'slip_send'
                           1207 ;------------------------------------------------------------
                           1208 ;i                         Allocated to stack - sp -1
                           1209 ;ptr                       Allocated to registers r5 r6 r7 
                           1210 ;c                         Allocated to registers r4 
                           1211 ;------------------------------------------------------------
                           1212 ;	../../../contiki-sensinode//core/dev/slip.c:101: slip_send(void)
                           1213 ;	-----------------------------------------
                           1214 ;	 function slip_send
                           1215 ;	-----------------------------------------
   0013                    1216 _slip_send:
   0013 05 81              1217 	inc	sp
   0015 05 81              1218 	inc	sp
                           1219 ;	../../../contiki-sensinode//core/dev/slip.c:107: slip_arch_writeb(SLIP_END);
   0017 75 82 C0           1220 	mov	dpl,#0xC0
   001A 78r00              1221 	mov	r0,#_slip_arch_writeb
   001C 79s00              1222 	mov	r1,#(_slip_arch_writeb >> 8)
   001E 7As00              1223 	mov	r2,#(_slip_arch_writeb >> 16)
   0020 12s00r00           1224 	lcall	__sdcc_banked_call
                           1225 ;	../../../contiki-sensinode//core/dev/slip.c:109: ptr = &uip_buf[UIP_LLH_LEN];
   0023 7Dr00              1226 	mov	r5,#_uip_aligned_buf
   0025 7Es00              1227 	mov	r6,#(_uip_aligned_buf >> 8)
   0027 7F 00              1228 	mov	r7,#0x00
                           1229 ;	../../../contiki-sensinode//core/dev/slip.c:110: for(i = 0; i < uip_len; ++i) {
   0029 A8 81              1230 	mov	r0,sp
   002B 18                 1231 	dec	r0
   002C E4                 1232 	clr	a
   002D F6                 1233 	mov	@r0,a
   002E 08                 1234 	inc	r0
   002F F6                 1235 	mov	@r0,a
   0030                    1236 00108$:
   0030 C0 05              1237 	push	ar5
   0032 C0 06              1238 	push	ar6
   0034 C0 07              1239 	push	ar7
   0036 90s00r00           1240 	mov	dptr,#_uip_len
   0039 E0                 1241 	movx	a,@dptr
   003A FA                 1242 	mov	r2,a
   003B A3                 1243 	inc	dptr
   003C E0                 1244 	movx	a,@dptr
   003D FF                 1245 	mov	r7,a
   003E E5 81              1246 	mov	a,sp
   0040 24 FC              1247 	add	a,#0xfc
   0042 F8                 1248 	mov	r0,a
   0043 C3                 1249 	clr	c
   0044 E6                 1250 	mov	a,@r0
   0045 9A                 1251 	subb	a,r2
   0046 08                 1252 	inc	r0
   0047 E6                 1253 	mov	a,@r0
   0048 9F                 1254 	subb	a,r7
   0049 D0 07              1255 	pop	ar7
   004B D0 06              1256 	pop	ar6
   004D D0 05              1257 	pop	ar5
   004F 40 03              1258 	jc	00125$
   0051 02s00rDD           1259 	ljmp	00111$
   0054                    1260 00125$:
                           1261 ;	../../../contiki-sensinode//core/dev/slip.c:111: if(i == UIP_TCPIP_HLEN) {
   0054 A8 81              1262 	mov	r0,sp
   0056 18                 1263 	dec	r0
   0057 B6 3C 15           1264 	cjne	@r0,#0x3C,00102$
   005A 08                 1265 	inc	r0
   005B B6 00 11           1266 	cjne	@r0,#0x00,00102$
                           1267 ;	../../../contiki-sensinode//core/dev/slip.c:112: ptr = (uint8_t *)uip_appdata;
   005E 90s00r00           1268 	mov	dptr,#_uip_appdata
   0061 E0                 1269 	movx	a,@dptr
   0062 FA                 1270 	mov	r2,a
   0063 A3                 1271 	inc	dptr
   0064 E0                 1272 	movx	a,@dptr
   0065 FB                 1273 	mov	r3,a
   0066 A3                 1274 	inc	dptr
   0067 E0                 1275 	movx	a,@dptr
   0068 FC                 1276 	mov	r4,a
   0069 8A 05              1277 	mov	ar5,r2
   006B 8B 06              1278 	mov	ar6,r3
   006D 8C 07              1279 	mov	ar7,r4
   006F                    1280 00102$:
                           1281 ;	../../../contiki-sensinode//core/dev/slip.c:114: c = *ptr++;
   006F 8D 82              1282 	mov	dpl,r5
   0071 8E 83              1283 	mov	dph,r6
   0073 8F F0              1284 	mov	b,r7
   0075 12s00r00           1285 	lcall	__gptrget
   0078 FC                 1286 	mov	r4,a
   0079 A3                 1287 	inc	dptr
   007A AD 82              1288 	mov	r5,dpl
   007C AE 83              1289 	mov	r6,dph
                           1290 ;	../../../contiki-sensinode//core/dev/slip.c:115: if(c == SLIP_END) {
   007E BC C0 1C           1291 	cjne	r4,#0xC0,00106$
                           1292 ;	../../../contiki-sensinode//core/dev/slip.c:116: slip_arch_writeb(SLIP_ESC);
   0081 75 82 DB           1293 	mov	dpl,#0xDB
   0084 C0 07              1294 	push	ar7
   0086 C0 06              1295 	push	ar6
   0088 C0 05              1296 	push	ar5
   008A 78r00              1297 	mov	r0,#_slip_arch_writeb
   008C 79s00              1298 	mov	r1,#(_slip_arch_writeb >> 8)
   008E 7As00              1299 	mov	r2,#(_slip_arch_writeb >> 16)
   0090 12s00r00           1300 	lcall	__sdcc_banked_call
   0093 D0 05              1301 	pop	ar5
   0095 D0 06              1302 	pop	ar6
   0097 D0 07              1303 	pop	ar7
                           1304 ;	../../../contiki-sensinode//core/dev/slip.c:117: c = SLIP_ESC_END;
   0099 7C DC              1305 	mov	r4,#0xDC
   009B 80 1D              1306 	sjmp	00107$
   009D                    1307 00106$:
                           1308 ;	../../../contiki-sensinode//core/dev/slip.c:118: } else if(c == SLIP_ESC) {
   009D BC DB 1A           1309 	cjne	r4,#0xDB,00107$
                           1310 ;	../../../contiki-sensinode//core/dev/slip.c:119: slip_arch_writeb(SLIP_ESC);
   00A0 75 82 DB           1311 	mov	dpl,#0xDB
   00A3 C0 07              1312 	push	ar7
   00A5 C0 06              1313 	push	ar6
   00A7 C0 05              1314 	push	ar5
   00A9 78r00              1315 	mov	r0,#_slip_arch_writeb
   00AB 79s00              1316 	mov	r1,#(_slip_arch_writeb >> 8)
   00AD 7As00              1317 	mov	r2,#(_slip_arch_writeb >> 16)
   00AF 12s00r00           1318 	lcall	__sdcc_banked_call
   00B2 D0 05              1319 	pop	ar5
   00B4 D0 06              1320 	pop	ar6
   00B6 D0 07              1321 	pop	ar7
                           1322 ;	../../../contiki-sensinode//core/dev/slip.c:120: c = SLIP_ESC_ESC;
   00B8 7C DD              1323 	mov	r4,#0xDD
   00BA                    1324 00107$:
                           1325 ;	../../../contiki-sensinode//core/dev/slip.c:122: slip_arch_writeb(c);
   00BA 8C 82              1326 	mov	dpl,r4
   00BC C0 07              1327 	push	ar7
   00BE C0 06              1328 	push	ar6
   00C0 C0 05              1329 	push	ar5
   00C2 78r00              1330 	mov	r0,#_slip_arch_writeb
   00C4 79s00              1331 	mov	r1,#(_slip_arch_writeb >> 8)
   00C6 7As00              1332 	mov	r2,#(_slip_arch_writeb >> 16)
   00C8 12s00r00           1333 	lcall	__sdcc_banked_call
   00CB D0 05              1334 	pop	ar5
   00CD D0 06              1335 	pop	ar6
   00CF D0 07              1336 	pop	ar7
                           1337 ;	../../../contiki-sensinode//core/dev/slip.c:110: for(i = 0; i < uip_len; ++i) {
   00D1 A8 81              1338 	mov	r0,sp
   00D3 18                 1339 	dec	r0
   00D4 06                 1340 	inc	@r0
   00D5 B6 00 02           1341 	cjne	@r0,#0x00,00132$
   00D8 08                 1342 	inc	r0
   00D9 06                 1343 	inc	@r0
   00DA                    1344 00132$:
   00DA 02s00r30           1345 	ljmp	00108$
   00DD                    1346 00111$:
                           1347 ;	../../../contiki-sensinode//core/dev/slip.c:124: slip_arch_writeb(SLIP_END);
   00DD 75 82 C0           1348 	mov	dpl,#0xC0
   00E0 78r00              1349 	mov	r0,#_slip_arch_writeb
   00E2 79s00              1350 	mov	r1,#(_slip_arch_writeb >> 8)
   00E4 7As00              1351 	mov	r2,#(_slip_arch_writeb >> 16)
   00E6 12s00r00           1352 	lcall	__sdcc_banked_call
                           1353 ;	../../../contiki-sensinode//core/dev/slip.c:126: return UIP_FW_OK;
   00E9 75 82 00           1354 	mov	dpl,#0x00
   00EC 15 81              1355 	dec	sp
   00EE 15 81              1356 	dec	sp
   00F0 02s00r00           1357 	ljmp	__sdcc_banked_ret
                           1358 ;------------------------------------------------------------
                           1359 ;Allocation info for local variables in function 'slip_write'
                           1360 ;------------------------------------------------------------
                           1361 ;len                       Allocated to stack - sp -4
                           1362 ;_ptr                      Allocated to registers r5 r6 r7 
                           1363 ;ptr                       Allocated to registers r5 r6 r7 
                           1364 ;i                         Allocated to registers r3 r4 
                           1365 ;c                         Allocated to registers r2 
                           1366 ;------------------------------------------------------------
                           1367 ;	../../../contiki-sensinode//core/dev/slip.c:131: slip_write(const void *_ptr, int len)
                           1368 ;	-----------------------------------------
                           1369 ;	 function slip_write
                           1370 ;	-----------------------------------------
   00F3                    1371 _slip_write:
   00F3 AD 82              1372 	mov	r5,dpl
   00F5 AE 83              1373 	mov	r6,dph
   00F7 AF F0              1374 	mov	r7,b
                           1375 ;	../../../contiki-sensinode//core/dev/slip.c:133: const uint8_t *ptr = _ptr;
                           1376 ;	../../../contiki-sensinode//core/dev/slip.c:137: slip_arch_writeb(SLIP_END);
   00F9 75 82 C0           1377 	mov	dpl,#0xC0
   00FC C0 07              1378 	push	ar7
   00FE C0 06              1379 	push	ar6
   0100 C0 05              1380 	push	ar5
   0102 78r00              1381 	mov	r0,#_slip_arch_writeb
   0104 79s00              1382 	mov	r1,#(_slip_arch_writeb >> 8)
   0106 7As00              1383 	mov	r2,#(_slip_arch_writeb >> 16)
   0108 12s00r00           1384 	lcall	__sdcc_banked_call
   010B D0 05              1385 	pop	ar5
   010D D0 06              1386 	pop	ar6
   010F D0 07              1387 	pop	ar7
                           1388 ;	../../../contiki-sensinode//core/dev/slip.c:139: for(i = 0; i < len; ++i) {
   0111 7B 00              1389 	mov	r3,#0x00
   0113 7C 00              1390 	mov	r4,#0x00
   0115                    1391 00106$:
   0115 C0 05              1392 	push	ar5
   0117 C0 06              1393 	push	ar6
   0119 C0 07              1394 	push	ar7
   011B E5 81              1395 	mov	a,sp
   011D 24 F9              1396 	add	a,#0xf9
   011F F8                 1397 	mov	r0,a
   0120 86 02              1398 	mov	ar2,@r0
   0122 08                 1399 	inc	r0
   0123 86 07              1400 	mov	ar7,@r0
   0125 C3                 1401 	clr	c
   0126 EB                 1402 	mov	a,r3
   0127 9A                 1403 	subb	a,r2
   0128 EC                 1404 	mov	a,r4
   0129 9F                 1405 	subb	a,r7
   012A D0 07              1406 	pop	ar7
   012C D0 06              1407 	pop	ar6
   012E D0 05              1408 	pop	ar5
   0130 40 03              1409 	jc	00121$
   0132 02s01rB7           1410 	ljmp	00109$
   0135                    1411 00121$:
                           1412 ;	../../../contiki-sensinode//core/dev/slip.c:140: c = *ptr++;
   0135 8D 82              1413 	mov	dpl,r5
   0137 8E 83              1414 	mov	dph,r6
   0139 8F F0              1415 	mov	b,r7
   013B 12s00r00           1416 	lcall	__gptrget
   013E FA                 1417 	mov	r2,a
   013F A3                 1418 	inc	dptr
   0140 AD 82              1419 	mov	r5,dpl
   0142 AE 83              1420 	mov	r6,dph
                           1421 ;	../../../contiki-sensinode//core/dev/slip.c:141: if(c == SLIP_END) {
   0144 BA C0 24           1422 	cjne	r2,#0xC0,00104$
                           1423 ;	../../../contiki-sensinode//core/dev/slip.c:142: slip_arch_writeb(SLIP_ESC);
   0147 75 82 DB           1424 	mov	dpl,#0xDB
   014A C0 07              1425 	push	ar7
   014C C0 06              1426 	push	ar6
   014E C0 05              1427 	push	ar5
   0150 C0 04              1428 	push	ar4
   0152 C0 03              1429 	push	ar3
   0154 78r00              1430 	mov	r0,#_slip_arch_writeb
   0156 79s00              1431 	mov	r1,#(_slip_arch_writeb >> 8)
   0158 7As00              1432 	mov	r2,#(_slip_arch_writeb >> 16)
   015A 12s00r00           1433 	lcall	__sdcc_banked_call
   015D D0 03              1434 	pop	ar3
   015F D0 04              1435 	pop	ar4
   0161 D0 05              1436 	pop	ar5
   0163 D0 06              1437 	pop	ar6
   0165 D0 07              1438 	pop	ar7
                           1439 ;	../../../contiki-sensinode//core/dev/slip.c:143: c = SLIP_ESC_END;
   0167 7A DC              1440 	mov	r2,#0xDC
   0169 80 25              1441 	sjmp	00105$
   016B                    1442 00104$:
                           1443 ;	../../../contiki-sensinode//core/dev/slip.c:144: } else if(c == SLIP_ESC) {
   016B BA DB 22           1444 	cjne	r2,#0xDB,00105$
                           1445 ;	../../../contiki-sensinode//core/dev/slip.c:145: slip_arch_writeb(SLIP_ESC);
   016E 75 82 DB           1446 	mov	dpl,#0xDB
   0171 C0 07              1447 	push	ar7
   0173 C0 06              1448 	push	ar6
   0175 C0 05              1449 	push	ar5
   0177 C0 04              1450 	push	ar4
   0179 C0 03              1451 	push	ar3
   017B 78r00              1452 	mov	r0,#_slip_arch_writeb
   017D 79s00              1453 	mov	r1,#(_slip_arch_writeb >> 8)
   017F 7As00              1454 	mov	r2,#(_slip_arch_writeb >> 16)
   0181 12s00r00           1455 	lcall	__sdcc_banked_call
   0184 D0 03              1456 	pop	ar3
   0186 D0 04              1457 	pop	ar4
   0188 D0 05              1458 	pop	ar5
   018A D0 06              1459 	pop	ar6
   018C D0 07              1460 	pop	ar7
                           1461 ;	../../../contiki-sensinode//core/dev/slip.c:146: c = SLIP_ESC_ESC;
   018E 7A DD              1462 	mov	r2,#0xDD
   0190                    1463 00105$:
                           1464 ;	../../../contiki-sensinode//core/dev/slip.c:148: slip_arch_writeb(c);
   0190 8A 82              1465 	mov	dpl,r2
   0192 C0 07              1466 	push	ar7
   0194 C0 06              1467 	push	ar6
   0196 C0 05              1468 	push	ar5
   0198 C0 04              1469 	push	ar4
   019A C0 03              1470 	push	ar3
   019C 78r00              1471 	mov	r0,#_slip_arch_writeb
   019E 79s00              1472 	mov	r1,#(_slip_arch_writeb >> 8)
   01A0 7As00              1473 	mov	r2,#(_slip_arch_writeb >> 16)
   01A2 12s00r00           1474 	lcall	__sdcc_banked_call
   01A5 D0 03              1475 	pop	ar3
   01A7 D0 04              1476 	pop	ar4
   01A9 D0 05              1477 	pop	ar5
   01AB D0 06              1478 	pop	ar6
   01AD D0 07              1479 	pop	ar7
                           1480 ;	../../../contiki-sensinode//core/dev/slip.c:139: for(i = 0; i < len; ++i) {
   01AF 0B                 1481 	inc	r3
   01B0 BB 00 01           1482 	cjne	r3,#0x00,00126$
   01B3 0C                 1483 	inc	r4
   01B4                    1484 00126$:
   01B4 02s01r15           1485 	ljmp	00106$
   01B7                    1486 00109$:
                           1487 ;	../../../contiki-sensinode//core/dev/slip.c:150: slip_arch_writeb(SLIP_END);
   01B7 75 82 C0           1488 	mov	dpl,#0xC0
   01BA 78r00              1489 	mov	r0,#_slip_arch_writeb
   01BC 79s00              1490 	mov	r1,#(_slip_arch_writeb >> 8)
   01BE 7As00              1491 	mov	r2,#(_slip_arch_writeb >> 16)
   01C0 12s00r00           1492 	lcall	__sdcc_banked_call
                           1493 ;	../../../contiki-sensinode//core/dev/slip.c:152: return len;
   01C3 E5 81              1494 	mov	a,sp
   01C5 24 FC              1495 	add	a,#0xfc
   01C7 F8                 1496 	mov	r0,a
   01C8 86 07              1497 	mov	ar7,@r0
   01CA 8F 82              1498 	mov	dpl,r7
   01CC 02s00r00           1499 	ljmp	__sdcc_banked_ret
                           1500 ;------------------------------------------------------------
                           1501 ;Allocation info for local variables in function 'rxbuf_init'
                           1502 ;------------------------------------------------------------
                           1503 ;	../../../contiki-sensinode//core/dev/slip.c:156: rxbuf_init(void)
                           1504 ;	-----------------------------------------
                           1505 ;	 function rxbuf_init
                           1506 ;	-----------------------------------------
   01CF                    1507 _rxbuf_init:
                           1508 ;	../../../contiki-sensinode//core/dev/slip.c:158: begin = end = pkt_end = 0;
   01CF 90s01r64           1509 	mov	dptr,#_pkt_end
   01D2 E4                 1510 	clr	a
   01D3 F0                 1511 	movx	@dptr,a
   01D4 A3                 1512 	inc	dptr
   01D5 F0                 1513 	movx	@dptr,a
   01D6 90s00r03           1514 	mov	dptr,#_end
   01D9 F0                 1515 	movx	@dptr,a
   01DA A3                 1516 	inc	dptr
   01DB E4                 1517 	clr	a
   01DC F0                 1518 	movx	@dptr,a
   01DD 90s00r01           1519 	mov	dptr,#_begin
   01E0 F0                 1520 	movx	@dptr,a
   01E1 A3                 1521 	inc	dptr
   01E2 E4                 1522 	clr	a
   01E3 F0                 1523 	movx	@dptr,a
                           1524 ;	../../../contiki-sensinode//core/dev/slip.c:159: state = STATE_OK;
   01E4 90s00r0A           1525 	mov	dptr,#_state
   01E7 74 01              1526 	mov	a,#0x01
   01E9 F0                 1527 	movx	@dptr,a
   01EA 02s00r00           1528 	ljmp	__sdcc_banked_ret
                           1529 ;------------------------------------------------------------
                           1530 ;Allocation info for local variables in function 'slip_poll_handler'
                           1531 ;------------------------------------------------------------
                           1532 ;blen                      Allocated to stack - sp -11
                           1533 ;outbuf                    Allocated to stack - sp -6
                           1534 ;i                         Allocated to registers r3 r4 
                           1535 ;len                       Allocated to stack - sp -3
                           1536 ;i                         Allocated to registers 
                           1537 ;sloc0                     Allocated to stack - sp +3
                           1538 ;sloc1                     Allocated to stack - sp -1
                           1539 ;sloc2                     Allocated to stack - sp +7
                           1540 ;------------------------------------------------------------
                           1541 ;	../../../contiki-sensinode//core/dev/slip.c:164: slip_poll_handler(uint8_t *outbuf, uint16_t blen)
                           1542 ;	-----------------------------------------
                           1543 ;	 function slip_poll_handler
                           1544 ;	-----------------------------------------
   01ED                    1545 _slip_poll_handler:
   01ED C0 82              1546 	push	dpl
   01EF C0 83              1547 	push	dph
   01F1 C0 F0              1548 	push	b
   01F3 E5 81              1549 	mov	a,sp
   01F5 24 04              1550 	add	a,#0x04
   01F7 F5 81              1551 	mov	sp,a
                           1552 ;	../../../contiki-sensinode//core/dev/slip.c:167: if(rxbuf[begin] == 'C') {
   01F9 90s00r01           1553 	mov	dptr,#_begin
   01FC E0                 1554 	movx	a,@dptr
   01FD FB                 1555 	mov	r3,a
   01FE A3                 1556 	inc	dptr
   01FF E0                 1557 	movx	a,@dptr
   0200 FC                 1558 	mov	r4,a
   0201 EB                 1559 	mov	a,r3
   0202 24r05              1560 	add	a,#_rxbuf
   0204 FF                 1561 	mov	r7,a
   0205 EC                 1562 	mov	a,r4
   0206 34s00              1563 	addc	a,#(_rxbuf >> 8)
   0208 FE                 1564 	mov	r6,a
   0209 8F 82              1565 	mov	dpl,r7
   020B 8E 83              1566 	mov	dph,r6
   020D E0                 1567 	movx	a,@dptr
   020E FA                 1568 	mov	r2,a
   020F BA 43 02           1569 	cjne	r2,#0x43,00167$
   0212 80 03              1570 	sjmp	00168$
   0214                    1571 00167$:
   0214 02s02rEF           1572 	ljmp	00106$
   0217                    1573 00168$:
                           1574 ;	../../../contiki-sensinode//core/dev/slip.c:169: if(begin < end && (end - begin) >= 6
   0217 90s00r03           1575 	mov	dptr,#_end
   021A E0                 1576 	movx	a,@dptr
   021B FD                 1577 	mov	r5,a
   021C A3                 1578 	inc	dptr
   021D E0                 1579 	movx	a,@dptr
   021E FA                 1580 	mov	r2,a
   021F C3                 1581 	clr	c
   0220 EB                 1582 	mov	a,r3
   0221 9D                 1583 	subb	a,r5
   0222 EC                 1584 	mov	a,r4
   0223 9A                 1585 	subb	a,r2
   0224 40 03              1586 	jc	00169$
   0226 02s02rEF           1587 	ljmp	00106$
   0229                    1588 00169$:
   0229 ED                 1589 	mov	a,r5
   022A C3                 1590 	clr	c
   022B 9B                 1591 	subb	a,r3
   022C FB                 1592 	mov	r3,a
   022D EA                 1593 	mov	a,r2
   022E 9C                 1594 	subb	a,r4
   022F FC                 1595 	mov	r4,a
   0230 C3                 1596 	clr	c
   0231 EB                 1597 	mov	a,r3
   0232 94 06              1598 	subb	a,#0x06
   0234 EC                 1599 	mov	a,r4
   0235 94 00              1600 	subb	a,#0x00
   0237 50 03              1601 	jnc	00170$
   0239 02s02rEF           1602 	ljmp	00106$
   023C                    1603 00170$:
                           1604 ;	../../../contiki-sensinode//core/dev/slip.c:170: && memcmp(&rxbuf[begin], "CLIENT", 6) == 0) {
   023C 8F 03              1605 	mov	ar3,r7
   023E 8E 04              1606 	mov	ar4,r6
   0240 7A 00              1607 	mov	r2,#0x00
   0242 74 06              1608 	mov	a,#0x06
   0244 C0 E0              1609 	push	acc
   0246 E4                 1610 	clr	a
   0247 C0 E0              1611 	push	acc
   0249 74r00              1612 	mov	a,#__str_0
   024B C0 E0              1613 	push	acc
   024D 74s00              1614 	mov	a,#(__str_0 >> 8)
   024F C0 E0              1615 	push	acc
   0251 74 80              1616 	mov	a,#0x80
   0253 C0 E0              1617 	push	acc
   0255 8B 82              1618 	mov	dpl,r3
   0257 8C 83              1619 	mov	dph,r4
   0259 8A F0              1620 	mov	b,r2
   025B 78r00              1621 	mov	r0,#_memcmp
   025D 79s00              1622 	mov	r1,#(_memcmp >> 8)
   025F 7As00              1623 	mov	r2,#(_memcmp >> 16)
   0261 12s00r00           1624 	lcall	__sdcc_banked_call
   0264 AB 82              1625 	mov	r3,dpl
   0266 AC 83              1626 	mov	r4,dph
   0268 E5 81              1627 	mov	a,sp
   026A 24 FB              1628 	add	a,#0xfb
   026C F5 81              1629 	mov	sp,a
   026E EB                 1630 	mov	a,r3
   026F 4C                 1631 	orl	a,r4
   0270 60 03              1632 	jz	00171$
   0272 02s02rEF           1633 	ljmp	00106$
   0275                    1634 00171$:
                           1635 ;	../../../contiki-sensinode//core/dev/slip.c:171: state = STATE_TWOPACKETS;	/* Interrupts do nothing. */
   0275 90s00r0A           1636 	mov	dptr,#_state
   0278 E4                 1637 	clr	a
   0279 F0                 1638 	movx	@dptr,a
                           1639 ;	../../../contiki-sensinode//core/dev/slip.c:172: memset(&rxbuf[begin], 0x0, 6);
   027A 90s00r01           1640 	mov	dptr,#_begin
   027D E0                 1641 	movx	a,@dptr
   027E FB                 1642 	mov	r3,a
   027F A3                 1643 	inc	dptr
   0280 E0                 1644 	movx	a,@dptr
   0281 FC                 1645 	mov	r4,a
   0282 EB                 1646 	mov	a,r3
   0283 24r05              1647 	add	a,#_rxbuf
   0285 FB                 1648 	mov	r3,a
   0286 EC                 1649 	mov	a,r4
   0287 34s00              1650 	addc	a,#(_rxbuf >> 8)
   0289 FC                 1651 	mov	r4,a
   028A 7A 00              1652 	mov	r2,#0x00
   028C 74 06              1653 	mov	a,#0x06
   028E C0 E0              1654 	push	acc
   0290 E4                 1655 	clr	a
   0291 C0 E0              1656 	push	acc
   0293 E4                 1657 	clr	a
   0294 C0 E0              1658 	push	acc
   0296 8B 82              1659 	mov	dpl,r3
   0298 8C 83              1660 	mov	dph,r4
   029A 8A F0              1661 	mov	b,r2
   029C 78r00              1662 	mov	r0,#_memset
   029E 79s00              1663 	mov	r1,#(_memset >> 8)
   02A0 7As00              1664 	mov	r2,#(_memset >> 16)
   02A2 12s00r00           1665 	lcall	__sdcc_banked_call
   02A5 15 81              1666 	dec	sp
   02A7 15 81              1667 	dec	sp
   02A9 15 81              1668 	dec	sp
                           1669 ;	../../../contiki-sensinode//core/dev/slip.c:174: rxbuf_init();
   02AB 78rCF              1670 	mov	r0,#_rxbuf_init
   02AD 79s01              1671 	mov	r1,#(_rxbuf_init >> 8)
   02AF 7As00              1672 	mov	r2,#(_rxbuf_init >> 16)
   02B1 12s00r00           1673 	lcall	__sdcc_banked_call
                           1674 ;	../../../contiki-sensinode//core/dev/slip.c:176: for(i = 0; i < 13; i++) {
   02B4 7B 00              1675 	mov	r3,#0x00
   02B6 7C 00              1676 	mov	r4,#0x00
   02B8                    1677 00120$:
   02B8 C3                 1678 	clr	c
   02B9 EB                 1679 	mov	a,r3
   02BA 94 0D              1680 	subb	a,#0x0D
   02BC EC                 1681 	mov	a,r4
   02BD 64 80              1682 	xrl	a,#0x80
   02BF 94 80              1683 	subb	a,#0x80
   02C1 50 26              1684 	jnc	00123$
                           1685 ;	../../../contiki-sensinode//core/dev/slip.c:177: slip_arch_writeb("CLIENTSERVER\300"[i]);
   02C3 EB                 1686 	mov	a,r3
   02C4 24r07              1687 	add	a,#__str_1
   02C6 F5 82              1688 	mov	dpl,a
   02C8 EC                 1689 	mov	a,r4
   02C9 34s00              1690 	addc	a,#(__str_1 >> 8)
   02CB F5 83              1691 	mov	dph,a
   02CD E4                 1692 	clr	a
   02CE 93                 1693 	movc	a,@a+dptr
   02CF F5 82              1694 	mov	dpl,a
   02D1 C0 04              1695 	push	ar4
   02D3 C0 03              1696 	push	ar3
   02D5 78r00              1697 	mov	r0,#_slip_arch_writeb
   02D7 79s00              1698 	mov	r1,#(_slip_arch_writeb >> 8)
   02D9 7As00              1699 	mov	r2,#(_slip_arch_writeb >> 16)
   02DB 12s00r00           1700 	lcall	__sdcc_banked_call
   02DE D0 03              1701 	pop	ar3
   02E0 D0 04              1702 	pop	ar4
                           1703 ;	../../../contiki-sensinode//core/dev/slip.c:176: for(i = 0; i < 13; i++) {
   02E2 0B                 1704 	inc	r3
   02E3 BB 00 D2           1705 	cjne	r3,#0x00,00120$
   02E6 0C                 1706 	inc	r4
   02E7 80 CF              1707 	sjmp	00120$
   02E9                    1708 00123$:
                           1709 ;	../../../contiki-sensinode//core/dev/slip.c:179: return 0;
   02E9 90 00 00           1710 	mov	dptr,#0x0000
   02EC 02s04r87           1711 	ljmp	00132$
   02EF                    1712 00106$:
                           1713 ;	../../../contiki-sensinode//core/dev/slip.c:213: if(begin != pkt_end) {
   02EF 90s00r01           1714 	mov	dptr,#_begin
   02F2 E0                 1715 	movx	a,@dptr
   02F3 FB                 1716 	mov	r3,a
   02F4 A3                 1717 	inc	dptr
   02F5 E0                 1718 	movx	a,@dptr
   02F6 FC                 1719 	mov	r4,a
   02F7 90s01r64           1720 	mov	dptr,#_pkt_end
   02FA A8 81              1721 	mov	r0,sp
   02FC 18                 1722 	dec	r0
   02FD E0                 1723 	movx	a,@dptr
   02FE F6                 1724 	mov	@r0,a
   02FF A3                 1725 	inc	dptr
   0300 E0                 1726 	movx	a,@dptr
   0301 08                 1727 	inc	r0
   0302 F6                 1728 	mov	@r0,a
   0303 A8 81              1729 	mov	r0,sp
   0305 18                 1730 	dec	r0
   0306 E6                 1731 	mov	a,@r0
   0307 B5 03 08           1732 	cjne	a,ar3,00174$
   030A 08                 1733 	inc	r0
   030B E6                 1734 	mov	a,@r0
   030C B5 04 03           1735 	cjne	a,ar4,00174$
   030F 02s04r84           1736 	ljmp	00119$
   0312                    1737 00174$:
                           1738 ;	../../../contiki-sensinode//core/dev/slip.c:216: if(begin < pkt_end) {
   0312 A8 81              1739 	mov	r0,sp
   0314 18                 1740 	dec	r0
   0315 C3                 1741 	clr	c
   0316 EB                 1742 	mov	a,r3
   0317 96                 1743 	subb	a,@r0
   0318 EC                 1744 	mov	a,r4
   0319 08                 1745 	inc	r0
   031A 96                 1746 	subb	a,@r0
   031B 50 75              1747 	jnc	00114$
                           1748 ;	../../../contiki-sensinode//core/dev/slip.c:217: len = pkt_end - begin;
   031D A8 81              1749 	mov	r0,sp
   031F 18                 1750 	dec	r0
   0320 E6                 1751 	mov	a,@r0
   0321 C3                 1752 	clr	c
   0322 9B                 1753 	subb	a,r3
   0323 FF                 1754 	mov	r7,a
   0324 08                 1755 	inc	r0
   0325 E6                 1756 	mov	a,@r0
   0326 9C                 1757 	subb	a,r4
   0327 FE                 1758 	mov	r6,a
   0328 E5 81              1759 	mov	a,sp
   032A 24 FD              1760 	add	a,#0xfd
   032C F8                 1761 	mov	r0,a
   032D A6 07              1762 	mov	@r0,ar7
   032F 08                 1763 	inc	r0
   0330 A6 06              1764 	mov	@r0,ar6
                           1765 ;	../../../contiki-sensinode//core/dev/slip.c:218: if(len > blen) {
   0332 E5 81              1766 	mov	a,sp
   0334 24 FD              1767 	add	a,#0xfd
   0336 F8                 1768 	mov	r0,a
   0337 E5 81              1769 	mov	a,sp
   0339 24 F5              1770 	add	a,#0xf5
   033B F9                 1771 	mov	r1,a
   033C C3                 1772 	clr	c
   033D E7                 1773 	mov	a,@r1
   033E 96                 1774 	subb	a,@r0
   033F 09                 1775 	inc	r1
   0340 E7                 1776 	mov	a,@r1
   0341 08                 1777 	inc	r0
   0342 96                 1778 	subb	a,@r0
   0343 50 0C              1779 	jnc	00108$
                           1780 ;	../../../contiki-sensinode//core/dev/slip.c:219: len = 0;
   0345 E5 81              1781 	mov	a,sp
   0347 24 FD              1782 	add	a,#0xfd
   0349 F8                 1783 	mov	r0,a
   034A E4                 1784 	clr	a
   034B F6                 1785 	mov	@r0,a
   034C 08                 1786 	inc	r0
   034D F6                 1787 	mov	@r0,a
   034E 02s04r3C           1788 	ljmp	00115$
   0351                    1789 00108$:
                           1790 ;	../../../contiki-sensinode//core/dev/slip.c:221: memcpy(outbuf, &rxbuf[begin], len);
   0351 EB                 1791 	mov	a,r3
   0352 24r05              1792 	add	a,#_rxbuf
   0354 FD                 1793 	mov	r5,a
   0355 EC                 1794 	mov	a,r4
   0356 34s00              1795 	addc	a,#(_rxbuf >> 8)
   0358 FC                 1796 	mov	r4,a
   0359 7B 00              1797 	mov	r3,#0x00
   035B E5 81              1798 	mov	a,sp
   035D 24 FA              1799 	add	a,#0xfa
   035F F8                 1800 	mov	r0,a
   0360 86 02              1801 	mov	ar2,@r0
   0362 08                 1802 	inc	r0
   0363 86 06              1803 	mov	ar6,@r0
   0365 08                 1804 	inc	r0
   0366 86 07              1805 	mov	ar7,@r0
   0368 E5 81              1806 	mov	a,sp
   036A 24 FD              1807 	add	a,#0xfd
   036C F8                 1808 	mov	r0,a
   036D E6                 1809 	mov	a,@r0
   036E C0 E0              1810 	push	acc
   0370 08                 1811 	inc	r0
   0371 E6                 1812 	mov	a,@r0
   0372 C0 E0              1813 	push	acc
   0374 C0 05              1814 	push	ar5
   0376 C0 04              1815 	push	ar4
   0378 C0 03              1816 	push	ar3
   037A 8A 82              1817 	mov	dpl,r2
   037C 8E 83              1818 	mov	dph,r6
   037E 8F F0              1819 	mov	b,r7
   0380 78r00              1820 	mov	r0,#_memcpy
   0382 79s00              1821 	mov	r1,#(_memcpy >> 8)
   0384 7As00              1822 	mov	r2,#(_memcpy >> 16)
   0386 12s00r00           1823 	lcall	__sdcc_banked_call
   0389 E5 81              1824 	mov	a,sp
   038B 24 FB              1825 	add	a,#0xfb
   038D F5 81              1826 	mov	sp,a
   038F 02s04r3C           1827 	ljmp	00115$
   0392                    1828 00114$:
                           1829 ;	../../../contiki-sensinode//core/dev/slip.c:224: len = (RX_BUFSIZE - begin) + (pkt_end - 0);
   0392 74 5F              1830 	mov	a,#0x5F
   0394 C3                 1831 	clr	c
   0395 9B                 1832 	subb	a,r3
   0396 FE                 1833 	mov	r6,a
   0397 74 01              1834 	mov	a,#0x01
   0399 9C                 1835 	subb	a,r4
   039A FF                 1836 	mov	r7,a
   039B A8 81              1837 	mov	r0,sp
   039D 18                 1838 	dec	r0
   039E E6                 1839 	mov	a,@r0
   039F 2E                 1840 	add	a,r6
   03A0 FE                 1841 	mov	r6,a
   03A1 08                 1842 	inc	r0
   03A2 E6                 1843 	mov	a,@r0
   03A3 3F                 1844 	addc	a,r7
   03A4 FF                 1845 	mov	r7,a
   03A5 E5 81              1846 	mov	a,sp
   03A7 24 FD              1847 	add	a,#0xfd
   03A9 F8                 1848 	mov	r0,a
   03AA A6 06              1849 	mov	@r0,ar6
   03AC 08                 1850 	inc	r0
   03AD A6 07              1851 	mov	@r0,ar7
                           1852 ;	../../../contiki-sensinode//core/dev/slip.c:225: if(len > blen) {
   03AF E5 81              1853 	mov	a,sp
   03B1 24 FD              1854 	add	a,#0xfd
   03B3 F8                 1855 	mov	r0,a
   03B4 E5 81              1856 	mov	a,sp
   03B6 24 F5              1857 	add	a,#0xf5
   03B8 F9                 1858 	mov	r1,a
   03B9 C3                 1859 	clr	c
   03BA E7                 1860 	mov	a,@r1
   03BB 96                 1861 	subb	a,@r0
   03BC 09                 1862 	inc	r1
   03BD E7                 1863 	mov	a,@r1
   03BE 08                 1864 	inc	r0
   03BF 96                 1865 	subb	a,@r0
   03C0 50 0B              1866 	jnc	00111$
                           1867 ;	../../../contiki-sensinode//core/dev/slip.c:226: len = 0;
   03C2 E5 81              1868 	mov	a,sp
   03C4 24 FD              1869 	add	a,#0xfd
   03C6 F8                 1870 	mov	r0,a
   03C7 E4                 1871 	clr	a
   03C8 F6                 1872 	mov	@r0,a
   03C9 08                 1873 	inc	r0
   03CA F6                 1874 	mov	@r0,a
   03CB 80 6F              1875 	sjmp	00115$
   03CD                    1876 00111$:
                           1877 ;	../../../contiki-sensinode//core/dev/slip.c:229: for(i = begin; i < RX_BUFSIZE; i++) {
   03CD 8B 06              1878 	mov	ar6,r3
   03CF 8C 07              1879 	mov	ar7,r4
   03D1 E5 81              1880 	mov	a,sp
   03D3 24 FA              1881 	add	a,#0xfa
   03D5 F8                 1882 	mov	r0,a
   03D6 86 03              1883 	mov	ar3,@r0
   03D8 08                 1884 	inc	r0
   03D9 86 04              1885 	mov	ar4,@r0
   03DB 08                 1886 	inc	r0
   03DC 86 05              1887 	mov	ar5,@r0
   03DE                    1888 00124$:
   03DE C3                 1889 	clr	c
   03DF EE                 1890 	mov	a,r6
   03E0 94 5F              1891 	subb	a,#0x5F
   03E2 EF                 1892 	mov	a,r7
   03E3 94 01              1893 	subb	a,#0x01
   03E5 50 21              1894 	jnc	00127$
                           1895 ;	../../../contiki-sensinode//core/dev/slip.c:230: *outbuf++ = rxbuf[i];
   03E7 EE                 1896 	mov	a,r6
   03E8 24r05              1897 	add	a,#_rxbuf
   03EA F5 82              1898 	mov	dpl,a
   03EC EF                 1899 	mov	a,r7
   03ED 34s00              1900 	addc	a,#(_rxbuf >> 8)
   03EF F5 83              1901 	mov	dph,a
   03F1 E0                 1902 	movx	a,@dptr
   03F2 FA                 1903 	mov	r2,a
   03F3 8B 82              1904 	mov	dpl,r3
   03F5 8C 83              1905 	mov	dph,r4
   03F7 8D F0              1906 	mov	b,r5
   03F9 12s00r00           1907 	lcall	__gptrput
   03FC A3                 1908 	inc	dptr
   03FD AB 82              1909 	mov	r3,dpl
   03FF AC 83              1910 	mov	r4,dph
                           1911 ;	../../../contiki-sensinode//core/dev/slip.c:229: for(i = begin; i < RX_BUFSIZE; i++) {
   0401 0E                 1912 	inc	r6
   0402 BE 00 D9           1913 	cjne	r6,#0x00,00124$
   0405 0F                 1914 	inc	r7
   0406 80 D6              1915 	sjmp	00124$
   0408                    1916 00127$:
                           1917 ;	../../../contiki-sensinode//core/dev/slip.c:232: for(i = 0; i < pkt_end; i++) {
   0408 8B 07              1918 	mov	ar7,r3
   040A 8C 06              1919 	mov	ar6,r4
   040C 7B 00              1920 	mov	r3,#0x00
   040E 7C 00              1921 	mov	r4,#0x00
   0410                    1922 00128$:
   0410 A8 81              1923 	mov	r0,sp
   0412 18                 1924 	dec	r0
   0413 C3                 1925 	clr	c
   0414 EB                 1926 	mov	a,r3
   0415 96                 1927 	subb	a,@r0
   0416 EC                 1928 	mov	a,r4
   0417 08                 1929 	inc	r0
   0418 96                 1930 	subb	a,@r0
   0419 50 21              1931 	jnc	00115$
                           1932 ;	../../../contiki-sensinode//core/dev/slip.c:233: *outbuf++ = rxbuf[i];
   041B EB                 1933 	mov	a,r3
   041C 24r05              1934 	add	a,#_rxbuf
   041E F5 82              1935 	mov	dpl,a
   0420 EC                 1936 	mov	a,r4
   0421 34s00              1937 	addc	a,#(_rxbuf >> 8)
   0423 F5 83              1938 	mov	dph,a
   0425 E0                 1939 	movx	a,@dptr
   0426 FA                 1940 	mov	r2,a
   0427 8F 82              1941 	mov	dpl,r7
   0429 8E 83              1942 	mov	dph,r6
   042B 8D F0              1943 	mov	b,r5
   042D 12s00r00           1944 	lcall	__gptrput
   0430 A3                 1945 	inc	dptr
   0431 AF 82              1946 	mov	r7,dpl
   0433 AE 83              1947 	mov	r6,dph
                           1948 ;	../../../contiki-sensinode//core/dev/slip.c:232: for(i = 0; i < pkt_end; i++) {
   0435 0B                 1949 	inc	r3
   0436 BB 00 D7           1950 	cjne	r3,#0x00,00128$
   0439 0C                 1951 	inc	r4
   043A 80 D4              1952 	sjmp	00128$
   043C                    1953 00115$:
                           1954 ;	../../../contiki-sensinode//core/dev/slip.c:239: begin = pkt_end;
   043C 90s01r64           1955 	mov	dptr,#_pkt_end
   043F E0                 1956 	movx	a,@dptr
   0440 FE                 1957 	mov	r6,a
   0441 A3                 1958 	inc	dptr
   0442 E0                 1959 	movx	a,@dptr
   0443 FF                 1960 	mov	r7,a
   0444 90s00r01           1961 	mov	dptr,#_begin
   0447 EE                 1962 	mov	a,r6
   0448 F0                 1963 	movx	@dptr,a
   0449 A3                 1964 	inc	dptr
   044A EF                 1965 	mov	a,r7
   044B F0                 1966 	movx	@dptr,a
                           1967 ;	../../../contiki-sensinode//core/dev/slip.c:240: if(state == STATE_TWOPACKETS) {
   044C 90s00r0A           1968 	mov	dptr,#_state
   044F E0                 1969 	movx	a,@dptr
   0450 FF                 1970 	mov	r7,a
   0451 70 25              1971 	jnz	00117$
                           1972 ;	../../../contiki-sensinode//core/dev/slip.c:241: pkt_end = end;
   0453 90s00r03           1973 	mov	dptr,#_end
   0456 E0                 1974 	movx	a,@dptr
   0457 FE                 1975 	mov	r6,a
   0458 A3                 1976 	inc	dptr
   0459 E0                 1977 	movx	a,@dptr
   045A FF                 1978 	mov	r7,a
   045B 90s01r64           1979 	mov	dptr,#_pkt_end
   045E EE                 1980 	mov	a,r6
   045F F0                 1981 	movx	@dptr,a
   0460 A3                 1982 	inc	dptr
   0461 EF                 1983 	mov	a,r7
   0462 F0                 1984 	movx	@dptr,a
                           1985 ;	../../../contiki-sensinode//core/dev/slip.c:242: state = STATE_OK;		/* Assume no bytes where lost! */
   0463 90s00r0A           1986 	mov	dptr,#_state
   0466 74 01              1987 	mov	a,#0x01
   0468 F0                 1988 	movx	@dptr,a
                           1989 ;	../../../contiki-sensinode//core/dev/slip.c:245: process_poll(&slip_process);
   0469 90s00r00           1990 	mov	dptr,#_slip_process
   046C 75 F0 00           1991 	mov	b,#0x00
   046F 78r00              1992 	mov	r0,#_process_poll
   0471 79s00              1993 	mov	r1,#(_process_poll >> 8)
   0473 7As00              1994 	mov	r2,#(_process_poll >> 16)
   0475 12s00r00           1995 	lcall	__sdcc_banked_call
   0478                    1996 00117$:
                           1997 ;	../../../contiki-sensinode//core/dev/slip.c:247: return len;
   0478 E5 81              1998 	mov	a,sp
   047A 24 FD              1999 	add	a,#0xfd
   047C F8                 2000 	mov	r0,a
   047D 86 82              2001 	mov	dpl,@r0
   047F 08                 2002 	inc	r0
   0480 86 83              2003 	mov	dph,@r0
   0482 80 03              2004 	sjmp	00132$
   0484                    2005 00119$:
                           2006 ;	../../../contiki-sensinode//core/dev/slip.c:250: return 0;
   0484 90 00 00           2007 	mov	dptr,#0x0000
   0487                    2008 00132$:
   0487 E5 81              2009 	mov	a,sp
   0489 24 F9              2010 	add	a,#0xF9
   048B F5 81              2011 	mov	sp,a
   048D 02s00r00           2012 	ljmp	__sdcc_banked_ret
                           2013 ;------------------------------------------------------------
                           2014 ;Allocation info for local variables in function 'process_thread_slip_process'
                           2015 ;------------------------------------------------------------
                           2016 ;ev                        Allocated to stack - sp -3
                           2017 ;data                      Allocated to stack - sp -6
                           2018 ;process_pt                Allocated to registers r5 r6 r7 
                           2019 ;PT_YIELD_FLAG             Allocated to registers r4 
                           2020 ;------------------------------------------------------------
                           2021 ;	../../../contiki-sensinode//core/dev/slip.c:253: PROCESS_THREAD(slip_process, ev, data)
                           2022 ;	-----------------------------------------
                           2023 ;	 function process_thread_slip_process
                           2024 ;	-----------------------------------------
   0490                    2025 _process_thread_slip_process:
                           2026 ;	../../../contiki-sensinode//core/dev/slip.c:255: PROCESS_BEGIN();
   0490 AD 82              2027 	mov	r5,dpl
   0492 AE 83              2028 	mov	r6,dph
   0494 AF F0              2029 	mov	r7,b
   0496 7C 01              2030 	mov	r4,#0x01
   0498 12s00r00           2031 	lcall	__gptrget
   049B FA                 2032 	mov	r2,a
   049C A3                 2033 	inc	dptr
   049D 12s00r00           2034 	lcall	__gptrget
   04A0 FB                 2035 	mov	r3,a
   04A1 BA 00 05           2036 	cjne	r2,#0x00,00131$
   04A4 BB 00 02           2037 	cjne	r3,#0x00,00131$
   04A7 80 0B              2038 	sjmp	00101$
   04A9                    2039 00131$:
   04A9 BA 04 05           2040 	cjne	r2,#0x04,00132$
   04AC BB 01 02           2041 	cjne	r3,#0x01,00132$
   04AF 80 2B              2042 	sjmp	00102$
   04B1                    2043 00132$:
   04B1 02s05r76           2044 	ljmp	00116$
   04B4                    2045 00101$:
                           2046 ;	../../../contiki-sensinode//core/dev/slip.c:257: rxbuf_init();
   04B4 C0 07              2047 	push	ar7
   04B6 C0 06              2048 	push	ar6
   04B8 C0 05              2049 	push	ar5
   04BA 78rCF              2050 	mov	r0,#_rxbuf_init
   04BC 79s01              2051 	mov	r1,#(_rxbuf_init >> 8)
   04BE 7As00              2052 	mov	r2,#(_rxbuf_init >> 16)
   04C0 12s00r00           2053 	lcall	__sdcc_banked_call
   04C3 D0 05              2054 	pop	ar5
   04C5 D0 06              2055 	pop	ar6
   04C7 D0 07              2056 	pop	ar7
                           2057 ;	../../../contiki-sensinode//core/dev/slip.c:259: while(1) {
   04C9                    2058 00114$:
                           2059 ;	../../../contiki-sensinode//core/dev/slip.c:260: PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_POLL);
   04C9 7C 00              2060 	mov	r4,#0x00
   04CB 8D 82              2061 	mov	dpl,r5
   04CD 8E 83              2062 	mov	dph,r6
   04CF 8F F0              2063 	mov	b,r7
   04D1 74 04              2064 	mov	a,#0x04
   04D3 12s00r00           2065 	lcall	__gptrput
   04D6 A3                 2066 	inc	dptr
   04D7 74 01              2067 	mov	a,#0x01
   04D9 12s00r00           2068 	lcall	__gptrput
   04DC                    2069 00102$:
   04DC EC                 2070 	mov	a,r4
   04DD 60 0A              2071 	jz	00103$
   04DF E5 81              2072 	mov	a,sp
   04E1 24 FD              2073 	add	a,#0xfd
   04E3 F8                 2074 	mov	r0,a
   04E4 B6 82 02           2075 	cjne	@r0,#0x82,00134$
   04E7 80 06              2076 	sjmp	00107$
   04E9                    2077 00134$:
   04E9                    2078 00103$:
   04E9 75 82 01           2079 	mov	dpl,#0x01
   04EC 02s05r88           2080 	ljmp	00117$
   04EF                    2081 00107$:
                           2082 ;	../../../contiki-sensinode//core/dev/slip.c:262: slip_active = 1;
   04EF 90s00r00           2083 	mov	dptr,#_slip_active
   04F2 74 01              2084 	mov	a,#0x01
   04F4 F0                 2085 	movx	@dptr,a
                           2086 ;	../../../contiki-sensinode//core/dev/slip.c:265: uip_len = slip_poll_handler(&uip_buf[UIP_LLH_LEN],
   04F5 C0 07              2087 	push	ar7
   04F7 C0 06              2088 	push	ar6
   04F9 C0 05              2089 	push	ar5
   04FB 74 4F              2090 	mov	a,#0x4F
   04FD C0 E0              2091 	push	acc
   04FF 74 01              2092 	mov	a,#0x01
   0501 C0 E0              2093 	push	acc
   0503 90s00r00           2094 	mov	dptr,#_uip_aligned_buf
   0506 75 F0 00           2095 	mov	b,#0x00
   0509 78rED              2096 	mov	r0,#_slip_poll_handler
   050B 79s01              2097 	mov	r1,#(_slip_poll_handler >> 8)
   050D 7As00              2098 	mov	r2,#(_slip_poll_handler >> 16)
   050F 12s00r00           2099 	lcall	__sdcc_banked_call
   0512 AB 82              2100 	mov	r3,dpl
   0514 AC 83              2101 	mov	r4,dph
   0516 15 81              2102 	dec	sp
   0518 15 81              2103 	dec	sp
   051A D0 05              2104 	pop	ar5
   051C D0 06              2105 	pop	ar6
   051E D0 07              2106 	pop	ar7
   0520 90s00r00           2107 	mov	dptr,#_uip_len
   0523 EB                 2108 	mov	a,r3
   0524 F0                 2109 	movx	@dptr,a
   0525 A3                 2110 	inc	dptr
   0526 EC                 2111 	mov	a,r4
   0527 F0                 2112 	movx	@dptr,a
                           2113 ;	../../../contiki-sensinode//core/dev/slip.c:302: if(uip_len > 0) {
   0528 EB                 2114 	mov	a,r3
   0529 4C                 2115 	orl	a,r4
   052A 60 9D              2116 	jz	00114$
                           2117 ;	../../../contiki-sensinode//core/dev/slip.c:303: if(input_callback) {
   052C 90s00r0B           2118 	mov	dptr,#_input_callback
   052F E0                 2119 	movx	a,@dptr
   0530 FA                 2120 	mov	r2,a
   0531 A3                 2121 	inc	dptr
   0532 E0                 2122 	movx	a,@dptr
   0533 FB                 2123 	mov	r3,a
   0534 A3                 2124 	inc	dptr
   0535 E0                 2125 	movx	a,@dptr
   0536 FC                 2126 	mov	r4,a
   0537 EA                 2127 	mov	a,r2
   0538 4B                 2128 	orl	a,r3
   0539 60 23              2129 	jz	00110$
                           2130 ;	../../../contiki-sensinode//core/dev/slip.c:304: input_callback();
   053B C0 07              2131 	push	ar7
   053D C0 06              2132 	push	ar6
   053F C0 05              2133 	push	ar5
   0541 90s00r0B           2134 	mov	dptr,#_input_callback
   0544 E0                 2135 	movx	a,@dptr
   0545 C0 E0              2136 	push	acc
   0547 A3                 2137 	inc	dptr
   0548 E0                 2138 	movx	a,@dptr
   0549 C0 E0              2139 	push	acc
   054B A3                 2140 	inc	dptr
   054C E0                 2141 	movx	a,@dptr
   054D C0 E0              2142 	push	acc
   054F D0 02              2143 	pop	ar2
   0551 D0 01              2144 	pop	ar1
   0553 D0 00              2145 	pop	ar0
   0555 12s00r00           2146 	lcall	__sdcc_banked_call
   0558 D0 05              2147 	pop	ar5
   055A D0 06              2148 	pop	ar6
   055C D0 07              2149 	pop	ar7
   055E                    2150 00110$:
                           2151 ;	../../../contiki-sensinode//core/dev/slip.c:309: tcpip_input();
   055E C0 07              2152 	push	ar7
   0560 C0 06              2153 	push	ar6
   0562 C0 05              2154 	push	ar5
   0564 78r00              2155 	mov	r0,#_tcpip_input
   0566 79s00              2156 	mov	r1,#(_tcpip_input >> 8)
   0568 7As00              2157 	mov	r2,#(_tcpip_input >> 16)
   056A 12s00r00           2158 	lcall	__sdcc_banked_call
   056D D0 05              2159 	pop	ar5
   056F D0 06              2160 	pop	ar6
   0571 D0 07              2161 	pop	ar7
   0573 02s04rC9           2162 	ljmp	00114$
                           2163 ;	../../../contiki-sensinode//core/dev/slip.c:315: PROCESS_END();
   0576                    2164 00116$:
   0576 8D 82              2165 	mov	dpl,r5
   0578 8E 83              2166 	mov	dph,r6
   057A 8F F0              2167 	mov	b,r7
   057C E4                 2168 	clr	a
   057D 12s00r00           2169 	lcall	__gptrput
   0580 A3                 2170 	inc	dptr
   0581 E4                 2171 	clr	a
   0582 12s00r00           2172 	lcall	__gptrput
   0585 75 82 03           2173 	mov	dpl,#0x03
   0588                    2174 00117$:
   0588 02s00r00           2175 	ljmp	__sdcc_banked_ret
                           2176 ;------------------------------------------------------------
                           2177 ;Allocation info for local variables in function 'slip_input_byte'
                           2178 ;------------------------------------------------------------
                           2179 ;c                         Allocated to registers r7 
                           2180 ;next                      Allocated to registers r3 r4 
                           2181 ;sloc0                     Allocated to stack - sp -3
                           2182 ;sloc1                     Allocated to stack - sp -1
                           2183 ;------------------------------------------------------------
                           2184 ;	../../../contiki-sensinode//core/dev/slip.c:319: slip_input_byte(unsigned char c)
                           2185 ;	-----------------------------------------
                           2186 ;	 function slip_input_byte
                           2187 ;	-----------------------------------------
   058B                    2188 _slip_input_byte:
   058B E5 81              2189 	mov	a,sp
   058D 24 04              2190 	add	a,#0x04
   058F F5 81              2191 	mov	sp,a
   0591 AF 82              2192 	mov	r7,dpl
                           2193 ;	../../../contiki-sensinode//core/dev/slip.c:321: switch(state) {
   0593 90s00r0A           2194 	mov	dptr,#_state
   0596 E0                 2195 	movx	a,@dptr
   0597 FE                 2196 	mov  r6,a
   0598 24 FC              2197 	add	a,#0xff - 0x03
   059A 50 03              2198 	jnc	00157$
   059C 02s06r6D           2199 	ljmp	00123$
   059F                    2200 00157$:
   059F EE                 2201 	mov	a,r6
   05A0 2E                 2202 	add	a,r6
   05A1 2E                 2203 	add	a,r6
   05A2 90s05rA6           2204 	mov	dptr,#00158$
   05A5 73                 2205 	jmp	@a+dptr
   05A6                    2206 00158$:
   05A6 02s05rBE           2207 	ljmp	00104$
   05A9 02s05rF7           2208 	ljmp	00112$
   05AC 02s05rC4           2209 	ljmp	00105$
                           2210 ;	../../../contiki-sensinode//core/dev/slip.c:322: case STATE_RUBBISH:
                           2211 ;	../../../contiki-sensinode//core/dev/slip.c:323: if(c == SLIP_END) {
   05AF BF C0 06           2212 	cjne	r7,#0xC0,00103$
                           2213 ;	../../../contiki-sensinode//core/dev/slip.c:324: state = STATE_OK;
   05B2 90s00r0A           2214 	mov	dptr,#_state
   05B5 74 01              2215 	mov	a,#0x01
   05B7 F0                 2216 	movx	@dptr,a
   05B8                    2217 00103$:
                           2218 ;	../../../contiki-sensinode//core/dev/slip.c:326: return 0;
   05B8 90 00 00           2219 	mov	dptr,#0x0000
   05BB 02s07r0C           2220 	ljmp	00131$
                           2221 ;	../../../contiki-sensinode//core/dev/slip.c:328: case STATE_TWOPACKETS:       /* Two packets are already buffered! */
   05BE                    2222 00104$:
                           2223 ;	../../../contiki-sensinode//core/dev/slip.c:329: return 0;
   05BE 90 00 00           2224 	mov	dptr,#0x0000
   05C1 02s07r0C           2225 	ljmp	00131$
                           2226 ;	../../../contiki-sensinode//core/dev/slip.c:331: case STATE_ESC:
   05C4                    2227 00105$:
                           2228 ;	../../../contiki-sensinode//core/dev/slip.c:332: if(c == SLIP_ESC_END) {
   05C4 BF DC 04           2229 	cjne	r7,#0xDC,00110$
                           2230 ;	../../../contiki-sensinode//core/dev/slip.c:333: c = SLIP_END;
   05C7 7F C0              2231 	mov	r7,#0xC0
   05C9 80 23              2232 	sjmp	00111$
   05CB                    2233 00110$:
                           2234 ;	../../../contiki-sensinode//core/dev/slip.c:334: } else if(c == SLIP_ESC_ESC) {
   05CB BF DD 04           2235 	cjne	r7,#0xDD,00107$
                           2236 ;	../../../contiki-sensinode//core/dev/slip.c:335: c = SLIP_ESC;
   05CE 7F DB              2237 	mov	r7,#0xDB
   05D0 80 1C              2238 	sjmp	00111$
   05D2                    2239 00107$:
                           2240 ;	../../../contiki-sensinode//core/dev/slip.c:337: state = STATE_RUBBISH;
   05D2 90s00r0A           2241 	mov	dptr,#_state
   05D5 74 03              2242 	mov	a,#0x03
   05D7 F0                 2243 	movx	@dptr,a
                           2244 ;	../../../contiki-sensinode//core/dev/slip.c:339: end = pkt_end;		/* remove rubbish */
   05D8 90s01r64           2245 	mov	dptr,#_pkt_end
   05DB E0                 2246 	movx	a,@dptr
   05DC FD                 2247 	mov	r5,a
   05DD A3                 2248 	inc	dptr
   05DE E0                 2249 	movx	a,@dptr
   05DF FE                 2250 	mov	r6,a
   05E0 90s00r03           2251 	mov	dptr,#_end
   05E3 ED                 2252 	mov	a,r5
   05E4 F0                 2253 	movx	@dptr,a
   05E5 A3                 2254 	inc	dptr
   05E6 EE                 2255 	mov	a,r6
   05E7 F0                 2256 	movx	@dptr,a
                           2257 ;	../../../contiki-sensinode//core/dev/slip.c:340: return 0;
   05E8 90 00 00           2258 	mov	dptr,#0x0000
   05EB 02s07r0C           2259 	ljmp	00131$
   05EE                    2260 00111$:
                           2261 ;	../../../contiki-sensinode//core/dev/slip.c:342: state = STATE_OK;
   05EE 90s00r0A           2262 	mov	dptr,#_state
   05F1 74 01              2263 	mov	a,#0x01
   05F3 F0                 2264 	movx	@dptr,a
                           2265 ;	../../../contiki-sensinode//core/dev/slip.c:343: break;
   05F4 02s06r6D           2266 	ljmp	00123$
                           2267 ;	../../../contiki-sensinode//core/dev/slip.c:345: case STATE_OK:
   05F7                    2268 00112$:
                           2269 ;	../../../contiki-sensinode//core/dev/slip.c:346: if(c == SLIP_ESC) {
   05F7 BF DB 0C           2270 	cjne	r7,#0xDB,00121$
                           2271 ;	../../../contiki-sensinode//core/dev/slip.c:347: state = STATE_ESC;
   05FA 90s00r0A           2272 	mov	dptr,#_state
   05FD 74 02              2273 	mov	a,#0x02
   05FF F0                 2274 	movx	@dptr,a
                           2275 ;	../../../contiki-sensinode//core/dev/slip.c:348: return 0;
   0600 90 00 00           2276 	mov	dptr,#0x0000
   0603 02s07r0C           2277 	ljmp	00131$
   0606                    2278 00121$:
                           2279 ;	../../../contiki-sensinode//core/dev/slip.c:349: } else if(c == SLIP_END) {
   0606 BF C0 64           2280 	cjne	r7,#0xC0,00123$
                           2281 ;	../../../contiki-sensinode//core/dev/slip.c:355: if(end != pkt_end) {	/* Non zero length. */
   0609 90s00r03           2282 	mov	dptr,#_end
   060C E0                 2283 	movx	a,@dptr
   060D FD                 2284 	mov	r5,a
   060E A3                 2285 	inc	dptr
   060F E0                 2286 	movx	a,@dptr
   0610 FE                 2287 	mov	r6,a
   0611 90s01r64           2288 	mov	dptr,#_pkt_end
   0614 E0                 2289 	movx	a,@dptr
   0615 FB                 2290 	mov	r3,a
   0616 A3                 2291 	inc	dptr
   0617 E0                 2292 	movx	a,@dptr
   0618 FC                 2293 	mov	r4,a
   0619 ED                 2294 	mov	a,r5
   061A B5 03 06           2295 	cjne	a,ar3,00169$
   061D EE                 2296 	mov	a,r6
   061E B5 04 02           2297 	cjne	a,ar4,00169$
   0621 80 44              2298 	sjmp	00117$
   0623                    2299 00169$:
                           2300 ;	../../../contiki-sensinode//core/dev/slip.c:356: if(begin == pkt_end) {	/* None buffered. */
   0623 C0 05              2301 	push	ar5
   0625 C0 06              2302 	push	ar6
   0627 90s00r01           2303 	mov	dptr,#_begin
   062A E0                 2304 	movx	a,@dptr
   062B FA                 2305 	mov	r2,a
   062C A3                 2306 	inc	dptr
   062D E0                 2307 	movx	a,@dptr
   062E FE                 2308 	mov	r6,a
   062F EA                 2309 	mov	a,r2
   0630 B5 03 06           2310 	cjne	a,ar3,00170$
   0633 EE                 2311 	mov	a,r6
   0634 B5 04 02           2312 	cjne	a,ar4,00170$
   0637 80 06              2313 	sjmp	00171$
   0639                    2314 00170$:
   0639 D0 06              2315 	pop	ar6
   063B D0 05              2316 	pop	ar5
   063D 80 0E              2317 	sjmp	00114$
   063F                    2318 00171$:
   063F D0 06              2319 	pop	ar6
   0641 D0 05              2320 	pop	ar5
                           2321 ;	../../../contiki-sensinode//core/dev/slip.c:357: pkt_end = end;
   0643 90s01r64           2322 	mov	dptr,#_pkt_end
   0646 ED                 2323 	mov	a,r5
   0647 F0                 2324 	movx	@dptr,a
   0648 A3                 2325 	inc	dptr
   0649 EE                 2326 	mov	a,r6
   064A F0                 2327 	movx	@dptr,a
   064B 80 05              2328 	sjmp	00115$
   064D                    2329 00114$:
                           2330 ;	../../../contiki-sensinode//core/dev/slip.c:359: state = STATE_TWOPACKETS;
   064D 90s00r0A           2331 	mov	dptr,#_state
   0650 E4                 2332 	clr	a
   0651 F0                 2333 	movx	@dptr,a
   0652                    2334 00115$:
                           2335 ;	../../../contiki-sensinode//core/dev/slip.c:362: process_poll(&slip_process);
   0652 90s00r00           2336 	mov	dptr,#_slip_process
   0655 75 F0 00           2337 	mov	b,#0x00
   0658 78r00              2338 	mov	r0,#_process_poll
   065A 79s00              2339 	mov	r1,#(_process_poll >> 8)
   065C 7As00              2340 	mov	r2,#(_process_poll >> 16)
   065E 12s00r00           2341 	lcall	__sdcc_banked_call
                           2342 ;	../../../contiki-sensinode//core/dev/slip.c:363: return 1;
   0661 90 00 01           2343 	mov	dptr,#0x0001
   0664 02s07r0C           2344 	ljmp	00131$
   0667                    2345 00117$:
                           2346 ;	../../../contiki-sensinode//core/dev/slip.c:365: return 0;
   0667 90 00 00           2347 	mov	dptr,#0x0000
   066A 02s07r0C           2348 	ljmp	00131$
                           2349 ;	../../../contiki-sensinode//core/dev/slip.c:368: }
   066D                    2350 00123$:
                           2351 ;	../../../contiki-sensinode//core/dev/slip.c:373: next = end + 1;
   066D 90s00r03           2352 	mov	dptr,#_end
   0670 E0                 2353 	movx	a,@dptr
   0671 FD                 2354 	mov	r5,a
   0672 A3                 2355 	inc	dptr
   0673 E0                 2356 	movx	a,@dptr
   0674 FE                 2357 	mov	r6,a
   0675 74 01              2358 	mov	a,#0x01
   0677 2D                 2359 	add	a,r5
   0678 FB                 2360 	mov	r3,a
   0679 E4                 2361 	clr	a
   067A 3E                 2362 	addc	a,r6
   067B FC                 2363 	mov	r4,a
                           2364 ;	../../../contiki-sensinode//core/dev/slip.c:374: if(next == RX_BUFSIZE) {
   067C BB 5F 07           2365 	cjne	r3,#0x5F,00125$
   067F BC 01 04           2366 	cjne	r4,#0x01,00125$
                           2367 ;	../../../contiki-sensinode//core/dev/slip.c:375: next = 0;
   0682 7B 00              2368 	mov	r3,#0x00
   0684 7C 00              2369 	mov	r4,#0x00
   0686                    2370 00125$:
                           2371 ;	../../../contiki-sensinode//core/dev/slip.c:377: if(next == begin) {		/* rxbuf is full */
   0686 90s00r01           2372 	mov	dptr,#_begin
   0689 E5 81              2373 	mov	a,sp
   068B 24 FD              2374 	add	a,#0xfd
   068D F8                 2375 	mov	r0,a
   068E E0                 2376 	movx	a,@dptr
   068F F6                 2377 	mov	@r0,a
   0690 A3                 2378 	inc	dptr
   0691 E0                 2379 	movx	a,@dptr
   0692 08                 2380 	inc	r0
   0693 F6                 2381 	mov	@r0,a
   0694 E5 81              2382 	mov	a,sp
   0696 24 FD              2383 	add	a,#0xfd
   0698 F8                 2384 	mov	r0,a
   0699 E6                 2385 	mov	a,@r0
   069A B5 03 07           2386 	cjne	a,ar3,00174$
   069D 08                 2387 	inc	r0
   069E E6                 2388 	mov	a,@r0
   069F B5 04 02           2389 	cjne	a,ar4,00174$
   06A2 80 02              2390 	sjmp	00175$
   06A4                    2391 00174$:
   06A4 80 23              2392 	sjmp	00127$
   06A6                    2393 00175$:
                           2394 ;	../../../contiki-sensinode//core/dev/slip.c:378: state = STATE_RUBBISH;
   06A6 90s00r0A           2395 	mov	dptr,#_state
   06A9 74 03              2396 	mov	a,#0x03
   06AB F0                 2397 	movx	@dptr,a
                           2398 ;	../../../contiki-sensinode//core/dev/slip.c:380: end = pkt_end;		/* remove rubbish */
   06AC 90s01r64           2399 	mov	dptr,#_pkt_end
   06AF A8 81              2400 	mov	r0,sp
   06B1 18                 2401 	dec	r0
   06B2 E0                 2402 	movx	a,@dptr
   06B3 F6                 2403 	mov	@r0,a
   06B4 A3                 2404 	inc	dptr
   06B5 E0                 2405 	movx	a,@dptr
   06B6 08                 2406 	inc	r0
   06B7 F6                 2407 	mov	@r0,a
   06B8 A8 81              2408 	mov	r0,sp
   06BA 18                 2409 	dec	r0
   06BB 90s00r03           2410 	mov	dptr,#_end
   06BE E6                 2411 	mov	a,@r0
   06BF F0                 2412 	movx	@dptr,a
   06C0 08                 2413 	inc	r0
   06C1 A3                 2414 	inc	dptr
   06C2 E6                 2415 	mov	a,@r0
   06C3 F0                 2416 	movx	@dptr,a
                           2417 ;	../../../contiki-sensinode//core/dev/slip.c:381: return 0;
   06C4 90 00 00           2418 	mov	dptr,#0x0000
   06C7 80 43              2419 	sjmp	00131$
   06C9                    2420 00127$:
                           2421 ;	../../../contiki-sensinode//core/dev/slip.c:383: rxbuf[end] = c;
   06C9 ED                 2422 	mov	a,r5
   06CA 24r05              2423 	add	a,#_rxbuf
   06CC F5 82              2424 	mov	dpl,a
   06CE EE                 2425 	mov	a,r6
   06CF 34s00              2426 	addc	a,#(_rxbuf >> 8)
   06D1 F5 83              2427 	mov	dph,a
   06D3 EF                 2428 	mov	a,r7
   06D4 F0                 2429 	movx	@dptr,a
                           2430 ;	../../../contiki-sensinode//core/dev/slip.c:384: end = next;
   06D5 90s00r03           2431 	mov	dptr,#_end
   06D8 EB                 2432 	mov	a,r3
   06D9 F0                 2433 	movx	@dptr,a
   06DA A3                 2434 	inc	dptr
   06DB EC                 2435 	mov	a,r4
   06DC F0                 2436 	movx	@dptr,a
                           2437 ;	../../../contiki-sensinode//core/dev/slip.c:388: if(c == 'T' && rxbuf[begin] == 'C') {
   06DD BF 54 29           2438 	cjne	r7,#0x54,00129$
   06E0 E5 81              2439 	mov	a,sp
   06E2 24 FD              2440 	add	a,#0xfd
   06E4 F8                 2441 	mov	r0,a
   06E5 E6                 2442 	mov	a,@r0
   06E6 24r05              2443 	add	a,#_rxbuf
   06E8 F5 82              2444 	mov	dpl,a
   06EA 08                 2445 	inc	r0
   06EB E6                 2446 	mov	a,@r0
   06EC 34s00              2447 	addc	a,#(_rxbuf >> 8)
   06EE F5 83              2448 	mov	dph,a
   06F0 E0                 2449 	movx	a,@dptr
   06F1 FF                 2450 	mov	r7,a
   06F2 BF 43 14           2451 	cjne	r7,#0x43,00129$
                           2452 ;	../../../contiki-sensinode//core/dev/slip.c:389: process_poll(&slip_process);
   06F5 90s00r00           2453 	mov	dptr,#_slip_process
   06F8 75 F0 00           2454 	mov	b,#0x00
   06FB 78r00              2455 	mov	r0,#_process_poll
   06FD 79s00              2456 	mov	r1,#(_process_poll >> 8)
   06FF 7As00              2457 	mov	r2,#(_process_poll >> 16)
   0701 12s00r00           2458 	lcall	__sdcc_banked_call
                           2459 ;	../../../contiki-sensinode//core/dev/slip.c:390: return 1;
   0704 90 00 01           2460 	mov	dptr,#0x0001
   0707 80 03              2461 	sjmp	00131$
   0709                    2462 00129$:
                           2463 ;	../../../contiki-sensinode//core/dev/slip.c:393: return 0;
   0709 90 00 00           2464 	mov	dptr,#0x0000
   070C                    2465 00131$:
   070C E5 81              2466 	mov	a,sp
   070E 24 FC              2467 	add	a,#0xFC
   0710 F5 81              2468 	mov	sp,a
   0712 02s00r00           2469 	ljmp	__sdcc_banked_ret
                           2470 	.area CSEG    (CODE)
                           2471 	.area CONST   (CODE)
   0000                    2472 __str_0:
   0000 43 4C 49 45 4E 54  2473 	.ascii "CLIENT"
   0006 00                 2474 	.db 0x00
   0007                    2475 __str_1:
   0007 43 4C 49 45 4E 54  2476 	.ascii "CLIENTSERVER"
        53 45 52 56 45 52
   0013 C0                 2477 	.db 0xC0
   0014 00                 2478 	.db 0x00
                           2479 	.area XINIT   (CODE)
   0000                    2480 __xinit__slip_process:
                           2481 ; generic printIvalPtr
   0000 00 00 00           2482 	.byte #0x00,#0x00,#0x00
   0003r90s04s00           2483 	.byte _process_thread_slip_process,(_process_thread_slip_process >> 8),(_process_thread_slip_process >> 16)
   0006 00 00              2484 	.byte #0x00,#0x00	; 0
   0008 00                 2485 	.db #0x00	; 0
   0009 00                 2486 	.db #0x00	; 0
   000A                    2487 __xinit__state:
   000A 00                 2488 	.db #0x00	; 0
   000B                    2489 __xinit__input_callback:
   000B 00 00 00           2490 	.byte #0x00,#0x00,#0x00
                           2491 	.area CABS    (ABS,CODE)
